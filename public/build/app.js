/******/ (function(modules) { // webpackBootstrap
/******/ 	// The module cache
/******/ 	var installedModules = {};
/******/
/******/ 	// The require function
/******/ 	function __webpack_require__(moduleId) {
/******/
/******/ 		// Check if module is in cache
/******/ 		if(installedModules[moduleId]) {
/******/ 			return installedModules[moduleId].exports;
/******/ 		}
/******/ 		// Create a new module (and put it into the cache)
/******/ 		var module = installedModules[moduleId] = {
/******/ 			i: moduleId,
/******/ 			l: false,
/******/ 			exports: {}
/******/ 		};
/******/
/******/ 		// Execute the module function
/******/ 		modules[moduleId].call(module.exports, module, module.exports, __webpack_require__);
/******/
/******/ 		// Flag the module as loaded
/******/ 		module.l = true;
/******/
/******/ 		// Return the exports of the module
/******/ 		return module.exports;
/******/ 	}
/******/
/******/
/******/ 	// expose the modules object (__webpack_modules__)
/******/ 	__webpack_require__.m = modules;
/******/
/******/ 	// expose the module cache
/******/ 	__webpack_require__.c = installedModules;
/******/
/******/ 	// define getter function for harmony exports
/******/ 	__webpack_require__.d = function(exports, name, getter) {
/******/ 		if(!__webpack_require__.o(exports, name)) {
/******/ 			Object.defineProperty(exports, name, {
/******/ 				configurable: false,
/******/ 				enumerable: true,
/******/ 				get: getter
/******/ 			});
/******/ 		}
/******/ 	};
/******/
/******/ 	// getDefaultExport function for compatibility with non-harmony modules
/******/ 	__webpack_require__.n = function(module) {
/******/ 		var getter = module && module.__esModule ?
/******/ 			function getDefault() { return module['default']; } :
/******/ 			function getModuleExports() { return module; };
/******/ 		__webpack_require__.d(getter, 'a', getter);
/******/ 		return getter;
/******/ 	};
/******/
/******/ 	// Object.prototype.hasOwnProperty.call
/******/ 	__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };
/******/
/******/ 	// __webpack_public_path__
/******/ 	__webpack_require__.p = "/build/";
/******/
/******/ 	// Load entry module and return exports
/******/ 	return __webpack_require__(__webpack_require__.s = 0);
/******/ })
/************************************************************************/
/******/ ({

/***/ "./assets/js/bootstrap.min.js":
/*!************************************!*\
  !*** ./assets/js/bootstrap.min.js ***!
  \************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*!
  * Bootstrap v4.0.0-beta.2 (https://getbootstrap.com)
  * Copyright 2011-2017 The Bootstrap Authors (https://github.com/twbs/bootstrap/graphs/contributors)
  * Licensed under MIT (https://github.com/twbs/bootstrap/blob/master/LICENSE)
  */
var bootstrap = function (t, e, n) {
  "use strict";
  function i(t, e) {
    for (var n = 0; n < e.length; n++) {
      var i = e[n];i.enumerable = i.enumerable || !1, i.configurable = !0, "value" in i && (i.writable = !0), Object.defineProperty(t, i.key, i);
    }
  }e = e && e.hasOwnProperty("default") ? e.default : e, n = n && n.hasOwnProperty("default") ? n.default : n;var s = function () {
    function t(t) {
      return {}.toString.call(t).match(/\s([a-zA-Z]+)/)[1].toLowerCase();
    }function n() {
      return { bindType: r.end, delegateType: r.end, handle: function handle(t) {
          if (e(t.target).is(this)) return t.handleObj.handler.apply(this, arguments);
        } };
    }function i() {
      if (window.QUnit) return !1;var t = document.createElement("bootstrap");for (var e in o) {
        if ("undefined" != typeof t.style[e]) return { end: o[e] };
      }return !1;
    }function s(t) {
      var n = this,
          i = !1;return e(this).one(a.TRANSITION_END, function () {
        i = !0;
      }), setTimeout(function () {
        i || a.triggerTransitionEnd(n);
      }, t), this;
    }var r = !1,
        o = { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd otransitionend", transition: "transitionend" },
        a = { TRANSITION_END: "bsTransitionEnd", getUID: function getUID(t) {
        do {
          t += ~~(1e6 * Math.random());
        } while (document.getElementById(t));return t;
      }, getSelectorFromElement: function getSelectorFromElement(t) {
        var n = t.getAttribute("data-target");n && "#" !== n || (n = t.getAttribute("href") || "");try {
          return e(document).find(n).length > 0 ? n : null;
        } catch (t) {
          return null;
        }
      }, reflow: function reflow(t) {
        return t.offsetHeight;
      }, triggerTransitionEnd: function triggerTransitionEnd(t) {
        e(t).trigger(r.end);
      }, supportsTransitionEnd: function supportsTransitionEnd() {
        return Boolean(r);
      }, isElement: function isElement(t) {
        return (t[0] || t).nodeType;
      }, typeCheckConfig: function typeCheckConfig(e, n, i) {
        for (var s in i) {
          if (Object.prototype.hasOwnProperty.call(i, s)) {
            var r = i[s],
                o = n[s],
                l = o && a.isElement(o) ? "element" : t(o);if (!new RegExp(r).test(l)) throw new Error(e.toUpperCase() + ': Option "' + s + '" provided type "' + l + '" but expected type "' + r + '".');
          }
        }
      } };return r = i(), e.fn.emulateTransitionEnd = s, a.supportsTransitionEnd() && (e.event.special[a.TRANSITION_END] = n()), a;
  }(),
      r = function r(t, e, n) {
    return e && i(t.prototype, e), n && i(t, n), t;
  },
      o = function o(t, e) {
    t.prototype = Object.create(e.prototype), t.prototype.constructor = t, t.__proto__ = e;
  },
      a = function () {
    var t = "alert",
        n = e.fn[t],
        i = { CLOSE: "close.bs.alert", CLOSED: "closed.bs.alert", CLICK_DATA_API: "click.bs.alert.data-api" },
        o = { ALERT: "alert", FADE: "fade", SHOW: "show" },
        a = function () {
      function t(t) {
        this._element = t;
      }var n = t.prototype;return n.close = function (t) {
        t = t || this._element;var e = this._getRootElement(t);this._triggerCloseEvent(e).isDefaultPrevented() || this._removeElement(e);
      }, n.dispose = function () {
        e.removeData(this._element, "bs.alert"), this._element = null;
      }, n._getRootElement = function (t) {
        var n = s.getSelectorFromElement(t),
            i = !1;return n && (i = e(n)[0]), i || (i = e(t).closest("." + o.ALERT)[0]), i;
      }, n._triggerCloseEvent = function (t) {
        var n = e.Event(i.CLOSE);return e(t).trigger(n), n;
      }, n._removeElement = function (t) {
        var n = this;e(t).removeClass(o.SHOW), s.supportsTransitionEnd() && e(t).hasClass(o.FADE) ? e(t).one(s.TRANSITION_END, function (e) {
          return n._destroyElement(t, e);
        }).emulateTransitionEnd(150) : this._destroyElement(t);
      }, n._destroyElement = function (t) {
        e(t).detach().trigger(i.CLOSED).remove();
      }, t._jQueryInterface = function (n) {
        return this.each(function () {
          var i = e(this),
              s = i.data("bs.alert");s || (s = new t(this), i.data("bs.alert", s)), "close" === n && s[n](this);
        });
      }, t._handleDismiss = function (t) {
        return function (e) {
          e && e.preventDefault(), t.close(this);
        };
      }, r(t, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }]), t;
    }();return e(document).on(i.CLICK_DATA_API, { DISMISS: '[data-dismiss="alert"]' }.DISMISS, a._handleDismiss(new a())), e.fn[t] = a._jQueryInterface, e.fn[t].Constructor = a, e.fn[t].noConflict = function () {
      return e.fn[t] = n, a._jQueryInterface;
    }, a;
  }(),
      l = function () {
    var t = "button",
        n = e.fn[t],
        i = { ACTIVE: "active", BUTTON: "btn", FOCUS: "focus" },
        s = { DATA_TOGGLE_CARROT: '[data-toggle^="button"]', DATA_TOGGLE: '[data-toggle="buttons"]', INPUT: "input", ACTIVE: ".active", BUTTON: ".btn" },
        o = { CLICK_DATA_API: "click.bs.button.data-api", FOCUS_BLUR_DATA_API: "focus.bs.button.data-api blur.bs.button.data-api" },
        a = function () {
      function t(t) {
        this._element = t;
      }var n = t.prototype;return n.toggle = function () {
        var t = !0,
            n = !0,
            r = e(this._element).closest(s.DATA_TOGGLE)[0];if (r) {
          var o = e(this._element).find(s.INPUT)[0];if (o) {
            if ("radio" === o.type) if (o.checked && e(this._element).hasClass(i.ACTIVE)) t = !1;else {
              var a = e(r).find(s.ACTIVE)[0];a && e(a).removeClass(i.ACTIVE);
            }if (t) {
              if (o.hasAttribute("disabled") || r.hasAttribute("disabled") || o.classList.contains("disabled") || r.classList.contains("disabled")) return;o.checked = !e(this._element).hasClass(i.ACTIVE), e(o).trigger("change");
            }o.focus(), n = !1;
          }
        }n && this._element.setAttribute("aria-pressed", !e(this._element).hasClass(i.ACTIVE)), t && e(this._element).toggleClass(i.ACTIVE);
      }, n.dispose = function () {
        e.removeData(this._element, "bs.button"), this._element = null;
      }, t._jQueryInterface = function (n) {
        return this.each(function () {
          var i = e(this).data("bs.button");i || (i = new t(this), e(this).data("bs.button", i)), "toggle" === n && i[n]();
        });
      }, r(t, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }]), t;
    }();return e(document).on(o.CLICK_DATA_API, s.DATA_TOGGLE_CARROT, function (t) {
      t.preventDefault();var n = t.target;e(n).hasClass(i.BUTTON) || (n = e(n).closest(s.BUTTON)), a._jQueryInterface.call(e(n), "toggle");
    }).on(o.FOCUS_BLUR_DATA_API, s.DATA_TOGGLE_CARROT, function (t) {
      var n = e(t.target).closest(s.BUTTON)[0];e(n).toggleClass(i.FOCUS, /^focus(in)?$/.test(t.type));
    }), e.fn[t] = a._jQueryInterface, e.fn[t].Constructor = a, e.fn[t].noConflict = function () {
      return e.fn[t] = n, a._jQueryInterface;
    }, a;
  }(),
      h = function () {
    var t = "carousel",
        n = "bs.carousel",
        i = "." + n,
        o = e.fn[t],
        a = { interval: 5e3, keyboard: !0, slide: !1, pause: "hover", wrap: !0 },
        l = { interval: "(number|boolean)", keyboard: "boolean", slide: "(boolean|string)", pause: "(string|boolean)", wrap: "boolean" },
        h = { NEXT: "next", PREV: "prev", LEFT: "left", RIGHT: "right" },
        c = { SLIDE: "slide" + i, SLID: "slid" + i, KEYDOWN: "keydown" + i, MOUSEENTER: "mouseenter" + i, MOUSELEAVE: "mouseleave" + i, TOUCHEND: "touchend" + i, LOAD_DATA_API: "load.bs.carousel.data-api", CLICK_DATA_API: "click.bs.carousel.data-api" },
        u = { CAROUSEL: "carousel", ACTIVE: "active", SLIDE: "slide", RIGHT: "carousel-item-right", LEFT: "carousel-item-left", NEXT: "carousel-item-next", PREV: "carousel-item-prev", ITEM: "carousel-item" },
        d = { ACTIVE: ".active", ACTIVE_ITEM: ".active.carousel-item", ITEM: ".carousel-item", NEXT_PREV: ".carousel-item-next, .carousel-item-prev", INDICATORS: ".carousel-indicators", DATA_SLIDE: "[data-slide], [data-slide-to]", DATA_RIDE: '[data-ride="carousel"]' },
        f = function () {
      function o(t, n) {
        this._items = null, this._interval = null, this._activeElement = null, this._isPaused = !1, this._isSliding = !1, this.touchTimeout = null, this._config = this._getConfig(n), this._element = e(t)[0], this._indicatorsElement = e(this._element).find(d.INDICATORS)[0], this._addEventListeners();
      }var f = o.prototype;return f.next = function () {
        this._isSliding || this._slide(h.NEXT);
      }, f.nextWhenVisible = function () {
        !document.hidden && e(this._element).is(":visible") && "hidden" !== e(this._element).css("visibility") && this.next();
      }, f.prev = function () {
        this._isSliding || this._slide(h.PREV);
      }, f.pause = function (t) {
        t || (this._isPaused = !0), e(this._element).find(d.NEXT_PREV)[0] && s.supportsTransitionEnd() && (s.triggerTransitionEnd(this._element), this.cycle(!0)), clearInterval(this._interval), this._interval = null;
      }, f.cycle = function (t) {
        t || (this._isPaused = !1), this._interval && (clearInterval(this._interval), this._interval = null), this._config.interval && !this._isPaused && (this._interval = setInterval((document.visibilityState ? this.nextWhenVisible : this.next).bind(this), this._config.interval));
      }, f.to = function (t) {
        var n = this;this._activeElement = e(this._element).find(d.ACTIVE_ITEM)[0];var i = this._getItemIndex(this._activeElement);if (!(t > this._items.length - 1 || t < 0)) if (this._isSliding) e(this._element).one(c.SLID, function () {
          return n.to(t);
        });else {
          if (i === t) return this.pause(), void this.cycle();var s = t > i ? h.NEXT : h.PREV;this._slide(s, this._items[t]);
        }
      }, f.dispose = function () {
        e(this._element).off(i), e.removeData(this._element, n), this._items = null, this._config = null, this._element = null, this._interval = null, this._isPaused = null, this._isSliding = null, this._activeElement = null, this._indicatorsElement = null;
      }, f._getConfig = function (n) {
        return n = e.extend({}, a, n), s.typeCheckConfig(t, n, l), n;
      }, f._addEventListeners = function () {
        var t = this;this._config.keyboard && e(this._element).on(c.KEYDOWN, function (e) {
          return t._keydown(e);
        }), "hover" === this._config.pause && (e(this._element).on(c.MOUSEENTER, function (e) {
          return t.pause(e);
        }).on(c.MOUSELEAVE, function (e) {
          return t.cycle(e);
        }), "ontouchstart" in document.documentElement && e(this._element).on(c.TOUCHEND, function () {
          t.pause(), t.touchTimeout && clearTimeout(t.touchTimeout), t.touchTimeout = setTimeout(function (e) {
            return t.cycle(e);
          }, 500 + t._config.interval);
        }));
      }, f._keydown = function (t) {
        if (!/input|textarea/i.test(t.target.tagName)) switch (t.which) {case 37:
            t.preventDefault(), this.prev();break;case 39:
            t.preventDefault(), this.next();break;default:
            return;}
      }, f._getItemIndex = function (t) {
        return this._items = e.makeArray(e(t).parent().find(d.ITEM)), this._items.indexOf(t);
      }, f._getItemByDirection = function (t, e) {
        var n = t === h.NEXT,
            i = t === h.PREV,
            s = this._getItemIndex(e),
            r = this._items.length - 1;if ((i && 0 === s || n && s === r) && !this._config.wrap) return e;var o = (s + (t === h.PREV ? -1 : 1)) % this._items.length;return -1 === o ? this._items[this._items.length - 1] : this._items[o];
      }, f._triggerSlideEvent = function (t, n) {
        var i = this._getItemIndex(t),
            s = this._getItemIndex(e(this._element).find(d.ACTIVE_ITEM)[0]),
            r = e.Event(c.SLIDE, { relatedTarget: t, direction: n, from: s, to: i });return e(this._element).trigger(r), r;
      }, f._setActiveIndicatorElement = function (t) {
        if (this._indicatorsElement) {
          e(this._indicatorsElement).find(d.ACTIVE).removeClass(u.ACTIVE);var n = this._indicatorsElement.children[this._getItemIndex(t)];n && e(n).addClass(u.ACTIVE);
        }
      }, f._slide = function (t, n) {
        var i,
            r,
            o,
            a = this,
            l = e(this._element).find(d.ACTIVE_ITEM)[0],
            f = this._getItemIndex(l),
            _ = n || l && this._getItemByDirection(t, l),
            g = this._getItemIndex(_),
            m = Boolean(this._interval);if (t === h.NEXT ? (i = u.LEFT, r = u.NEXT, o = h.LEFT) : (i = u.RIGHT, r = u.PREV, o = h.RIGHT), _ && e(_).hasClass(u.ACTIVE)) this._isSliding = !1;else if (!this._triggerSlideEvent(_, o).isDefaultPrevented() && l && _) {
          this._isSliding = !0, m && this.pause(), this._setActiveIndicatorElement(_);var p = e.Event(c.SLID, { relatedTarget: _, direction: o, from: f, to: g });s.supportsTransitionEnd() && e(this._element).hasClass(u.SLIDE) ? (e(_).addClass(r), s.reflow(_), e(l).addClass(i), e(_).addClass(i), e(l).one(s.TRANSITION_END, function () {
            e(_).removeClass(i + " " + r).addClass(u.ACTIVE), e(l).removeClass(u.ACTIVE + " " + r + " " + i), a._isSliding = !1, setTimeout(function () {
              return e(a._element).trigger(p);
            }, 0);
          }).emulateTransitionEnd(600)) : (e(l).removeClass(u.ACTIVE), e(_).addClass(u.ACTIVE), this._isSliding = !1, e(this._element).trigger(p)), m && this.cycle();
        }
      }, o._jQueryInterface = function (t) {
        return this.each(function () {
          var i = e(this).data(n),
              s = e.extend({}, a, e(this).data());"object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && e.extend(s, t);var r = "string" == typeof t ? t : s.slide;if (i || (i = new o(this, s), e(this).data(n, i)), "number" == typeof t) i.to(t);else if ("string" == typeof r) {
            if ("undefined" == typeof i[r]) throw new Error('No method named "' + r + '"');i[r]();
          } else s.interval && (i.pause(), i.cycle());
        });
      }, o._dataApiClickHandler = function (t) {
        var i = s.getSelectorFromElement(this);if (i) {
          var r = e(i)[0];if (r && e(r).hasClass(u.CAROUSEL)) {
            var a = e.extend({}, e(r).data(), e(this).data()),
                l = this.getAttribute("data-slide-to");l && (a.interval = !1), o._jQueryInterface.call(e(r), a), l && e(r).data(n).to(l), t.preventDefault();
          }
        }
      }, r(o, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return a;
        } }]), o;
    }();return e(document).on(c.CLICK_DATA_API, d.DATA_SLIDE, f._dataApiClickHandler), e(window).on(c.LOAD_DATA_API, function () {
      e(d.DATA_RIDE).each(function () {
        var t = e(this);f._jQueryInterface.call(t, t.data());
      });
    }), e.fn[t] = f._jQueryInterface, e.fn[t].Constructor = f, e.fn[t].noConflict = function () {
      return e.fn[t] = o, f._jQueryInterface;
    }, f;
  }(),
      c = function () {
    var t = "collapse",
        n = "bs.collapse",
        i = e.fn[t],
        o = { toggle: !0, parent: "" },
        a = { toggle: "boolean", parent: "(string|element)" },
        l = { SHOW: "show.bs.collapse", SHOWN: "shown.bs.collapse", HIDE: "hide.bs.collapse", HIDDEN: "hidden.bs.collapse", CLICK_DATA_API: "click.bs.collapse.data-api" },
        h = { SHOW: "show", COLLAPSE: "collapse", COLLAPSING: "collapsing", COLLAPSED: "collapsed" },
        c = { WIDTH: "width", HEIGHT: "height" },
        u = { ACTIVES: ".show, .collapsing", DATA_TOGGLE: '[data-toggle="collapse"]' },
        d = function () {
      function i(t, n) {
        this._isTransitioning = !1, this._element = t, this._config = this._getConfig(n), this._triggerArray = e.makeArray(e('[data-toggle="collapse"][href="#' + t.id + '"],[data-toggle="collapse"][data-target="#' + t.id + '"]'));for (var i = e(u.DATA_TOGGLE), r = 0; r < i.length; r++) {
          var o = i[r],
              a = s.getSelectorFromElement(o);null !== a && e(a).filter(t).length > 0 && this._triggerArray.push(o);
        }this._parent = this._config.parent ? this._getParent() : null, this._config.parent || this._addAriaAndCollapsedClass(this._element, this._triggerArray), this._config.toggle && this.toggle();
      }var d = i.prototype;return d.toggle = function () {
        e(this._element).hasClass(h.SHOW) ? this.hide() : this.show();
      }, d.show = function () {
        var t = this;if (!this._isTransitioning && !e(this._element).hasClass(h.SHOW)) {
          var r, o;if (this._parent && ((r = e.makeArray(e(this._parent).children().children(u.ACTIVES))).length || (r = null)), !(r && (o = e(r).data(n)) && o._isTransitioning)) {
            var a = e.Event(l.SHOW);if (e(this._element).trigger(a), !a.isDefaultPrevented()) {
              r && (i._jQueryInterface.call(e(r), "hide"), o || e(r).data(n, null));var c = this._getDimension();e(this._element).removeClass(h.COLLAPSE).addClass(h.COLLAPSING), this._element.style[c] = 0, this._triggerArray.length && e(this._triggerArray).removeClass(h.COLLAPSED).attr("aria-expanded", !0), this.setTransitioning(!0);var d = function d() {
                e(t._element).removeClass(h.COLLAPSING).addClass(h.COLLAPSE).addClass(h.SHOW), t._element.style[c] = "", t.setTransitioning(!1), e(t._element).trigger(l.SHOWN);
              };if (s.supportsTransitionEnd()) {
                var f = "scroll" + (c[0].toUpperCase() + c.slice(1));e(this._element).one(s.TRANSITION_END, d).emulateTransitionEnd(600), this._element.style[c] = this._element[f] + "px";
              } else d();
            }
          }
        }
      }, d.hide = function () {
        var t = this;if (!this._isTransitioning && e(this._element).hasClass(h.SHOW)) {
          var n = e.Event(l.HIDE);if (e(this._element).trigger(n), !n.isDefaultPrevented()) {
            var i = this._getDimension();if (this._element.style[i] = this._element.getBoundingClientRect()[i] + "px", s.reflow(this._element), e(this._element).addClass(h.COLLAPSING).removeClass(h.COLLAPSE).removeClass(h.SHOW), this._triggerArray.length) for (var r = 0; r < this._triggerArray.length; r++) {
              var o = this._triggerArray[r],
                  a = s.getSelectorFromElement(o);null !== a && (e(a).hasClass(h.SHOW) || e(o).addClass(h.COLLAPSED).attr("aria-expanded", !1));
            }this.setTransitioning(!0);var c = function c() {
              t.setTransitioning(!1), e(t._element).removeClass(h.COLLAPSING).addClass(h.COLLAPSE).trigger(l.HIDDEN);
            };this._element.style[i] = "", s.supportsTransitionEnd() ? e(this._element).one(s.TRANSITION_END, c).emulateTransitionEnd(600) : c();
          }
        }
      }, d.setTransitioning = function (t) {
        this._isTransitioning = t;
      }, d.dispose = function () {
        e.removeData(this._element, n), this._config = null, this._parent = null, this._element = null, this._triggerArray = null, this._isTransitioning = null;
      }, d._getConfig = function (n) {
        return n = e.extend({}, o, n), n.toggle = Boolean(n.toggle), s.typeCheckConfig(t, n, a), n;
      }, d._getDimension = function () {
        return e(this._element).hasClass(c.WIDTH) ? c.WIDTH : c.HEIGHT;
      }, d._getParent = function () {
        var t = this,
            n = null;s.isElement(this._config.parent) ? (n = this._config.parent, "undefined" != typeof this._config.parent.jquery && (n = this._config.parent[0])) : n = e(this._config.parent)[0];var r = '[data-toggle="collapse"][data-parent="' + this._config.parent + '"]';return e(n).find(r).each(function (e, n) {
          t._addAriaAndCollapsedClass(i._getTargetFromElement(n), [n]);
        }), n;
      }, d._addAriaAndCollapsedClass = function (t, n) {
        if (t) {
          var i = e(t).hasClass(h.SHOW);n.length && e(n).toggleClass(h.COLLAPSED, !i).attr("aria-expanded", i);
        }
      }, i._getTargetFromElement = function (t) {
        var n = s.getSelectorFromElement(t);return n ? e(n)[0] : null;
      }, i._jQueryInterface = function (t) {
        return this.each(function () {
          var s = e(this),
              r = s.data(n),
              a = e.extend({}, o, s.data(), "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t);if (!r && a.toggle && /show|hide/.test(t) && (a.toggle = !1), r || (r = new i(this, a), s.data(n, r)), "string" == typeof t) {
            if ("undefined" == typeof r[t]) throw new Error('No method named "' + t + '"');r[t]();
          }
        });
      }, r(i, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return o;
        } }]), i;
    }();return e(document).on(l.CLICK_DATA_API, u.DATA_TOGGLE, function (t) {
      "A" === t.currentTarget.tagName && t.preventDefault();var i = e(this),
          r = s.getSelectorFromElement(this);e(r).each(function () {
        var t = e(this),
            s = t.data(n) ? "toggle" : i.data();d._jQueryInterface.call(t, s);
      });
    }), e.fn[t] = d._jQueryInterface, e.fn[t].Constructor = d, e.fn[t].noConflict = function () {
      return e.fn[t] = i, d._jQueryInterface;
    }, d;
  }(),
      u = function () {
    if ("undefined" == typeof n) throw new Error("Bootstrap dropdown require Popper.js (https://popper.js.org)");var t = "dropdown",
        i = "bs.dropdown",
        o = "." + i,
        a = e.fn[t],
        l = new RegExp("38|40|27"),
        h = { HIDE: "hide" + o, HIDDEN: "hidden" + o, SHOW: "show" + o, SHOWN: "shown" + o, CLICK: "click" + o, CLICK_DATA_API: "click.bs.dropdown.data-api", KEYDOWN_DATA_API: "keydown.bs.dropdown.data-api", KEYUP_DATA_API: "keyup.bs.dropdown.data-api" },
        c = { DISABLED: "disabled", SHOW: "show", DROPUP: "dropup", MENURIGHT: "dropdown-menu-right", MENULEFT: "dropdown-menu-left" },
        u = { DATA_TOGGLE: '[data-toggle="dropdown"]', FORM_CHILD: ".dropdown form", MENU: ".dropdown-menu", NAVBAR_NAV: ".navbar-nav", VISIBLE_ITEMS: ".dropdown-menu .dropdown-item:not(.disabled)" },
        d = { TOP: "top-start", TOPEND: "top-end", BOTTOM: "bottom-start", BOTTOMEND: "bottom-end" },
        f = { offset: 0, flip: !0 },
        _ = { offset: "(number|string|function)", flip: "boolean" },
        g = function () {
      function a(t, e) {
        this._element = t, this._popper = null, this._config = this._getConfig(e), this._menu = this._getMenuElement(), this._inNavbar = this._detectNavbar(), this._addEventListeners();
      }var g = a.prototype;return g.toggle = function () {
        if (!this._element.disabled && !e(this._element).hasClass(c.DISABLED)) {
          var t = a._getParentFromElement(this._element),
              i = e(this._menu).hasClass(c.SHOW);if (a._clearMenus(), !i) {
            var s = { relatedTarget: this._element },
                r = e.Event(h.SHOW, s);if (e(t).trigger(r), !r.isDefaultPrevented()) {
              var o = this._element;e(t).hasClass(c.DROPUP) && (e(this._menu).hasClass(c.MENULEFT) || e(this._menu).hasClass(c.MENURIGHT)) && (o = t), this._popper = new n(o, this._menu, this._getPopperConfig()), "ontouchstart" in document.documentElement && !e(t).closest(u.NAVBAR_NAV).length && e("body").children().on("mouseover", null, e.noop), this._element.focus(), this._element.setAttribute("aria-expanded", !0), e(this._menu).toggleClass(c.SHOW), e(t).toggleClass(c.SHOW).trigger(e.Event(h.SHOWN, s));
            }
          }
        }
      }, g.dispose = function () {
        e.removeData(this._element, i), e(this._element).off(o), this._element = null, this._menu = null, null !== this._popper && this._popper.destroy(), this._popper = null;
      }, g.update = function () {
        this._inNavbar = this._detectNavbar(), null !== this._popper && this._popper.scheduleUpdate();
      }, g._addEventListeners = function () {
        var t = this;e(this._element).on(h.CLICK, function (e) {
          e.preventDefault(), e.stopPropagation(), t.toggle();
        });
      }, g._getConfig = function (n) {
        return n = e.extend({}, this.constructor.Default, e(this._element).data(), n), s.typeCheckConfig(t, n, this.constructor.DefaultType), n;
      }, g._getMenuElement = function () {
        if (!this._menu) {
          var t = a._getParentFromElement(this._element);this._menu = e(t).find(u.MENU)[0];
        }return this._menu;
      }, g._getPlacement = function () {
        var t = e(this._element).parent(),
            n = d.BOTTOM;return t.hasClass(c.DROPUP) ? (n = d.TOP, e(this._menu).hasClass(c.MENURIGHT) && (n = d.TOPEND)) : e(this._menu).hasClass(c.MENURIGHT) && (n = d.BOTTOMEND), n;
      }, g._detectNavbar = function () {
        return e(this._element).closest(".navbar").length > 0;
      }, g._getPopperConfig = function () {
        var t = this,
            n = {};"function" == typeof this._config.offset ? n.fn = function (n) {
          return n.offsets = e.extend({}, n.offsets, t._config.offset(n.offsets) || {}), n;
        } : n.offset = this._config.offset;var i = { placement: this._getPlacement(), modifiers: { offset: n, flip: { enabled: this._config.flip } } };return this._inNavbar && (i.modifiers.applyStyle = { enabled: !this._inNavbar }), i;
      }, a._jQueryInterface = function (t) {
        return this.each(function () {
          var n = e(this).data(i),
              s = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t : null;if (n || (n = new a(this, s), e(this).data(i, n)), "string" == typeof t) {
            if ("undefined" == typeof n[t]) throw new Error('No method named "' + t + '"');n[t]();
          }
        });
      }, a._clearMenus = function (t) {
        if (!t || 3 !== t.which && ("keyup" !== t.type || 9 === t.which)) for (var n = e.makeArray(e(u.DATA_TOGGLE)), s = 0; s < n.length; s++) {
          var r = a._getParentFromElement(n[s]),
              o = e(n[s]).data(i),
              l = { relatedTarget: n[s] };if (o) {
            var d = o._menu;if (e(r).hasClass(c.SHOW) && !(t && ("click" === t.type && /input|textarea/i.test(t.target.tagName) || "keyup" === t.type && 9 === t.which) && e.contains(r, t.target))) {
              var f = e.Event(h.HIDE, l);e(r).trigger(f), f.isDefaultPrevented() || ("ontouchstart" in document.documentElement && e("body").children().off("mouseover", null, e.noop), n[s].setAttribute("aria-expanded", "false"), e(d).removeClass(c.SHOW), e(r).removeClass(c.SHOW).trigger(e.Event(h.HIDDEN, l)));
            }
          }
        }
      }, a._getParentFromElement = function (t) {
        var n,
            i = s.getSelectorFromElement(t);return i && (n = e(i)[0]), n || t.parentNode;
      }, a._dataApiKeydownHandler = function (t) {
        if (!(!l.test(t.which) || /button/i.test(t.target.tagName) && 32 === t.which || /input|textarea/i.test(t.target.tagName) || (t.preventDefault(), t.stopPropagation(), this.disabled || e(this).hasClass(c.DISABLED)))) {
          var n = a._getParentFromElement(this),
              i = e(n).hasClass(c.SHOW);if ((i || 27 === t.which && 32 === t.which) && (!i || 27 !== t.which && 32 !== t.which)) {
            var s = e(n).find(u.VISIBLE_ITEMS).get();if (s.length) {
              var r = s.indexOf(t.target);38 === t.which && r > 0 && r--, 40 === t.which && r < s.length - 1 && r++, r < 0 && (r = 0), s[r].focus();
            }
          } else {
            if (27 === t.which) {
              var o = e(n).find(u.DATA_TOGGLE)[0];e(o).trigger("focus");
            }e(this).trigger("click");
          }
        }
      }, r(a, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return f;
        } }, { key: "DefaultType", get: function get() {
          return _;
        } }]), a;
    }();return e(document).on(h.KEYDOWN_DATA_API, u.DATA_TOGGLE, g._dataApiKeydownHandler).on(h.KEYDOWN_DATA_API, u.MENU, g._dataApiKeydownHandler).on(h.CLICK_DATA_API + " " + h.KEYUP_DATA_API, g._clearMenus).on(h.CLICK_DATA_API, u.DATA_TOGGLE, function (t) {
      t.preventDefault(), t.stopPropagation(), g._jQueryInterface.call(e(this), "toggle");
    }).on(h.CLICK_DATA_API, u.FORM_CHILD, function (t) {
      t.stopPropagation();
    }), e.fn[t] = g._jQueryInterface, e.fn[t].Constructor = g, e.fn[t].noConflict = function () {
      return e.fn[t] = a, g._jQueryInterface;
    }, g;
  }(),
      d = function () {
    var t = "modal",
        n = ".bs.modal",
        i = e.fn[t],
        o = { backdrop: !0, keyboard: !0, focus: !0, show: !0 },
        a = { backdrop: "(boolean|string)", keyboard: "boolean", focus: "boolean", show: "boolean" },
        l = { HIDE: "hide.bs.modal", HIDDEN: "hidden.bs.modal", SHOW: "show.bs.modal", SHOWN: "shown.bs.modal", FOCUSIN: "focusin.bs.modal", RESIZE: "resize.bs.modal", CLICK_DISMISS: "click.dismiss.bs.modal", KEYDOWN_DISMISS: "keydown.dismiss.bs.modal", MOUSEUP_DISMISS: "mouseup.dismiss.bs.modal", MOUSEDOWN_DISMISS: "mousedown.dismiss.bs.modal", CLICK_DATA_API: "click.bs.modal.data-api" },
        h = { SCROLLBAR_MEASURER: "modal-scrollbar-measure", BACKDROP: "modal-backdrop", OPEN: "modal-open", FADE: "fade", SHOW: "show" },
        c = { DIALOG: ".modal-dialog", DATA_TOGGLE: '[data-toggle="modal"]', DATA_DISMISS: '[data-dismiss="modal"]', FIXED_CONTENT: ".fixed-top, .fixed-bottom, .is-fixed, .sticky-top", STICKY_CONTENT: ".sticky-top", NAVBAR_TOGGLER: ".navbar-toggler" },
        u = function () {
      function i(t, n) {
        this._config = this._getConfig(n), this._element = t, this._dialog = e(t).find(c.DIALOG)[0], this._backdrop = null, this._isShown = !1, this._isBodyOverflowing = !1, this._ignoreBackdropClick = !1, this._originalBodyPadding = 0, this._scrollbarWidth = 0;
      }var u = i.prototype;return u.toggle = function (t) {
        return this._isShown ? this.hide() : this.show(t);
      }, u.show = function (t) {
        var n = this;if (!this._isTransitioning && !this._isShown) {
          s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE) && (this._isTransitioning = !0);var i = e.Event(l.SHOW, { relatedTarget: t });e(this._element).trigger(i), this._isShown || i.isDefaultPrevented() || (this._isShown = !0, this._checkScrollbar(), this._setScrollbar(), this._adjustDialog(), e(document.body).addClass(h.OPEN), this._setEscapeEvent(), this._setResizeEvent(), e(this._element).on(l.CLICK_DISMISS, c.DATA_DISMISS, function (t) {
            return n.hide(t);
          }), e(this._dialog).on(l.MOUSEDOWN_DISMISS, function () {
            e(n._element).one(l.MOUSEUP_DISMISS, function (t) {
              e(t.target).is(n._element) && (n._ignoreBackdropClick = !0);
            });
          }), this._showBackdrop(function () {
            return n._showElement(t);
          }));
        }
      }, u.hide = function (t) {
        var n = this;if (t && t.preventDefault(), !this._isTransitioning && this._isShown) {
          var i = e.Event(l.HIDE);if (e(this._element).trigger(i), this._isShown && !i.isDefaultPrevented()) {
            this._isShown = !1;var r = s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE);r && (this._isTransitioning = !0), this._setEscapeEvent(), this._setResizeEvent(), e(document).off(l.FOCUSIN), e(this._element).removeClass(h.SHOW), e(this._element).off(l.CLICK_DISMISS), e(this._dialog).off(l.MOUSEDOWN_DISMISS), r ? e(this._element).one(s.TRANSITION_END, function (t) {
              return n._hideModal(t);
            }).emulateTransitionEnd(300) : this._hideModal();
          }
        }
      }, u.dispose = function () {
        e.removeData(this._element, "bs.modal"), e(window, document, this._element, this._backdrop).off(n), this._config = null, this._element = null, this._dialog = null, this._backdrop = null, this._isShown = null, this._isBodyOverflowing = null, this._ignoreBackdropClick = null, this._scrollbarWidth = null;
      }, u.handleUpdate = function () {
        this._adjustDialog();
      }, u._getConfig = function (n) {
        return n = e.extend({}, o, n), s.typeCheckConfig(t, n, a), n;
      }, u._showElement = function (t) {
        var n = this,
            i = s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE);this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE || document.body.appendChild(this._element), this._element.style.display = "block", this._element.removeAttribute("aria-hidden"), this._element.scrollTop = 0, i && s.reflow(this._element), e(this._element).addClass(h.SHOW), this._config.focus && this._enforceFocus();var r = e.Event(l.SHOWN, { relatedTarget: t }),
            o = function o() {
          n._config.focus && n._element.focus(), n._isTransitioning = !1, e(n._element).trigger(r);
        };i ? e(this._dialog).one(s.TRANSITION_END, o).emulateTransitionEnd(300) : o();
      }, u._enforceFocus = function () {
        var t = this;e(document).off(l.FOCUSIN).on(l.FOCUSIN, function (n) {
          document === n.target || t._element === n.target || e(t._element).has(n.target).length || t._element.focus();
        });
      }, u._setEscapeEvent = function () {
        var t = this;this._isShown && this._config.keyboard ? e(this._element).on(l.KEYDOWN_DISMISS, function (e) {
          27 === e.which && (e.preventDefault(), t.hide());
        }) : this._isShown || e(this._element).off(l.KEYDOWN_DISMISS);
      }, u._setResizeEvent = function () {
        var t = this;this._isShown ? e(window).on(l.RESIZE, function (e) {
          return t.handleUpdate(e);
        }) : e(window).off(l.RESIZE);
      }, u._hideModal = function () {
        var t = this;this._element.style.display = "none", this._element.setAttribute("aria-hidden", !0), this._isTransitioning = !1, this._showBackdrop(function () {
          e(document.body).removeClass(h.OPEN), t._resetAdjustments(), t._resetScrollbar(), e(t._element).trigger(l.HIDDEN);
        });
      }, u._removeBackdrop = function () {
        this._backdrop && (e(this._backdrop).remove(), this._backdrop = null);
      }, u._showBackdrop = function (t) {
        var n = this,
            i = e(this._element).hasClass(h.FADE) ? h.FADE : "";if (this._isShown && this._config.backdrop) {
          var r = s.supportsTransitionEnd() && i;if (this._backdrop = document.createElement("div"), this._backdrop.className = h.BACKDROP, i && e(this._backdrop).addClass(i), e(this._backdrop).appendTo(document.body), e(this._element).on(l.CLICK_DISMISS, function (t) {
            n._ignoreBackdropClick ? n._ignoreBackdropClick = !1 : t.target === t.currentTarget && ("static" === n._config.backdrop ? n._element.focus() : n.hide());
          }), r && s.reflow(this._backdrop), e(this._backdrop).addClass(h.SHOW), !t) return;if (!r) return void t();e(this._backdrop).one(s.TRANSITION_END, t).emulateTransitionEnd(150);
        } else if (!this._isShown && this._backdrop) {
          e(this._backdrop).removeClass(h.SHOW);var o = function o() {
            n._removeBackdrop(), t && t();
          };s.supportsTransitionEnd() && e(this._element).hasClass(h.FADE) ? e(this._backdrop).one(s.TRANSITION_END, o).emulateTransitionEnd(150) : o();
        } else t && t();
      }, u._adjustDialog = function () {
        var t = this._element.scrollHeight > document.documentElement.clientHeight;!this._isBodyOverflowing && t && (this._element.style.paddingLeft = this._scrollbarWidth + "px"), this._isBodyOverflowing && !t && (this._element.style.paddingRight = this._scrollbarWidth + "px");
      }, u._resetAdjustments = function () {
        this._element.style.paddingLeft = "", this._element.style.paddingRight = "";
      }, u._checkScrollbar = function () {
        var t = document.body.getBoundingClientRect();this._isBodyOverflowing = t.left + t.right < window.innerWidth, this._scrollbarWidth = this._getScrollbarWidth();
      }, u._setScrollbar = function () {
        var t = this;if (this._isBodyOverflowing) {
          e(c.FIXED_CONTENT).each(function (n, i) {
            var s = e(i)[0].style.paddingRight,
                r = e(i).css("padding-right");e(i).data("padding-right", s).css("padding-right", parseFloat(r) + t._scrollbarWidth + "px");
          }), e(c.STICKY_CONTENT).each(function (n, i) {
            var s = e(i)[0].style.marginRight,
                r = e(i).css("margin-right");e(i).data("margin-right", s).css("margin-right", parseFloat(r) - t._scrollbarWidth + "px");
          }), e(c.NAVBAR_TOGGLER).each(function (n, i) {
            var s = e(i)[0].style.marginRight,
                r = e(i).css("margin-right");e(i).data("margin-right", s).css("margin-right", parseFloat(r) + t._scrollbarWidth + "px");
          });var n = document.body.style.paddingRight,
              i = e("body").css("padding-right");e("body").data("padding-right", n).css("padding-right", parseFloat(i) + this._scrollbarWidth + "px");
        }
      }, u._resetScrollbar = function () {
        e(c.FIXED_CONTENT).each(function (t, n) {
          var i = e(n).data("padding-right");"undefined" != typeof i && e(n).css("padding-right", i).removeData("padding-right");
        }), e(c.STICKY_CONTENT + ", " + c.NAVBAR_TOGGLER).each(function (t, n) {
          var i = e(n).data("margin-right");"undefined" != typeof i && e(n).css("margin-right", i).removeData("margin-right");
        });var t = e("body").data("padding-right");"undefined" != typeof t && e("body").css("padding-right", t).removeData("padding-right");
      }, u._getScrollbarWidth = function () {
        var t = document.createElement("div");t.className = h.SCROLLBAR_MEASURER, document.body.appendChild(t);var e = t.getBoundingClientRect().width - t.clientWidth;return document.body.removeChild(t), e;
      }, i._jQueryInterface = function (t, n) {
        return this.each(function () {
          var s = e(this).data("bs.modal"),
              r = e.extend({}, i.Default, e(this).data(), "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t);if (s || (s = new i(this, r), e(this).data("bs.modal", s)), "string" == typeof t) {
            if ("undefined" == typeof s[t]) throw new Error('No method named "' + t + '"');s[t](n);
          } else r.show && s.show(n);
        });
      }, r(i, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return o;
        } }]), i;
    }();return e(document).on(l.CLICK_DATA_API, c.DATA_TOGGLE, function (t) {
      var n,
          i = this,
          r = s.getSelectorFromElement(this);r && (n = e(r)[0]);var o = e(n).data("bs.modal") ? "toggle" : e.extend({}, e(n).data(), e(this).data());"A" !== this.tagName && "AREA" !== this.tagName || t.preventDefault();var a = e(n).one(l.SHOW, function (t) {
        t.isDefaultPrevented() || a.one(l.HIDDEN, function () {
          e(i).is(":visible") && i.focus();
        });
      });u._jQueryInterface.call(e(n), o, this);
    }), e.fn[t] = u._jQueryInterface, e.fn[t].Constructor = u, e.fn[t].noConflict = function () {
      return e.fn[t] = i, u._jQueryInterface;
    }, u;
  }(),
      f = function () {
    if ("undefined" == typeof n) throw new Error("Bootstrap tooltips require Popper.js (https://popper.js.org)");var t = "tooltip",
        i = ".bs.tooltip",
        o = e.fn[t],
        a = new RegExp("(^|\\s)bs-tooltip\\S+", "g"),
        l = { animation: "boolean", template: "string", title: "(string|element|function)", trigger: "string", delay: "(number|object)", html: "boolean", selector: "(string|boolean)", placement: "(string|function)", offset: "(number|string)", container: "(string|element|boolean)", fallbackPlacement: "(string|array)" },
        h = { AUTO: "auto", TOP: "top", RIGHT: "right", BOTTOM: "bottom", LEFT: "left" },
        c = { animation: !0, template: '<div class="tooltip" role="tooltip"><div class="arrow"></div><div class="tooltip-inner"></div></div>', trigger: "hover focus", title: "", delay: 0, html: !1, selector: !1, placement: "top", offset: 0, container: !1, fallbackPlacement: "flip" },
        u = { SHOW: "show", OUT: "out" },
        d = { HIDE: "hide" + i, HIDDEN: "hidden" + i, SHOW: "show" + i, SHOWN: "shown" + i, INSERTED: "inserted" + i, CLICK: "click" + i, FOCUSIN: "focusin" + i, FOCUSOUT: "focusout" + i, MOUSEENTER: "mouseenter" + i, MOUSELEAVE: "mouseleave" + i },
        f = { FADE: "fade", SHOW: "show" },
        _ = { TOOLTIP: ".tooltip", TOOLTIP_INNER: ".tooltip-inner", ARROW: ".arrow" },
        g = { HOVER: "hover", FOCUS: "focus", CLICK: "click", MANUAL: "manual" },
        m = function () {
      function o(t, e) {
        this._isEnabled = !0, this._timeout = 0, this._hoverState = "", this._activeTrigger = {}, this._popper = null, this.element = t, this.config = this._getConfig(e), this.tip = null, this._setListeners();
      }var m = o.prototype;return m.enable = function () {
        this._isEnabled = !0;
      }, m.disable = function () {
        this._isEnabled = !1;
      }, m.toggleEnabled = function () {
        this._isEnabled = !this._isEnabled;
      }, m.toggle = function (t) {
        if (this._isEnabled) if (t) {
          var n = this.constructor.DATA_KEY,
              i = e(t.currentTarget).data(n);i || (i = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(n, i)), i._activeTrigger.click = !i._activeTrigger.click, i._isWithActiveTrigger() ? i._enter(null, i) : i._leave(null, i);
        } else {
          if (e(this.getTipElement()).hasClass(f.SHOW)) return void this._leave(null, this);this._enter(null, this);
        }
      }, m.dispose = function () {
        clearTimeout(this._timeout), e.removeData(this.element, this.constructor.DATA_KEY), e(this.element).off(this.constructor.EVENT_KEY), e(this.element).closest(".modal").off("hide.bs.modal"), this.tip && e(this.tip).remove(), this._isEnabled = null, this._timeout = null, this._hoverState = null, this._activeTrigger = null, null !== this._popper && this._popper.destroy(), this._popper = null, this.element = null, this.config = null, this.tip = null;
      }, m.show = function () {
        var t = this;if ("none" === e(this.element).css("display")) throw new Error("Please use show on visible elements");var i = e.Event(this.constructor.Event.SHOW);if (this.isWithContent() && this._isEnabled) {
          e(this.element).trigger(i);var r = e.contains(this.element.ownerDocument.documentElement, this.element);if (i.isDefaultPrevented() || !r) return;var a = this.getTipElement(),
              l = s.getUID(this.constructor.NAME);a.setAttribute("id", l), this.element.setAttribute("aria-describedby", l), this.setContent(), this.config.animation && e(a).addClass(f.FADE);var h = "function" == typeof this.config.placement ? this.config.placement.call(this, a, this.element) : this.config.placement,
              c = this._getAttachment(h);this.addAttachmentClass(c);var d = !1 === this.config.container ? document.body : e(this.config.container);e(a).data(this.constructor.DATA_KEY, this), e.contains(this.element.ownerDocument.documentElement, this.tip) || e(a).appendTo(d), e(this.element).trigger(this.constructor.Event.INSERTED), this._popper = new n(this.element, a, { placement: c, modifiers: { offset: { offset: this.config.offset }, flip: { behavior: this.config.fallbackPlacement }, arrow: { element: _.ARROW } }, onCreate: function onCreate(e) {
              e.originalPlacement !== e.placement && t._handlePopperPlacementChange(e);
            }, onUpdate: function onUpdate(e) {
              t._handlePopperPlacementChange(e);
            } }), e(a).addClass(f.SHOW), "ontouchstart" in document.documentElement && e("body").children().on("mouseover", null, e.noop);var g = function g() {
            t.config.animation && t._fixTransition();var n = t._hoverState;t._hoverState = null, e(t.element).trigger(t.constructor.Event.SHOWN), n === u.OUT && t._leave(null, t);
          };s.supportsTransitionEnd() && e(this.tip).hasClass(f.FADE) ? e(this.tip).one(s.TRANSITION_END, g).emulateTransitionEnd(o._TRANSITION_DURATION) : g();
        }
      }, m.hide = function (t) {
        var n = this,
            i = this.getTipElement(),
            r = e.Event(this.constructor.Event.HIDE),
            o = function o() {
          n._hoverState !== u.SHOW && i.parentNode && i.parentNode.removeChild(i), n._cleanTipClass(), n.element.removeAttribute("aria-describedby"), e(n.element).trigger(n.constructor.Event.HIDDEN), null !== n._popper && n._popper.destroy(), t && t();
        };e(this.element).trigger(r), r.isDefaultPrevented() || (e(i).removeClass(f.SHOW), "ontouchstart" in document.documentElement && e("body").children().off("mouseover", null, e.noop), this._activeTrigger[g.CLICK] = !1, this._activeTrigger[g.FOCUS] = !1, this._activeTrigger[g.HOVER] = !1, s.supportsTransitionEnd() && e(this.tip).hasClass(f.FADE) ? e(i).one(s.TRANSITION_END, o).emulateTransitionEnd(150) : o(), this._hoverState = "");
      }, m.update = function () {
        null !== this._popper && this._popper.scheduleUpdate();
      }, m.isWithContent = function () {
        return Boolean(this.getTitle());
      }, m.addAttachmentClass = function (t) {
        e(this.getTipElement()).addClass("bs-tooltip-" + t);
      }, m.getTipElement = function () {
        return this.tip = this.tip || e(this.config.template)[0], this.tip;
      }, m.setContent = function () {
        var t = e(this.getTipElement());this.setElementContent(t.find(_.TOOLTIP_INNER), this.getTitle()), t.removeClass(f.FADE + " " + f.SHOW);
      }, m.setElementContent = function (t, n) {
        var i = this.config.html;"object" == (typeof n === "undefined" ? "undefined" : _typeof(n)) && (n.nodeType || n.jquery) ? i ? e(n).parent().is(t) || t.empty().append(n) : t.text(e(n).text()) : t[i ? "html" : "text"](n);
      }, m.getTitle = function () {
        var t = this.element.getAttribute("data-original-title");return t || (t = "function" == typeof this.config.title ? this.config.title.call(this.element) : this.config.title), t;
      }, m._getAttachment = function (t) {
        return h[t.toUpperCase()];
      }, m._setListeners = function () {
        var t = this;this.config.trigger.split(" ").forEach(function (n) {
          if ("click" === n) e(t.element).on(t.constructor.Event.CLICK, t.config.selector, function (e) {
            return t.toggle(e);
          });else if (n !== g.MANUAL) {
            var i = n === g.HOVER ? t.constructor.Event.MOUSEENTER : t.constructor.Event.FOCUSIN,
                s = n === g.HOVER ? t.constructor.Event.MOUSELEAVE : t.constructor.Event.FOCUSOUT;e(t.element).on(i, t.config.selector, function (e) {
              return t._enter(e);
            }).on(s, t.config.selector, function (e) {
              return t._leave(e);
            });
          }e(t.element).closest(".modal").on("hide.bs.modal", function () {
            return t.hide();
          });
        }), this.config.selector ? this.config = e.extend({}, this.config, { trigger: "manual", selector: "" }) : this._fixTitle();
      }, m._fixTitle = function () {
        var t = _typeof(this.element.getAttribute("data-original-title"));(this.element.getAttribute("title") || "string" !== t) && (this.element.setAttribute("data-original-title", this.element.getAttribute("title") || ""), this.element.setAttribute("title", ""));
      }, m._enter = function (t, n) {
        var i = this.constructor.DATA_KEY;(n = n || e(t.currentTarget).data(i)) || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(i, n)), t && (n._activeTrigger["focusin" === t.type ? g.FOCUS : g.HOVER] = !0), e(n.getTipElement()).hasClass(f.SHOW) || n._hoverState === u.SHOW ? n._hoverState = u.SHOW : (clearTimeout(n._timeout), n._hoverState = u.SHOW, n.config.delay && n.config.delay.show ? n._timeout = setTimeout(function () {
          n._hoverState === u.SHOW && n.show();
        }, n.config.delay.show) : n.show());
      }, m._leave = function (t, n) {
        var i = this.constructor.DATA_KEY;(n = n || e(t.currentTarget).data(i)) || (n = new this.constructor(t.currentTarget, this._getDelegateConfig()), e(t.currentTarget).data(i, n)), t && (n._activeTrigger["focusout" === t.type ? g.FOCUS : g.HOVER] = !1), n._isWithActiveTrigger() || (clearTimeout(n._timeout), n._hoverState = u.OUT, n.config.delay && n.config.delay.hide ? n._timeout = setTimeout(function () {
          n._hoverState === u.OUT && n.hide();
        }, n.config.delay.hide) : n.hide());
      }, m._isWithActiveTrigger = function () {
        for (var t in this._activeTrigger) {
          if (this._activeTrigger[t]) return !0;
        }return !1;
      }, m._getConfig = function (n) {
        return "number" == typeof (n = e.extend({}, this.constructor.Default, e(this.element).data(), n)).delay && (n.delay = { show: n.delay, hide: n.delay }), "number" == typeof n.title && (n.title = n.title.toString()), "number" == typeof n.content && (n.content = n.content.toString()), s.typeCheckConfig(t, n, this.constructor.DefaultType), n;
      }, m._getDelegateConfig = function () {
        var t = {};if (this.config) for (var e in this.config) {
          this.constructor.Default[e] !== this.config[e] && (t[e] = this.config[e]);
        }return t;
      }, m._cleanTipClass = function () {
        var t = e(this.getTipElement()),
            n = t.attr("class").match(a);null !== n && n.length > 0 && t.removeClass(n.join(""));
      }, m._handlePopperPlacementChange = function (t) {
        this._cleanTipClass(), this.addAttachmentClass(this._getAttachment(t.placement));
      }, m._fixTransition = function () {
        var t = this.getTipElement(),
            n = this.config.animation;null === t.getAttribute("x-placement") && (e(t).removeClass(f.FADE), this.config.animation = !1, this.hide(), this.show(), this.config.animation = n);
      }, o._jQueryInterface = function (t) {
        return this.each(function () {
          var n = e(this).data("bs.tooltip"),
              i = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t;if ((n || !/dispose|hide/.test(t)) && (n || (n = new o(this, i), e(this).data("bs.tooltip", n)), "string" == typeof t)) {
            if ("undefined" == typeof n[t]) throw new Error('No method named "' + t + '"');n[t]();
          }
        });
      }, r(o, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return c;
        } }, { key: "NAME", get: function get() {
          return t;
        } }, { key: "DATA_KEY", get: function get() {
          return "bs.tooltip";
        } }, { key: "Event", get: function get() {
          return d;
        } }, { key: "EVENT_KEY", get: function get() {
          return i;
        } }, { key: "DefaultType", get: function get() {
          return l;
        } }]), o;
    }();return e.fn[t] = m._jQueryInterface, e.fn[t].Constructor = m, e.fn[t].noConflict = function () {
      return e.fn[t] = o, m._jQueryInterface;
    }, m;
  }(),
      _ = function () {
    var t = "popover",
        n = ".bs.popover",
        i = e.fn[t],
        s = new RegExp("(^|\\s)bs-popover\\S+", "g"),
        a = e.extend({}, f.Default, { placement: "right", trigger: "click", content: "", template: '<div class="popover" role="tooltip"><div class="arrow"></div><h3 class="popover-header"></h3><div class="popover-body"></div></div>' }),
        l = e.extend({}, f.DefaultType, { content: "(string|element|function)" }),
        h = { FADE: "fade", SHOW: "show" },
        c = { TITLE: ".popover-header", CONTENT: ".popover-body" },
        u = { HIDE: "hide" + n, HIDDEN: "hidden" + n, SHOW: "show" + n, SHOWN: "shown" + n, INSERTED: "inserted" + n, CLICK: "click" + n, FOCUSIN: "focusin" + n, FOCUSOUT: "focusout" + n, MOUSEENTER: "mouseenter" + n, MOUSELEAVE: "mouseleave" + n },
        d = function (i) {
      function d() {
        return i.apply(this, arguments) || this;
      }o(d, i);var f = d.prototype;return f.isWithContent = function () {
        return this.getTitle() || this._getContent();
      }, f.addAttachmentClass = function (t) {
        e(this.getTipElement()).addClass("bs-popover-" + t);
      }, f.getTipElement = function () {
        return this.tip = this.tip || e(this.config.template)[0], this.tip;
      }, f.setContent = function () {
        var t = e(this.getTipElement());this.setElementContent(t.find(c.TITLE), this.getTitle()), this.setElementContent(t.find(c.CONTENT), this._getContent()), t.removeClass(h.FADE + " " + h.SHOW);
      }, f._getContent = function () {
        return this.element.getAttribute("data-content") || ("function" == typeof this.config.content ? this.config.content.call(this.element) : this.config.content);
      }, f._cleanTipClass = function () {
        var t = e(this.getTipElement()),
            n = t.attr("class").match(s);null !== n && n.length > 0 && t.removeClass(n.join(""));
      }, d._jQueryInterface = function (t) {
        return this.each(function () {
          var n = e(this).data("bs.popover"),
              i = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) ? t : null;if ((n || !/destroy|hide/.test(t)) && (n || (n = new d(this, i), e(this).data("bs.popover", n)), "string" == typeof t)) {
            if ("undefined" == typeof n[t]) throw new Error('No method named "' + t + '"');n[t]();
          }
        });
      }, r(d, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return a;
        } }, { key: "NAME", get: function get() {
          return t;
        } }, { key: "DATA_KEY", get: function get() {
          return "bs.popover";
        } }, { key: "Event", get: function get() {
          return u;
        } }, { key: "EVENT_KEY", get: function get() {
          return n;
        } }, { key: "DefaultType", get: function get() {
          return l;
        } }]), d;
    }(f);return e.fn[t] = d._jQueryInterface, e.fn[t].Constructor = d, e.fn[t].noConflict = function () {
      return e.fn[t] = i, d._jQueryInterface;
    }, d;
  }(),
      g = function () {
    var t = "scrollspy",
        n = e.fn[t],
        i = { offset: 10, method: "auto", target: "" },
        o = { offset: "number", method: "string", target: "(string|element)" },
        a = { ACTIVATE: "activate.bs.scrollspy", SCROLL: "scroll.bs.scrollspy", LOAD_DATA_API: "load.bs.scrollspy.data-api" },
        l = { DROPDOWN_ITEM: "dropdown-item", DROPDOWN_MENU: "dropdown-menu", ACTIVE: "active" },
        h = { DATA_SPY: '[data-spy="scroll"]', ACTIVE: ".active", NAV_LIST_GROUP: ".nav, .list-group", NAV_LINKS: ".nav-link", NAV_ITEMS: ".nav-item", LIST_ITEMS: ".list-group-item", DROPDOWN: ".dropdown", DROPDOWN_ITEMS: ".dropdown-item", DROPDOWN_TOGGLE: ".dropdown-toggle" },
        c = { OFFSET: "offset", POSITION: "position" },
        u = function () {
      function n(t, n) {
        var i = this;this._element = t, this._scrollElement = "BODY" === t.tagName ? window : t, this._config = this._getConfig(n), this._selector = this._config.target + " " + h.NAV_LINKS + "," + this._config.target + " " + h.LIST_ITEMS + "," + this._config.target + " " + h.DROPDOWN_ITEMS, this._offsets = [], this._targets = [], this._activeTarget = null, this._scrollHeight = 0, e(this._scrollElement).on(a.SCROLL, function (t) {
          return i._process(t);
        }), this.refresh(), this._process();
      }var u = n.prototype;return u.refresh = function () {
        var t = this,
            n = this._scrollElement !== this._scrollElement.window ? c.POSITION : c.OFFSET,
            i = "auto" === this._config.method ? n : this._config.method,
            r = i === c.POSITION ? this._getScrollTop() : 0;this._offsets = [], this._targets = [], this._scrollHeight = this._getScrollHeight(), e.makeArray(e(this._selector)).map(function (t) {
          var n,
              o = s.getSelectorFromElement(t);if (o && (n = e(o)[0]), n) {
            var a = n.getBoundingClientRect();if (a.width || a.height) return [e(n)[i]().top + r, o];
          }return null;
        }).filter(function (t) {
          return t;
        }).sort(function (t, e) {
          return t[0] - e[0];
        }).forEach(function (e) {
          t._offsets.push(e[0]), t._targets.push(e[1]);
        });
      }, u.dispose = function () {
        e.removeData(this._element, "bs.scrollspy"), e(this._scrollElement).off(".bs.scrollspy"), this._element = null, this._scrollElement = null, this._config = null, this._selector = null, this._offsets = null, this._targets = null, this._activeTarget = null, this._scrollHeight = null;
      }, u._getConfig = function (n) {
        if ("string" != typeof (n = e.extend({}, i, n)).target) {
          var r = e(n.target).attr("id");r || (r = s.getUID(t), e(n.target).attr("id", r)), n.target = "#" + r;
        }return s.typeCheckConfig(t, n, o), n;
      }, u._getScrollTop = function () {
        return this._scrollElement === window ? this._scrollElement.pageYOffset : this._scrollElement.scrollTop;
      }, u._getScrollHeight = function () {
        return this._scrollElement.scrollHeight || Math.max(document.body.scrollHeight, document.documentElement.scrollHeight);
      }, u._getOffsetHeight = function () {
        return this._scrollElement === window ? window.innerHeight : this._scrollElement.getBoundingClientRect().height;
      }, u._process = function () {
        var t = this._getScrollTop() + this._config.offset,
            e = this._getScrollHeight(),
            n = this._config.offset + e - this._getOffsetHeight();if (this._scrollHeight !== e && this.refresh(), t >= n) {
          var i = this._targets[this._targets.length - 1];this._activeTarget !== i && this._activate(i);
        } else {
          if (this._activeTarget && t < this._offsets[0] && this._offsets[0] > 0) return this._activeTarget = null, void this._clear();for (var s = this._offsets.length; s--;) {
            this._activeTarget !== this._targets[s] && t >= this._offsets[s] && ("undefined" == typeof this._offsets[s + 1] || t < this._offsets[s + 1]) && this._activate(this._targets[s]);
          }
        }
      }, u._activate = function (t) {
        this._activeTarget = t, this._clear();var n = this._selector.split(",");n = n.map(function (e) {
          return e + '[data-target="' + t + '"],' + e + '[href="' + t + '"]';
        });var i = e(n.join(","));i.hasClass(l.DROPDOWN_ITEM) ? (i.closest(h.DROPDOWN).find(h.DROPDOWN_TOGGLE).addClass(l.ACTIVE), i.addClass(l.ACTIVE)) : (i.addClass(l.ACTIVE), i.parents(h.NAV_LIST_GROUP).prev(h.NAV_LINKS + ", " + h.LIST_ITEMS).addClass(l.ACTIVE), i.parents(h.NAV_LIST_GROUP).prev(h.NAV_ITEMS).children(h.NAV_LINKS).addClass(l.ACTIVE)), e(this._scrollElement).trigger(a.ACTIVATE, { relatedTarget: t });
      }, u._clear = function () {
        e(this._selector).filter(h.ACTIVE).removeClass(l.ACTIVE);
      }, n._jQueryInterface = function (t) {
        return this.each(function () {
          var i = e(this).data("bs.scrollspy"),
              s = "object" == (typeof t === "undefined" ? "undefined" : _typeof(t)) && t;if (i || (i = new n(this, s), e(this).data("bs.scrollspy", i)), "string" == typeof t) {
            if ("undefined" == typeof i[t]) throw new Error('No method named "' + t + '"');i[t]();
          }
        });
      }, r(n, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }, { key: "Default", get: function get() {
          return i;
        } }]), n;
    }();return e(window).on(a.LOAD_DATA_API, function () {
      for (var t = e.makeArray(e(h.DATA_SPY)), n = t.length; n--;) {
        var i = e(t[n]);u._jQueryInterface.call(i, i.data());
      }
    }), e.fn[t] = u._jQueryInterface, e.fn[t].Constructor = u, e.fn[t].noConflict = function () {
      return e.fn[t] = n, u._jQueryInterface;
    }, u;
  }(),
      m = function () {
    var t = e.fn.tab,
        n = { HIDE: "hide.bs.tab", HIDDEN: "hidden.bs.tab", SHOW: "show.bs.tab", SHOWN: "shown.bs.tab", CLICK_DATA_API: "click.bs.tab.data-api" },
        i = { DROPDOWN_MENU: "dropdown-menu", ACTIVE: "active", DISABLED: "disabled", FADE: "fade", SHOW: "show" },
        o = { DROPDOWN: ".dropdown", NAV_LIST_GROUP: ".nav, .list-group", ACTIVE: ".active", ACTIVE_UL: "> li > .active", DATA_TOGGLE: '[data-toggle="tab"], [data-toggle="pill"], [data-toggle="list"]', DROPDOWN_TOGGLE: ".dropdown-toggle", DROPDOWN_ACTIVE_CHILD: "> .dropdown-menu .active" },
        a = function () {
      function t(t) {
        this._element = t;
      }var a = t.prototype;return a.show = function () {
        var t = this;if (!(this._element.parentNode && this._element.parentNode.nodeType === Node.ELEMENT_NODE && e(this._element).hasClass(i.ACTIVE) || e(this._element).hasClass(i.DISABLED))) {
          var r,
              a,
              l = e(this._element).closest(o.NAV_LIST_GROUP)[0],
              h = s.getSelectorFromElement(this._element);if (l) {
            var c = "UL" === l.nodeName ? o.ACTIVE_UL : o.ACTIVE;a = e.makeArray(e(l).find(c)), a = a[a.length - 1];
          }var u = e.Event(n.HIDE, { relatedTarget: this._element }),
              d = e.Event(n.SHOW, { relatedTarget: a });if (a && e(a).trigger(u), e(this._element).trigger(d), !d.isDefaultPrevented() && !u.isDefaultPrevented()) {
            h && (r = e(h)[0]), this._activate(this._element, l);var f = function f() {
              var i = e.Event(n.HIDDEN, { relatedTarget: t._element }),
                  s = e.Event(n.SHOWN, { relatedTarget: a });e(a).trigger(i), e(t._element).trigger(s);
            };r ? this._activate(r, r.parentNode, f) : f();
          }
        }
      }, a.dispose = function () {
        e.removeData(this._element, "bs.tab"), this._element = null;
      }, a._activate = function (t, n, r) {
        var a,
            l = this,
            h = (a = "UL" === n.nodeName ? e(n).find(o.ACTIVE_UL) : e(n).children(o.ACTIVE))[0],
            c = r && s.supportsTransitionEnd() && h && e(h).hasClass(i.FADE),
            u = function u() {
          return l._transitionComplete(t, h, c, r);
        };h && c ? e(h).one(s.TRANSITION_END, u).emulateTransitionEnd(150) : u(), h && e(h).removeClass(i.SHOW);
      }, a._transitionComplete = function (t, n, r, a) {
        if (n) {
          e(n).removeClass(i.ACTIVE);var l = e(n.parentNode).find(o.DROPDOWN_ACTIVE_CHILD)[0];l && e(l).removeClass(i.ACTIVE), "tab" === n.getAttribute("role") && n.setAttribute("aria-selected", !1);
        }if (e(t).addClass(i.ACTIVE), "tab" === t.getAttribute("role") && t.setAttribute("aria-selected", !0), r ? (s.reflow(t), e(t).addClass(i.SHOW)) : e(t).removeClass(i.FADE), t.parentNode && e(t.parentNode).hasClass(i.DROPDOWN_MENU)) {
          var h = e(t).closest(o.DROPDOWN)[0];h && e(h).find(o.DROPDOWN_TOGGLE).addClass(i.ACTIVE), t.setAttribute("aria-expanded", !0);
        }a && a();
      }, t._jQueryInterface = function (n) {
        return this.each(function () {
          var i = e(this),
              s = i.data("bs.tab");if (s || (s = new t(this), i.data("bs.tab", s)), "string" == typeof n) {
            if ("undefined" == typeof s[n]) throw new Error('No method named "' + n + '"');s[n]();
          }
        });
      }, r(t, null, [{ key: "VERSION", get: function get() {
          return "4.0.0-beta.2";
        } }]), t;
    }();return e(document).on(n.CLICK_DATA_API, o.DATA_TOGGLE, function (t) {
      t.preventDefault(), a._jQueryInterface.call(e(this), "show");
    }), e.fn.tab = a._jQueryInterface, e.fn.tab.Constructor = a, e.fn.tab.noConflict = function () {
      return e.fn.tab = t, a._jQueryInterface;
    }, a;
  }();return function () {
    if ("undefined" == typeof e) throw new Error("Bootstrap's JavaScript requires jQuery. jQuery must be included before Bootstrap's JavaScript.");var t = e.fn.jquery.split(" ")[0].split(".");if (t[0] < 2 && t[1] < 9 || 1 === t[0] && 9 === t[1] && t[2] < 1 || t[0] >= 4) throw new Error("Bootstrap's JavaScript requires at least jQuery v1.9.1 but less than v4.0.0");
  }(), t.Util = s, t.Alert = a, t.Button = l, t.Carousel = h, t.Collapse = c, t.Dropdown = u, t.Modal = d, t.Popover = _, t.Scrollspy = g, t.Tab = m, t.Tooltip = f, t;
}({}, $, Popper);
//# sourceMappingURL=bootstrap.min.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/js/jquery.nice-select.js":
/*!*****************************************!*\
  !*** ./assets/js/jquery.nice-select.js ***!
  \*****************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {/*  jQuery Nice Select - v1.1.0
    https://github.com/hernansartorio/jquery-nice-select
    Made by Hernán Sartorio  */

(function ($) {

  $.fn.niceSelect = function (method) {

    // Methods
    if (typeof method == 'string') {
      if (method == 'update') {
        this.each(function () {
          var $select = $(this);
          var $dropdown = $(this).next('.nice-select');
          var open = $dropdown.hasClass('open');

          if ($dropdown.length) {
            $dropdown.remove();
            create_nice_select($select);

            if (open) {
              $select.next().trigger('click');
            }
          }
        });
      } else if (method == 'destroy') {
        this.each(function () {
          var $select = $(this);
          var $dropdown = $(this).next('.nice-select');

          if ($dropdown.length) {
            $dropdown.remove();
            $select.css('display', '');
          }
        });
        if ($('.nice-select').length == 0) {
          $(document).off('.nice_select');
        }
      } else {
        console.log('Method "' + method + '" does not exist.');
      }
      return this;
    }

    // Hide native select
    this.hide();

    // Create custom markup
    this.each(function () {
      var $select = $(this);

      if (!$select.next().hasClass('nice-select')) {
        create_nice_select($select);
      }
    });

    function create_nice_select($select) {
      $select.after($('<div></div>').addClass('nice-select').addClass($select.attr('class') || '').addClass($select.attr('disabled') ? 'disabled' : '').attr('tabindex', $select.attr('disabled') ? null : '0').html('<span class="current"></span><ul class="list"></ul>'));

      var $dropdown = $select.next();
      var $options = $select.find('option');
      var $selected = $select.find('option:selected');

      $dropdown.find('.current').html($selected.data('display') || $selected.text());

      $options.each(function (i) {
        var $option = $(this);
        var display = $option.data('display');

        $dropdown.find('ul').append($('<li></li>').attr('data-value', $option.val()).attr('data-display', display || null).addClass('option' + ($option.is(':selected') ? ' selected' : '') + ($option.is(':disabled') ? ' disabled' : '')).html($option.text()));
      });
    }

    /* Event listeners */

    // Unbind existing events in case that the plugin has been initialized before
    $(document).off('.nice_select');

    // Open/close
    $(document).on('click.nice_select', '.nice-select', function (event) {
      var $dropdown = $(this);

      $('.nice-select').not($dropdown).removeClass('open');
      $dropdown.toggleClass('open');

      if ($dropdown.hasClass('open')) {
        $dropdown.find('.option');
        $dropdown.find('.focus').removeClass('focus');
        $dropdown.find('.selected').addClass('focus');
      } else {
        $dropdown.focus();
      }
    });

    // Close when clicking outside
    $(document).on('click.nice_select', function (event) {
      if ($(event.target).closest('.nice-select').length === 0) {
        $('.nice-select').removeClass('open').find('.option');
      }
    });

    // Option click
    $(document).on('click.nice_select', '.nice-select .option:not(.disabled)', function (event) {
      var $option = $(this);
      var $dropdown = $option.closest('.nice-select');

      $dropdown.find('.selected').removeClass('selected');
      $option.addClass('selected');

      var text = $option.data('display') || $option.text();
      $dropdown.find('.current').text(text);

      $dropdown.prev('select').val($option.data('value')).trigger('change');
    });

    // Keyboard events
    $(document).on('keydown.nice_select', '.nice-select', function (event) {
      var $dropdown = $(this);
      var $focused_option = $($dropdown.find('.focus') || $dropdown.find('.list .option.selected'));

      // Space or Enter
      if (event.keyCode == 32 || event.keyCode == 13) {
        if ($dropdown.hasClass('open')) {
          $focused_option.trigger('click');
        } else {
          $dropdown.trigger('click');
        }
        return false;
        // Down
      } else if (event.keyCode == 40) {
        if (!$dropdown.hasClass('open')) {
          $dropdown.trigger('click');
        } else {
          var $next = $focused_option.nextAll('.option:not(.disabled)').first();
          if ($next.length > 0) {
            $dropdown.find('.focus').removeClass('focus');
            $next.addClass('focus');
          }
        }
        return false;
        // Up
      } else if (event.keyCode == 38) {
        if (!$dropdown.hasClass('open')) {
          $dropdown.trigger('click');
        } else {
          var $prev = $focused_option.prevAll('.option:not(.disabled)').first();
          if ($prev.length > 0) {
            $dropdown.find('.focus').removeClass('focus');
            $prev.addClass('focus');
          }
        }
        return false;
        // Esc
      } else if (event.keyCode == 27) {
        if ($dropdown.hasClass('open')) {
          $dropdown.trigger('click');
        }
        // Tab
      } else if (event.keyCode == 9) {
        if ($dropdown.hasClass('open')) {
          return false;
        }
      }
    });

    // Detect CSS pointer-events support, for IE <= 10. From Modernizr.
    var style = document.createElement('a').style;
    style.cssText = 'pointer-events:auto';
    if (style.pointerEvents !== 'auto') {
      $('html').addClass('no-csspointerevents');
    }

    return this;
  };
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/js/loadmore.js":
/*!*******************************!*\
  !*** ./assets/js/loadmore.js ***!
  \*******************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function($) {/*
	Load more content with jQuery - May 21, 2013
	(c) 2013 @ElmahdiMahmoud
*/

$(function () {
  $("div").slice(0, 4).show();
  $("#loadMore").on('click', function (e) {
    e.preventDefault();
    $("div:hidden").slice(0, 4).slideDown();
    //        if ($("div:hidden").length == 0) {
    //            $("#load").fadeOut('slow');
    //        }
  });
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/js/main.js":
/*!***************************!*\
  !*** ./assets/js/main.js ***!
  \***************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {jQuery(document).ready(function ($) {

	//navbar click add class active
	$(".navbar-nav").on("click", "li", function () {
		$(".navbar-nav li").removeClass("active");
		$(this).addClass("active");
	});

	//On scroll header add background
	$(window).scroll(function () {
		var a = 10;
		var pos = $(window).scrollTop();
		if (pos > a) {
			$(".header-top .navbar").css({
				background: '#7362de',
				transition: 'all 0.3s ease-in-out',
				height: 60
			});
			$(".header-top .navbar").addClass("animated slideInDown");
		} else {
			$(".header-top .navbar").css({
				background: 'transparent'
			});
			$(".header-top .navbar").removeClass("animated slideInDown");
		}
	});

	$(window).scroll(function () {
		var a = 10;
		var pos = $(window).scrollTop();
		if (pos > a) {
			$(".articles .header-top .navbar").css({
				background: '#fff',
				transition: 'all 0.3s ease-in-out',
				height: 60
			});
			$(".articles .header-top .navbar").addClass("animated slideInDown");
		} else {
			$(".articles .header-top .navbar").css({
				background: '#fff'
			});
			$(".articles .header-top .navbar").removeClass("animated slideInDown");
		}
	});

	//Feautes Slider
	$(".features-slider").owlCarousel({
		items: 1,
		loop: true,
		nav: true,
		autoplay: true,
		navText: ['<i class="fa fa-angle-left"></i>', '<i class="fa fa-angle-right"></i>'],
		animateIn: 'fadeIn',
		animateOut: 'fadeOut'
	});

	//Feautes Slider
	$(".testimonial-slider").owlCarousel({
		items: 1,
		loop: true,
		nav: false,
		dots: true,
		autoplay: true,
		animateIn: 'fadeIn',
		animateOut: 'fadeOut'
	});

	//Single Blog Slider
	$(".singleblog-slider").owlCarousel({
		items: 1,
		loop: true,
		nav: true,
		//		autoplay: true,
		animateIn: 'fadeIn',
		animateOut: 'fadeOut',
		navText: ["<i class='fa fa-arrow-left'></i>previous post", "next post <i class='fa fa-arrow-right'></i>"],
		dots: false,
		mouseDrag: false
	});

	//Articles Slider
	$(".articles-slider").owlCarousel({
		center: true,
		items: 2,
		loop: true,
		margin: 50,
		autoplay: true,
		responsiveClass: true,
		dots: true,
		responsive: {
			0: {
				items: 1
			},
			600: {
				items: 1
			},
			1000: {
				items: 2
			}
		}
	});
	//Single-blog Slider
	$(".single-blog-slider").owlCarousel({
		items: 2,
		loop: true,
		margin: 50,
		//		autoplay: true,
		responsiveClass: true,
		dots: true,
		responsive: {
			0: {
				items: 1
			},
			767: {
				items: 1
			},
			600: {
				items: 1
			},
			1000: {
				items: 2
			}
		}
	});

	//Articles Slider
	$(".hero-slider-area").owlCarousel({
		items: 3,
		loop: true,
		dots: true,
		responsiveClass: true,
		responsive: {
			0: {
				items: 1
			},
			600: {
				items: 2
			},
			1000: {
				items: 3
			}
		}
	});

	//popup Modal Video
	$(".js-modal-btn").modalVideo();
	//Prevent default behavior of Anchor tag
	$("a.js-modal-btn").click(function (event) {
		return false;
	});

	//Click to scroll to next section
	$('.scrl-down').on('click', function (e) {
		e.preventDefault();
		$('html, body').animate({
			scrollTop: $($(this).attr('href')).offset().top
		}, 500, 'linear');
	});

	//On click change footer menu active
	$(".footer-menu li").on("click", function () {
		$(".footer-menu li").removeClass("active");
		$(this).addClass("active");
	});

	//Back to top
	$(window).scroll(function () {
		if ($(this).scrollTop() > 900) {
			$('.back-to-top').fadeIn();
		} else {
			$('.back-to-top').fadeOut();
		}
	});
	$(".back-to-top").click(function () {
		$("html, body").animate({
			scrollTop: 0
		}, 1000);
	});

	//Loadmore
	$(function () {
		$(".blogs-load").slice(0, 9).show();
		$(".all-blogs").on('click', function (e) {
			e.preventDefault();
			$(".blogs-load:hidden").slice(0, 3).slideDown();
		});
	});
});
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/js/modal-video.js":
/*!**********************************!*\
  !*** ./assets/js/modal-video.js ***!
  \**********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

"use strict";
var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;

var _typeof2 = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

var _typeof = typeof Symbol === "function" && _typeof2(Symbol.iterator) === "symbol" ? function (obj) {
	return typeof obj === "undefined" ? "undefined" : _typeof2(obj);
} : function (obj) {
	return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj === "undefined" ? "undefined" : _typeof2(obj);
};

/*!
 * modal-video Ver.1.0.0 (https://www.appleple.com)
 * Copyright appleple | MIT License
 *
 */
;(function umd(factory) {
	'use strict';

	if (true) {
		!(__WEBPACK_AMD_DEFINE_ARRAY__ = [__webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")], __WEBPACK_AMD_DEFINE_FACTORY__ = (factory),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__)) : __WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
	} else if ((typeof exports === 'undefined' ? 'undefined' : _typeof(exports)) === 'object') {
		module.exports = factory(require('jquery'));
	} else {
		factory(jQuery);
	}
})(function modalVideo($) {

	var defaults = {
		channel: 'youtube',
		youtube: {
			autoplay: 1,
			cc_load_policy: 1,
			color: null,
			controls: 1,
			disablekb: 0,
			enablejsapi: 0,
			end: null,
			fs: 1,
			h1: null,
			iv_load_policy: 1,
			list: null,
			listType: null,
			loop: 0,
			modestbranding: null,
			origin: null,
			playlist: null,
			playsinline: null,
			rel: 0,
			showinfo: 1,
			start: 0,
			wmode: 'transparent',
			theme: 'dark'
		},
		ratio: '16:9',
		vimeo: {
			api: false,
			autopause: true,
			autoplay: true,
			byline: true,
			callback: null,
			color: null,
			height: null,
			loop: false,
			maxheight: null,
			maxwidth: null,
			player_id: null,
			portrait: true,
			title: true,
			width: null,
			xhtml: false
		},
		allowFullScreen: true,
		animationSpeed: 300,
		classNames: {
			modalVideo: 'modal-video',
			modalVideoClose: 'modal-video-close',
			modalVideoBody: 'modal-video-body',
			modalVideoInner: 'modal-video-inner',
			modalVideoIframeWrap: 'modal-video-movie-wrap',
			modalVideoCloseBtn: 'modal-video-close-btn'
		},
		aria: {
			openMessage: 'You just openned the modal video',
			dismissBtnMessage: 'Close the modal by clicking here'
		}
	};

	function getQueryString(obj) {
		var url = "";
		for (var key in obj) {
			if (obj.hasOwnProperty(key)) {
				if (obj[key] !== null) {
					url += key + '=' + obj[key] + '&';
				}
			}
		}
		return url.substr(0, url.length - 1);
	}

	function getYoutubeUrl(youtube, videoId) {
		var query = getQueryString(youtube);
		return '//www.youtube.com/embed/' + videoId + '?' + query;
	}

	function getVimeoUrl(vimeo, videoId) {
		var query = getQueryString(vimeo);
		return '//player.vimeo.com/video/' + videoId + '?' + query;
	}

	function getVideoUrl(opt, videoId) {
		if (opt.channel === 'youtube') {
			return getYoutubeUrl(opt.youtube, videoId);
		} else if (opt.channel === 'vimeo') {
			return getVimeoUrl(opt.vimeo, videoId);
		}
	}

	function getPadding(ratio) {
		var arr = ratio.split(':');
		var width = Number(arr[0]);
		var height = Number(arr[1]);
		var padding = height * 100 / width;
		return padding + '%';
	}

	function getHtml(opt, videoId) {
		var videoUrl = getVideoUrl(opt, videoId);
		var padding = getPadding(opt.ratio);
		return '\n\t\t\t\t\t<div class="' + opt.classNames.modalVideo + '" tabindex="-1" role="dialog" aria-label="' + opt.aria.openMessage + '">\n\t\t\t\t\t\t<div class="' + opt.classNames.modalVideoBody + '">\n\t\t\t\t\t\t\t<div class="' + opt.classNames.modalVideoInner + '">\n\t\t\t\t\t\t\t\t<div class="' + opt.classNames.modalVideoIframeWrap + '" style="padding-bottom:' + padding + '">\n\t\t\t\t\t\t\t\t\t<button class="' + opt.classNames.modalVideoCloseBtn + ' js-modal-video-dismiss-btn" aria-label="' + opt.aria.dismissBtnMessage + '"/>\n\t\t\t\t\t\t\t\t\t<iframe width=\'460\' height=\'230\' src="' + videoUrl + '" frameborder=\'0\' allowfullscreen=' + opt.allowFullScreen + ' tabindex="-1"/>\n\t\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t\t</div>\n\t\t\t\t\t\t</div>\n\t\t\t\t\t</div>\n\t\t\t';
	}

	$.fn.modalVideo = function (opt) {
		opt = $.extend({}, defaults, opt);
		$(this).each(function () {
			if (!$(this).data('video-id')) {
				$(this).data('video-id', opt.videoId);
			}
		});
		$(this).click(function () {
			var $me = $(this);
			var videoId = $me.data('video-id');
			var html = getHtml(opt, videoId);
			var $modal = $(html);
			var $btn = $modal.find('.js-modal-video-dismiss-btn');
			var speed = opt.animationSpeed;
			$('body').append($modal);
			$modal.focus();
			$modal.on('click', function () {
				var $self = $(this);
				$self.addClass(opt.classNames.modalVideoClose);
				$self.off('click');
				$self.off('keydown');
				$btn.off('click');
				setTimeout(function () {
					$self.remove();
					$me.focus();
				}, speed);
			});
			$btn.on('click', function () {
				$modal.trigger('click');
			});
			$modal.on('keydown', function (e) {
				if (e.which === 9) {
					e.preventDefault();
					if ($modal.is(':focus')) {
						$btn.focus();
					} else {
						$modal.attr('aria-label', '');
						$modal.focus();
					}
				}
			});
		});
	};
});

/***/ }),

/***/ "./assets/js/niceselect-activate.js":
/*!******************************************!*\
  !*** ./assets/js/niceselect-activate.js ***!
  \******************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(jQuery) {(function ($) {
	"use strict",
	//Nice Select
	$(document).ready(function () {
		$('select').niceSelect();
	});
})(jQuery);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/js/owl.carousel.min.js":
/*!***************************************!*\
  !*** ./assets/js/owl.carousel.min.js ***!
  \***************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(__webpack_provided_window_dot_jQuery, jQuery) {var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/**
 * Owl Carousel v2.2.1
 * Copyright 2013-2017 David Deutsch
 * Licensed under  ()
 */
!function (a, b, c, d) {
  function e(b, c) {
    this.settings = null, this.options = a.extend({}, e.Defaults, c), this.$element = a(b), this._handlers = {}, this._plugins = {}, this._supress = {}, this._current = null, this._speed = null, this._coordinates = [], this._breakpoint = null, this._width = null, this._items = [], this._clones = [], this._mergers = [], this._widths = [], this._invalidated = {}, this._pipe = [], this._drag = { time: null, target: null, pointer: null, stage: { start: null, current: null }, direction: null }, this._states = { current: {}, tags: { initializing: ["busy"], animating: ["busy"], dragging: ["interacting"] } }, a.each(["onResize", "onThrottledResize"], a.proxy(function (b, c) {
      this._handlers[c] = a.proxy(this[c], this);
    }, this)), a.each(e.Plugins, a.proxy(function (a, b) {
      this._plugins[a.charAt(0).toLowerCase() + a.slice(1)] = new b(this);
    }, this)), a.each(e.Workers, a.proxy(function (b, c) {
      this._pipe.push({ filter: c.filter, run: a.proxy(c.run, this) });
    }, this)), this.setup(), this.initialize();
  }e.Defaults = { items: 3, loop: !1, center: !1, rewind: !1, mouseDrag: !0, touchDrag: !0, pullDrag: !0, freeDrag: !1, margin: 0, stagePadding: 0, merge: !1, mergeFit: !0, autoWidth: !1, startPosition: 0, rtl: !1, smartSpeed: 250, fluidSpeed: !1, dragEndSpeed: !1, responsive: {}, responsiveRefreshRate: 200, responsiveBaseElement: b, fallbackEasing: "swing", info: !1, nestedItemSelector: !1, itemElement: "div", stageElement: "div", refreshClass: "owl-refresh", loadedClass: "owl-loaded", loadingClass: "owl-loading", rtlClass: "owl-rtl", responsiveClass: "owl-responsive", dragClass: "owl-drag", itemClass: "owl-item", stageClass: "owl-stage", stageOuterClass: "owl-stage-outer", grabClass: "owl-grab" }, e.Width = { Default: "default", Inner: "inner", Outer: "outer" }, e.Type = { Event: "event", State: "state" }, e.Plugins = {}, e.Workers = [{ filter: ["width", "settings"], run: function run() {
      this._width = this.$element.width();
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      a.current = this._items && this._items[this.relative(this._current)];
    } }, { filter: ["items", "settings"], run: function run() {
      this.$stage.children(".cloned").remove();
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      var b = this.settings.margin || "",
          c = !this.settings.autoWidth,
          d = this.settings.rtl,
          e = { width: "auto", "margin-left": d ? b : "", "margin-right": d ? "" : b };!c && this.$stage.children().css(e), a.css = e;
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      var b = (this.width() / this.settings.items).toFixed(3) - this.settings.margin,
          c = null,
          d = this._items.length,
          e = !this.settings.autoWidth,
          f = [];for (a.items = { merge: !1, width: b }; d--;) {
        c = this._mergers[d], c = this.settings.mergeFit && Math.min(c, this.settings.items) || c, a.items.merge = c > 1 || a.items.merge, f[d] = e ? b * c : this._items[d].width();
      }this._widths = f;
    } }, { filter: ["items", "settings"], run: function run() {
      var b = [],
          c = this._items,
          d = this.settings,
          e = Math.max(2 * d.items, 4),
          f = 2 * Math.ceil(c.length / 2),
          g = d.loop && c.length ? d.rewind ? e : Math.max(e, f) : 0,
          h = "",
          i = "";for (g /= 2; g--;) {
        b.push(this.normalize(b.length / 2, !0)), h += c[b[b.length - 1]][0].outerHTML, b.push(this.normalize(c.length - 1 - (b.length - 1) / 2, !0)), i = c[b[b.length - 1]][0].outerHTML + i;
      }this._clones = b, a(h).addClass("cloned").appendTo(this.$stage), a(i).addClass("cloned").prependTo(this.$stage);
    } }, { filter: ["width", "items", "settings"], run: function run() {
      for (var a = this.settings.rtl ? 1 : -1, b = this._clones.length + this._items.length, c = -1, d = 0, e = 0, f = []; ++c < b;) {
        d = f[c - 1] || 0, e = this._widths[this.relative(c)] + this.settings.margin, f.push(d + e * a);
      }this._coordinates = f;
    } }, { filter: ["width", "items", "settings"], run: function run() {
      var a = this.settings.stagePadding,
          b = this._coordinates,
          c = { width: Math.ceil(Math.abs(b[b.length - 1])) + 2 * a, "padding-left": a || "", "padding-right": a || "" };this.$stage.css(c);
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      var b = this._coordinates.length,
          c = !this.settings.autoWidth,
          d = this.$stage.children();if (c && a.items.merge) for (; b--;) {
        a.css.width = this._widths[this.relative(b)], d.eq(b).css(a.css);
      } else c && (a.css.width = a.items.width, d.css(a.css));
    } }, { filter: ["items"], run: function run() {
      this._coordinates.length < 1 && this.$stage.removeAttr("style");
    } }, { filter: ["width", "items", "settings"], run: function run(a) {
      a.current = a.current ? this.$stage.children().index(a.current) : 0, a.current = Math.max(this.minimum(), Math.min(this.maximum(), a.current)), this.reset(a.current);
    } }, { filter: ["position"], run: function run() {
      this.animate(this.coordinates(this._current));
    } }, { filter: ["width", "position", "items", "settings"], run: function run() {
      var a,
          b,
          c,
          d,
          e = this.settings.rtl ? 1 : -1,
          f = 2 * this.settings.stagePadding,
          g = this.coordinates(this.current()) + f,
          h = g + this.width() * e,
          i = [];for (c = 0, d = this._coordinates.length; c < d; c++) {
        a = this._coordinates[c - 1] || 0, b = Math.abs(this._coordinates[c]) + f * e, (this.op(a, "<=", g) && this.op(a, ">", h) || this.op(b, "<", g) && this.op(b, ">", h)) && i.push(c);
      }this.$stage.children(".active").removeClass("active"), this.$stage.children(":eq(" + i.join("), :eq(") + ")").addClass("active"), this.settings.center && (this.$stage.children(".center").removeClass("center"), this.$stage.children().eq(this.current()).addClass("center"));
    } }], e.prototype.initialize = function () {
    if (this.enter("initializing"), this.trigger("initialize"), this.$element.toggleClass(this.settings.rtlClass, this.settings.rtl), this.settings.autoWidth && !this.is("pre-loading")) {
      var b, c, e;b = this.$element.find("img"), c = this.settings.nestedItemSelector ? "." + this.settings.nestedItemSelector : d, e = this.$element.children(c).width(), b.length && e <= 0 && this.preloadAutoWidthImages(b);
    }this.$element.addClass(this.options.loadingClass), this.$stage = a("<" + this.settings.stageElement + ' class="' + this.settings.stageClass + '"/>').wrap('<div class="' + this.settings.stageOuterClass + '"/>'), this.$element.append(this.$stage.parent()), this.replace(this.$element.children().not(this.$stage.parent())), this.$element.is(":visible") ? this.refresh() : this.invalidate("width"), this.$element.removeClass(this.options.loadingClass).addClass(this.options.loadedClass), this.registerEventHandlers(), this.leave("initializing"), this.trigger("initialized");
  }, e.prototype.setup = function () {
    var b = this.viewport(),
        c = this.options.responsive,
        d = -1,
        e = null;c ? (a.each(c, function (a) {
      a <= b && a > d && (d = Number(a));
    }), e = a.extend({}, this.options, c[d]), "function" == typeof e.stagePadding && (e.stagePadding = e.stagePadding()), delete e.responsive, e.responsiveClass && this.$element.attr("class", this.$element.attr("class").replace(new RegExp("(" + this.options.responsiveClass + "-)\\S+\\s", "g"), "$1" + d))) : e = a.extend({}, this.options), this.trigger("change", { property: { name: "settings", value: e } }), this._breakpoint = d, this.settings = e, this.invalidate("settings"), this.trigger("changed", { property: { name: "settings", value: this.settings } });
  }, e.prototype.optionsLogic = function () {
    this.settings.autoWidth && (this.settings.stagePadding = !1, this.settings.merge = !1);
  }, e.prototype.prepare = function (b) {
    var c = this.trigger("prepare", { content: b });return c.data || (c.data = a("<" + this.settings.itemElement + "/>").addClass(this.options.itemClass).append(b)), this.trigger("prepared", { content: c.data }), c.data;
  }, e.prototype.update = function () {
    for (var b = 0, c = this._pipe.length, d = a.proxy(function (a) {
      return this[a];
    }, this._invalidated), e = {}; b < c;) {
      (this._invalidated.all || a.grep(this._pipe[b].filter, d).length > 0) && this._pipe[b].run(e), b++;
    }this._invalidated = {}, !this.is("valid") && this.enter("valid");
  }, e.prototype.width = function (a) {
    switch (a = a || e.Width.Default) {case e.Width.Inner:case e.Width.Outer:
        return this._width;default:
        return this._width - 2 * this.settings.stagePadding + this.settings.margin;}
  }, e.prototype.refresh = function () {
    this.enter("refreshing"), this.trigger("refresh"), this.setup(), this.optionsLogic(), this.$element.addClass(this.options.refreshClass), this.update(), this.$element.removeClass(this.options.refreshClass), this.leave("refreshing"), this.trigger("refreshed");
  }, e.prototype.onThrottledResize = function () {
    b.clearTimeout(this.resizeTimer), this.resizeTimer = b.setTimeout(this._handlers.onResize, this.settings.responsiveRefreshRate);
  }, e.prototype.onResize = function () {
    return !!this._items.length && this._width !== this.$element.width() && !!this.$element.is(":visible") && (this.enter("resizing"), this.trigger("resize").isDefaultPrevented() ? (this.leave("resizing"), !1) : (this.invalidate("width"), this.refresh(), this.leave("resizing"), void this.trigger("resized")));
  }, e.prototype.registerEventHandlers = function () {
    a.support.transition && this.$stage.on(a.support.transition.end + ".owl.core", a.proxy(this.onTransitionEnd, this)), this.settings.responsive !== !1 && this.on(b, "resize", this._handlers.onThrottledResize), this.settings.mouseDrag && (this.$element.addClass(this.options.dragClass), this.$stage.on("mousedown.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("dragstart.owl.core selectstart.owl.core", function () {
      return !1;
    })), this.settings.touchDrag && (this.$stage.on("touchstart.owl.core", a.proxy(this.onDragStart, this)), this.$stage.on("touchcancel.owl.core", a.proxy(this.onDragEnd, this)));
  }, e.prototype.onDragStart = function (b) {
    var d = null;3 !== b.which && (a.support.transform ? (d = this.$stage.css("transform").replace(/.*\(|\)| /g, "").split(","), d = { x: d[16 === d.length ? 12 : 4], y: d[16 === d.length ? 13 : 5] }) : (d = this.$stage.position(), d = { x: this.settings.rtl ? d.left + this.$stage.width() - this.width() + this.settings.margin : d.left, y: d.top }), this.is("animating") && (a.support.transform ? this.animate(d.x) : this.$stage.stop(), this.invalidate("position")), this.$element.toggleClass(this.options.grabClass, "mousedown" === b.type), this.speed(0), this._drag.time = new Date().getTime(), this._drag.target = a(b.target), this._drag.stage.start = d, this._drag.stage.current = d, this._drag.pointer = this.pointer(b), a(c).on("mouseup.owl.core touchend.owl.core", a.proxy(this.onDragEnd, this)), a(c).one("mousemove.owl.core touchmove.owl.core", a.proxy(function (b) {
      var d = this.difference(this._drag.pointer, this.pointer(b));a(c).on("mousemove.owl.core touchmove.owl.core", a.proxy(this.onDragMove, this)), Math.abs(d.x) < Math.abs(d.y) && this.is("valid") || (b.preventDefault(), this.enter("dragging"), this.trigger("drag"));
    }, this)));
  }, e.prototype.onDragMove = function (a) {
    var b = null,
        c = null,
        d = null,
        e = this.difference(this._drag.pointer, this.pointer(a)),
        f = this.difference(this._drag.stage.start, e);this.is("dragging") && (a.preventDefault(), this.settings.loop ? (b = this.coordinates(this.minimum()), c = this.coordinates(this.maximum() + 1) - b, f.x = ((f.x - b) % c + c) % c + b) : (b = this.settings.rtl ? this.coordinates(this.maximum()) : this.coordinates(this.minimum()), c = this.settings.rtl ? this.coordinates(this.minimum()) : this.coordinates(this.maximum()), d = this.settings.pullDrag ? -1 * e.x / 5 : 0, f.x = Math.max(Math.min(f.x, b + d), c + d)), this._drag.stage.current = f, this.animate(f.x));
  }, e.prototype.onDragEnd = function (b) {
    var d = this.difference(this._drag.pointer, this.pointer(b)),
        e = this._drag.stage.current,
        f = d.x > 0 ^ this.settings.rtl ? "left" : "right";a(c).off(".owl.core"), this.$element.removeClass(this.options.grabClass), (0 !== d.x && this.is("dragging") || !this.is("valid")) && (this.speed(this.settings.dragEndSpeed || this.settings.smartSpeed), this.current(this.closest(e.x, 0 !== d.x ? f : this._drag.direction)), this.invalidate("position"), this.update(), this._drag.direction = f, (Math.abs(d.x) > 3 || new Date().getTime() - this._drag.time > 300) && this._drag.target.one("click.owl.core", function () {
      return !1;
    })), this.is("dragging") && (this.leave("dragging"), this.trigger("dragged"));
  }, e.prototype.closest = function (b, c) {
    var d = -1,
        e = 30,
        f = this.width(),
        g = this.coordinates();return this.settings.freeDrag || a.each(g, a.proxy(function (a, h) {
      return "left" === c && b > h - e && b < h + e ? d = a : "right" === c && b > h - f - e && b < h - f + e ? d = a + 1 : this.op(b, "<", h) && this.op(b, ">", g[a + 1] || h - f) && (d = "left" === c ? a + 1 : a), d === -1;
    }, this)), this.settings.loop || (this.op(b, ">", g[this.minimum()]) ? d = b = this.minimum() : this.op(b, "<", g[this.maximum()]) && (d = b = this.maximum())), d;
  }, e.prototype.animate = function (b) {
    var c = this.speed() > 0;this.is("animating") && this.onTransitionEnd(), c && (this.enter("animating"), this.trigger("translate")), a.support.transform3d && a.support.transition ? this.$stage.css({ transform: "translate3d(" + b + "px,0px,0px)", transition: this.speed() / 1e3 + "s" }) : c ? this.$stage.animate({ left: b + "px" }, this.speed(), this.settings.fallbackEasing, a.proxy(this.onTransitionEnd, this)) : this.$stage.css({ left: b + "px" });
  }, e.prototype.is = function (a) {
    return this._states.current[a] && this._states.current[a] > 0;
  }, e.prototype.current = function (a) {
    if (a === d) return this._current;if (0 === this._items.length) return d;if (a = this.normalize(a), this._current !== a) {
      var b = this.trigger("change", { property: { name: "position", value: a } });b.data !== d && (a = this.normalize(b.data)), this._current = a, this.invalidate("position"), this.trigger("changed", { property: { name: "position", value: this._current } });
    }return this._current;
  }, e.prototype.invalidate = function (b) {
    return "string" === a.type(b) && (this._invalidated[b] = !0, this.is("valid") && this.leave("valid")), a.map(this._invalidated, function (a, b) {
      return b;
    });
  }, e.prototype.reset = function (a) {
    a = this.normalize(a), a !== d && (this._speed = 0, this._current = a, this.suppress(["translate", "translated"]), this.animate(this.coordinates(a)), this.release(["translate", "translated"]));
  }, e.prototype.normalize = function (a, b) {
    var c = this._items.length,
        e = b ? 0 : this._clones.length;return !this.isNumeric(a) || c < 1 ? a = d : (a < 0 || a >= c + e) && (a = ((a - e / 2) % c + c) % c + e / 2), a;
  }, e.prototype.relative = function (a) {
    return a -= this._clones.length / 2, this.normalize(a, !0);
  }, e.prototype.maximum = function (a) {
    var b,
        c,
        d,
        e = this.settings,
        f = this._coordinates.length;if (e.loop) f = this._clones.length / 2 + this._items.length - 1;else if (e.autoWidth || e.merge) {
      for (b = this._items.length, c = this._items[--b].width(), d = this.$element.width(); b-- && (c += this._items[b].width() + this.settings.margin, !(c > d));) {}f = b + 1;
    } else f = e.center ? this._items.length - 1 : this._items.length - e.items;return a && (f -= this._clones.length / 2), Math.max(f, 0);
  }, e.prototype.minimum = function (a) {
    return a ? 0 : this._clones.length / 2;
  }, e.prototype.items = function (a) {
    return a === d ? this._items.slice() : (a = this.normalize(a, !0), this._items[a]);
  }, e.prototype.mergers = function (a) {
    return a === d ? this._mergers.slice() : (a = this.normalize(a, !0), this._mergers[a]);
  }, e.prototype.clones = function (b) {
    var c = this._clones.length / 2,
        e = c + this._items.length,
        f = function f(a) {
      return a % 2 === 0 ? e + a / 2 : c - (a + 1) / 2;
    };return b === d ? a.map(this._clones, function (a, b) {
      return f(b);
    }) : a.map(this._clones, function (a, c) {
      return a === b ? f(c) : null;
    });
  }, e.prototype.speed = function (a) {
    return a !== d && (this._speed = a), this._speed;
  }, e.prototype.coordinates = function (b) {
    var c,
        e = 1,
        f = b - 1;return b === d ? a.map(this._coordinates, a.proxy(function (a, b) {
      return this.coordinates(b);
    }, this)) : (this.settings.center ? (this.settings.rtl && (e = -1, f = b + 1), c = this._coordinates[b], c += (this.width() - c + (this._coordinates[f] || 0)) / 2 * e) : c = this._coordinates[f] || 0, c = Math.ceil(c));
  }, e.prototype.duration = function (a, b, c) {
    return 0 === c ? 0 : Math.min(Math.max(Math.abs(b - a), 1), 6) * Math.abs(c || this.settings.smartSpeed);
  }, e.prototype.to = function (a, b) {
    var c = this.current(),
        d = null,
        e = a - this.relative(c),
        f = (e > 0) - (e < 0),
        g = this._items.length,
        h = this.minimum(),
        i = this.maximum();this.settings.loop ? (!this.settings.rewind && Math.abs(e) > g / 2 && (e += f * -1 * g), a = c + e, d = ((a - h) % g + g) % g + h, d !== a && d - e <= i && d - e > 0 && (c = d - e, a = d, this.reset(c))) : this.settings.rewind ? (i += 1, a = (a % i + i) % i) : a = Math.max(h, Math.min(i, a)), this.speed(this.duration(c, a, b)), this.current(a), this.$element.is(":visible") && this.update();
  }, e.prototype.next = function (a) {
    a = a || !1, this.to(this.relative(this.current()) + 1, a);
  }, e.prototype.prev = function (a) {
    a = a || !1, this.to(this.relative(this.current()) - 1, a);
  }, e.prototype.onTransitionEnd = function (a) {
    if (a !== d && (a.stopPropagation(), (a.target || a.srcElement || a.originalTarget) !== this.$stage.get(0))) return !1;this.leave("animating"), this.trigger("translated");
  }, e.prototype.viewport = function () {
    var d;return this.options.responsiveBaseElement !== b ? d = a(this.options.responsiveBaseElement).width() : b.innerWidth ? d = b.innerWidth : c.documentElement && c.documentElement.clientWidth ? d = c.documentElement.clientWidth : console.warn("Can not detect viewport width."), d;
  }, e.prototype.replace = function (b) {
    this.$stage.empty(), this._items = [], b && (b = b instanceof jQuery ? b : a(b)), this.settings.nestedItemSelector && (b = b.find("." + this.settings.nestedItemSelector)), b.filter(function () {
      return 1 === this.nodeType;
    }).each(a.proxy(function (a, b) {
      b = this.prepare(b), this.$stage.append(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1);
    }, this)), this.reset(this.isNumeric(this.settings.startPosition) ? this.settings.startPosition : 0), this.invalidate("items");
  }, e.prototype.add = function (b, c) {
    var e = this.relative(this._current);c = c === d ? this._items.length : this.normalize(c, !0), b = b instanceof jQuery ? b : a(b), this.trigger("add", { content: b, position: c }), b = this.prepare(b), 0 === this._items.length || c === this._items.length ? (0 === this._items.length && this.$stage.append(b), 0 !== this._items.length && this._items[c - 1].after(b), this._items.push(b), this._mergers.push(1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)) : (this._items[c].before(b), this._items.splice(c, 0, b), this._mergers.splice(c, 0, 1 * b.find("[data-merge]").addBack("[data-merge]").attr("data-merge") || 1)), this._items[e] && this.reset(this._items[e].index()), this.invalidate("items"), this.trigger("added", { content: b, position: c });
  }, e.prototype.remove = function (a) {
    a = this.normalize(a, !0), a !== d && (this.trigger("remove", { content: this._items[a], position: a }), this._items[a].remove(), this._items.splice(a, 1), this._mergers.splice(a, 1), this.invalidate("items"), this.trigger("removed", { content: null, position: a }));
  }, e.prototype.preloadAutoWidthImages = function (b) {
    b.each(a.proxy(function (b, c) {
      this.enter("pre-loading"), c = a(c), a(new Image()).one("load", a.proxy(function (a) {
        c.attr("src", a.target.src), c.css("opacity", 1), this.leave("pre-loading"), !this.is("pre-loading") && !this.is("initializing") && this.refresh();
      }, this)).attr("src", c.attr("src") || c.attr("data-src") || c.attr("data-src-retina"));
    }, this));
  }, e.prototype.destroy = function () {
    this.$element.off(".owl.core"), this.$stage.off(".owl.core"), a(c).off(".owl.core"), this.settings.responsive !== !1 && (b.clearTimeout(this.resizeTimer), this.off(b, "resize", this._handlers.onThrottledResize));for (var d in this._plugins) {
      this._plugins[d].destroy();
    }this.$stage.children(".cloned").remove(), this.$stage.unwrap(), this.$stage.children().contents().unwrap(), this.$stage.children().unwrap(), this.$element.removeClass(this.options.refreshClass).removeClass(this.options.loadingClass).removeClass(this.options.loadedClass).removeClass(this.options.rtlClass).removeClass(this.options.dragClass).removeClass(this.options.grabClass).attr("class", this.$element.attr("class").replace(new RegExp(this.options.responsiveClass + "-\\S+\\s", "g"), "")).removeData("owl.carousel");
  }, e.prototype.op = function (a, b, c) {
    var d = this.settings.rtl;switch (b) {case "<":
        return d ? a > c : a < c;case ">":
        return d ? a < c : a > c;case ">=":
        return d ? a <= c : a >= c;case "<=":
        return d ? a >= c : a <= c;}
  }, e.prototype.on = function (a, b, c, d) {
    a.addEventListener ? a.addEventListener(b, c, d) : a.attachEvent && a.attachEvent("on" + b, c);
  }, e.prototype.off = function (a, b, c, d) {
    a.removeEventListener ? a.removeEventListener(b, c, d) : a.detachEvent && a.detachEvent("on" + b, c);
  }, e.prototype.trigger = function (b, c, d, f, g) {
    var h = { item: { count: this._items.length, index: this.current() } },
        i = a.camelCase(a.grep(["on", b, d], function (a) {
      return a;
    }).join("-").toLowerCase()),
        j = a.Event([b, "owl", d || "carousel"].join(".").toLowerCase(), a.extend({ relatedTarget: this }, h, c));return this._supress[b] || (a.each(this._plugins, function (a, b) {
      b.onTrigger && b.onTrigger(j);
    }), this.register({ type: e.Type.Event, name: b }), this.$element.trigger(j), this.settings && "function" == typeof this.settings[i] && this.settings[i].call(this, j)), j;
  }, e.prototype.enter = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b] === d && (this._states.current[b] = 0), this._states.current[b]++;
    }, this));
  }, e.prototype.leave = function (b) {
    a.each([b].concat(this._states.tags[b] || []), a.proxy(function (a, b) {
      this._states.current[b]--;
    }, this));
  }, e.prototype.register = function (b) {
    if (b.type === e.Type.Event) {
      if (a.event.special[b.name] || (a.event.special[b.name] = {}), !a.event.special[b.name].owl) {
        var c = a.event.special[b.name]._default;a.event.special[b.name]._default = function (a) {
          return !c || !c.apply || a.namespace && a.namespace.indexOf("owl") !== -1 ? a.namespace && a.namespace.indexOf("owl") > -1 : c.apply(this, arguments);
        }, a.event.special[b.name].owl = !0;
      }
    } else b.type === e.Type.State && (this._states.tags[b.name] ? this._states.tags[b.name] = this._states.tags[b.name].concat(b.tags) : this._states.tags[b.name] = b.tags, this._states.tags[b.name] = a.grep(this._states.tags[b.name], a.proxy(function (c, d) {
      return a.inArray(c, this._states.tags[b.name]) === d;
    }, this)));
  }, e.prototype.suppress = function (b) {
    a.each(b, a.proxy(function (a, b) {
      this._supress[b] = !0;
    }, this));
  }, e.prototype.release = function (b) {
    a.each(b, a.proxy(function (a, b) {
      delete this._supress[b];
    }, this));
  }, e.prototype.pointer = function (a) {
    var c = { x: null, y: null };return a = a.originalEvent || a || b.event, a = a.touches && a.touches.length ? a.touches[0] : a.changedTouches && a.changedTouches.length ? a.changedTouches[0] : a, a.pageX ? (c.x = a.pageX, c.y = a.pageY) : (c.x = a.clientX, c.y = a.clientY), c;
  }, e.prototype.isNumeric = function (a) {
    return !isNaN(parseFloat(a));
  }, e.prototype.difference = function (a, b) {
    return { x: a.x - b.x, y: a.y - b.y };
  }, a.fn.owlCarousel = function (b) {
    var c = Array.prototype.slice.call(arguments, 1);return this.each(function () {
      var d = a(this),
          f = d.data("owl.carousel");f || (f = new e(this, "object" == (typeof b === "undefined" ? "undefined" : _typeof(b)) && b), d.data("owl.carousel", f), a.each(["next", "prev", "to", "destroy", "refresh", "replace", "add", "remove"], function (b, c) {
        f.register({ type: e.Type.Event, name: c }), f.$element.on(c + ".owl.carousel.core", a.proxy(function (a) {
          a.namespace && a.relatedTarget !== this && (this.suppress([c]), f[c].apply(this, [].slice.call(arguments, 1)), this.release([c]));
        }, f));
      })), "string" == typeof b && "_" !== b.charAt(0) && f[b].apply(f, c);
    });
  }, a.fn.owlCarousel.Constructor = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._interval = null, this._visible = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoRefresh && this.watch();
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };e.Defaults = { autoRefresh: !0, autoRefreshInterval: 500 }, e.prototype.watch = function () {
    this._interval || (this._visible = this._core.$element.is(":visible"), this._interval = b.setInterval(a.proxy(this.refresh, this), this._core.settings.autoRefreshInterval));
  }, e.prototype.refresh = function () {
    this._core.$element.is(":visible") !== this._visible && (this._visible = !this._visible, this._core.$element.toggleClass("owl-hidden", !this._visible), this._visible && this._core.invalidate("width") && this._core.refresh());
  }, e.prototype.destroy = function () {
    var a, c;b.clearInterval(this._interval);for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoRefresh = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._loaded = [], this._handlers = { "initialized.owl.carousel change.owl.carousel resized.owl.carousel": a.proxy(function (b) {
        if (b.namespace && this._core.settings && this._core.settings.lazyLoad && (b.property && "position" == b.property.name || "initialized" == b.type)) for (var c = this._core.settings, e = c.center && Math.ceil(c.items / 2) || c.items, f = c.center && e * -1 || 0, g = (b.property && b.property.value !== d ? b.property.value : this._core.current()) + f, h = this._core.clones().length, i = a.proxy(function (a, b) {
          this.load(b);
        }, this); f++ < e;) {
          this.load(h / 2 + this._core.relative(g)), h && a.each(this._core.clones(this._core.relative(g)), i), g++;
        }
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };e.Defaults = { lazyLoad: !1 }, e.prototype.load = function (c) {
    var d = this._core.$stage.children().eq(c),
        e = d && d.find(".owl-lazy");!e || a.inArray(d.get(0), this._loaded) > -1 || (e.each(a.proxy(function (c, d) {
      var e,
          f = a(d),
          g = b.devicePixelRatio > 1 && f.attr("data-src-retina") || f.attr("data-src");this._core.trigger("load", { element: f, url: g }, "lazy"), f.is("img") ? f.one("load.owl.lazy", a.proxy(function () {
        f.css("opacity", 1), this._core.trigger("loaded", { element: f, url: g }, "lazy");
      }, this)).attr("src", g) : (e = new Image(), e.onload = a.proxy(function () {
        f.css({ "background-image": 'url("' + g + '")', opacity: "1" }), this._core.trigger("loaded", { element: f, url: g }, "lazy");
      }, this), e.src = g);
    }, this)), this._loaded.push(d.get(0)));
  }, e.prototype.destroy = function () {
    var a, b;for (a in this.handlers) {
      this._core.$element.off(a, this.handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Lazy = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._handlers = { "initialized.owl.carousel refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && this.update();
      }, this), "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && "position" == a.property.name && this.update();
      }, this), "loaded.owl.lazy": a.proxy(function (a) {
        a.namespace && this._core.settings.autoHeight && a.element.closest("." + this._core.settings.itemClass).index() === this._core.current() && this.update();
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers);
  };e.Defaults = { autoHeight: !1, autoHeightClass: "owl-height" }, e.prototype.update = function () {
    var b = this._core._current,
        c = b + this._core.settings.items,
        d = this._core.$stage.children().toArray().slice(b, c),
        e = [],
        f = 0;a.each(d, function (b, c) {
      e.push(a(c).height());
    }), f = Math.max.apply(null, e), this._core.$stage.parent().height(f).addClass(this._core.settings.autoHeightClass);
  }, e.prototype.destroy = function () {
    var a, b;for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.AutoHeight = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._videos = {}, this._playing = null, this._handlers = { "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.register({ type: "state", name: "playing", tags: ["interacting"] });
      }, this), "resize.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.video && this.isInFullScreen() && a.preventDefault();
      }, this), "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.is("resizing") && this._core.$stage.find(".cloned .owl-video-frame").remove();
      }, this), "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" === a.property.name && this._playing && this.stop();
      }, this), "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find(".owl-video");c.length && (c.css("display", "none"), this.fetch(c, a(b.content)));
        }
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this._core.$element.on(this._handlers), this._core.$element.on("click.owl.video", ".owl-video-play-icon", a.proxy(function (a) {
      this.play(a);
    }, this));
  };e.Defaults = { video: !1, videoHeight: !1, videoWidth: !1 }, e.prototype.fetch = function (a, b) {
    var c = function () {
      return a.attr("data-vimeo-id") ? "vimeo" : a.attr("data-vzaar-id") ? "vzaar" : "youtube";
    }(),
        d = a.attr("data-vimeo-id") || a.attr("data-youtube-id") || a.attr("data-vzaar-id"),
        e = a.attr("data-width") || this._core.settings.videoWidth,
        f = a.attr("data-height") || this._core.settings.videoHeight,
        g = a.attr("href");if (!g) throw new Error("Missing video URL.");if (d = g.match(/(http:|https:|)\/\/(player.|www.|app.)?(vimeo\.com|youtu(be\.com|\.be|be\.googleapis\.com)|vzaar\.com)\/(video\/|videos\/|embed\/|channels\/.+\/|groups\/.+\/|watch\?v=|v\/)?([A-Za-z0-9._%-]*)(\&\S+)?/), d[3].indexOf("youtu") > -1) c = "youtube";else if (d[3].indexOf("vimeo") > -1) c = "vimeo";else {
      if (!(d[3].indexOf("vzaar") > -1)) throw new Error("Video URL not supported.");c = "vzaar";
    }d = d[6], this._videos[g] = { type: c, id: d, width: e, height: f }, b.attr("data-video", g), this.thumbnail(a, this._videos[g]);
  }, e.prototype.thumbnail = function (b, c) {
    var d,
        e,
        f,
        g = c.width && c.height ? 'style="width:' + c.width + "px;height:" + c.height + 'px;"' : "",
        h = b.find("img"),
        i = "src",
        j = "",
        k = this._core.settings,
        l = function l(a) {
      e = '<div class="owl-video-play-icon"></div>', d = k.lazyLoad ? '<div class="owl-video-tn ' + j + '" ' + i + '="' + a + '"></div>' : '<div class="owl-video-tn" style="opacity:1;background-image:url(' + a + ')"></div>', b.after(d), b.after(e);
    };if (b.wrap('<div class="owl-video-wrapper"' + g + "></div>"), this._core.settings.lazyLoad && (i = "data-src", j = "owl-lazy"), h.length) return l(h.attr(i)), h.remove(), !1;"youtube" === c.type ? (f = "//img.youtube.com/vi/" + c.id + "/hqdefault.jpg", l(f)) : "vimeo" === c.type ? a.ajax({ type: "GET", url: "//vimeo.com/api/v2/video/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function success(a) {
        f = a[0].thumbnail_large, l(f);
      } }) : "vzaar" === c.type && a.ajax({ type: "GET", url: "//vzaar.com/api/videos/" + c.id + ".json", jsonp: "callback", dataType: "jsonp", success: function success(a) {
        f = a.framegrab_url, l(f);
      } });
  }, e.prototype.stop = function () {
    this._core.trigger("stop", null, "video"), this._playing.find(".owl-video-frame").remove(), this._playing.removeClass("owl-video-playing"), this._playing = null, this._core.leave("playing"), this._core.trigger("stopped", null, "video");
  }, e.prototype.play = function (b) {
    var c,
        d = a(b.target),
        e = d.closest("." + this._core.settings.itemClass),
        f = this._videos[e.attr("data-video")],
        g = f.width || "100%",
        h = f.height || this._core.$stage.height();this._playing || (this._core.enter("playing"), this._core.trigger("play", null, "video"), e = this._core.items(this._core.relative(e.index())), this._core.reset(e.index()), "youtube" === f.type ? c = '<iframe width="' + g + '" height="' + h + '" src="//www.youtube.com/embed/' + f.id + "?autoplay=1&rel=0&v=" + f.id + '" frameborder="0" allowfullscreen></iframe>' : "vimeo" === f.type ? c = '<iframe src="//player.vimeo.com/video/' + f.id + '?autoplay=1" width="' + g + '" height="' + h + '" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>' : "vzaar" === f.type && (c = '<iframe frameborder="0"height="' + h + '"width="' + g + '" allowfullscreen mozallowfullscreen webkitAllowFullScreen src="//view.vzaar.com/' + f.id + '/player?autoplay=true"></iframe>'), a('<div class="owl-video-frame">' + c + "</div>").insertAfter(e.find(".owl-video")), this._playing = e.addClass("owl-video-playing"));
  }, e.prototype.isInFullScreen = function () {
    var b = c.fullscreenElement || c.mozFullScreenElement || c.webkitFullscreenElement;return b && a(b).parent().hasClass("owl-video-frame");
  }, e.prototype.destroy = function () {
    var a, b;this._core.$element.off("click.owl.video");for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Video = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this.core = b, this.core.options = a.extend({}, e.Defaults, this.core.options), this.swapping = !0, this.previous = d, this.next = d, this.handlers = { "change.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && (this.previous = this.core.current(), this.next = a.property.value);
      }, this), "drag.owl.carousel dragged.owl.carousel translated.owl.carousel": a.proxy(function (a) {
        a.namespace && (this.swapping = "translated" == a.type);
      }, this), "translate.owl.carousel": a.proxy(function (a) {
        a.namespace && this.swapping && (this.core.options.animateOut || this.core.options.animateIn) && this.swap();
      }, this) }, this.core.$element.on(this.handlers);
  };e.Defaults = { animateOut: !1, animateIn: !1 }, e.prototype.swap = function () {
    if (1 === this.core.settings.items && a.support.animation && a.support.transition) {
      this.core.speed(0);var b,
          c = a.proxy(this.clear, this),
          d = this.core.$stage.children().eq(this.previous),
          e = this.core.$stage.children().eq(this.next),
          f = this.core.settings.animateIn,
          g = this.core.settings.animateOut;this.core.current() !== this.previous && (g && (b = this.core.coordinates(this.previous) - this.core.coordinates(this.next), d.one(a.support.animation.end, c).css({ left: b + "px" }).addClass("animated owl-animated-out").addClass(g)), f && e.one(a.support.animation.end, c).addClass("animated owl-animated-in").addClass(f));
    }
  }, e.prototype.clear = function (b) {
    a(b.target).css({ left: "" }).removeClass("animated owl-animated-out owl-animated-in").removeClass(this.core.settings.animateIn).removeClass(this.core.settings.animateOut), this.core.onTransitionEnd();
  }, e.prototype.destroy = function () {
    var a, b;for (a in this.handlers) {
      this.core.$element.off(a, this.handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Animate = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  var e = function e(b) {
    this._core = b, this._timeout = null, this._paused = !1, this._handlers = { "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "settings" === a.property.name ? this._core.settings.autoplay ? this.play() : this.stop() : a.namespace && "position" === a.property.name && this._core.settings.autoplay && this._setAutoPlayInterval();
      }, this), "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.autoplay && this.play();
      }, this), "play.owl.autoplay": a.proxy(function (a, b, c) {
        a.namespace && this.play(b, c);
      }, this), "stop.owl.autoplay": a.proxy(function (a) {
        a.namespace && this.stop();
      }, this), "mouseover.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this), "mouseleave.owl.autoplay": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.play();
      }, this), "touchstart.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this._core.is("rotating") && this.pause();
      }, this), "touchend.owl.core": a.proxy(function () {
        this._core.settings.autoplayHoverPause && this.play();
      }, this) }, this._core.$element.on(this._handlers), this._core.options = a.extend({}, e.Defaults, this._core.options);
  };e.Defaults = { autoplay: !1, autoplayTimeout: 5e3, autoplayHoverPause: !1, autoplaySpeed: !1 }, e.prototype.play = function (a, b) {
    this._paused = !1, this._core.is("rotating") || (this._core.enter("rotating"), this._setAutoPlayInterval());
  }, e.prototype._getNextTimeout = function (d, e) {
    return this._timeout && b.clearTimeout(this._timeout), b.setTimeout(a.proxy(function () {
      this._paused || this._core.is("busy") || this._core.is("interacting") || c.hidden || this._core.next(e || this._core.settings.autoplaySpeed);
    }, this), d || this._core.settings.autoplayTimeout);
  }, e.prototype._setAutoPlayInterval = function () {
    this._timeout = this._getNextTimeout();
  }, e.prototype.stop = function () {
    this._core.is("rotating") && (b.clearTimeout(this._timeout), this._core.leave("rotating"));
  }, e.prototype.pause = function () {
    this._core.is("rotating") && (this._paused = !0);
  }, e.prototype.destroy = function () {
    var a, b;this.stop();for (a in this._handlers) {
      this._core.$element.off(a, this._handlers[a]);
    }for (b in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[b] && (this[b] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.autoplay = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  "use strict";
  var e = function e(b) {
    this._core = b, this._initialized = !1, this._pages = [], this._controls = {}, this._templates = [], this.$element = this._core.$element, this._overrides = { next: this._core.next, prev: this._core.prev, to: this._core.to }, this._handlers = { "prepared.owl.carousel": a.proxy(function (b) {
        b.namespace && this._core.settings.dotsData && this._templates.push('<div class="' + this._core.settings.dotClass + '">' + a(b.content).find("[data-dot]").addBack("[data-dot]").attr("data-dot") + "</div>");
      }, this), "added.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 0, this._templates.pop());
      }, this), "remove.owl.carousel": a.proxy(function (a) {
        a.namespace && this._core.settings.dotsData && this._templates.splice(a.position, 1);
      }, this), "changed.owl.carousel": a.proxy(function (a) {
        a.namespace && "position" == a.property.name && this.draw();
      }, this), "initialized.owl.carousel": a.proxy(function (a) {
        a.namespace && !this._initialized && (this._core.trigger("initialize", null, "navigation"), this.initialize(), this.update(), this.draw(), this._initialized = !0, this._core.trigger("initialized", null, "navigation"));
      }, this), "refreshed.owl.carousel": a.proxy(function (a) {
        a.namespace && this._initialized && (this._core.trigger("refresh", null, "navigation"), this.update(), this.draw(), this._core.trigger("refreshed", null, "navigation"));
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers);
  };e.Defaults = { nav: !1, navText: ["prev", "next"], navSpeed: !1, navElement: "div", navContainer: !1, navContainerClass: "owl-nav", navClass: ["owl-prev", "owl-next"], slideBy: 1, dotClass: "owl-dot", dotsClass: "owl-dots", dots: !0, dotsEach: !1, dotsData: !1, dotsSpeed: !1, dotsContainer: !1 }, e.prototype.initialize = function () {
    var b,
        c = this._core.settings;this._controls.$relative = (c.navContainer ? a(c.navContainer) : a("<div>").addClass(c.navContainerClass).appendTo(this.$element)).addClass("disabled"), this._controls.$previous = a("<" + c.navElement + ">").addClass(c.navClass[0]).html(c.navText[0]).prependTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.prev(c.navSpeed);
    }, this)), this._controls.$next = a("<" + c.navElement + ">").addClass(c.navClass[1]).html(c.navText[1]).appendTo(this._controls.$relative).on("click", a.proxy(function (a) {
      this.next(c.navSpeed);
    }, this)), c.dotsData || (this._templates = [a("<div>").addClass(c.dotClass).append(a("<span>")).prop("outerHTML")]), this._controls.$absolute = (c.dotsContainer ? a(c.dotsContainer) : a("<div>").addClass(c.dotsClass).appendTo(this.$element)).addClass("disabled"), this._controls.$absolute.on("click", "div", a.proxy(function (b) {
      var d = a(b.target).parent().is(this._controls.$absolute) ? a(b.target).index() : a(b.target).parent().index();b.preventDefault(), this.to(d, c.dotsSpeed);
    }, this));for (b in this._overrides) {
      this._core[b] = a.proxy(this[b], this);
    }
  }, e.prototype.destroy = function () {
    var a, b, c, d;for (a in this._handlers) {
      this.$element.off(a, this._handlers[a]);
    }for (b in this._controls) {
      this._controls[b].remove();
    }for (d in this.overides) {
      this._core[d] = this._overrides[d];
    }for (c in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[c] && (this[c] = null);
    }
  }, e.prototype.update = function () {
    var a,
        b,
        c,
        d = this._core.clones().length / 2,
        e = d + this._core.items().length,
        f = this._core.maximum(!0),
        g = this._core.settings,
        h = g.center || g.autoWidth || g.dotsData ? 1 : g.dotsEach || g.items;if ("page" !== g.slideBy && (g.slideBy = Math.min(g.slideBy, g.items)), g.dots || "page" == g.slideBy) for (this._pages = [], a = d, b = 0, c = 0; a < e; a++) {
      if (b >= h || 0 === b) {
        if (this._pages.push({ start: Math.min(f, a - d), end: a - d + h - 1 }), Math.min(f, a - d) === f) break;b = 0, ++c;
      }b += this._core.mergers(this._core.relative(a));
    }
  }, e.prototype.draw = function () {
    var b,
        c = this._core.settings,
        d = this._core.items().length <= c.items,
        e = this._core.relative(this._core.current()),
        f = c.loop || c.rewind;this._controls.$relative.toggleClass("disabled", !c.nav || d), c.nav && (this._controls.$previous.toggleClass("disabled", !f && e <= this._core.minimum(!0)), this._controls.$next.toggleClass("disabled", !f && e >= this._core.maximum(!0))), this._controls.$absolute.toggleClass("disabled", !c.dots || d), c.dots && (b = this._pages.length - this._controls.$absolute.children().length, c.dotsData && 0 !== b ? this._controls.$absolute.html(this._templates.join("")) : b > 0 ? this._controls.$absolute.append(new Array(b + 1).join(this._templates[0])) : b < 0 && this._controls.$absolute.children().slice(b).remove(), this._controls.$absolute.find(".active").removeClass("active"), this._controls.$absolute.children().eq(a.inArray(this.current(), this._pages)).addClass("active"));
  }, e.prototype.onTrigger = function (b) {
    var c = this._core.settings;b.page = { index: a.inArray(this.current(), this._pages), count: this._pages.length, size: c && (c.center || c.autoWidth || c.dotsData ? 1 : c.dotsEach || c.items) };
  }, e.prototype.current = function () {
    var b = this._core.relative(this._core.current());return a.grep(this._pages, a.proxy(function (a, c) {
      return a.start <= b && a.end >= b;
    }, this)).pop();
  }, e.prototype.getPosition = function (b) {
    var c,
        d,
        e = this._core.settings;return "page" == e.slideBy ? (c = a.inArray(this.current(), this._pages), d = this._pages.length, b ? ++c : --c, c = this._pages[(c % d + d) % d].start) : (c = this._core.relative(this._core.current()), d = this._core.items().length, b ? c += e.slideBy : c -= e.slideBy), c;
  }, e.prototype.next = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!0), b);
  }, e.prototype.prev = function (b) {
    a.proxy(this._overrides.to, this._core)(this.getPosition(!1), b);
  }, e.prototype.to = function (b, c, d) {
    var e;!d && this._pages.length ? (e = this._pages.length, a.proxy(this._overrides.to, this._core)(this._pages[(b % e + e) % e].start, c)) : a.proxy(this._overrides.to, this._core)(b, c);
  }, a.fn.owlCarousel.Constructor.Plugins.Navigation = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  "use strict";
  var e = function e(c) {
    this._core = c, this._hashes = {}, this.$element = this._core.$element, this._handlers = { "initialized.owl.carousel": a.proxy(function (c) {
        c.namespace && "URLHash" === this._core.settings.startPosition && a(b).trigger("hashchange.owl.navigation");
      }, this), "prepared.owl.carousel": a.proxy(function (b) {
        if (b.namespace) {
          var c = a(b.content).find("[data-hash]").addBack("[data-hash]").attr("data-hash");if (!c) return;this._hashes[c] = b.content;
        }
      }, this), "changed.owl.carousel": a.proxy(function (c) {
        if (c.namespace && "position" === c.property.name) {
          var d = this._core.items(this._core.relative(this._core.current())),
              e = a.map(this._hashes, function (a, b) {
            return a === d ? b : null;
          }).join();if (!e || b.location.hash.slice(1) === e) return;b.location.hash = e;
        }
      }, this) }, this._core.options = a.extend({}, e.Defaults, this._core.options), this.$element.on(this._handlers), a(b).on("hashchange.owl.navigation", a.proxy(function (a) {
      var c = b.location.hash.substring(1),
          e = this._core.$stage.children(),
          f = this._hashes[c] && e.index(this._hashes[c]);f !== d && f !== this._core.current() && this._core.to(this._core.relative(f), !1, !0);
    }, this));
  };e.Defaults = { URLhashListener: !1 }, e.prototype.destroy = function () {
    var c, d;a(b).off("hashchange.owl.navigation");for (c in this._handlers) {
      this._core.$element.off(c, this._handlers[c]);
    }for (d in Object.getOwnPropertyNames(this)) {
      "function" != typeof this[d] && (this[d] = null);
    }
  }, a.fn.owlCarousel.Constructor.Plugins.Hash = e;
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document), function (a, b, c, d) {
  function e(b, c) {
    var e = !1,
        f = b.charAt(0).toUpperCase() + b.slice(1);return a.each((b + " " + h.join(f + " ") + f).split(" "), function (a, b) {
      if (g[b] !== d) return e = !c || b, !1;
    }), e;
  }function f(a) {
    return e(a, !0);
  }var g = a("<support>").get(0).style,
      h = "Webkit Moz O ms".split(" "),
      i = { transition: { end: { WebkitTransition: "webkitTransitionEnd", MozTransition: "transitionend", OTransition: "oTransitionEnd", transition: "transitionend" } }, animation: { end: { WebkitAnimation: "webkitAnimationEnd", MozAnimation: "animationend", OAnimation: "oAnimationEnd", animation: "animationend" } } },
      j = { csstransforms: function csstransforms() {
      return !!e("transform");
    }, csstransforms3d: function csstransforms3d() {
      return !!e("perspective");
    }, csstransitions: function csstransitions() {
      return !!e("transition");
    }, cssanimations: function cssanimations() {
      return !!e("animation");
    } };j.csstransitions() && (a.support.transition = new String(f("transition")), a.support.transition.end = i.transition.end[a.support.transition]), j.cssanimations() && (a.support.animation = new String(f("animation")), a.support.animation.end = i.animation.end[a.support.animation]), j.csstransforms() && (a.support.transform = new String(f("transform")), a.support.transform3d = j.csstransforms3d());
}(window.Zepto || __webpack_provided_window_dot_jQuery, window, document);
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js"), __webpack_require__(/*! jquery */ "./node_modules/jquery/dist/jquery.js")))

/***/ }),

/***/ "./assets/js/popper.min.js":
/*!*********************************!*\
  !*** ./assets/js/popper.min.js ***!
  \*********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

/* WEBPACK VAR INJECTION */(function(global) {var __WEBPACK_AMD_DEFINE_FACTORY__, __WEBPACK_AMD_DEFINE_RESULT__;var _typeof = typeof Symbol === "function" && typeof Symbol.iterator === "symbol" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; };

/*
 Copyright (C) Federico Zivolo 2017
 Distributed under the MIT License (license terms are at http://opensource.org/licenses/MIT).
 */
(function (e, t) {
  'object' == ( false ? 'undefined' : _typeof(exports)) && 'undefined' != typeof module ? module.exports = t() :  true ? !(__WEBPACK_AMD_DEFINE_FACTORY__ = (t),
				__WEBPACK_AMD_DEFINE_RESULT__ = (typeof __WEBPACK_AMD_DEFINE_FACTORY__ === 'function' ?
				(__WEBPACK_AMD_DEFINE_FACTORY__.call(exports, __webpack_require__, exports, module)) :
				__WEBPACK_AMD_DEFINE_FACTORY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__)) : e.Popper = t();
})(this, function () {
  'use strict';
  function e(e) {
    return e && '[object Function]' === {}.toString.call(e);
  }function t(e, t) {
    if (1 !== e.nodeType) return [];var o = window.getComputedStyle(e, null);return t ? o[t] : o;
  }function o(e) {
    return 'HTML' === e.nodeName ? e : e.parentNode || e.host;
  }function n(e) {
    if (!e || -1 !== ['HTML', 'BODY', '#document'].indexOf(e.nodeName)) return window.document.body;var i = t(e),
        r = i.overflow,
        p = i.overflowX,
        s = i.overflowY;return (/(auto|scroll)/.test(r + s + p) ? e : n(o(e))
    );
  }function r(e) {
    var o = e && e.offsetParent,
        i = o && o.nodeName;return i && 'BODY' !== i && 'HTML' !== i ? -1 !== ['TD', 'TABLE'].indexOf(o.nodeName) && 'static' === t(o, 'position') ? r(o) : o : window.document.documentElement;
  }function p(e) {
    var t = e.nodeName;return 'BODY' !== t && ('HTML' === t || r(e.firstElementChild) === e);
  }function s(e) {
    return null === e.parentNode ? e : s(e.parentNode);
  }function d(e, t) {
    if (!e || !e.nodeType || !t || !t.nodeType) return window.document.documentElement;var o = e.compareDocumentPosition(t) & Node.DOCUMENT_POSITION_FOLLOWING,
        i = o ? e : t,
        n = o ? t : e,
        a = document.createRange();a.setStart(i, 0), a.setEnd(n, 0);var l = a.commonAncestorContainer;if (e !== l && t !== l || i.contains(n)) return p(l) ? l : r(l);var f = s(e);return f.host ? d(f.host, t) : d(e, s(t).host);
  }function a(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] ? arguments[1] : 'top',
        o = 'top' === t ? 'scrollTop' : 'scrollLeft',
        i = e.nodeName;if ('BODY' === i || 'HTML' === i) {
      var n = window.document.documentElement,
          r = window.document.scrollingElement || n;return r[o];
    }return e[o];
  }function l(e, t) {
    var o = 2 < arguments.length && void 0 !== arguments[2] && arguments[2],
        i = a(t, 'top'),
        n = a(t, 'left'),
        r = o ? -1 : 1;return e.top += i * r, e.bottom += i * r, e.left += n * r, e.right += n * r, e;
  }function f(e, t) {
    var o = 'x' === t ? 'Left' : 'Top',
        i = 'Left' == o ? 'Right' : 'Bottom';return +e['border' + o + 'Width'].split('px')[0] + +e['border' + i + 'Width'].split('px')[0];
  }function m(e, t, o, i) {
    return X(t['offset' + e], t['scroll' + e], o['client' + e], o['offset' + e], o['scroll' + e], ne() ? o['offset' + e] + i['margin' + ('Height' === e ? 'Top' : 'Left')] + i['margin' + ('Height' === e ? 'Bottom' : 'Right')] : 0);
  }function c() {
    var e = window.document.body,
        t = window.document.documentElement,
        o = ne() && window.getComputedStyle(t);return { height: m('Height', e, t, o), width: m('Width', e, t, o) };
  }function h(e) {
    return de({}, e, { right: e.left + e.width, bottom: e.top + e.height });
  }function g(e) {
    var o = {};if (ne()) try {
      o = e.getBoundingClientRect();var i = a(e, 'top'),
          n = a(e, 'left');o.top += i, o.left += n, o.bottom += i, o.right += n;
    } catch (e) {} else o = e.getBoundingClientRect();var r = { left: o.left, top: o.top, width: o.right - o.left, height: o.bottom - o.top },
        p = 'HTML' === e.nodeName ? c() : {},
        s = p.width || e.clientWidth || r.right - r.left,
        d = p.height || e.clientHeight || r.bottom - r.top,
        l = e.offsetWidth - s,
        m = e.offsetHeight - d;if (l || m) {
      var g = t(e);l -= f(g, 'x'), m -= f(g, 'y'), r.width -= l, r.height -= m;
    }return h(r);
  }function u(e, o) {
    var i = ne(),
        r = 'HTML' === o.nodeName,
        p = g(e),
        s = g(o),
        d = n(e),
        a = t(o),
        f = +a.borderTopWidth.split('px')[0],
        m = +a.borderLeftWidth.split('px')[0],
        c = h({ top: p.top - s.top - f, left: p.left - s.left - m, width: p.width, height: p.height });if (c.marginTop = 0, c.marginLeft = 0, !i && r) {
      var u = +a.marginTop.split('px')[0],
          b = +a.marginLeft.split('px')[0];c.top -= f - u, c.bottom -= f - u, c.left -= m - b, c.right -= m - b, c.marginTop = u, c.marginLeft = b;
    }return (i ? o.contains(d) : o === d && 'BODY' !== d.nodeName) && (c = l(c, o)), c;
  }function b(e) {
    var t = window.document.documentElement,
        o = u(e, t),
        i = X(t.clientWidth, window.innerWidth || 0),
        n = X(t.clientHeight, window.innerHeight || 0),
        r = a(t),
        p = a(t, 'left'),
        s = { top: r - o.top + o.marginTop, left: p - o.left + o.marginLeft, width: i, height: n };return h(s);
  }function y(e) {
    var i = e.nodeName;return 'BODY' === i || 'HTML' === i ? !1 : 'fixed' === t(e, 'position') || y(o(e));
  }function w(e, t, i, r) {
    var p = { top: 0, left: 0 },
        s = d(e, t);if ('viewport' === r) p = b(s);else {
      var a;'scrollParent' === r ? (a = n(o(e)), 'BODY' === a.nodeName && (a = window.document.documentElement)) : 'window' === r ? a = window.document.documentElement : a = r;var l = u(a, s);if ('HTML' === a.nodeName && !y(s)) {
        var f = c(),
            m = f.height,
            h = f.width;p.top += l.top - l.marginTop, p.bottom = m + l.top, p.left += l.left - l.marginLeft, p.right = h + l.left;
      } else p = l;
    }return p.left += i, p.top += i, p.right -= i, p.bottom -= i, p;
  }function E(e) {
    var t = e.width,
        o = e.height;return t * o;
  }function v(e, t, o, i, n) {
    var r = 5 < arguments.length && void 0 !== arguments[5] ? arguments[5] : 0;if (-1 === e.indexOf('auto')) return e;var p = w(o, i, r, n),
        s = { top: { width: p.width, height: t.top - p.top }, right: { width: p.right - t.right, height: p.height }, bottom: { width: p.width, height: p.bottom - t.bottom }, left: { width: t.left - p.left, height: p.height } },
        d = Object.keys(s).map(function (e) {
      return de({ key: e }, s[e], { area: E(s[e]) });
    }).sort(function (e, t) {
      return t.area - e.area;
    }),
        a = d.filter(function (e) {
      var t = e.width,
          i = e.height;return t >= o.clientWidth && i >= o.clientHeight;
    }),
        l = 0 < a.length ? a[0].key : d[0].key,
        f = e.split('-')[1];return l + (f ? '-' + f : '');
  }function x(e, t, o) {
    var i = d(t, o);return u(o, i);
  }function O(e) {
    var t = window.getComputedStyle(e),
        o = parseFloat(t.marginTop) + parseFloat(t.marginBottom),
        i = parseFloat(t.marginLeft) + parseFloat(t.marginRight),
        n = { width: e.offsetWidth + i, height: e.offsetHeight + o };return n;
  }function L(e) {
    var t = { left: 'right', right: 'left', bottom: 'top', top: 'bottom' };return e.replace(/left|right|bottom|top/g, function (e) {
      return t[e];
    });
  }function S(e, t, o) {
    o = o.split('-')[0];var i = O(e),
        n = { width: i.width, height: i.height },
        r = -1 !== ['right', 'left'].indexOf(o),
        p = r ? 'top' : 'left',
        s = r ? 'left' : 'top',
        d = r ? 'height' : 'width',
        a = r ? 'width' : 'height';return n[p] = t[p] + t[d] / 2 - i[d] / 2, n[s] = o === s ? t[s] - i[a] : t[L(s)], n;
  }function T(e, t) {
    return Array.prototype.find ? e.find(t) : e.filter(t)[0];
  }function C(e, t, o) {
    if (Array.prototype.findIndex) return e.findIndex(function (e) {
      return e[t] === o;
    });var i = T(e, function (e) {
      return e[t] === o;
    });return e.indexOf(i);
  }function N(t, o, i) {
    var n = void 0 === i ? t : t.slice(0, C(t, 'name', i));return n.forEach(function (t) {
      t.function && console.warn('`modifier.function` is deprecated, use `modifier.fn`!');var i = t.function || t.fn;t.enabled && e(i) && (o.offsets.popper = h(o.offsets.popper), o.offsets.reference = h(o.offsets.reference), o = i(o, t));
    }), o;
  }function k() {
    if (!this.state.isDestroyed) {
      var e = { instance: this, styles: {}, arrowStyles: {}, attributes: {}, flipped: !1, offsets: {} };e.offsets.reference = x(this.state, this.popper, this.reference), e.placement = v(this.options.placement, e.offsets.reference, this.popper, this.reference, this.options.modifiers.flip.boundariesElement, this.options.modifiers.flip.padding), e.originalPlacement = e.placement, e.offsets.popper = S(this.popper, e.offsets.reference, e.placement), e.offsets.popper.position = 'absolute', e = N(this.modifiers, e), this.state.isCreated ? this.options.onUpdate(e) : (this.state.isCreated = !0, this.options.onCreate(e));
    }
  }function W(e, t) {
    return e.some(function (e) {
      var o = e.name,
          i = e.enabled;return i && o === t;
    });
  }function B(e) {
    for (var t = [!1, 'ms', 'Webkit', 'Moz', 'O'], o = e.charAt(0).toUpperCase() + e.slice(1), n = 0; n < t.length - 1; n++) {
      var i = t[n],
          r = i ? '' + i + o : e;if ('undefined' != typeof window.document.body.style[r]) return r;
    }return null;
  }function P() {
    return this.state.isDestroyed = !0, W(this.modifiers, 'applyStyle') && (this.popper.removeAttribute('x-placement'), this.popper.style.left = '', this.popper.style.position = '', this.popper.style.top = '', this.popper.style[B('transform')] = ''), this.disableEventListeners(), this.options.removeOnDestroy && this.popper.parentNode.removeChild(this.popper), this;
  }function D(e, t, o, i) {
    var r = 'BODY' === e.nodeName,
        p = r ? window : e;p.addEventListener(t, o, { passive: !0 }), r || D(n(p.parentNode), t, o, i), i.push(p);
  }function H(e, t, o, i) {
    o.updateBound = i, window.addEventListener('resize', o.updateBound, { passive: !0 });var r = n(e);return D(r, 'scroll', o.updateBound, o.scrollParents), o.scrollElement = r, o.eventsEnabled = !0, o;
  }function A() {
    this.state.eventsEnabled || (this.state = H(this.reference, this.options, this.state, this.scheduleUpdate));
  }function M(e, t) {
    return window.removeEventListener('resize', t.updateBound), t.scrollParents.forEach(function (e) {
      e.removeEventListener('scroll', t.updateBound);
    }), t.updateBound = null, t.scrollParents = [], t.scrollElement = null, t.eventsEnabled = !1, t;
  }function I() {
    this.state.eventsEnabled && (window.cancelAnimationFrame(this.scheduleUpdate), this.state = M(this.reference, this.state));
  }function R(e) {
    return '' !== e && !isNaN(parseFloat(e)) && isFinite(e);
  }function U(e, t) {
    Object.keys(t).forEach(function (o) {
      var i = '';-1 !== ['width', 'height', 'top', 'right', 'bottom', 'left'].indexOf(o) && R(t[o]) && (i = 'px'), e.style[o] = t[o] + i;
    });
  }function Y(e, t) {
    Object.keys(t).forEach(function (o) {
      var i = t[o];!1 === i ? e.removeAttribute(o) : e.setAttribute(o, t[o]);
    });
  }function F(e, t, o) {
    var i = T(e, function (e) {
      var o = e.name;return o === t;
    }),
        n = !!i && e.some(function (e) {
      return e.name === o && e.enabled && e.order < i.order;
    });if (!n) {
      var r = '`' + t + '`';console.warn('`' + o + '`' + ' modifier is required by ' + r + ' modifier in order to work, be sure to include it before ' + r + '!');
    }return n;
  }function j(e) {
    return 'end' === e ? 'start' : 'start' === e ? 'end' : e;
  }function K(e) {
    var t = 1 < arguments.length && void 0 !== arguments[1] && arguments[1],
        o = le.indexOf(e),
        i = le.slice(o + 1).concat(le.slice(0, o));return t ? i.reverse() : i;
  }function q(e, t, o, i) {
    var n = e.match(/((?:\-|\+)?\d*\.?\d*)(.*)/),
        r = +n[1],
        p = n[2];if (!r) return e;if (0 === p.indexOf('%')) {
      var s;switch (p) {case '%p':
          s = o;break;case '%':case '%r':default:
          s = i;}var d = h(s);return d[t] / 100 * r;
    }if ('vh' === p || 'vw' === p) {
      var a;return a = 'vh' === p ? X(document.documentElement.clientHeight, window.innerHeight || 0) : X(document.documentElement.clientWidth, window.innerWidth || 0), a / 100 * r;
    }return r;
  }function G(e, t, o, i) {
    var n = [0, 0],
        r = -1 !== ['right', 'left'].indexOf(i),
        p = e.split(/(\+|\-)/).map(function (e) {
      return e.trim();
    }),
        s = p.indexOf(T(p, function (e) {
      return -1 !== e.search(/,|\s/);
    }));p[s] && -1 === p[s].indexOf(',') && console.warn('Offsets separated by white space(s) are deprecated, use a comma (,) instead.');var d = /\s*,\s*|\s+/,
        a = -1 === s ? [p] : [p.slice(0, s).concat([p[s].split(d)[0]]), [p[s].split(d)[1]].concat(p.slice(s + 1))];return a = a.map(function (e, i) {
      var n = (1 === i ? !r : r) ? 'height' : 'width',
          p = !1;return e.reduce(function (e, t) {
        return '' === e[e.length - 1] && -1 !== ['+', '-'].indexOf(t) ? (e[e.length - 1] = t, p = !0, e) : p ? (e[e.length - 1] += t, p = !1, e) : e.concat(t);
      }, []).map(function (e) {
        return q(e, n, t, o);
      });
    }), a.forEach(function (e, t) {
      e.forEach(function (o, i) {
        R(o) && (n[t] += o * ('-' === e[i - 1] ? -1 : 1));
      });
    }), n;
  }function z(e, t) {
    var o,
        i = t.offset,
        n = e.placement,
        r = e.offsets,
        p = r.popper,
        s = r.reference,
        d = n.split('-')[0];return o = R(+i) ? [+i, 0] : G(i, p, s, d), 'left' === d ? (p.top += o[0], p.left -= o[1]) : 'right' === d ? (p.top += o[0], p.left += o[1]) : 'top' === d ? (p.left += o[0], p.top -= o[1]) : 'bottom' === d && (p.left += o[0], p.top += o[1]), e.popper = p, e;
  }for (var V = Math.min, _ = Math.floor, X = Math.max, Q = ['native code', '[object MutationObserverConstructor]'], J = function J(e) {
    return Q.some(function (t) {
      return -1 < (e || '').toString().indexOf(t);
    });
  }, Z = 'undefined' != typeof window, $ = ['Edge', 'Trident', 'Firefox'], ee = 0, te = 0; te < $.length; te += 1) {
    if (Z && 0 <= navigator.userAgent.indexOf($[te])) {
      ee = 1;break;
    }
  }var i,
      oe = Z && J(window.MutationObserver),
      ie = oe ? function (e) {
    var t = !1,
        o = 0,
        i = document.createElement('span'),
        n = new MutationObserver(function () {
      e(), t = !1;
    });return n.observe(i, { attributes: !0 }), function () {
      t || (t = !0, i.setAttribute('x-index', o), ++o);
    };
  } : function (e) {
    var t = !1;return function () {
      t || (t = !0, setTimeout(function () {
        t = !1, e();
      }, ee));
    };
  },
      ne = function ne() {
    return void 0 == i && (i = -1 !== navigator.appVersion.indexOf('MSIE 10')), i;
  },
      re = function re(e, t) {
    if (!(e instanceof t)) throw new TypeError('Cannot call a class as a function');
  },
      pe = function () {
    function e(e, t) {
      for (var o, n = 0; n < t.length; n++) {
        o = t[n], o.enumerable = o.enumerable || !1, o.configurable = !0, 'value' in o && (o.writable = !0), Object.defineProperty(e, o.key, o);
      }
    }return function (t, o, i) {
      return o && e(t.prototype, o), i && e(t, i), t;
    };
  }(),
      se = function se(e, t, o) {
    return t in e ? Object.defineProperty(e, t, { value: o, enumerable: !0, configurable: !0, writable: !0 }) : e[t] = o, e;
  },
      de = Object.assign || function (e) {
    for (var t, o = 1; o < arguments.length; o++) {
      for (var i in t = arguments[o], t) {
        Object.prototype.hasOwnProperty.call(t, i) && (e[i] = t[i]);
      }
    }return e;
  },
      ae = ['auto-start', 'auto', 'auto-end', 'top-start', 'top', 'top-end', 'right-start', 'right', 'right-end', 'bottom-end', 'bottom', 'bottom-start', 'left-end', 'left', 'left-start'],
      le = ae.slice(3),
      fe = { FLIP: 'flip', CLOCKWISE: 'clockwise', COUNTERCLOCKWISE: 'counterclockwise' },
      me = function () {
    function t(o, i) {
      var n = this,
          r = 2 < arguments.length && void 0 !== arguments[2] ? arguments[2] : {};re(this, t), this.scheduleUpdate = function () {
        return requestAnimationFrame(n.update);
      }, this.update = ie(this.update.bind(this)), this.options = de({}, t.Defaults, r), this.state = { isDestroyed: !1, isCreated: !1, scrollParents: [] }, this.reference = o.jquery ? o[0] : o, this.popper = i.jquery ? i[0] : i, this.options.modifiers = {}, Object.keys(de({}, t.Defaults.modifiers, r.modifiers)).forEach(function (e) {
        n.options.modifiers[e] = de({}, t.Defaults.modifiers[e] || {}, r.modifiers ? r.modifiers[e] : {});
      }), this.modifiers = Object.keys(this.options.modifiers).map(function (e) {
        return de({ name: e }, n.options.modifiers[e]);
      }).sort(function (e, t) {
        return e.order - t.order;
      }), this.modifiers.forEach(function (t) {
        t.enabled && e(t.onLoad) && t.onLoad(n.reference, n.popper, n.options, t, n.state);
      }), this.update();var p = this.options.eventsEnabled;p && this.enableEventListeners(), this.state.eventsEnabled = p;
    }return pe(t, [{ key: 'update', value: function value() {
        return k.call(this);
      } }, { key: 'destroy', value: function value() {
        return P.call(this);
      } }, { key: 'enableEventListeners', value: function value() {
        return A.call(this);
      } }, { key: 'disableEventListeners', value: function value() {
        return I.call(this);
      } }]), t;
  }();return me.Utils = ('undefined' == typeof window ? global : window).PopperUtils, me.placements = ae, me.Defaults = { placement: 'bottom', eventsEnabled: !0, removeOnDestroy: !1, onCreate: function onCreate() {}, onUpdate: function onUpdate() {}, modifiers: { shift: { order: 100, enabled: !0, fn: function fn(e) {
          var t = e.placement,
              o = t.split('-')[0],
              i = t.split('-')[1];if (i) {
            var n = e.offsets,
                r = n.reference,
                p = n.popper,
                s = -1 !== ['bottom', 'top'].indexOf(o),
                d = s ? 'left' : 'top',
                a = s ? 'width' : 'height',
                l = { start: se({}, d, r[d]), end: se({}, d, r[d] + r[a] - p[a]) };e.offsets.popper = de({}, p, l[i]);
          }return e;
        } }, offset: { order: 200, enabled: !0, fn: z, offset: 0 }, preventOverflow: { order: 300, enabled: !0, fn: function fn(e, t) {
          var o = t.boundariesElement || r(e.instance.popper);e.instance.reference === o && (o = r(o));var i = w(e.instance.popper, e.instance.reference, t.padding, o);t.boundaries = i;var n = t.priority,
              p = e.offsets.popper,
              s = { primary: function primary(e) {
              var o = p[e];return p[e] < i[e] && !t.escapeWithReference && (o = X(p[e], i[e])), se({}, e, o);
            }, secondary: function secondary(e) {
              var o = 'right' === e ? 'left' : 'top',
                  n = p[o];return p[e] > i[e] && !t.escapeWithReference && (n = V(p[o], i[e] - ('right' === e ? p.width : p.height))), se({}, o, n);
            } };return n.forEach(function (e) {
            var t = -1 === ['left', 'top'].indexOf(e) ? 'secondary' : 'primary';p = de({}, p, s[t](e));
          }), e.offsets.popper = p, e;
        }, priority: ['left', 'right', 'top', 'bottom'], padding: 5, boundariesElement: 'scrollParent' }, keepTogether: { order: 400, enabled: !0, fn: function fn(e) {
          var t = e.offsets,
              o = t.popper,
              i = t.reference,
              n = e.placement.split('-')[0],
              r = _,
              p = -1 !== ['top', 'bottom'].indexOf(n),
              s = p ? 'right' : 'bottom',
              d = p ? 'left' : 'top',
              a = p ? 'width' : 'height';return o[s] < r(i[d]) && (e.offsets.popper[d] = r(i[d]) - o[a]), o[d] > r(i[s]) && (e.offsets.popper[d] = r(i[s])), e;
        } }, arrow: { order: 500, enabled: !0, fn: function fn(e, o) {
          if (!F(e.instance.modifiers, 'arrow', 'keepTogether')) return e;var i = o.element;if ('string' == typeof i) {
            if (i = e.instance.popper.querySelector(i), !i) return e;
          } else if (!e.instance.popper.contains(i)) return console.warn('WARNING: `arrow.element` must be child of its popper element!'), e;var n = e.placement.split('-')[0],
              r = e.offsets,
              p = r.popper,
              s = r.reference,
              d = -1 !== ['left', 'right'].indexOf(n),
              a = d ? 'height' : 'width',
              l = d ? 'Top' : 'Left',
              f = l.toLowerCase(),
              m = d ? 'left' : 'top',
              c = d ? 'bottom' : 'right',
              g = O(i)[a];s[c] - g < p[f] && (e.offsets.popper[f] -= p[f] - (s[c] - g)), s[f] + g > p[c] && (e.offsets.popper[f] += s[f] + g - p[c]);var u = s[f] + s[a] / 2 - g / 2,
              b = t(e.instance.popper, 'margin' + l).replace('px', ''),
              y = u - h(e.offsets.popper)[f] - b;return y = X(V(p[a] - g, y), 0), e.arrowElement = i, e.offsets.arrow = {}, e.offsets.arrow[f] = Math.round(y), e.offsets.arrow[m] = '', e;
        }, element: '[x-arrow]' }, flip: { order: 600, enabled: !0, fn: function fn(e, t) {
          if (W(e.instance.modifiers, 'inner')) return e;if (e.flipped && e.placement === e.originalPlacement) return e;var o = w(e.instance.popper, e.instance.reference, t.padding, t.boundariesElement),
              i = e.placement.split('-')[0],
              n = L(i),
              r = e.placement.split('-')[1] || '',
              p = [];switch (t.behavior) {case fe.FLIP:
              p = [i, n];break;case fe.CLOCKWISE:
              p = K(i);break;case fe.COUNTERCLOCKWISE:
              p = K(i, !0);break;default:
              p = t.behavior;}return p.forEach(function (s, d) {
            if (i !== s || p.length === d + 1) return e;i = e.placement.split('-')[0], n = L(i);var a = e.offsets.popper,
                l = e.offsets.reference,
                f = _,
                m = 'left' === i && f(a.right) > f(l.left) || 'right' === i && f(a.left) < f(l.right) || 'top' === i && f(a.bottom) > f(l.top) || 'bottom' === i && f(a.top) < f(l.bottom),
                c = f(a.left) < f(o.left),
                h = f(a.right) > f(o.right),
                g = f(a.top) < f(o.top),
                u = f(a.bottom) > f(o.bottom),
                b = 'left' === i && c || 'right' === i && h || 'top' === i && g || 'bottom' === i && u,
                y = -1 !== ['top', 'bottom'].indexOf(i),
                w = !!t.flipVariations && (y && 'start' === r && c || y && 'end' === r && h || !y && 'start' === r && g || !y && 'end' === r && u);(m || b || w) && (e.flipped = !0, (m || b) && (i = p[d + 1]), w && (r = j(r)), e.placement = i + (r ? '-' + r : ''), e.offsets.popper = de({}, e.offsets.popper, S(e.instance.popper, e.offsets.reference, e.placement)), e = N(e.instance.modifiers, e, 'flip'));
          }), e;
        }, behavior: 'flip', padding: 5, boundariesElement: 'viewport' }, inner: { order: 700, enabled: !1, fn: function fn(e) {
          var t = e.placement,
              o = t.split('-')[0],
              i = e.offsets,
              n = i.popper,
              r = i.reference,
              p = -1 !== ['left', 'right'].indexOf(o),
              s = -1 === ['top', 'left'].indexOf(o);return n[p ? 'left' : 'top'] = r[o] - (s ? n[p ? 'width' : 'height'] : 0), e.placement = L(t), e.offsets.popper = h(n), e;
        } }, hide: { order: 800, enabled: !0, fn: function fn(e) {
          if (!F(e.instance.modifiers, 'hide', 'preventOverflow')) return e;var t = e.offsets.reference,
              o = T(e.instance.modifiers, function (e) {
            return 'preventOverflow' === e.name;
          }).boundaries;if (t.bottom < o.top || t.left > o.right || t.top > o.bottom || t.right < o.left) {
            if (!0 === e.hide) return e;e.hide = !0, e.attributes['x-out-of-boundaries'] = '';
          } else {
            if (!1 === e.hide) return e;e.hide = !1, e.attributes['x-out-of-boundaries'] = !1;
          }return e;
        } }, computeStyle: { order: 850, enabled: !0, fn: function fn(e, t) {
          var o = t.x,
              i = t.y,
              n = e.offsets.popper,
              p = T(e.instance.modifiers, function (e) {
            return 'applyStyle' === e.name;
          }).gpuAcceleration;void 0 !== p && console.warn('WARNING: `gpuAcceleration` option moved to `computeStyle` modifier and will not be supported in future versions of Popper.js!');var s,
              d,
              a = void 0 === p ? t.gpuAcceleration : p,
              l = r(e.instance.popper),
              f = g(l),
              m = { position: n.position },
              c = { left: _(n.left), top: _(n.top), bottom: _(n.bottom), right: _(n.right) },
              h = 'bottom' === o ? 'top' : 'bottom',
              u = 'right' === i ? 'left' : 'right',
              b = B('transform');if (d = 'bottom' == h ? -f.height + c.bottom : c.top, s = 'right' == u ? -f.width + c.right : c.left, a && b) m[b] = 'translate3d(' + s + 'px, ' + d + 'px, 0)', m[h] = 0, m[u] = 0, m.willChange = 'transform';else {
            var y = 'bottom' == h ? -1 : 1,
                w = 'right' == u ? -1 : 1;m[h] = d * y, m[u] = s * w, m.willChange = h + ', ' + u;
          }var E = { "x-placement": e.placement };return e.attributes = de({}, E, e.attributes), e.styles = de({}, m, e.styles), e.arrowStyles = de({}, e.offsets.arrow, e.arrowStyles), e;
        }, gpuAcceleration: !0, x: 'bottom', y: 'right' }, applyStyle: { order: 900, enabled: !0, fn: function fn(e) {
          return U(e.instance.popper, e.styles), Y(e.instance.popper, e.attributes), e.arrowElement && Object.keys(e.arrowStyles).length && U(e.arrowElement, e.arrowStyles), e;
        }, onLoad: function onLoad(e, t, o, i, n) {
          var r = x(n, t, e),
              p = v(o.placement, r, t, e, o.modifiers.flip.boundariesElement, o.modifiers.flip.padding);return t.setAttribute('x-placement', p), U(t, { position: 'absolute' }), o;
        }, gpuAcceleration: void 0 } } }, me;
});
//# sourceMappingURL=popper.min.js.map
/* WEBPACK VAR INJECTION */}.call(exports, __webpack_require__(/*! ./../../node_modules/webpack/buildin/global.js */ "./node_modules/webpack/buildin/global.js")))

/***/ }),

/***/ "./assets/js/prefixfree.min.js":
/*!*************************************!*\
  !*** ./assets/js/prefixfree.min.js ***!
  \*************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

/**
 * StyleFix 1.0.3 & PrefixFree 1.0.7
 * @author Lea Verou
 * MIT license
 */
(function () {
	function t(e, t) {
		return [].slice.call((t || document).querySelectorAll(e));
	}
	if (!window.addEventListener) return;
	var e = window.StyleFix = {
		link: function link(t) {
			try {
				if (t.rel !== "stylesheet" || t.hasAttribute("data-noprefix")) return;
			} catch (n) {
				return;
			}
			var r = t.href || t.getAttribute("data-href"),
			    i = r.replace(/[^\/]+$/, ""),
			    s = t.parentNode,
			    o = new XMLHttpRequest(),
			    u;
			o.onreadystatechange = function () {
				o.readyState === 4 && u();
			};
			u = function u() {
				var n = o.responseText;
				if (n && t.parentNode && (!o.status || o.status < 400 || o.status > 600)) {
					n = e.fix(n, !0, t);
					if (i) {
						n = n.replace(/url\(\s*?((?:"|')?)(.+?)\1\s*?\)/gi, function (e, t, n) {
							return (/^([a-z]{3,10}:|\/|#)/i.test(n) ? e : 'url("' + i + n + '")'
							);
						});
						var r = i.replace(/([\\\^\$*+[\]?{}.=!:(|)])/g, "\\$1");
						n = n.replace(RegExp("\\b(behavior:\\s*?url\\('?\"?)" + r, "gi"), "$1");
					}
					var u = document.createElement("style");
					u.textContent = n;
					u.media = t.media;
					u.disabled = t.disabled;
					u.setAttribute("data-href", t.getAttribute("href"));
					s.insertBefore(u, t);
					s.removeChild(t);
					u.media = t.media;
				}
			};
			try {
				o.open("GET", r);
				o.send(null);
			} catch (n) {
				if (typeof XDomainRequest != "undefined") {
					o = new XDomainRequest();
					o.onerror = o.onprogress = function () {};
					o.onload = u;
					o.open("GET", r);
					o.send(null);
				}
			}
			t.setAttribute("data-inprogress", "");
		},
		styleElement: function styleElement(t) {
			if (t.hasAttribute("data-noprefix")) return;
			var n = t.disabled;
			t.textContent = e.fix(t.textContent, !0, t);
			t.disabled = n;
		},
		styleAttribute: function styleAttribute(t) {
			var n = t.getAttribute("style");
			n = e.fix(n, !1, t);
			t.setAttribute("style", n);
		},
		process: function process() {
			t('link[rel="stylesheet"]:not([data-inprogress])').forEach(StyleFix.link);
			t("style").forEach(StyleFix.styleElement);
			t("[style]").forEach(StyleFix.styleAttribute);
		},
		register: function register(t, n) {
			(e.fixers = e.fixers || []).splice(n === undefined ? e.fixers.length : n, 0, t);
		},
		fix: function fix(t, n, r) {
			for (var i = 0; i < e.fixers.length; i++) {
				t = e.fixers[i](t, n, r) || t;
			}return t;
		},
		camelCase: function camelCase(e) {
			return e.replace(/-([a-z])/g, function (e, t) {
				return t.toUpperCase();
			}).replace("-", "");
		},
		deCamelCase: function deCamelCase(e) {
			return e.replace(/[A-Z]/g, function (e) {
				return "-" + e.toLowerCase();
			});
		}
	};
	(function () {
		setTimeout(function () {
			t('link[rel="stylesheet"]').forEach(StyleFix.link);
		}, 10);
		document.addEventListener("DOMContentLoaded", StyleFix.process, !1);
	})();
})();
(function (e) {
	function t(e, t, r, i, s) {
		e = n[e];
		if (e.length) {
			var o = RegExp(t + "(" + e.join("|") + ")" + r, "gi");
			s = s.replace(o, i);
		}
		return s;
	}
	if (!window.StyleFix || !window.getComputedStyle) return;
	var n = window.PrefixFree = {
		prefixCSS: function prefixCSS(e, r, i) {
			var s = n.prefix;
			n.functions.indexOf("linear-gradient") > -1 && (e = e.replace(/(\s|:|,)(repeating-)?linear-gradient\(\s*(-?\d*\.?\d*)deg/ig, function (e, t, n, r) {
				return t + (n || "") + "linear-gradient(" + (90 - r) + "deg";
			}));
			e = t("functions", "(\\s|:|,)", "\\s*\\(", "$1" + s + "$2(", e);
			e = t("keywords", "(\\s|:)", "(\\s|;|\\}|$)", "$1" + s + "$2$3", e);
			e = t("properties", "(^|\\{|\\s|;)", "\\s*:", "$1" + s + "$2:", e);
			if (n.properties.length) {
				var o = RegExp("\\b(" + n.properties.join("|") + ")(?!:)", "gi");
				e = t("valueProperties", "\\b", ":(.+?);", function (e) {
					return e.replace(o, s + "$1");
				}, e);
			}
			if (r) {
				e = t("selectors", "", "\\b", n.prefixSelector, e);
				e = t("atrules", "@", "\\b", "@" + s + "$1", e);
			}
			e = e.replace(RegExp("-" + s, "g"), "-");
			e = e.replace(/-\*-(?=[a-z]+)/gi, n.prefix);
			return e;
		},
		property: function property(e) {
			return (n.properties.indexOf(e) ? n.prefix : "") + e;
		},
		value: function value(e, r) {
			e = t("functions", "(^|\\s|,)", "\\s*\\(", "$1" + n.prefix + "$2(", e);
			e = t("keywords", "(^|\\s)", "(\\s|$)", "$1" + n.prefix + "$2$3", e);
			return e;
		},
		prefixSelector: function prefixSelector(e) {
			return e.replace(/^:{1,2}/, function (e) {
				return e + n.prefix;
			});
		},
		prefixProperty: function prefixProperty(e, t) {
			var r = n.prefix + e;
			return t ? StyleFix.camelCase(r) : r;
		}
	};
	(function () {
		var e = {},
		    t = [],
		    r = {},
		    i = getComputedStyle(document.documentElement, null),
		    s = document.createElement("div").style,
		    o = function o(n) {
			if (n.charAt(0) === "-") {
				t.push(n);
				var r = n.split("-"),
				    i = r[1];
				e[i] = ++e[i] || 1;
				while (r.length > 3) {
					r.pop();
					var s = r.join("-");
					u(s) && t.indexOf(s) === -1 && t.push(s);
				}
			}
		},
		    u = function u(e) {
			return StyleFix.camelCase(e) in s;
		};
		if (i.length > 0) for (var a = 0; a < i.length; a++) {
			o(i[a]);
		} else for (var f in i) {
			o(StyleFix.deCamelCase(f));
		}var l = {
			uses: 0
		};
		for (var c in e) {
			var h = e[c];
			l.uses < h && (l = {
				prefix: c,
				uses: h
			});
		}
		n.prefix = "-" + l.prefix + "-";
		n.Prefix = StyleFix.camelCase(n.prefix);
		n.properties = [];
		for (var a = 0; a < t.length; a++) {
			var f = t[a];
			if (f.indexOf(n.prefix) === 0) {
				var p = f.slice(n.prefix.length);
				u(p) || n.properties.push(p);
			}
		}
		n.Prefix == "Ms" && !("transform" in s) && !("MsTransform" in s) && "msTransform" in s && n.properties.push("transform", "transform-origin");
		n.properties.sort();
	})();
	(function () {
		function i(e, t) {
			r[t] = "";
			r[t] = e;
			return !!r[t];
		}
		var e = {
			"linear-gradient": {
				property: "backgroundImage",
				params: "red, teal"
			},
			calc: {
				property: "width",
				params: "1px + 5%"
			},
			element: {
				property: "backgroundImage",
				params: "#foo"
			},
			"cross-fade": {
				property: "backgroundImage",
				params: "url(a.png), url(b.png), 50%"
			}
		};
		e["repeating-linear-gradient"] = e["repeating-radial-gradient"] = e["radial-gradient"] = e["linear-gradient"];
		var t = {
			initial: "color",
			"zoom-in": "cursor",
			"zoom-out": "cursor",
			box: "display",
			flexbox: "display",
			"inline-flexbox": "display",
			flex: "display",
			"inline-flex": "display"
		};
		n.functions = [];
		n.keywords = [];
		var r = document.createElement("div").style;
		for (var s in e) {
			var o = e[s],
			    u = o.property,
			    a = s + "(" + o.params + ")";
			!i(a, u) && i(n.prefix + a, u) && n.functions.push(s);
		}
		for (var f in t) {
			var u = t[f];
			!i(f, u) && i(n.prefix + f, u) && n.keywords.push(f);
		}
	})();
	(function () {
		function s(e) {
			i.textContent = e + "{}";
			return !!i.sheet.cssRules.length;
		}
		var t = {
			":read-only": null,
			":read-write": null,
			":any-link": null,
			"::selection": null
		},
		    r = {
			keyframes: "name",
			viewport: null,
			document: 'regexp(".")'
		};
		n.selectors = [];
		n.atrules = [];
		var i = e.appendChild(document.createElement("style"));
		for (var o in t) {
			var u = o + (t[o] ? "(" + t[o] + ")" : "");
			!s(u) && s(n.prefixSelector(u)) && n.selectors.push(o);
		}
		for (var a in r) {
			var u = a + " " + (r[a] || "");
			!s("@" + u) && s("@" + n.prefix + u) && n.atrules.push(a);
		}
		e.removeChild(i);
	})();
	n.valueProperties = ["transition", "transition-property"];
	e.className += " " + n.prefix;
	StyleFix.register(n.prefixCSS);
})(document.documentElement);

/***/ }),

/***/ "./node_modules/jquery/dist/jquery.js":
/*!********************************************!*\
  !*** ./node_modules/jquery/dist/jquery.js ***!
  \********************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

var __WEBPACK_AMD_DEFINE_ARRAY__, __WEBPACK_AMD_DEFINE_RESULT__;/*!
 * jQuery JavaScript Library v3.3.1
 * https://jquery.com/
 *
 * Includes Sizzle.js
 * https://sizzlejs.com/
 *
 * Copyright JS Foundation and other contributors
 * Released under the MIT license
 * https://jquery.org/license
 *
 * Date: 2018-01-20T17:24Z
 */
( function( global, factory ) {

	"use strict";

	if ( typeof module === "object" && typeof module.exports === "object" ) {

		// For CommonJS and CommonJS-like environments where a proper `window`
		// is present, execute the factory and get jQuery.
		// For environments that do not have a `window` with a `document`
		// (such as Node.js), expose a factory as module.exports.
		// This accentuates the need for the creation of a real `window`.
		// e.g. var jQuery = require("jquery")(window);
		// See ticket #14549 for more info.
		module.exports = global.document ?
			factory( global, true ) :
			function( w ) {
				if ( !w.document ) {
					throw new Error( "jQuery requires a window with a document" );
				}
				return factory( w );
			};
	} else {
		factory( global );
	}

// Pass this if window is not defined yet
} )( typeof window !== "undefined" ? window : this, function( window, noGlobal ) {

// Edge <= 12 - 13+, Firefox <=18 - 45+, IE 10 - 11, Safari 5.1 - 9+, iOS 6 - 9.1
// throw exceptions when non-strict code (e.g., ASP.NET 4.5) accesses strict mode
// arguments.callee.caller (trac-13335). But as of jQuery 3.0 (2016), strict mode should be common
// enough that all such attempts are guarded in a try block.
"use strict";

var arr = [];

var document = window.document;

var getProto = Object.getPrototypeOf;

var slice = arr.slice;

var concat = arr.concat;

var push = arr.push;

var indexOf = arr.indexOf;

var class2type = {};

var toString = class2type.toString;

var hasOwn = class2type.hasOwnProperty;

var fnToString = hasOwn.toString;

var ObjectFunctionString = fnToString.call( Object );

var support = {};

var isFunction = function isFunction( obj ) {

      // Support: Chrome <=57, Firefox <=52
      // In some browsers, typeof returns "function" for HTML <object> elements
      // (i.e., `typeof document.createElement( "object" ) === "function"`).
      // We don't want to classify *any* DOM node as a function.
      return typeof obj === "function" && typeof obj.nodeType !== "number";
  };


var isWindow = function isWindow( obj ) {
		return obj != null && obj === obj.window;
	};




	var preservedScriptAttributes = {
		type: true,
		src: true,
		noModule: true
	};

	function DOMEval( code, doc, node ) {
		doc = doc || document;

		var i,
			script = doc.createElement( "script" );

		script.text = code;
		if ( node ) {
			for ( i in preservedScriptAttributes ) {
				if ( node[ i ] ) {
					script[ i ] = node[ i ];
				}
			}
		}
		doc.head.appendChild( script ).parentNode.removeChild( script );
	}


function toType( obj ) {
	if ( obj == null ) {
		return obj + "";
	}

	// Support: Android <=2.3 only (functionish RegExp)
	return typeof obj === "object" || typeof obj === "function" ?
		class2type[ toString.call( obj ) ] || "object" :
		typeof obj;
}
/* global Symbol */
// Defining this global in .eslintrc.json would create a danger of using the global
// unguarded in another place, it seems safer to define global only for this module



var
	version = "3.3.1",

	// Define a local copy of jQuery
	jQuery = function( selector, context ) {

		// The jQuery object is actually just the init constructor 'enhanced'
		// Need init if jQuery is called (just allow error to be thrown if not included)
		return new jQuery.fn.init( selector, context );
	},

	// Support: Android <=4.0 only
	// Make sure we trim BOM and NBSP
	rtrim = /^[\s\uFEFF\xA0]+|[\s\uFEFF\xA0]+$/g;

jQuery.fn = jQuery.prototype = {

	// The current version of jQuery being used
	jquery: version,

	constructor: jQuery,

	// The default length of a jQuery object is 0
	length: 0,

	toArray: function() {
		return slice.call( this );
	},

	// Get the Nth element in the matched element set OR
	// Get the whole matched element set as a clean array
	get: function( num ) {

		// Return all the elements in a clean array
		if ( num == null ) {
			return slice.call( this );
		}

		// Return just the one element from the set
		return num < 0 ? this[ num + this.length ] : this[ num ];
	},

	// Take an array of elements and push it onto the stack
	// (returning the new matched element set)
	pushStack: function( elems ) {

		// Build a new jQuery matched element set
		var ret = jQuery.merge( this.constructor(), elems );

		// Add the old object onto the stack (as a reference)
		ret.prevObject = this;

		// Return the newly-formed element set
		return ret;
	},

	// Execute a callback for every element in the matched set.
	each: function( callback ) {
		return jQuery.each( this, callback );
	},

	map: function( callback ) {
		return this.pushStack( jQuery.map( this, function( elem, i ) {
			return callback.call( elem, i, elem );
		} ) );
	},

	slice: function() {
		return this.pushStack( slice.apply( this, arguments ) );
	},

	first: function() {
		return this.eq( 0 );
	},

	last: function() {
		return this.eq( -1 );
	},

	eq: function( i ) {
		var len = this.length,
			j = +i + ( i < 0 ? len : 0 );
		return this.pushStack( j >= 0 && j < len ? [ this[ j ] ] : [] );
	},

	end: function() {
		return this.prevObject || this.constructor();
	},

	// For internal use only.
	// Behaves like an Array's method, not like a jQuery method.
	push: push,
	sort: arr.sort,
	splice: arr.splice
};

jQuery.extend = jQuery.fn.extend = function() {
	var options, name, src, copy, copyIsArray, clone,
		target = arguments[ 0 ] || {},
		i = 1,
		length = arguments.length,
		deep = false;

	// Handle a deep copy situation
	if ( typeof target === "boolean" ) {
		deep = target;

		// Skip the boolean and the target
		target = arguments[ i ] || {};
		i++;
	}

	// Handle case when target is a string or something (possible in deep copy)
	if ( typeof target !== "object" && !isFunction( target ) ) {
		target = {};
	}

	// Extend jQuery itself if only one argument is passed
	if ( i === length ) {
		target = this;
		i--;
	}

	for ( ; i < length; i++ ) {

		// Only deal with non-null/undefined values
		if ( ( options = arguments[ i ] ) != null ) {

			// Extend the base object
			for ( name in options ) {
				src = target[ name ];
				copy = options[ name ];

				// Prevent never-ending loop
				if ( target === copy ) {
					continue;
				}

				// Recurse if we're merging plain objects or arrays
				if ( deep && copy && ( jQuery.isPlainObject( copy ) ||
					( copyIsArray = Array.isArray( copy ) ) ) ) {

					if ( copyIsArray ) {
						copyIsArray = false;
						clone = src && Array.isArray( src ) ? src : [];

					} else {
						clone = src && jQuery.isPlainObject( src ) ? src : {};
					}

					// Never move original objects, clone them
					target[ name ] = jQuery.extend( deep, clone, copy );

				// Don't bring in undefined values
				} else if ( copy !== undefined ) {
					target[ name ] = copy;
				}
			}
		}
	}

	// Return the modified object
	return target;
};

jQuery.extend( {

	// Unique for each copy of jQuery on the page
	expando: "jQuery" + ( version + Math.random() ).replace( /\D/g, "" ),

	// Assume jQuery is ready without the ready module
	isReady: true,

	error: function( msg ) {
		throw new Error( msg );
	},

	noop: function() {},

	isPlainObject: function( obj ) {
		var proto, Ctor;

		// Detect obvious negatives
		// Use toString instead of jQuery.type to catch host objects
		if ( !obj || toString.call( obj ) !== "[object Object]" ) {
			return false;
		}

		proto = getProto( obj );

		// Objects with no prototype (e.g., `Object.create( null )`) are plain
		if ( !proto ) {
			return true;
		}

		// Objects with prototype are plain iff they were constructed by a global Object function
		Ctor = hasOwn.call( proto, "constructor" ) && proto.constructor;
		return typeof Ctor === "function" && fnToString.call( Ctor ) === ObjectFunctionString;
	},

	isEmptyObject: function( obj ) {

		/* eslint-disable no-unused-vars */
		// See https://github.com/eslint/eslint/issues/6125
		var name;

		for ( name in obj ) {
			return false;
		}
		return true;
	},

	// Evaluates a script in a global context
	globalEval: function( code ) {
		DOMEval( code );
	},

	each: function( obj, callback ) {
		var length, i = 0;

		if ( isArrayLike( obj ) ) {
			length = obj.length;
			for ( ; i < length; i++ ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		} else {
			for ( i in obj ) {
				if ( callback.call( obj[ i ], i, obj[ i ] ) === false ) {
					break;
				}
			}
		}

		return obj;
	},

	// Support: Android <=4.0 only
	trim: function( text ) {
		return text == null ?
			"" :
			( text + "" ).replace( rtrim, "" );
	},

	// results is for internal usage only
	makeArray: function( arr, results ) {
		var ret = results || [];

		if ( arr != null ) {
			if ( isArrayLike( Object( arr ) ) ) {
				jQuery.merge( ret,
					typeof arr === "string" ?
					[ arr ] : arr
				);
			} else {
				push.call( ret, arr );
			}
		}

		return ret;
	},

	inArray: function( elem, arr, i ) {
		return arr == null ? -1 : indexOf.call( arr, elem, i );
	},

	// Support: Android <=4.0 only, PhantomJS 1 only
	// push.apply(_, arraylike) throws on ancient WebKit
	merge: function( first, second ) {
		var len = +second.length,
			j = 0,
			i = first.length;

		for ( ; j < len; j++ ) {
			first[ i++ ] = second[ j ];
		}

		first.length = i;

		return first;
	},

	grep: function( elems, callback, invert ) {
		var callbackInverse,
			matches = [],
			i = 0,
			length = elems.length,
			callbackExpect = !invert;

		// Go through the array, only saving the items
		// that pass the validator function
		for ( ; i < length; i++ ) {
			callbackInverse = !callback( elems[ i ], i );
			if ( callbackInverse !== callbackExpect ) {
				matches.push( elems[ i ] );
			}
		}

		return matches;
	},

	// arg is for internal usage only
	map: function( elems, callback, arg ) {
		var length, value,
			i = 0,
			ret = [];

		// Go through the array, translating each of the items to their new values
		if ( isArrayLike( elems ) ) {
			length = elems.length;
			for ( ; i < length; i++ ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}

		// Go through every key on the object,
		} else {
			for ( i in elems ) {
				value = callback( elems[ i ], i, arg );

				if ( value != null ) {
					ret.push( value );
				}
			}
		}

		// Flatten any nested arrays
		return concat.apply( [], ret );
	},

	// A global GUID counter for objects
	guid: 1,

	// jQuery.support is not used in Core but other projects attach their
	// properties to it so it needs to exist.
	support: support
} );

if ( typeof Symbol === "function" ) {
	jQuery.fn[ Symbol.iterator ] = arr[ Symbol.iterator ];
}

// Populate the class2type map
jQuery.each( "Boolean Number String Function Array Date RegExp Object Error Symbol".split( " " ),
function( i, name ) {
	class2type[ "[object " + name + "]" ] = name.toLowerCase();
} );

function isArrayLike( obj ) {

	// Support: real iOS 8.2 only (not reproducible in simulator)
	// `in` check used to prevent JIT error (gh-2145)
	// hasOwn isn't used here due to false negatives
	// regarding Nodelist length in IE
	var length = !!obj && "length" in obj && obj.length,
		type = toType( obj );

	if ( isFunction( obj ) || isWindow( obj ) ) {
		return false;
	}

	return type === "array" || length === 0 ||
		typeof length === "number" && length > 0 && ( length - 1 ) in obj;
}
var Sizzle =
/*!
 * Sizzle CSS Selector Engine v2.3.3
 * https://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2016-08-08
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// https://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\0-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,

	// CSS escapes
	// http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// CSS string/identifier serialization
	// https://drafts.csswg.org/cssom/#common-serializing-idioms
	rcssescape = /([\0-\x1f\x7f]|^-?\d)|^-$|[^\0-\x1f\x7f-\uFFFF\w-]/g,
	fcssescape = function( ch, asCodePoint ) {
		if ( asCodePoint ) {

			// U+0000 NULL becomes U+FFFD REPLACEMENT CHARACTER
			if ( ch === "\0" ) {
				return "\uFFFD";
			}

			// Control characters and (dependent upon position) numbers get escaped as code points
			return ch.slice( 0, -1 ) + "\\" + ch.charCodeAt( ch.length - 1 ).toString( 16 ) + " ";
		}

		// Other potentially-special ASCII characters get backslash-escaped
		return "\\" + ch;
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	},

	disabledAncestor = addCombinator(
		function( elem ) {
			return elem.disabled === true && ("form" in elem || "label" in elem);
		},
		{ dir: "parentNode", next: "legend" }
	);

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rcssescape, fcssescape );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "#" + nid + " " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created element and returns a boolean result
 */
function assert( fn ) {
	var el = document.createElement("fieldset");

	try {
		return !!fn( el );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( el.parentNode ) {
			el.parentNode.removeChild( el );
		}
		// release memory in IE
		el = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = arr.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			a.sourceIndex - b.sourceIndex;

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for :enabled/:disabled
 * @param {Boolean} disabled true for :disabled; false for :enabled
 */
function createDisabledPseudo( disabled ) {

	// Known :disabled false positives: fieldset[disabled] > legend:nth-of-type(n+2) :can-disable
	return function( elem ) {

		// Only certain elements can match :enabled or :disabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-enabled
		// https://html.spec.whatwg.org/multipage/scripting.html#selector-disabled
		if ( "form" in elem ) {

			// Check for inherited disabledness on relevant non-disabled elements:
			// * listed form-associated elements in a disabled fieldset
			//   https://html.spec.whatwg.org/multipage/forms.html#category-listed
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-fe-disabled
			// * option elements in a disabled optgroup
			//   https://html.spec.whatwg.org/multipage/forms.html#concept-option-disabled
			// All such elements have a "form" property.
			if ( elem.parentNode && elem.disabled === false ) {

				// Option elements defer to a parent optgroup if present
				if ( "label" in elem ) {
					if ( "label" in elem.parentNode ) {
						return elem.parentNode.disabled === disabled;
					} else {
						return elem.disabled === disabled;
					}
				}

				// Support: IE 6 - 11
				// Use the isDisabled shortcut property to check for disabled fieldset ancestors
				return elem.isDisabled === disabled ||

					// Where there is no isDisabled, check manually
					/* jshint -W018 */
					elem.isDisabled !== !disabled &&
						disabledAncestor( elem ) === disabled;
			}

			return elem.disabled === disabled;

		// Try to winnow out elements that can't be disabled before trusting the disabled property.
		// Some victims get caught in our net (label, legend, menu, track), but it shouldn't
		// even exist on them, let alone have a boolean value.
		} else if ( "label" in elem ) {
			return elem.disabled === disabled;
		}

		// Remaining elements are neither :enabled nor :disabled
		return false;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, subWindow,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9-11, Edge
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	if ( preferredDoc !== document &&
		(subWindow = document.defaultView) && subWindow.top !== subWindow ) {

		// Support: IE 11, Edge
		if ( subWindow.addEventListener ) {
			subWindow.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( subWindow.attachEvent ) {
			subWindow.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( el ) {
		el.className = "i";
		return !el.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( el ) {
		el.appendChild( document.createComment("") );
		return !el.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programmatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( el ) {
		docElem.appendChild( el ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID filter and find
	if ( support.getById ) {
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var elem = context.getElementById( id );
				return elem ? [ elem ] : [];
			}
		};
	} else {
		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};

		// Support: IE 6 - 7 only
		// getElementById is not reliable as a find shortcut
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var node, i, elems,
					elem = context.getElementById( id );

				if ( elem ) {

					// Verify the id attribute
					node = elem.getAttributeNode("id");
					if ( node && node.value === id ) {
						return [ elem ];
					}

					// Fall back on getElementsByName
					elems = context.getElementsByName( id );
					i = 0;
					while ( (elem = elems[i++]) ) {
						node = elem.getAttributeNode("id");
						if ( node && node.value === id ) {
							return [ elem ];
						}
					}
				}

				return [];
			}
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See https://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( el ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// https://bugs.jquery.com/ticket/12359
			docElem.appendChild( el ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// https://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( el.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !el.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !el.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !el.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibling-combinator selector` fails
			if ( !el.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( el ) {
			el.innerHTML = "<a href='' disabled='disabled'></a>" +
				"<select disabled='disabled'><option/></select>";

			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			el.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( el.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( el.querySelectorAll(":enabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Support: IE9-11+
			// IE's :disabled selector does not pick up the children of disabled fieldsets
			docElem.appendChild( el ).disabled = true;
			if ( el.querySelectorAll(":disabled").length !== 2 ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			el.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( el ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( el, "*" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( el, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.escape = function( sel ) {
	return (sel + "").replace( rcssescape, fcssescape );
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": createDisabledPseudo( false ),
		"disabled": createDisabledPseudo( true ),

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		skip = combinator.next,
		key = skip || dir,
		checkNonElements = base && key === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
			return false;
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( skip && skip === elem.nodeName.toLowerCase() ) {
							elem = elem[ dir ] || elem;
						} else if ( (oldCache = uniqueCache[ key ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ key ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
			return false;
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				context.nodeType === 9 && documentIsHTML && Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( el ) {
	// Should return 1, but returns 4 (following)
	return el.compareDocumentPosition( document.createElement("fieldset") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// https://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( el ) {
	el.innerHTML = "<a href='#'></a>";
	return el.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( el ) {
	el.innerHTML = "<input/>";
	el.firstChild.setAttribute( "value", "" );
	return el.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( el ) {
	return el.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

return Sizzle;

})( window );



jQuery.find = Sizzle;
jQuery.expr = Sizzle.selectors;

// Deprecated
jQuery.expr[ ":" ] = jQuery.expr.pseudos;
jQuery.uniqueSort = jQuery.unique = Sizzle.uniqueSort;
jQuery.text = Sizzle.getText;
jQuery.isXMLDoc = Sizzle.isXML;
jQuery.contains = Sizzle.contains;
jQuery.escapeSelector = Sizzle.escape;




var dir = function( elem, dir, until ) {
	var matched = [],
		truncate = until !== undefined;

	while ( ( elem = elem[ dir ] ) && elem.nodeType !== 9 ) {
		if ( elem.nodeType === 1 ) {
			if ( truncate && jQuery( elem ).is( until ) ) {
				break;
			}
			matched.push( elem );
		}
	}
	return matched;
};


var siblings = function( n, elem ) {
	var matched = [];

	for ( ; n; n = n.nextSibling ) {
		if ( n.nodeType === 1 && n !== elem ) {
			matched.push( n );
		}
	}

	return matched;
};


var rneedsContext = jQuery.expr.match.needsContext;



function nodeName( elem, name ) {

  return elem.nodeName && elem.nodeName.toLowerCase() === name.toLowerCase();

};
var rsingleTag = ( /^<([a-z][^\/\0>:\x20\t\r\n\f]*)[\x20\t\r\n\f]*\/?>(?:<\/\1>|)$/i );



// Implement the identical functionality for filter and not
function winnow( elements, qualifier, not ) {
	if ( isFunction( qualifier ) ) {
		return jQuery.grep( elements, function( elem, i ) {
			return !!qualifier.call( elem, i, elem ) !== not;
		} );
	}

	// Single element
	if ( qualifier.nodeType ) {
		return jQuery.grep( elements, function( elem ) {
			return ( elem === qualifier ) !== not;
		} );
	}

	// Arraylike of elements (jQuery, arguments, Array)
	if ( typeof qualifier !== "string" ) {
		return jQuery.grep( elements, function( elem ) {
			return ( indexOf.call( qualifier, elem ) > -1 ) !== not;
		} );
	}

	// Filtered directly for both simple and complex selectors
	return jQuery.filter( qualifier, elements, not );
}

jQuery.filter = function( expr, elems, not ) {
	var elem = elems[ 0 ];

	if ( not ) {
		expr = ":not(" + expr + ")";
	}

	if ( elems.length === 1 && elem.nodeType === 1 ) {
		return jQuery.find.matchesSelector( elem, expr ) ? [ elem ] : [];
	}

	return jQuery.find.matches( expr, jQuery.grep( elems, function( elem ) {
		return elem.nodeType === 1;
	} ) );
};

jQuery.fn.extend( {
	find: function( selector ) {
		var i, ret,
			len = this.length,
			self = this;

		if ( typeof selector !== "string" ) {
			return this.pushStack( jQuery( selector ).filter( function() {
				for ( i = 0; i < len; i++ ) {
					if ( jQuery.contains( self[ i ], this ) ) {
						return true;
					}
				}
			} ) );
		}

		ret = this.pushStack( [] );

		for ( i = 0; i < len; i++ ) {
			jQuery.find( selector, self[ i ], ret );
		}

		return len > 1 ? jQuery.uniqueSort( ret ) : ret;
	},
	filter: function( selector ) {
		return this.pushStack( winnow( this, selector || [], false ) );
	},
	not: function( selector ) {
		return this.pushStack( winnow( this, selector || [], true ) );
	},
	is: function( selector ) {
		return !!winnow(
			this,

			// If this is a positional/relative selector, check membership in the returned set
			// so $("p:first").is("p:last") won't return true for a doc with two "p".
			typeof selector === "string" && rneedsContext.test( selector ) ?
				jQuery( selector ) :
				selector || [],
			false
		).length;
	}
} );


// Initialize a jQuery object


// A central reference to the root jQuery(document)
var rootjQuery,

	// A simple way to check for HTML strings
	// Prioritize #id over <tag> to avoid XSS via location.hash (#9521)
	// Strict HTML recognition (#11290: must start with <)
	// Shortcut simple #id case for speed
	rquickExpr = /^(?:\s*(<[\w\W]+>)[^>]*|#([\w-]+))$/,

	init = jQuery.fn.init = function( selector, context, root ) {
		var match, elem;

		// HANDLE: $(""), $(null), $(undefined), $(false)
		if ( !selector ) {
			return this;
		}

		// Method init() accepts an alternate rootjQuery
		// so migrate can support jQuery.sub (gh-2101)
		root = root || rootjQuery;

		// Handle HTML strings
		if ( typeof selector === "string" ) {
			if ( selector[ 0 ] === "<" &&
				selector[ selector.length - 1 ] === ">" &&
				selector.length >= 3 ) {

				// Assume that strings that start and end with <> are HTML and skip the regex check
				match = [ null, selector, null ];

			} else {
				match = rquickExpr.exec( selector );
			}

			// Match html or make sure no context is specified for #id
			if ( match && ( match[ 1 ] || !context ) ) {

				// HANDLE: $(html) -> $(array)
				if ( match[ 1 ] ) {
					context = context instanceof jQuery ? context[ 0 ] : context;

					// Option to run scripts is true for back-compat
					// Intentionally let the error be thrown if parseHTML is not present
					jQuery.merge( this, jQuery.parseHTML(
						match[ 1 ],
						context && context.nodeType ? context.ownerDocument || context : document,
						true
					) );

					// HANDLE: $(html, props)
					if ( rsingleTag.test( match[ 1 ] ) && jQuery.isPlainObject( context ) ) {
						for ( match in context ) {

							// Properties of context are called as methods if possible
							if ( isFunction( this[ match ] ) ) {
								this[ match ]( context[ match ] );

							// ...and otherwise set as attributes
							} else {
								this.attr( match, context[ match ] );
							}
						}
					}

					return this;

				// HANDLE: $(#id)
				} else {
					elem = document.getElementById( match[ 2 ] );

					if ( elem ) {

						// Inject the element directly into the jQuery object
						this[ 0 ] = elem;
						this.length = 1;
					}
					return this;
				}

			// HANDLE: $(expr, $(...))
			} else if ( !context || context.jquery ) {
				return ( context || root ).find( selector );

			// HANDLE: $(expr, context)
			// (which is just equivalent to: $(context).find(expr)
			} else {
				return this.constructor( context ).find( selector );
			}

		// HANDLE: $(DOMElement)
		} else if ( selector.nodeType ) {
			this[ 0 ] = selector;
			this.length = 1;
			return this;

		// HANDLE: $(function)
		// Shortcut for document ready
		} else if ( isFunction( selector ) ) {
			return root.ready !== undefined ?
				root.ready( selector ) :

				// Execute immediately if ready is not present
				selector( jQuery );
		}

		return jQuery.makeArray( selector, this );
	};

// Give the init function the jQuery prototype for later instantiation
init.prototype = jQuery.fn;

// Initialize central reference
rootjQuery = jQuery( document );


var rparentsprev = /^(?:parents|prev(?:Until|All))/,

	// Methods guaranteed to produce a unique set when starting from a unique set
	guaranteedUnique = {
		children: true,
		contents: true,
		next: true,
		prev: true
	};

jQuery.fn.extend( {
	has: function( target ) {
		var targets = jQuery( target, this ),
			l = targets.length;

		return this.filter( function() {
			var i = 0;
			for ( ; i < l; i++ ) {
				if ( jQuery.contains( this, targets[ i ] ) ) {
					return true;
				}
			}
		} );
	},

	closest: function( selectors, context ) {
		var cur,
			i = 0,
			l = this.length,
			matched = [],
			targets = typeof selectors !== "string" && jQuery( selectors );

		// Positional selectors never match, since there's no _selection_ context
		if ( !rneedsContext.test( selectors ) ) {
			for ( ; i < l; i++ ) {
				for ( cur = this[ i ]; cur && cur !== context; cur = cur.parentNode ) {

					// Always skip document fragments
					if ( cur.nodeType < 11 && ( targets ?
						targets.index( cur ) > -1 :

						// Don't pass non-elements to Sizzle
						cur.nodeType === 1 &&
							jQuery.find.matchesSelector( cur, selectors ) ) ) {

						matched.push( cur );
						break;
					}
				}
			}
		}

		return this.pushStack( matched.length > 1 ? jQuery.uniqueSort( matched ) : matched );
	},

	// Determine the position of an element within the set
	index: function( elem ) {

		// No argument, return index in parent
		if ( !elem ) {
			return ( this[ 0 ] && this[ 0 ].parentNode ) ? this.first().prevAll().length : -1;
		}

		// Index in selector
		if ( typeof elem === "string" ) {
			return indexOf.call( jQuery( elem ), this[ 0 ] );
		}

		// Locate the position of the desired element
		return indexOf.call( this,

			// If it receives a jQuery object, the first element is used
			elem.jquery ? elem[ 0 ] : elem
		);
	},

	add: function( selector, context ) {
		return this.pushStack(
			jQuery.uniqueSort(
				jQuery.merge( this.get(), jQuery( selector, context ) )
			)
		);
	},

	addBack: function( selector ) {
		return this.add( selector == null ?
			this.prevObject : this.prevObject.filter( selector )
		);
	}
} );

function sibling( cur, dir ) {
	while ( ( cur = cur[ dir ] ) && cur.nodeType !== 1 ) {}
	return cur;
}

jQuery.each( {
	parent: function( elem ) {
		var parent = elem.parentNode;
		return parent && parent.nodeType !== 11 ? parent : null;
	},
	parents: function( elem ) {
		return dir( elem, "parentNode" );
	},
	parentsUntil: function( elem, i, until ) {
		return dir( elem, "parentNode", until );
	},
	next: function( elem ) {
		return sibling( elem, "nextSibling" );
	},
	prev: function( elem ) {
		return sibling( elem, "previousSibling" );
	},
	nextAll: function( elem ) {
		return dir( elem, "nextSibling" );
	},
	prevAll: function( elem ) {
		return dir( elem, "previousSibling" );
	},
	nextUntil: function( elem, i, until ) {
		return dir( elem, "nextSibling", until );
	},
	prevUntil: function( elem, i, until ) {
		return dir( elem, "previousSibling", until );
	},
	siblings: function( elem ) {
		return siblings( ( elem.parentNode || {} ).firstChild, elem );
	},
	children: function( elem ) {
		return siblings( elem.firstChild );
	},
	contents: function( elem ) {
        if ( nodeName( elem, "iframe" ) ) {
            return elem.contentDocument;
        }

        // Support: IE 9 - 11 only, iOS 7 only, Android Browser <=4.3 only
        // Treat the template element as a regular one in browsers that
        // don't support it.
        if ( nodeName( elem, "template" ) ) {
            elem = elem.content || elem;
        }

        return jQuery.merge( [], elem.childNodes );
	}
}, function( name, fn ) {
	jQuery.fn[ name ] = function( until, selector ) {
		var matched = jQuery.map( this, fn, until );

		if ( name.slice( -5 ) !== "Until" ) {
			selector = until;
		}

		if ( selector && typeof selector === "string" ) {
			matched = jQuery.filter( selector, matched );
		}

		if ( this.length > 1 ) {

			// Remove duplicates
			if ( !guaranteedUnique[ name ] ) {
				jQuery.uniqueSort( matched );
			}

			// Reverse order for parents* and prev-derivatives
			if ( rparentsprev.test( name ) ) {
				matched.reverse();
			}
		}

		return this.pushStack( matched );
	};
} );
var rnothtmlwhite = ( /[^\x20\t\r\n\f]+/g );



// Convert String-formatted options into Object-formatted ones
function createOptions( options ) {
	var object = {};
	jQuery.each( options.match( rnothtmlwhite ) || [], function( _, flag ) {
		object[ flag ] = true;
	} );
	return object;
}

/*
 * Create a callback list using the following parameters:
 *
 *	options: an optional list of space-separated options that will change how
 *			the callback list behaves or a more traditional option object
 *
 * By default a callback list will act like an event callback list and can be
 * "fired" multiple times.
 *
 * Possible options:
 *
 *	once:			will ensure the callback list can only be fired once (like a Deferred)
 *
 *	memory:			will keep track of previous values and will call any callback added
 *					after the list has been fired right away with the latest "memorized"
 *					values (like a Deferred)
 *
 *	unique:			will ensure a callback can only be added once (no duplicate in the list)
 *
 *	stopOnFalse:	interrupt callings when a callback returns false
 *
 */
jQuery.Callbacks = function( options ) {

	// Convert options from String-formatted to Object-formatted if needed
	// (we check in cache first)
	options = typeof options === "string" ?
		createOptions( options ) :
		jQuery.extend( {}, options );

	var // Flag to know if list is currently firing
		firing,

		// Last fire value for non-forgettable lists
		memory,

		// Flag to know if list was already fired
		fired,

		// Flag to prevent firing
		locked,

		// Actual callback list
		list = [],

		// Queue of execution data for repeatable lists
		queue = [],

		// Index of currently firing callback (modified by add/remove as needed)
		firingIndex = -1,

		// Fire callbacks
		fire = function() {

			// Enforce single-firing
			locked = locked || options.once;

			// Execute callbacks for all pending executions,
			// respecting firingIndex overrides and runtime changes
			fired = firing = true;
			for ( ; queue.length; firingIndex = -1 ) {
				memory = queue.shift();
				while ( ++firingIndex < list.length ) {

					// Run callback and check for early termination
					if ( list[ firingIndex ].apply( memory[ 0 ], memory[ 1 ] ) === false &&
						options.stopOnFalse ) {

						// Jump to end and forget the data so .add doesn't re-fire
						firingIndex = list.length;
						memory = false;
					}
				}
			}

			// Forget the data if we're done with it
			if ( !options.memory ) {
				memory = false;
			}

			firing = false;

			// Clean up if we're done firing for good
			if ( locked ) {

				// Keep an empty list if we have data for future add calls
				if ( memory ) {
					list = [];

				// Otherwise, this object is spent
				} else {
					list = "";
				}
			}
		},

		// Actual Callbacks object
		self = {

			// Add a callback or a collection of callbacks to the list
			add: function() {
				if ( list ) {

					// If we have memory from a past run, we should fire after adding
					if ( memory && !firing ) {
						firingIndex = list.length - 1;
						queue.push( memory );
					}

					( function add( args ) {
						jQuery.each( args, function( _, arg ) {
							if ( isFunction( arg ) ) {
								if ( !options.unique || !self.has( arg ) ) {
									list.push( arg );
								}
							} else if ( arg && arg.length && toType( arg ) !== "string" ) {

								// Inspect recursively
								add( arg );
							}
						} );
					} )( arguments );

					if ( memory && !firing ) {
						fire();
					}
				}
				return this;
			},

			// Remove a callback from the list
			remove: function() {
				jQuery.each( arguments, function( _, arg ) {
					var index;
					while ( ( index = jQuery.inArray( arg, list, index ) ) > -1 ) {
						list.splice( index, 1 );

						// Handle firing indexes
						if ( index <= firingIndex ) {
							firingIndex--;
						}
					}
				} );
				return this;
			},

			// Check if a given callback is in the list.
			// If no argument is given, return whether or not list has callbacks attached.
			has: function( fn ) {
				return fn ?
					jQuery.inArray( fn, list ) > -1 :
					list.length > 0;
			},

			// Remove all callbacks from the list
			empty: function() {
				if ( list ) {
					list = [];
				}
				return this;
			},

			// Disable .fire and .add
			// Abort any current/pending executions
			// Clear all callbacks and values
			disable: function() {
				locked = queue = [];
				list = memory = "";
				return this;
			},
			disabled: function() {
				return !list;
			},

			// Disable .fire
			// Also disable .add unless we have memory (since it would have no effect)
			// Abort any pending executions
			lock: function() {
				locked = queue = [];
				if ( !memory && !firing ) {
					list = memory = "";
				}
				return this;
			},
			locked: function() {
				return !!locked;
			},

			// Call all callbacks with the given context and arguments
			fireWith: function( context, args ) {
				if ( !locked ) {
					args = args || [];
					args = [ context, args.slice ? args.slice() : args ];
					queue.push( args );
					if ( !firing ) {
						fire();
					}
				}
				return this;
			},

			// Call all the callbacks with the given arguments
			fire: function() {
				self.fireWith( this, arguments );
				return this;
			},

			// To know if the callbacks have already been called at least once
			fired: function() {
				return !!fired;
			}
		};

	return self;
};


function Identity( v ) {
	return v;
}
function Thrower( ex ) {
	throw ex;
}

function adoptValue( value, resolve, reject, noValue ) {
	var method;

	try {

		// Check for promise aspect first to privilege synchronous behavior
		if ( value && isFunction( ( method = value.promise ) ) ) {
			method.call( value ).done( resolve ).fail( reject );

		// Other thenables
		} else if ( value && isFunction( ( method = value.then ) ) ) {
			method.call( value, resolve, reject );

		// Other non-thenables
		} else {

			// Control `resolve` arguments by letting Array#slice cast boolean `noValue` to integer:
			// * false: [ value ].slice( 0 ) => resolve( value )
			// * true: [ value ].slice( 1 ) => resolve()
			resolve.apply( undefined, [ value ].slice( noValue ) );
		}

	// For Promises/A+, convert exceptions into rejections
	// Since jQuery.when doesn't unwrap thenables, we can skip the extra checks appearing in
	// Deferred#then to conditionally suppress rejection.
	} catch ( value ) {

		// Support: Android 4.0 only
		// Strict mode functions invoked without .call/.apply get global-object context
		reject.apply( undefined, [ value ] );
	}
}

jQuery.extend( {

	Deferred: function( func ) {
		var tuples = [

				// action, add listener, callbacks,
				// ... .then handlers, argument index, [final state]
				[ "notify", "progress", jQuery.Callbacks( "memory" ),
					jQuery.Callbacks( "memory" ), 2 ],
				[ "resolve", "done", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 0, "resolved" ],
				[ "reject", "fail", jQuery.Callbacks( "once memory" ),
					jQuery.Callbacks( "once memory" ), 1, "rejected" ]
			],
			state = "pending",
			promise = {
				state: function() {
					return state;
				},
				always: function() {
					deferred.done( arguments ).fail( arguments );
					return this;
				},
				"catch": function( fn ) {
					return promise.then( null, fn );
				},

				// Keep pipe for back-compat
				pipe: function( /* fnDone, fnFail, fnProgress */ ) {
					var fns = arguments;

					return jQuery.Deferred( function( newDefer ) {
						jQuery.each( tuples, function( i, tuple ) {

							// Map tuples (progress, done, fail) to arguments (done, fail, progress)
							var fn = isFunction( fns[ tuple[ 4 ] ] ) && fns[ tuple[ 4 ] ];

							// deferred.progress(function() { bind to newDefer or newDefer.notify })
							// deferred.done(function() { bind to newDefer or newDefer.resolve })
							// deferred.fail(function() { bind to newDefer or newDefer.reject })
							deferred[ tuple[ 1 ] ]( function() {
								var returned = fn && fn.apply( this, arguments );
								if ( returned && isFunction( returned.promise ) ) {
									returned.promise()
										.progress( newDefer.notify )
										.done( newDefer.resolve )
										.fail( newDefer.reject );
								} else {
									newDefer[ tuple[ 0 ] + "With" ](
										this,
										fn ? [ returned ] : arguments
									);
								}
							} );
						} );
						fns = null;
					} ).promise();
				},
				then: function( onFulfilled, onRejected, onProgress ) {
					var maxDepth = 0;
					function resolve( depth, deferred, handler, special ) {
						return function() {
							var that = this,
								args = arguments,
								mightThrow = function() {
									var returned, then;

									// Support: Promises/A+ section 2.3.3.3.3
									// https://promisesaplus.com/#point-59
									// Ignore double-resolution attempts
									if ( depth < maxDepth ) {
										return;
									}

									returned = handler.apply( that, args );

									// Support: Promises/A+ section 2.3.1
									// https://promisesaplus.com/#point-48
									if ( returned === deferred.promise() ) {
										throw new TypeError( "Thenable self-resolution" );
									}

									// Support: Promises/A+ sections 2.3.3.1, 3.5
									// https://promisesaplus.com/#point-54
									// https://promisesaplus.com/#point-75
									// Retrieve `then` only once
									then = returned &&

										// Support: Promises/A+ section 2.3.4
										// https://promisesaplus.com/#point-64
										// Only check objects and functions for thenability
										( typeof returned === "object" ||
											typeof returned === "function" ) &&
										returned.then;

									// Handle a returned thenable
									if ( isFunction( then ) ) {

										// Special processors (notify) just wait for resolution
										if ( special ) {
											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special )
											);

										// Normal processors (resolve) also hook into progress
										} else {

											// ...and disregard older resolution values
											maxDepth++;

											then.call(
												returned,
												resolve( maxDepth, deferred, Identity, special ),
												resolve( maxDepth, deferred, Thrower, special ),
												resolve( maxDepth, deferred, Identity,
													deferred.notifyWith )
											);
										}

									// Handle all other returned values
									} else {

										// Only substitute handlers pass on context
										// and multiple values (non-spec behavior)
										if ( handler !== Identity ) {
											that = undefined;
											args = [ returned ];
										}

										// Process the value(s)
										// Default process is resolve
										( special || deferred.resolveWith )( that, args );
									}
								},

								// Only normal processors (resolve) catch and reject exceptions
								process = special ?
									mightThrow :
									function() {
										try {
											mightThrow();
										} catch ( e ) {

											if ( jQuery.Deferred.exceptionHook ) {
												jQuery.Deferred.exceptionHook( e,
													process.stackTrace );
											}

											// Support: Promises/A+ section 2.3.3.3.4.1
											// https://promisesaplus.com/#point-61
											// Ignore post-resolution exceptions
											if ( depth + 1 >= maxDepth ) {

												// Only substitute handlers pass on context
												// and multiple values (non-spec behavior)
												if ( handler !== Thrower ) {
													that = undefined;
													args = [ e ];
												}

												deferred.rejectWith( that, args );
											}
										}
									};

							// Support: Promises/A+ section 2.3.3.3.1
							// https://promisesaplus.com/#point-57
							// Re-resolve promises immediately to dodge false rejection from
							// subsequent errors
							if ( depth ) {
								process();
							} else {

								// Call an optional hook to record the stack, in case of exception
								// since it's otherwise lost when execution goes async
								if ( jQuery.Deferred.getStackHook ) {
									process.stackTrace = jQuery.Deferred.getStackHook();
								}
								window.setTimeout( process );
							}
						};
					}

					return jQuery.Deferred( function( newDefer ) {

						// progress_handlers.add( ... )
						tuples[ 0 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onProgress ) ?
									onProgress :
									Identity,
								newDefer.notifyWith
							)
						);

						// fulfilled_handlers.add( ... )
						tuples[ 1 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onFulfilled ) ?
									onFulfilled :
									Identity
							)
						);

						// rejected_handlers.add( ... )
						tuples[ 2 ][ 3 ].add(
							resolve(
								0,
								newDefer,
								isFunction( onRejected ) ?
									onRejected :
									Thrower
							)
						);
					} ).promise();
				},

				// Get a promise for this deferred
				// If obj is provided, the promise aspect is added to the object
				promise: function( obj ) {
					return obj != null ? jQuery.extend( obj, promise ) : promise;
				}
			},
			deferred = {};

		// Add list-specific methods
		jQuery.each( tuples, function( i, tuple ) {
			var list = tuple[ 2 ],
				stateString = tuple[ 5 ];

			// promise.progress = list.add
			// promise.done = list.add
			// promise.fail = list.add
			promise[ tuple[ 1 ] ] = list.add;

			// Handle state
			if ( stateString ) {
				list.add(
					function() {

						// state = "resolved" (i.e., fulfilled)
						// state = "rejected"
						state = stateString;
					},

					// rejected_callbacks.disable
					// fulfilled_callbacks.disable
					tuples[ 3 - i ][ 2 ].disable,

					// rejected_handlers.disable
					// fulfilled_handlers.disable
					tuples[ 3 - i ][ 3 ].disable,

					// progress_callbacks.lock
					tuples[ 0 ][ 2 ].lock,

					// progress_handlers.lock
					tuples[ 0 ][ 3 ].lock
				);
			}

			// progress_handlers.fire
			// fulfilled_handlers.fire
			// rejected_handlers.fire
			list.add( tuple[ 3 ].fire );

			// deferred.notify = function() { deferred.notifyWith(...) }
			// deferred.resolve = function() { deferred.resolveWith(...) }
			// deferred.reject = function() { deferred.rejectWith(...) }
			deferred[ tuple[ 0 ] ] = function() {
				deferred[ tuple[ 0 ] + "With" ]( this === deferred ? undefined : this, arguments );
				return this;
			};

			// deferred.notifyWith = list.fireWith
			// deferred.resolveWith = list.fireWith
			// deferred.rejectWith = list.fireWith
			deferred[ tuple[ 0 ] + "With" ] = list.fireWith;
		} );

		// Make the deferred a promise
		promise.promise( deferred );

		// Call given func if any
		if ( func ) {
			func.call( deferred, deferred );
		}

		// All done!
		return deferred;
	},

	// Deferred helper
	when: function( singleValue ) {
		var

			// count of uncompleted subordinates
			remaining = arguments.length,

			// count of unprocessed arguments
			i = remaining,

			// subordinate fulfillment data
			resolveContexts = Array( i ),
			resolveValues = slice.call( arguments ),

			// the master Deferred
			master = jQuery.Deferred(),

			// subordinate callback factory
			updateFunc = function( i ) {
				return function( value ) {
					resolveContexts[ i ] = this;
					resolveValues[ i ] = arguments.length > 1 ? slice.call( arguments ) : value;
					if ( !( --remaining ) ) {
						master.resolveWith( resolveContexts, resolveValues );
					}
				};
			};

		// Single- and empty arguments are adopted like Promise.resolve
		if ( remaining <= 1 ) {
			adoptValue( singleValue, master.done( updateFunc( i ) ).resolve, master.reject,
				!remaining );

			// Use .then() to unwrap secondary thenables (cf. gh-3000)
			if ( master.state() === "pending" ||
				isFunction( resolveValues[ i ] && resolveValues[ i ].then ) ) {

				return master.then();
			}
		}

		// Multiple arguments are aggregated like Promise.all array elements
		while ( i-- ) {
			adoptValue( resolveValues[ i ], updateFunc( i ), master.reject );
		}

		return master.promise();
	}
} );


// These usually indicate a programmer mistake during development,
// warn about them ASAP rather than swallowing them by default.
var rerrorNames = /^(Eval|Internal|Range|Reference|Syntax|Type|URI)Error$/;

jQuery.Deferred.exceptionHook = function( error, stack ) {

	// Support: IE 8 - 9 only
	// Console exists when dev tools are open, which can happen at any time
	if ( window.console && window.console.warn && error && rerrorNames.test( error.name ) ) {
		window.console.warn( "jQuery.Deferred exception: " + error.message, error.stack, stack );
	}
};




jQuery.readyException = function( error ) {
	window.setTimeout( function() {
		throw error;
	} );
};




// The deferred used on DOM ready
var readyList = jQuery.Deferred();

jQuery.fn.ready = function( fn ) {

	readyList
		.then( fn )

		// Wrap jQuery.readyException in a function so that the lookup
		// happens at the time of error handling instead of callback
		// registration.
		.catch( function( error ) {
			jQuery.readyException( error );
		} );

	return this;
};

jQuery.extend( {

	// Is the DOM ready to be used? Set to true once it occurs.
	isReady: false,

	// A counter to track how many items to wait for before
	// the ready event fires. See #6781
	readyWait: 1,

	// Handle when the DOM is ready
	ready: function( wait ) {

		// Abort if there are pending holds or we're already ready
		if ( wait === true ? --jQuery.readyWait : jQuery.isReady ) {
			return;
		}

		// Remember that the DOM is ready
		jQuery.isReady = true;

		// If a normal DOM Ready event fired, decrement, and wait if need be
		if ( wait !== true && --jQuery.readyWait > 0 ) {
			return;
		}

		// If there are functions bound, to execute
		readyList.resolveWith( document, [ jQuery ] );
	}
} );

jQuery.ready.then = readyList.then;

// The ready event handler and self cleanup method
function completed() {
	document.removeEventListener( "DOMContentLoaded", completed );
	window.removeEventListener( "load", completed );
	jQuery.ready();
}

// Catch cases where $(document).ready() is called
// after the browser event has already occurred.
// Support: IE <=9 - 10 only
// Older IE sometimes signals "interactive" too soon
if ( document.readyState === "complete" ||
	( document.readyState !== "loading" && !document.documentElement.doScroll ) ) {

	// Handle it asynchronously to allow scripts the opportunity to delay ready
	window.setTimeout( jQuery.ready );

} else {

	// Use the handy event callback
	document.addEventListener( "DOMContentLoaded", completed );

	// A fallback to window.onload, that will always work
	window.addEventListener( "load", completed );
}




// Multifunctional method to get and set values of a collection
// The value/s can optionally be executed if it's a function
var access = function( elems, fn, key, value, chainable, emptyGet, raw ) {
	var i = 0,
		len = elems.length,
		bulk = key == null;

	// Sets many values
	if ( toType( key ) === "object" ) {
		chainable = true;
		for ( i in key ) {
			access( elems, fn, i, key[ i ], true, emptyGet, raw );
		}

	// Sets one value
	} else if ( value !== undefined ) {
		chainable = true;

		if ( !isFunction( value ) ) {
			raw = true;
		}

		if ( bulk ) {

			// Bulk operations run against the entire set
			if ( raw ) {
				fn.call( elems, value );
				fn = null;

			// ...except when executing function values
			} else {
				bulk = fn;
				fn = function( elem, key, value ) {
					return bulk.call( jQuery( elem ), value );
				};
			}
		}

		if ( fn ) {
			for ( ; i < len; i++ ) {
				fn(
					elems[ i ], key, raw ?
					value :
					value.call( elems[ i ], i, fn( elems[ i ], key ) )
				);
			}
		}
	}

	if ( chainable ) {
		return elems;
	}

	// Gets
	if ( bulk ) {
		return fn.call( elems );
	}

	return len ? fn( elems[ 0 ], key ) : emptyGet;
};


// Matches dashed string for camelizing
var rmsPrefix = /^-ms-/,
	rdashAlpha = /-([a-z])/g;

// Used by camelCase as callback to replace()
function fcamelCase( all, letter ) {
	return letter.toUpperCase();
}

// Convert dashed to camelCase; used by the css and data modules
// Support: IE <=9 - 11, Edge 12 - 15
// Microsoft forgot to hump their vendor prefix (#9572)
function camelCase( string ) {
	return string.replace( rmsPrefix, "ms-" ).replace( rdashAlpha, fcamelCase );
}
var acceptData = function( owner ) {

	// Accepts only:
	//  - Node
	//    - Node.ELEMENT_NODE
	//    - Node.DOCUMENT_NODE
	//  - Object
	//    - Any
	return owner.nodeType === 1 || owner.nodeType === 9 || !( +owner.nodeType );
};




function Data() {
	this.expando = jQuery.expando + Data.uid++;
}

Data.uid = 1;

Data.prototype = {

	cache: function( owner ) {

		// Check if the owner object already has a cache
		var value = owner[ this.expando ];

		// If not, create one
		if ( !value ) {
			value = {};

			// We can accept data for non-element nodes in modern browsers,
			// but we should not, see #8335.
			// Always return an empty object.
			if ( acceptData( owner ) ) {

				// If it is a node unlikely to be stringify-ed or looped over
				// use plain assignment
				if ( owner.nodeType ) {
					owner[ this.expando ] = value;

				// Otherwise secure it in a non-enumerable property
				// configurable must be true to allow the property to be
				// deleted when data is removed
				} else {
					Object.defineProperty( owner, this.expando, {
						value: value,
						configurable: true
					} );
				}
			}
		}

		return value;
	},
	set: function( owner, data, value ) {
		var prop,
			cache = this.cache( owner );

		// Handle: [ owner, key, value ] args
		// Always use camelCase key (gh-2257)
		if ( typeof data === "string" ) {
			cache[ camelCase( data ) ] = value;

		// Handle: [ owner, { properties } ] args
		} else {

			// Copy the properties one-by-one to the cache object
			for ( prop in data ) {
				cache[ camelCase( prop ) ] = data[ prop ];
			}
		}
		return cache;
	},
	get: function( owner, key ) {
		return key === undefined ?
			this.cache( owner ) :

			// Always use camelCase key (gh-2257)
			owner[ this.expando ] && owner[ this.expando ][ camelCase( key ) ];
	},
	access: function( owner, key, value ) {

		// In cases where either:
		//
		//   1. No key was specified
		//   2. A string key was specified, but no value provided
		//
		// Take the "read" path and allow the get method to determine
		// which value to return, respectively either:
		//
		//   1. The entire cache object
		//   2. The data stored at the key
		//
		if ( key === undefined ||
				( ( key && typeof key === "string" ) && value === undefined ) ) {

			return this.get( owner, key );
		}

		// When the key is not a string, or both a key and value
		// are specified, set or extend (existing objects) with either:
		//
		//   1. An object of properties
		//   2. A key and value
		//
		this.set( owner, key, value );

		// Since the "set" path can have two possible entry points
		// return the expected data based on which path was taken[*]
		return value !== undefined ? value : key;
	},
	remove: function( owner, key ) {
		var i,
			cache = owner[ this.expando ];

		if ( cache === undefined ) {
			return;
		}

		if ( key !== undefined ) {

			// Support array or space separated string of keys
			if ( Array.isArray( key ) ) {

				// If key is an array of keys...
				// We always set camelCase keys, so remove that.
				key = key.map( camelCase );
			} else {
				key = camelCase( key );

				// If a key with the spaces exists, use it.
				// Otherwise, create an array by matching non-whitespace
				key = key in cache ?
					[ key ] :
					( key.match( rnothtmlwhite ) || [] );
			}

			i = key.length;

			while ( i-- ) {
				delete cache[ key[ i ] ];
			}
		}

		// Remove the expando if there's no more data
		if ( key === undefined || jQuery.isEmptyObject( cache ) ) {

			// Support: Chrome <=35 - 45
			// Webkit & Blink performance suffers when deleting properties
			// from DOM nodes, so set to undefined instead
			// https://bugs.chromium.org/p/chromium/issues/detail?id=378607 (bug restricted)
			if ( owner.nodeType ) {
				owner[ this.expando ] = undefined;
			} else {
				delete owner[ this.expando ];
			}
		}
	},
	hasData: function( owner ) {
		var cache = owner[ this.expando ];
		return cache !== undefined && !jQuery.isEmptyObject( cache );
	}
};
var dataPriv = new Data();

var dataUser = new Data();



//	Implementation Summary
//
//	1. Enforce API surface and semantic compatibility with 1.9.x branch
//	2. Improve the module's maintainability by reducing the storage
//		paths to a single mechanism.
//	3. Use the same single mechanism to support "private" and "user" data.
//	4. _Never_ expose "private" data to user code (TODO: Drop _data, _removeData)
//	5. Avoid exposing implementation details on user objects (eg. expando properties)
//	6. Provide a clear path for implementation upgrade to WeakMap in 2014

var rbrace = /^(?:\{[\w\W]*\}|\[[\w\W]*\])$/,
	rmultiDash = /[A-Z]/g;

function getData( data ) {
	if ( data === "true" ) {
		return true;
	}

	if ( data === "false" ) {
		return false;
	}

	if ( data === "null" ) {
		return null;
	}

	// Only convert to a number if it doesn't change the string
	if ( data === +data + "" ) {
		return +data;
	}

	if ( rbrace.test( data ) ) {
		return JSON.parse( data );
	}

	return data;
}

function dataAttr( elem, key, data ) {
	var name;

	// If nothing was found internally, try to fetch any
	// data from the HTML5 data-* attribute
	if ( data === undefined && elem.nodeType === 1 ) {
		name = "data-" + key.replace( rmultiDash, "-$&" ).toLowerCase();
		data = elem.getAttribute( name );

		if ( typeof data === "string" ) {
			try {
				data = getData( data );
			} catch ( e ) {}

			// Make sure we set the data so it isn't changed later
			dataUser.set( elem, key, data );
		} else {
			data = undefined;
		}
	}
	return data;
}

jQuery.extend( {
	hasData: function( elem ) {
		return dataUser.hasData( elem ) || dataPriv.hasData( elem );
	},

	data: function( elem, name, data ) {
		return dataUser.access( elem, name, data );
	},

	removeData: function( elem, name ) {
		dataUser.remove( elem, name );
	},

	// TODO: Now that all calls to _data and _removeData have been replaced
	// with direct calls to dataPriv methods, these can be deprecated.
	_data: function( elem, name, data ) {
		return dataPriv.access( elem, name, data );
	},

	_removeData: function( elem, name ) {
		dataPriv.remove( elem, name );
	}
} );

jQuery.fn.extend( {
	data: function( key, value ) {
		var i, name, data,
			elem = this[ 0 ],
			attrs = elem && elem.attributes;

		// Gets all values
		if ( key === undefined ) {
			if ( this.length ) {
				data = dataUser.get( elem );

				if ( elem.nodeType === 1 && !dataPriv.get( elem, "hasDataAttrs" ) ) {
					i = attrs.length;
					while ( i-- ) {

						// Support: IE 11 only
						// The attrs elements can be null (#14894)
						if ( attrs[ i ] ) {
							name = attrs[ i ].name;
							if ( name.indexOf( "data-" ) === 0 ) {
								name = camelCase( name.slice( 5 ) );
								dataAttr( elem, name, data[ name ] );
							}
						}
					}
					dataPriv.set( elem, "hasDataAttrs", true );
				}
			}

			return data;
		}

		// Sets multiple values
		if ( typeof key === "object" ) {
			return this.each( function() {
				dataUser.set( this, key );
			} );
		}

		return access( this, function( value ) {
			var data;

			// The calling jQuery object (element matches) is not empty
			// (and therefore has an element appears at this[ 0 ]) and the
			// `value` parameter was not undefined. An empty jQuery object
			// will result in `undefined` for elem = this[ 0 ] which will
			// throw an exception if an attempt to read a data cache is made.
			if ( elem && value === undefined ) {

				// Attempt to get data from the cache
				// The key will always be camelCased in Data
				data = dataUser.get( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// Attempt to "discover" the data in
				// HTML5 custom data-* attrs
				data = dataAttr( elem, key );
				if ( data !== undefined ) {
					return data;
				}

				// We tried really hard, but the data doesn't exist.
				return;
			}

			// Set the data...
			this.each( function() {

				// We always store the camelCased key
				dataUser.set( this, key, value );
			} );
		}, null, value, arguments.length > 1, null, true );
	},

	removeData: function( key ) {
		return this.each( function() {
			dataUser.remove( this, key );
		} );
	}
} );


jQuery.extend( {
	queue: function( elem, type, data ) {
		var queue;

		if ( elem ) {
			type = ( type || "fx" ) + "queue";
			queue = dataPriv.get( elem, type );

			// Speed up dequeue by getting out quickly if this is just a lookup
			if ( data ) {
				if ( !queue || Array.isArray( data ) ) {
					queue = dataPriv.access( elem, type, jQuery.makeArray( data ) );
				} else {
					queue.push( data );
				}
			}
			return queue || [];
		}
	},

	dequeue: function( elem, type ) {
		type = type || "fx";

		var queue = jQuery.queue( elem, type ),
			startLength = queue.length,
			fn = queue.shift(),
			hooks = jQuery._queueHooks( elem, type ),
			next = function() {
				jQuery.dequeue( elem, type );
			};

		// If the fx queue is dequeued, always remove the progress sentinel
		if ( fn === "inprogress" ) {
			fn = queue.shift();
			startLength--;
		}

		if ( fn ) {

			// Add a progress sentinel to prevent the fx queue from being
			// automatically dequeued
			if ( type === "fx" ) {
				queue.unshift( "inprogress" );
			}

			// Clear up the last queue stop function
			delete hooks.stop;
			fn.call( elem, next, hooks );
		}

		if ( !startLength && hooks ) {
			hooks.empty.fire();
		}
	},

	// Not public - generate a queueHooks object, or return the current one
	_queueHooks: function( elem, type ) {
		var key = type + "queueHooks";
		return dataPriv.get( elem, key ) || dataPriv.access( elem, key, {
			empty: jQuery.Callbacks( "once memory" ).add( function() {
				dataPriv.remove( elem, [ type + "queue", key ] );
			} )
		} );
	}
} );

jQuery.fn.extend( {
	queue: function( type, data ) {
		var setter = 2;

		if ( typeof type !== "string" ) {
			data = type;
			type = "fx";
			setter--;
		}

		if ( arguments.length < setter ) {
			return jQuery.queue( this[ 0 ], type );
		}

		return data === undefined ?
			this :
			this.each( function() {
				var queue = jQuery.queue( this, type, data );

				// Ensure a hooks for this queue
				jQuery._queueHooks( this, type );

				if ( type === "fx" && queue[ 0 ] !== "inprogress" ) {
					jQuery.dequeue( this, type );
				}
			} );
	},
	dequeue: function( type ) {
		return this.each( function() {
			jQuery.dequeue( this, type );
		} );
	},
	clearQueue: function( type ) {
		return this.queue( type || "fx", [] );
	},

	// Get a promise resolved when queues of a certain type
	// are emptied (fx is the type by default)
	promise: function( type, obj ) {
		var tmp,
			count = 1,
			defer = jQuery.Deferred(),
			elements = this,
			i = this.length,
			resolve = function() {
				if ( !( --count ) ) {
					defer.resolveWith( elements, [ elements ] );
				}
			};

		if ( typeof type !== "string" ) {
			obj = type;
			type = undefined;
		}
		type = type || "fx";

		while ( i-- ) {
			tmp = dataPriv.get( elements[ i ], type + "queueHooks" );
			if ( tmp && tmp.empty ) {
				count++;
				tmp.empty.add( resolve );
			}
		}
		resolve();
		return defer.promise( obj );
	}
} );
var pnum = ( /[+-]?(?:\d*\.|)\d+(?:[eE][+-]?\d+|)/ ).source;

var rcssNum = new RegExp( "^(?:([+-])=|)(" + pnum + ")([a-z%]*)$", "i" );


var cssExpand = [ "Top", "Right", "Bottom", "Left" ];

var isHiddenWithinTree = function( elem, el ) {

		// isHiddenWithinTree might be called from jQuery#filter function;
		// in that case, element will be second argument
		elem = el || elem;

		// Inline style trumps all
		return elem.style.display === "none" ||
			elem.style.display === "" &&

			// Otherwise, check computed style
			// Support: Firefox <=43 - 45
			// Disconnected elements can have computed display: none, so first confirm that elem is
			// in the document.
			jQuery.contains( elem.ownerDocument, elem ) &&

			jQuery.css( elem, "display" ) === "none";
	};

var swap = function( elem, options, callback, args ) {
	var ret, name,
		old = {};

	// Remember the old values, and insert the new ones
	for ( name in options ) {
		old[ name ] = elem.style[ name ];
		elem.style[ name ] = options[ name ];
	}

	ret = callback.apply( elem, args || [] );

	// Revert the old values
	for ( name in options ) {
		elem.style[ name ] = old[ name ];
	}

	return ret;
};




function adjustCSS( elem, prop, valueParts, tween ) {
	var adjusted, scale,
		maxIterations = 20,
		currentValue = tween ?
			function() {
				return tween.cur();
			} :
			function() {
				return jQuery.css( elem, prop, "" );
			},
		initial = currentValue(),
		unit = valueParts && valueParts[ 3 ] || ( jQuery.cssNumber[ prop ] ? "" : "px" ),

		// Starting value computation is required for potential unit mismatches
		initialInUnit = ( jQuery.cssNumber[ prop ] || unit !== "px" && +initial ) &&
			rcssNum.exec( jQuery.css( elem, prop ) );

	if ( initialInUnit && initialInUnit[ 3 ] !== unit ) {

		// Support: Firefox <=54
		// Halve the iteration target value to prevent interference from CSS upper bounds (gh-2144)
		initial = initial / 2;

		// Trust units reported by jQuery.css
		unit = unit || initialInUnit[ 3 ];

		// Iteratively approximate from a nonzero starting point
		initialInUnit = +initial || 1;

		while ( maxIterations-- ) {

			// Evaluate and update our best guess (doubling guesses that zero out).
			// Finish if the scale equals or crosses 1 (making the old*new product non-positive).
			jQuery.style( elem, prop, initialInUnit + unit );
			if ( ( 1 - scale ) * ( 1 - ( scale = currentValue() / initial || 0.5 ) ) <= 0 ) {
				maxIterations = 0;
			}
			initialInUnit = initialInUnit / scale;

		}

		initialInUnit = initialInUnit * 2;
		jQuery.style( elem, prop, initialInUnit + unit );

		// Make sure we update the tween properties later on
		valueParts = valueParts || [];
	}

	if ( valueParts ) {
		initialInUnit = +initialInUnit || +initial || 0;

		// Apply relative offset (+=/-=) if specified
		adjusted = valueParts[ 1 ] ?
			initialInUnit + ( valueParts[ 1 ] + 1 ) * valueParts[ 2 ] :
			+valueParts[ 2 ];
		if ( tween ) {
			tween.unit = unit;
			tween.start = initialInUnit;
			tween.end = adjusted;
		}
	}
	return adjusted;
}


var defaultDisplayMap = {};

function getDefaultDisplay( elem ) {
	var temp,
		doc = elem.ownerDocument,
		nodeName = elem.nodeName,
		display = defaultDisplayMap[ nodeName ];

	if ( display ) {
		return display;
	}

	temp = doc.body.appendChild( doc.createElement( nodeName ) );
	display = jQuery.css( temp, "display" );

	temp.parentNode.removeChild( temp );

	if ( display === "none" ) {
		display = "block";
	}
	defaultDisplayMap[ nodeName ] = display;

	return display;
}

function showHide( elements, show ) {
	var display, elem,
		values = [],
		index = 0,
		length = elements.length;

	// Determine new display value for elements that need to change
	for ( ; index < length; index++ ) {
		elem = elements[ index ];
		if ( !elem.style ) {
			continue;
		}

		display = elem.style.display;
		if ( show ) {

			// Since we force visibility upon cascade-hidden elements, an immediate (and slow)
			// check is required in this first loop unless we have a nonempty display value (either
			// inline or about-to-be-restored)
			if ( display === "none" ) {
				values[ index ] = dataPriv.get( elem, "display" ) || null;
				if ( !values[ index ] ) {
					elem.style.display = "";
				}
			}
			if ( elem.style.display === "" && isHiddenWithinTree( elem ) ) {
				values[ index ] = getDefaultDisplay( elem );
			}
		} else {
			if ( display !== "none" ) {
				values[ index ] = "none";

				// Remember what we're overwriting
				dataPriv.set( elem, "display", display );
			}
		}
	}

	// Set the display of the elements in a second loop to avoid constant reflow
	for ( index = 0; index < length; index++ ) {
		if ( values[ index ] != null ) {
			elements[ index ].style.display = values[ index ];
		}
	}

	return elements;
}

jQuery.fn.extend( {
	show: function() {
		return showHide( this, true );
	},
	hide: function() {
		return showHide( this );
	},
	toggle: function( state ) {
		if ( typeof state === "boolean" ) {
			return state ? this.show() : this.hide();
		}

		return this.each( function() {
			if ( isHiddenWithinTree( this ) ) {
				jQuery( this ).show();
			} else {
				jQuery( this ).hide();
			}
		} );
	}
} );
var rcheckableType = ( /^(?:checkbox|radio)$/i );

var rtagName = ( /<([a-z][^\/\0>\x20\t\r\n\f]+)/i );

var rscriptType = ( /^$|^module$|\/(?:java|ecma)script/i );



// We have to close these tags to support XHTML (#13200)
var wrapMap = {

	// Support: IE <=9 only
	option: [ 1, "<select multiple='multiple'>", "</select>" ],

	// XHTML parsers do not magically insert elements in the
	// same way that tag soup parsers do. So we cannot shorten
	// this by omitting <tbody> or other required elements.
	thead: [ 1, "<table>", "</table>" ],
	col: [ 2, "<table><colgroup>", "</colgroup></table>" ],
	tr: [ 2, "<table><tbody>", "</tbody></table>" ],
	td: [ 3, "<table><tbody><tr>", "</tr></tbody></table>" ],

	_default: [ 0, "", "" ]
};

// Support: IE <=9 only
wrapMap.optgroup = wrapMap.option;

wrapMap.tbody = wrapMap.tfoot = wrapMap.colgroup = wrapMap.caption = wrapMap.thead;
wrapMap.th = wrapMap.td;


function getAll( context, tag ) {

	// Support: IE <=9 - 11 only
	// Use typeof to avoid zero-argument method invocation on host objects (#15151)
	var ret;

	if ( typeof context.getElementsByTagName !== "undefined" ) {
		ret = context.getElementsByTagName( tag || "*" );

	} else if ( typeof context.querySelectorAll !== "undefined" ) {
		ret = context.querySelectorAll( tag || "*" );

	} else {
		ret = [];
	}

	if ( tag === undefined || tag && nodeName( context, tag ) ) {
		return jQuery.merge( [ context ], ret );
	}

	return ret;
}


// Mark scripts as having already been evaluated
function setGlobalEval( elems, refElements ) {
	var i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		dataPriv.set(
			elems[ i ],
			"globalEval",
			!refElements || dataPriv.get( refElements[ i ], "globalEval" )
		);
	}
}


var rhtml = /<|&#?\w+;/;

function buildFragment( elems, context, scripts, selection, ignored ) {
	var elem, tmp, tag, wrap, contains, j,
		fragment = context.createDocumentFragment(),
		nodes = [],
		i = 0,
		l = elems.length;

	for ( ; i < l; i++ ) {
		elem = elems[ i ];

		if ( elem || elem === 0 ) {

			// Add nodes directly
			if ( toType( elem ) === "object" ) {

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, elem.nodeType ? [ elem ] : elem );

			// Convert non-html into a text node
			} else if ( !rhtml.test( elem ) ) {
				nodes.push( context.createTextNode( elem ) );

			// Convert html into DOM nodes
			} else {
				tmp = tmp || fragment.appendChild( context.createElement( "div" ) );

				// Deserialize a standard representation
				tag = ( rtagName.exec( elem ) || [ "", "" ] )[ 1 ].toLowerCase();
				wrap = wrapMap[ tag ] || wrapMap._default;
				tmp.innerHTML = wrap[ 1 ] + jQuery.htmlPrefilter( elem ) + wrap[ 2 ];

				// Descend through wrappers to the right content
				j = wrap[ 0 ];
				while ( j-- ) {
					tmp = tmp.lastChild;
				}

				// Support: Android <=4.0 only, PhantomJS 1 only
				// push.apply(_, arraylike) throws on ancient WebKit
				jQuery.merge( nodes, tmp.childNodes );

				// Remember the top-level container
				tmp = fragment.firstChild;

				// Ensure the created nodes are orphaned (#12392)
				tmp.textContent = "";
			}
		}
	}

	// Remove wrapper from fragment
	fragment.textContent = "";

	i = 0;
	while ( ( elem = nodes[ i++ ] ) ) {

		// Skip elements already in the context collection (trac-4087)
		if ( selection && jQuery.inArray( elem, selection ) > -1 ) {
			if ( ignored ) {
				ignored.push( elem );
			}
			continue;
		}

		contains = jQuery.contains( elem.ownerDocument, elem );

		// Append to fragment
		tmp = getAll( fragment.appendChild( elem ), "script" );

		// Preserve script evaluation history
		if ( contains ) {
			setGlobalEval( tmp );
		}

		// Capture executables
		if ( scripts ) {
			j = 0;
			while ( ( elem = tmp[ j++ ] ) ) {
				if ( rscriptType.test( elem.type || "" ) ) {
					scripts.push( elem );
				}
			}
		}
	}

	return fragment;
}


( function() {
	var fragment = document.createDocumentFragment(),
		div = fragment.appendChild( document.createElement( "div" ) ),
		input = document.createElement( "input" );

	// Support: Android 4.0 - 4.3 only
	// Check state lost if the name is set (#11217)
	// Support: Windows Web Apps (WWA)
	// `name` and `type` must use .setAttribute for WWA (#14901)
	input.setAttribute( "type", "radio" );
	input.setAttribute( "checked", "checked" );
	input.setAttribute( "name", "t" );

	div.appendChild( input );

	// Support: Android <=4.1 only
	// Older WebKit doesn't clone checked state correctly in fragments
	support.checkClone = div.cloneNode( true ).cloneNode( true ).lastChild.checked;

	// Support: IE <=11 only
	// Make sure textarea (and checkbox) defaultValue is properly cloned
	div.innerHTML = "<textarea>x</textarea>";
	support.noCloneChecked = !!div.cloneNode( true ).lastChild.defaultValue;
} )();
var documentElement = document.documentElement;



var
	rkeyEvent = /^key/,
	rmouseEvent = /^(?:mouse|pointer|contextmenu|drag|drop)|click/,
	rtypenamespace = /^([^.]*)(?:\.(.+)|)/;

function returnTrue() {
	return true;
}

function returnFalse() {
	return false;
}

// Support: IE <=9 only
// See #13393 for more info
function safeActiveElement() {
	try {
		return document.activeElement;
	} catch ( err ) { }
}

function on( elem, types, selector, data, fn, one ) {
	var origFn, type;

	// Types can be a map of types/handlers
	if ( typeof types === "object" ) {

		// ( types-Object, selector, data )
		if ( typeof selector !== "string" ) {

			// ( types-Object, data )
			data = data || selector;
			selector = undefined;
		}
		for ( type in types ) {
			on( elem, type, selector, data, types[ type ], one );
		}
		return elem;
	}

	if ( data == null && fn == null ) {

		// ( types, fn )
		fn = selector;
		data = selector = undefined;
	} else if ( fn == null ) {
		if ( typeof selector === "string" ) {

			// ( types, selector, fn )
			fn = data;
			data = undefined;
		} else {

			// ( types, data, fn )
			fn = data;
			data = selector;
			selector = undefined;
		}
	}
	if ( fn === false ) {
		fn = returnFalse;
	} else if ( !fn ) {
		return elem;
	}

	if ( one === 1 ) {
		origFn = fn;
		fn = function( event ) {

			// Can use an empty set, since event contains the info
			jQuery().off( event );
			return origFn.apply( this, arguments );
		};

		// Use same guid so caller can remove using origFn
		fn.guid = origFn.guid || ( origFn.guid = jQuery.guid++ );
	}
	return elem.each( function() {
		jQuery.event.add( this, types, fn, data, selector );
	} );
}

/*
 * Helper functions for managing events -- not part of the public interface.
 * Props to Dean Edwards' addEvent library for many of the ideas.
 */
jQuery.event = {

	global: {},

	add: function( elem, types, handler, data, selector ) {

		var handleObjIn, eventHandle, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.get( elem );

		// Don't attach events to noData or text/comment nodes (but allow plain objects)
		if ( !elemData ) {
			return;
		}

		// Caller can pass in an object of custom data in lieu of the handler
		if ( handler.handler ) {
			handleObjIn = handler;
			handler = handleObjIn.handler;
			selector = handleObjIn.selector;
		}

		// Ensure that invalid selectors throw exceptions at attach time
		// Evaluate against documentElement in case elem is a non-element node (e.g., document)
		if ( selector ) {
			jQuery.find.matchesSelector( documentElement, selector );
		}

		// Make sure that the handler has a unique ID, used to find/remove it later
		if ( !handler.guid ) {
			handler.guid = jQuery.guid++;
		}

		// Init the element's event structure and main handler, if this is the first
		if ( !( events = elemData.events ) ) {
			events = elemData.events = {};
		}
		if ( !( eventHandle = elemData.handle ) ) {
			eventHandle = elemData.handle = function( e ) {

				// Discard the second event of a jQuery.event.trigger() and
				// when an event is called after a page has unloaded
				return typeof jQuery !== "undefined" && jQuery.event.triggered !== e.type ?
					jQuery.event.dispatch.apply( elem, arguments ) : undefined;
			};
		}

		// Handle multiple events separated by a space
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// There *must* be a type, no attaching namespace-only handlers
			if ( !type ) {
				continue;
			}

			// If event changes its type, use the special event handlers for the changed type
			special = jQuery.event.special[ type ] || {};

			// If selector defined, determine special event api type, otherwise given type
			type = ( selector ? special.delegateType : special.bindType ) || type;

			// Update special based on newly reset type
			special = jQuery.event.special[ type ] || {};

			// handleObj is passed to all event handlers
			handleObj = jQuery.extend( {
				type: type,
				origType: origType,
				data: data,
				handler: handler,
				guid: handler.guid,
				selector: selector,
				needsContext: selector && jQuery.expr.match.needsContext.test( selector ),
				namespace: namespaces.join( "." )
			}, handleObjIn );

			// Init the event handler queue if we're the first
			if ( !( handlers = events[ type ] ) ) {
				handlers = events[ type ] = [];
				handlers.delegateCount = 0;

				// Only use addEventListener if the special events handler returns false
				if ( !special.setup ||
					special.setup.call( elem, data, namespaces, eventHandle ) === false ) {

					if ( elem.addEventListener ) {
						elem.addEventListener( type, eventHandle );
					}
				}
			}

			if ( special.add ) {
				special.add.call( elem, handleObj );

				if ( !handleObj.handler.guid ) {
					handleObj.handler.guid = handler.guid;
				}
			}

			// Add to the element's handler list, delegates in front
			if ( selector ) {
				handlers.splice( handlers.delegateCount++, 0, handleObj );
			} else {
				handlers.push( handleObj );
			}

			// Keep track of which events have ever been used, for event optimization
			jQuery.event.global[ type ] = true;
		}

	},

	// Detach an event or set of events from an element
	remove: function( elem, types, handler, selector, mappedTypes ) {

		var j, origCount, tmp,
			events, t, handleObj,
			special, handlers, type, namespaces, origType,
			elemData = dataPriv.hasData( elem ) && dataPriv.get( elem );

		if ( !elemData || !( events = elemData.events ) ) {
			return;
		}

		// Once for each type.namespace in types; type may be omitted
		types = ( types || "" ).match( rnothtmlwhite ) || [ "" ];
		t = types.length;
		while ( t-- ) {
			tmp = rtypenamespace.exec( types[ t ] ) || [];
			type = origType = tmp[ 1 ];
			namespaces = ( tmp[ 2 ] || "" ).split( "." ).sort();

			// Unbind all events (on this namespace, if provided) for the element
			if ( !type ) {
				for ( type in events ) {
					jQuery.event.remove( elem, type + types[ t ], handler, selector, true );
				}
				continue;
			}

			special = jQuery.event.special[ type ] || {};
			type = ( selector ? special.delegateType : special.bindType ) || type;
			handlers = events[ type ] || [];
			tmp = tmp[ 2 ] &&
				new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" );

			// Remove matching events
			origCount = j = handlers.length;
			while ( j-- ) {
				handleObj = handlers[ j ];

				if ( ( mappedTypes || origType === handleObj.origType ) &&
					( !handler || handler.guid === handleObj.guid ) &&
					( !tmp || tmp.test( handleObj.namespace ) ) &&
					( !selector || selector === handleObj.selector ||
						selector === "**" && handleObj.selector ) ) {
					handlers.splice( j, 1 );

					if ( handleObj.selector ) {
						handlers.delegateCount--;
					}
					if ( special.remove ) {
						special.remove.call( elem, handleObj );
					}
				}
			}

			// Remove generic event handler if we removed something and no more handlers exist
			// (avoids potential for endless recursion during removal of special event handlers)
			if ( origCount && !handlers.length ) {
				if ( !special.teardown ||
					special.teardown.call( elem, namespaces, elemData.handle ) === false ) {

					jQuery.removeEvent( elem, type, elemData.handle );
				}

				delete events[ type ];
			}
		}

		// Remove data and the expando if it's no longer used
		if ( jQuery.isEmptyObject( events ) ) {
			dataPriv.remove( elem, "handle events" );
		}
	},

	dispatch: function( nativeEvent ) {

		// Make a writable jQuery.Event from the native event object
		var event = jQuery.event.fix( nativeEvent );

		var i, j, ret, matched, handleObj, handlerQueue,
			args = new Array( arguments.length ),
			handlers = ( dataPriv.get( this, "events" ) || {} )[ event.type ] || [],
			special = jQuery.event.special[ event.type ] || {};

		// Use the fix-ed jQuery.Event rather than the (read-only) native event
		args[ 0 ] = event;

		for ( i = 1; i < arguments.length; i++ ) {
			args[ i ] = arguments[ i ];
		}

		event.delegateTarget = this;

		// Call the preDispatch hook for the mapped type, and let it bail if desired
		if ( special.preDispatch && special.preDispatch.call( this, event ) === false ) {
			return;
		}

		// Determine handlers
		handlerQueue = jQuery.event.handlers.call( this, event, handlers );

		// Run delegates first; they may want to stop propagation beneath us
		i = 0;
		while ( ( matched = handlerQueue[ i++ ] ) && !event.isPropagationStopped() ) {
			event.currentTarget = matched.elem;

			j = 0;
			while ( ( handleObj = matched.handlers[ j++ ] ) &&
				!event.isImmediatePropagationStopped() ) {

				// Triggered event must either 1) have no namespace, or 2) have namespace(s)
				// a subset or equal to those in the bound event (both can have no namespace).
				if ( !event.rnamespace || event.rnamespace.test( handleObj.namespace ) ) {

					event.handleObj = handleObj;
					event.data = handleObj.data;

					ret = ( ( jQuery.event.special[ handleObj.origType ] || {} ).handle ||
						handleObj.handler ).apply( matched.elem, args );

					if ( ret !== undefined ) {
						if ( ( event.result = ret ) === false ) {
							event.preventDefault();
							event.stopPropagation();
						}
					}
				}
			}
		}

		// Call the postDispatch hook for the mapped type
		if ( special.postDispatch ) {
			special.postDispatch.call( this, event );
		}

		return event.result;
	},

	handlers: function( event, handlers ) {
		var i, handleObj, sel, matchedHandlers, matchedSelectors,
			handlerQueue = [],
			delegateCount = handlers.delegateCount,
			cur = event.target;

		// Find delegate handlers
		if ( delegateCount &&

			// Support: IE <=9
			// Black-hole SVG <use> instance trees (trac-13180)
			cur.nodeType &&

			// Support: Firefox <=42
			// Suppress spec-violating clicks indicating a non-primary pointer button (trac-3861)
			// https://www.w3.org/TR/DOM-Level-3-Events/#event-type-click
			// Support: IE 11 only
			// ...but not arrow key "clicks" of radio inputs, which can have `button` -1 (gh-2343)
			!( event.type === "click" && event.button >= 1 ) ) {

			for ( ; cur !== this; cur = cur.parentNode || this ) {

				// Don't check non-elements (#13208)
				// Don't process clicks on disabled elements (#6911, #8165, #11382, #11764)
				if ( cur.nodeType === 1 && !( event.type === "click" && cur.disabled === true ) ) {
					matchedHandlers = [];
					matchedSelectors = {};
					for ( i = 0; i < delegateCount; i++ ) {
						handleObj = handlers[ i ];

						// Don't conflict with Object.prototype properties (#13203)
						sel = handleObj.selector + " ";

						if ( matchedSelectors[ sel ] === undefined ) {
							matchedSelectors[ sel ] = handleObj.needsContext ?
								jQuery( sel, this ).index( cur ) > -1 :
								jQuery.find( sel, this, null, [ cur ] ).length;
						}
						if ( matchedSelectors[ sel ] ) {
							matchedHandlers.push( handleObj );
						}
					}
					if ( matchedHandlers.length ) {
						handlerQueue.push( { elem: cur, handlers: matchedHandlers } );
					}
				}
			}
		}

		// Add the remaining (directly-bound) handlers
		cur = this;
		if ( delegateCount < handlers.length ) {
			handlerQueue.push( { elem: cur, handlers: handlers.slice( delegateCount ) } );
		}

		return handlerQueue;
	},

	addProp: function( name, hook ) {
		Object.defineProperty( jQuery.Event.prototype, name, {
			enumerable: true,
			configurable: true,

			get: isFunction( hook ) ?
				function() {
					if ( this.originalEvent ) {
							return hook( this.originalEvent );
					}
				} :
				function() {
					if ( this.originalEvent ) {
							return this.originalEvent[ name ];
					}
				},

			set: function( value ) {
				Object.defineProperty( this, name, {
					enumerable: true,
					configurable: true,
					writable: true,
					value: value
				} );
			}
		} );
	},

	fix: function( originalEvent ) {
		return originalEvent[ jQuery.expando ] ?
			originalEvent :
			new jQuery.Event( originalEvent );
	},

	special: {
		load: {

			// Prevent triggered image.load events from bubbling to window.load
			noBubble: true
		},
		focus: {

			// Fire native event if possible so blur/focus sequence is correct
			trigger: function() {
				if ( this !== safeActiveElement() && this.focus ) {
					this.focus();
					return false;
				}
			},
			delegateType: "focusin"
		},
		blur: {
			trigger: function() {
				if ( this === safeActiveElement() && this.blur ) {
					this.blur();
					return false;
				}
			},
			delegateType: "focusout"
		},
		click: {

			// For checkbox, fire native event so checked state will be right
			trigger: function() {
				if ( this.type === "checkbox" && this.click && nodeName( this, "input" ) ) {
					this.click();
					return false;
				}
			},

			// For cross-browser consistency, don't fire native .click() on links
			_default: function( event ) {
				return nodeName( event.target, "a" );
			}
		},

		beforeunload: {
			postDispatch: function( event ) {

				// Support: Firefox 20+
				// Firefox doesn't alert if the returnValue field is not set.
				if ( event.result !== undefined && event.originalEvent ) {
					event.originalEvent.returnValue = event.result;
				}
			}
		}
	}
};

jQuery.removeEvent = function( elem, type, handle ) {

	// This "if" is needed for plain objects
	if ( elem.removeEventListener ) {
		elem.removeEventListener( type, handle );
	}
};

jQuery.Event = function( src, props ) {

	// Allow instantiation without the 'new' keyword
	if ( !( this instanceof jQuery.Event ) ) {
		return new jQuery.Event( src, props );
	}

	// Event object
	if ( src && src.type ) {
		this.originalEvent = src;
		this.type = src.type;

		// Events bubbling up the document may have been marked as prevented
		// by a handler lower down the tree; reflect the correct value.
		this.isDefaultPrevented = src.defaultPrevented ||
				src.defaultPrevented === undefined &&

				// Support: Android <=2.3 only
				src.returnValue === false ?
			returnTrue :
			returnFalse;

		// Create target properties
		// Support: Safari <=6 - 7 only
		// Target should not be a text node (#504, #13143)
		this.target = ( src.target && src.target.nodeType === 3 ) ?
			src.target.parentNode :
			src.target;

		this.currentTarget = src.currentTarget;
		this.relatedTarget = src.relatedTarget;

	// Event type
	} else {
		this.type = src;
	}

	// Put explicitly provided properties onto the event object
	if ( props ) {
		jQuery.extend( this, props );
	}

	// Create a timestamp if incoming event doesn't have one
	this.timeStamp = src && src.timeStamp || Date.now();

	// Mark it as fixed
	this[ jQuery.expando ] = true;
};

// jQuery.Event is based on DOM3 Events as specified by the ECMAScript Language Binding
// https://www.w3.org/TR/2003/WD-DOM-Level-3-Events-20030331/ecma-script-binding.html
jQuery.Event.prototype = {
	constructor: jQuery.Event,
	isDefaultPrevented: returnFalse,
	isPropagationStopped: returnFalse,
	isImmediatePropagationStopped: returnFalse,
	isSimulated: false,

	preventDefault: function() {
		var e = this.originalEvent;

		this.isDefaultPrevented = returnTrue;

		if ( e && !this.isSimulated ) {
			e.preventDefault();
		}
	},
	stopPropagation: function() {
		var e = this.originalEvent;

		this.isPropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopPropagation();
		}
	},
	stopImmediatePropagation: function() {
		var e = this.originalEvent;

		this.isImmediatePropagationStopped = returnTrue;

		if ( e && !this.isSimulated ) {
			e.stopImmediatePropagation();
		}

		this.stopPropagation();
	}
};

// Includes all common event props including KeyEvent and MouseEvent specific props
jQuery.each( {
	altKey: true,
	bubbles: true,
	cancelable: true,
	changedTouches: true,
	ctrlKey: true,
	detail: true,
	eventPhase: true,
	metaKey: true,
	pageX: true,
	pageY: true,
	shiftKey: true,
	view: true,
	"char": true,
	charCode: true,
	key: true,
	keyCode: true,
	button: true,
	buttons: true,
	clientX: true,
	clientY: true,
	offsetX: true,
	offsetY: true,
	pointerId: true,
	pointerType: true,
	screenX: true,
	screenY: true,
	targetTouches: true,
	toElement: true,
	touches: true,

	which: function( event ) {
		var button = event.button;

		// Add which for key events
		if ( event.which == null && rkeyEvent.test( event.type ) ) {
			return event.charCode != null ? event.charCode : event.keyCode;
		}

		// Add which for click: 1 === left; 2 === middle; 3 === right
		if ( !event.which && button !== undefined && rmouseEvent.test( event.type ) ) {
			if ( button & 1 ) {
				return 1;
			}

			if ( button & 2 ) {
				return 3;
			}

			if ( button & 4 ) {
				return 2;
			}

			return 0;
		}

		return event.which;
	}
}, jQuery.event.addProp );

// Create mouseenter/leave events using mouseover/out and event-time checks
// so that event delegation works in jQuery.
// Do the same for pointerenter/pointerleave and pointerover/pointerout
//
// Support: Safari 7 only
// Safari sends mouseenter too often; see:
// https://bugs.chromium.org/p/chromium/issues/detail?id=470258
// for the description of the bug (it existed in older Chrome versions as well).
jQuery.each( {
	mouseenter: "mouseover",
	mouseleave: "mouseout",
	pointerenter: "pointerover",
	pointerleave: "pointerout"
}, function( orig, fix ) {
	jQuery.event.special[ orig ] = {
		delegateType: fix,
		bindType: fix,

		handle: function( event ) {
			var ret,
				target = this,
				related = event.relatedTarget,
				handleObj = event.handleObj;

			// For mouseenter/leave call the handler if related is outside the target.
			// NB: No relatedTarget if the mouse left/entered the browser window
			if ( !related || ( related !== target && !jQuery.contains( target, related ) ) ) {
				event.type = handleObj.origType;
				ret = handleObj.handler.apply( this, arguments );
				event.type = fix;
			}
			return ret;
		}
	};
} );

jQuery.fn.extend( {

	on: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn );
	},
	one: function( types, selector, data, fn ) {
		return on( this, types, selector, data, fn, 1 );
	},
	off: function( types, selector, fn ) {
		var handleObj, type;
		if ( types && types.preventDefault && types.handleObj ) {

			// ( event )  dispatched jQuery.Event
			handleObj = types.handleObj;
			jQuery( types.delegateTarget ).off(
				handleObj.namespace ?
					handleObj.origType + "." + handleObj.namespace :
					handleObj.origType,
				handleObj.selector,
				handleObj.handler
			);
			return this;
		}
		if ( typeof types === "object" ) {

			// ( types-object [, selector] )
			for ( type in types ) {
				this.off( type, selector, types[ type ] );
			}
			return this;
		}
		if ( selector === false || typeof selector === "function" ) {

			// ( types [, fn] )
			fn = selector;
			selector = undefined;
		}
		if ( fn === false ) {
			fn = returnFalse;
		}
		return this.each( function() {
			jQuery.event.remove( this, types, fn, selector );
		} );
	}
} );


var

	/* eslint-disable max-len */

	// See https://github.com/eslint/eslint/issues/3229
	rxhtmlTag = /<(?!area|br|col|embed|hr|img|input|link|meta|param)(([a-z][^\/\0>\x20\t\r\n\f]*)[^>]*)\/>/gi,

	/* eslint-enable */

	// Support: IE <=10 - 11, Edge 12 - 13 only
	// In IE/Edge using regex groups here causes severe slowdowns.
	// See https://connect.microsoft.com/IE/feedback/details/1736512/
	rnoInnerhtml = /<script|<style|<link/i,

	// checked="checked" or checked
	rchecked = /checked\s*(?:[^=]|=\s*.checked.)/i,
	rcleanScript = /^\s*<!(?:\[CDATA\[|--)|(?:\]\]|--)>\s*$/g;

// Prefer a tbody over its parent table for containing new rows
function manipulationTarget( elem, content ) {
	if ( nodeName( elem, "table" ) &&
		nodeName( content.nodeType !== 11 ? content : content.firstChild, "tr" ) ) {

		return jQuery( elem ).children( "tbody" )[ 0 ] || elem;
	}

	return elem;
}

// Replace/restore the type attribute of script elements for safe DOM manipulation
function disableScript( elem ) {
	elem.type = ( elem.getAttribute( "type" ) !== null ) + "/" + elem.type;
	return elem;
}
function restoreScript( elem ) {
	if ( ( elem.type || "" ).slice( 0, 5 ) === "true/" ) {
		elem.type = elem.type.slice( 5 );
	} else {
		elem.removeAttribute( "type" );
	}

	return elem;
}

function cloneCopyEvent( src, dest ) {
	var i, l, type, pdataOld, pdataCur, udataOld, udataCur, events;

	if ( dest.nodeType !== 1 ) {
		return;
	}

	// 1. Copy private data: events, handlers, etc.
	if ( dataPriv.hasData( src ) ) {
		pdataOld = dataPriv.access( src );
		pdataCur = dataPriv.set( dest, pdataOld );
		events = pdataOld.events;

		if ( events ) {
			delete pdataCur.handle;
			pdataCur.events = {};

			for ( type in events ) {
				for ( i = 0, l = events[ type ].length; i < l; i++ ) {
					jQuery.event.add( dest, type, events[ type ][ i ] );
				}
			}
		}
	}

	// 2. Copy user data
	if ( dataUser.hasData( src ) ) {
		udataOld = dataUser.access( src );
		udataCur = jQuery.extend( {}, udataOld );

		dataUser.set( dest, udataCur );
	}
}

// Fix IE bugs, see support tests
function fixInput( src, dest ) {
	var nodeName = dest.nodeName.toLowerCase();

	// Fails to persist the checked state of a cloned checkbox or radio button.
	if ( nodeName === "input" && rcheckableType.test( src.type ) ) {
		dest.checked = src.checked;

	// Fails to return the selected option to the default selected state when cloning options
	} else if ( nodeName === "input" || nodeName === "textarea" ) {
		dest.defaultValue = src.defaultValue;
	}
}

function domManip( collection, args, callback, ignored ) {

	// Flatten any nested arrays
	args = concat.apply( [], args );

	var fragment, first, scripts, hasScripts, node, doc,
		i = 0,
		l = collection.length,
		iNoClone = l - 1,
		value = args[ 0 ],
		valueIsFunction = isFunction( value );

	// We can't cloneNode fragments that contain checked, in WebKit
	if ( valueIsFunction ||
			( l > 1 && typeof value === "string" &&
				!support.checkClone && rchecked.test( value ) ) ) {
		return collection.each( function( index ) {
			var self = collection.eq( index );
			if ( valueIsFunction ) {
				args[ 0 ] = value.call( this, index, self.html() );
			}
			domManip( self, args, callback, ignored );
		} );
	}

	if ( l ) {
		fragment = buildFragment( args, collection[ 0 ].ownerDocument, false, collection, ignored );
		first = fragment.firstChild;

		if ( fragment.childNodes.length === 1 ) {
			fragment = first;
		}

		// Require either new content or an interest in ignored elements to invoke the callback
		if ( first || ignored ) {
			scripts = jQuery.map( getAll( fragment, "script" ), disableScript );
			hasScripts = scripts.length;

			// Use the original fragment for the last item
			// instead of the first because it can end up
			// being emptied incorrectly in certain situations (#8070).
			for ( ; i < l; i++ ) {
				node = fragment;

				if ( i !== iNoClone ) {
					node = jQuery.clone( node, true, true );

					// Keep references to cloned scripts for later restoration
					if ( hasScripts ) {

						// Support: Android <=4.0 only, PhantomJS 1 only
						// push.apply(_, arraylike) throws on ancient WebKit
						jQuery.merge( scripts, getAll( node, "script" ) );
					}
				}

				callback.call( collection[ i ], node, i );
			}

			if ( hasScripts ) {
				doc = scripts[ scripts.length - 1 ].ownerDocument;

				// Reenable scripts
				jQuery.map( scripts, restoreScript );

				// Evaluate executable scripts on first document insertion
				for ( i = 0; i < hasScripts; i++ ) {
					node = scripts[ i ];
					if ( rscriptType.test( node.type || "" ) &&
						!dataPriv.access( node, "globalEval" ) &&
						jQuery.contains( doc, node ) ) {

						if ( node.src && ( node.type || "" ).toLowerCase()  !== "module" ) {

							// Optional AJAX dependency, but won't run scripts if not present
							if ( jQuery._evalUrl ) {
								jQuery._evalUrl( node.src );
							}
						} else {
							DOMEval( node.textContent.replace( rcleanScript, "" ), doc, node );
						}
					}
				}
			}
		}
	}

	return collection;
}

function remove( elem, selector, keepData ) {
	var node,
		nodes = selector ? jQuery.filter( selector, elem ) : elem,
		i = 0;

	for ( ; ( node = nodes[ i ] ) != null; i++ ) {
		if ( !keepData && node.nodeType === 1 ) {
			jQuery.cleanData( getAll( node ) );
		}

		if ( node.parentNode ) {
			if ( keepData && jQuery.contains( node.ownerDocument, node ) ) {
				setGlobalEval( getAll( node, "script" ) );
			}
			node.parentNode.removeChild( node );
		}
	}

	return elem;
}

jQuery.extend( {
	htmlPrefilter: function( html ) {
		return html.replace( rxhtmlTag, "<$1></$2>" );
	},

	clone: function( elem, dataAndEvents, deepDataAndEvents ) {
		var i, l, srcElements, destElements,
			clone = elem.cloneNode( true ),
			inPage = jQuery.contains( elem.ownerDocument, elem );

		// Fix IE cloning issues
		if ( !support.noCloneChecked && ( elem.nodeType === 1 || elem.nodeType === 11 ) &&
				!jQuery.isXMLDoc( elem ) ) {

			// We eschew Sizzle here for performance reasons: https://jsperf.com/getall-vs-sizzle/2
			destElements = getAll( clone );
			srcElements = getAll( elem );

			for ( i = 0, l = srcElements.length; i < l; i++ ) {
				fixInput( srcElements[ i ], destElements[ i ] );
			}
		}

		// Copy the events from the original to the clone
		if ( dataAndEvents ) {
			if ( deepDataAndEvents ) {
				srcElements = srcElements || getAll( elem );
				destElements = destElements || getAll( clone );

				for ( i = 0, l = srcElements.length; i < l; i++ ) {
					cloneCopyEvent( srcElements[ i ], destElements[ i ] );
				}
			} else {
				cloneCopyEvent( elem, clone );
			}
		}

		// Preserve script evaluation history
		destElements = getAll( clone, "script" );
		if ( destElements.length > 0 ) {
			setGlobalEval( destElements, !inPage && getAll( elem, "script" ) );
		}

		// Return the cloned set
		return clone;
	},

	cleanData: function( elems ) {
		var data, elem, type,
			special = jQuery.event.special,
			i = 0;

		for ( ; ( elem = elems[ i ] ) !== undefined; i++ ) {
			if ( acceptData( elem ) ) {
				if ( ( data = elem[ dataPriv.expando ] ) ) {
					if ( data.events ) {
						for ( type in data.events ) {
							if ( special[ type ] ) {
								jQuery.event.remove( elem, type );

							// This is a shortcut to avoid jQuery.event.remove's overhead
							} else {
								jQuery.removeEvent( elem, type, data.handle );
							}
						}
					}

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataPriv.expando ] = undefined;
				}
				if ( elem[ dataUser.expando ] ) {

					// Support: Chrome <=35 - 45+
					// Assign undefined instead of using delete, see Data#remove
					elem[ dataUser.expando ] = undefined;
				}
			}
		}
	}
} );

jQuery.fn.extend( {
	detach: function( selector ) {
		return remove( this, selector, true );
	},

	remove: function( selector ) {
		return remove( this, selector );
	},

	text: function( value ) {
		return access( this, function( value ) {
			return value === undefined ?
				jQuery.text( this ) :
				this.empty().each( function() {
					if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
						this.textContent = value;
					}
				} );
		}, null, value, arguments.length );
	},

	append: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.appendChild( elem );
			}
		} );
	},

	prepend: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.nodeType === 1 || this.nodeType === 11 || this.nodeType === 9 ) {
				var target = manipulationTarget( this, elem );
				target.insertBefore( elem, target.firstChild );
			}
		} );
	},

	before: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this );
			}
		} );
	},

	after: function() {
		return domManip( this, arguments, function( elem ) {
			if ( this.parentNode ) {
				this.parentNode.insertBefore( elem, this.nextSibling );
			}
		} );
	},

	empty: function() {
		var elem,
			i = 0;

		for ( ; ( elem = this[ i ] ) != null; i++ ) {
			if ( elem.nodeType === 1 ) {

				// Prevent memory leaks
				jQuery.cleanData( getAll( elem, false ) );

				// Remove any remaining nodes
				elem.textContent = "";
			}
		}

		return this;
	},

	clone: function( dataAndEvents, deepDataAndEvents ) {
		dataAndEvents = dataAndEvents == null ? false : dataAndEvents;
		deepDataAndEvents = deepDataAndEvents == null ? dataAndEvents : deepDataAndEvents;

		return this.map( function() {
			return jQuery.clone( this, dataAndEvents, deepDataAndEvents );
		} );
	},

	html: function( value ) {
		return access( this, function( value ) {
			var elem = this[ 0 ] || {},
				i = 0,
				l = this.length;

			if ( value === undefined && elem.nodeType === 1 ) {
				return elem.innerHTML;
			}

			// See if we can take a shortcut and just use innerHTML
			if ( typeof value === "string" && !rnoInnerhtml.test( value ) &&
				!wrapMap[ ( rtagName.exec( value ) || [ "", "" ] )[ 1 ].toLowerCase() ] ) {

				value = jQuery.htmlPrefilter( value );

				try {
					for ( ; i < l; i++ ) {
						elem = this[ i ] || {};

						// Remove element nodes and prevent memory leaks
						if ( elem.nodeType === 1 ) {
							jQuery.cleanData( getAll( elem, false ) );
							elem.innerHTML = value;
						}
					}

					elem = 0;

				// If using innerHTML throws an exception, use the fallback method
				} catch ( e ) {}
			}

			if ( elem ) {
				this.empty().append( value );
			}
		}, null, value, arguments.length );
	},

	replaceWith: function() {
		var ignored = [];

		// Make the changes, replacing each non-ignored context element with the new content
		return domManip( this, arguments, function( elem ) {
			var parent = this.parentNode;

			if ( jQuery.inArray( this, ignored ) < 0 ) {
				jQuery.cleanData( getAll( this ) );
				if ( parent ) {
					parent.replaceChild( elem, this );
				}
			}

		// Force callback invocation
		}, ignored );
	}
} );

jQuery.each( {
	appendTo: "append",
	prependTo: "prepend",
	insertBefore: "before",
	insertAfter: "after",
	replaceAll: "replaceWith"
}, function( name, original ) {
	jQuery.fn[ name ] = function( selector ) {
		var elems,
			ret = [],
			insert = jQuery( selector ),
			last = insert.length - 1,
			i = 0;

		for ( ; i <= last; i++ ) {
			elems = i === last ? this : this.clone( true );
			jQuery( insert[ i ] )[ original ]( elems );

			// Support: Android <=4.0 only, PhantomJS 1 only
			// .get() because push.apply(_, arraylike) throws on ancient WebKit
			push.apply( ret, elems.get() );
		}

		return this.pushStack( ret );
	};
} );
var rnumnonpx = new RegExp( "^(" + pnum + ")(?!px)[a-z%]+$", "i" );

var getStyles = function( elem ) {

		// Support: IE <=11 only, Firefox <=30 (#15098, #14150)
		// IE throws on elements created in popups
		// FF meanwhile throws on frame elements through "defaultView.getComputedStyle"
		var view = elem.ownerDocument.defaultView;

		if ( !view || !view.opener ) {
			view = window;
		}

		return view.getComputedStyle( elem );
	};

var rboxStyle = new RegExp( cssExpand.join( "|" ), "i" );



( function() {

	// Executing both pixelPosition & boxSizingReliable tests require only one layout
	// so they're executed at the same time to save the second computation.
	function computeStyleTests() {

		// This is a singleton, we need to execute it only once
		if ( !div ) {
			return;
		}

		container.style.cssText = "position:absolute;left:-11111px;width:60px;" +
			"margin-top:1px;padding:0;border:0";
		div.style.cssText =
			"position:relative;display:block;box-sizing:border-box;overflow:scroll;" +
			"margin:auto;border:1px;padding:1px;" +
			"width:60%;top:1%";
		documentElement.appendChild( container ).appendChild( div );

		var divStyle = window.getComputedStyle( div );
		pixelPositionVal = divStyle.top !== "1%";

		// Support: Android 4.0 - 4.3 only, Firefox <=3 - 44
		reliableMarginLeftVal = roundPixelMeasures( divStyle.marginLeft ) === 12;

		// Support: Android 4.0 - 4.3 only, Safari <=9.1 - 10.1, iOS <=7.0 - 9.3
		// Some styles come back with percentage values, even though they shouldn't
		div.style.right = "60%";
		pixelBoxStylesVal = roundPixelMeasures( divStyle.right ) === 36;

		// Support: IE 9 - 11 only
		// Detect misreporting of content dimensions for box-sizing:border-box elements
		boxSizingReliableVal = roundPixelMeasures( divStyle.width ) === 36;

		// Support: IE 9 only
		// Detect overflow:scroll screwiness (gh-3699)
		div.style.position = "absolute";
		scrollboxSizeVal = div.offsetWidth === 36 || "absolute";

		documentElement.removeChild( container );

		// Nullify the div so it wouldn't be stored in the memory and
		// it will also be a sign that checks already performed
		div = null;
	}

	function roundPixelMeasures( measure ) {
		return Math.round( parseFloat( measure ) );
	}

	var pixelPositionVal, boxSizingReliableVal, scrollboxSizeVal, pixelBoxStylesVal,
		reliableMarginLeftVal,
		container = document.createElement( "div" ),
		div = document.createElement( "div" );

	// Finish early in limited (non-browser) environments
	if ( !div.style ) {
		return;
	}

	// Support: IE <=9 - 11 only
	// Style of cloned element affects source element cloned (#8908)
	div.style.backgroundClip = "content-box";
	div.cloneNode( true ).style.backgroundClip = "";
	support.clearCloneStyle = div.style.backgroundClip === "content-box";

	jQuery.extend( support, {
		boxSizingReliable: function() {
			computeStyleTests();
			return boxSizingReliableVal;
		},
		pixelBoxStyles: function() {
			computeStyleTests();
			return pixelBoxStylesVal;
		},
		pixelPosition: function() {
			computeStyleTests();
			return pixelPositionVal;
		},
		reliableMarginLeft: function() {
			computeStyleTests();
			return reliableMarginLeftVal;
		},
		scrollboxSize: function() {
			computeStyleTests();
			return scrollboxSizeVal;
		}
	} );
} )();


function curCSS( elem, name, computed ) {
	var width, minWidth, maxWidth, ret,

		// Support: Firefox 51+
		// Retrieving style before computed somehow
		// fixes an issue with getting wrong values
		// on detached elements
		style = elem.style;

	computed = computed || getStyles( elem );

	// getPropertyValue is needed for:
	//   .css('filter') (IE 9 only, #12537)
	//   .css('--customProperty) (#3144)
	if ( computed ) {
		ret = computed.getPropertyValue( name ) || computed[ name ];

		if ( ret === "" && !jQuery.contains( elem.ownerDocument, elem ) ) {
			ret = jQuery.style( elem, name );
		}

		// A tribute to the "awesome hack by Dean Edwards"
		// Android Browser returns percentage for some values,
		// but width seems to be reliably pixels.
		// This is against the CSSOM draft spec:
		// https://drafts.csswg.org/cssom/#resolved-values
		if ( !support.pixelBoxStyles() && rnumnonpx.test( ret ) && rboxStyle.test( name ) ) {

			// Remember the original values
			width = style.width;
			minWidth = style.minWidth;
			maxWidth = style.maxWidth;

			// Put in the new values to get a computed value out
			style.minWidth = style.maxWidth = style.width = ret;
			ret = computed.width;

			// Revert the changed values
			style.width = width;
			style.minWidth = minWidth;
			style.maxWidth = maxWidth;
		}
	}

	return ret !== undefined ?

		// Support: IE <=9 - 11 only
		// IE returns zIndex value as an integer.
		ret + "" :
		ret;
}


function addGetHookIf( conditionFn, hookFn ) {

	// Define the hook, we'll check on the first run if it's really needed.
	return {
		get: function() {
			if ( conditionFn() ) {

				// Hook not needed (or it's not possible to use it due
				// to missing dependency), remove it.
				delete this.get;
				return;
			}

			// Hook needed; redefine it so that the support test is not executed again.
			return ( this.get = hookFn ).apply( this, arguments );
		}
	};
}


var

	// Swappable if display is none or starts with table
	// except "table", "table-cell", or "table-caption"
	// See here for display values: https://developer.mozilla.org/en-US/docs/CSS/display
	rdisplayswap = /^(none|table(?!-c[ea]).+)/,
	rcustomProp = /^--/,
	cssShow = { position: "absolute", visibility: "hidden", display: "block" },
	cssNormalTransform = {
		letterSpacing: "0",
		fontWeight: "400"
	},

	cssPrefixes = [ "Webkit", "Moz", "ms" ],
	emptyStyle = document.createElement( "div" ).style;

// Return a css property mapped to a potentially vendor prefixed property
function vendorPropName( name ) {

	// Shortcut for names that are not vendor prefixed
	if ( name in emptyStyle ) {
		return name;
	}

	// Check for vendor prefixed names
	var capName = name[ 0 ].toUpperCase() + name.slice( 1 ),
		i = cssPrefixes.length;

	while ( i-- ) {
		name = cssPrefixes[ i ] + capName;
		if ( name in emptyStyle ) {
			return name;
		}
	}
}

// Return a property mapped along what jQuery.cssProps suggests or to
// a vendor prefixed property.
function finalPropName( name ) {
	var ret = jQuery.cssProps[ name ];
	if ( !ret ) {
		ret = jQuery.cssProps[ name ] = vendorPropName( name ) || name;
	}
	return ret;
}

function setPositiveNumber( elem, value, subtract ) {

	// Any relative (+/-) values have already been
	// normalized at this point
	var matches = rcssNum.exec( value );
	return matches ?

		// Guard against undefined "subtract", e.g., when used as in cssHooks
		Math.max( 0, matches[ 2 ] - ( subtract || 0 ) ) + ( matches[ 3 ] || "px" ) :
		value;
}

function boxModelAdjustment( elem, dimension, box, isBorderBox, styles, computedVal ) {
	var i = dimension === "width" ? 1 : 0,
		extra = 0,
		delta = 0;

	// Adjustment may not be necessary
	if ( box === ( isBorderBox ? "border" : "content" ) ) {
		return 0;
	}

	for ( ; i < 4; i += 2 ) {

		// Both box models exclude margin
		if ( box === "margin" ) {
			delta += jQuery.css( elem, box + cssExpand[ i ], true, styles );
		}

		// If we get here with a content-box, we're seeking "padding" or "border" or "margin"
		if ( !isBorderBox ) {

			// Add padding
			delta += jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );

			// For "border" or "margin", add border
			if ( box !== "padding" ) {
				delta += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );

			// But still keep track of it otherwise
			} else {
				extra += jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}

		// If we get here with a border-box (content + padding + border), we're seeking "content" or
		// "padding" or "margin"
		} else {

			// For "content", subtract padding
			if ( box === "content" ) {
				delta -= jQuery.css( elem, "padding" + cssExpand[ i ], true, styles );
			}

			// For "content" or "padding", subtract border
			if ( box !== "margin" ) {
				delta -= jQuery.css( elem, "border" + cssExpand[ i ] + "Width", true, styles );
			}
		}
	}

	// Account for positive content-box scroll gutter when requested by providing computedVal
	if ( !isBorderBox && computedVal >= 0 ) {

		// offsetWidth/offsetHeight is a rounded sum of content, padding, scroll gutter, and border
		// Assuming integer scroll gutter, subtract the rest and round down
		delta += Math.max( 0, Math.ceil(
			elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
			computedVal -
			delta -
			extra -
			0.5
		) );
	}

	return delta;
}

function getWidthOrHeight( elem, dimension, extra ) {

	// Start with computed style
	var styles = getStyles( elem ),
		val = curCSS( elem, dimension, styles ),
		isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
		valueIsBorderBox = isBorderBox;

	// Support: Firefox <=54
	// Return a confounding non-pixel value or feign ignorance, as appropriate.
	if ( rnumnonpx.test( val ) ) {
		if ( !extra ) {
			return val;
		}
		val = "auto";
	}

	// Check for style in case a browser which returns unreliable values
	// for getComputedStyle silently falls back to the reliable elem.style
	valueIsBorderBox = valueIsBorderBox &&
		( support.boxSizingReliable() || val === elem.style[ dimension ] );

	// Fall back to offsetWidth/offsetHeight when value is "auto"
	// This happens for inline elements with no explicit setting (gh-3571)
	// Support: Android <=4.1 - 4.3 only
	// Also use offsetWidth/offsetHeight for misreported inline dimensions (gh-3602)
	if ( val === "auto" ||
		!parseFloat( val ) && jQuery.css( elem, "display", false, styles ) === "inline" ) {

		val = elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ];

		// offsetWidth/offsetHeight provide border-box values
		valueIsBorderBox = true;
	}

	// Normalize "" and auto
	val = parseFloat( val ) || 0;

	// Adjust for the element's box model
	return ( val +
		boxModelAdjustment(
			elem,
			dimension,
			extra || ( isBorderBox ? "border" : "content" ),
			valueIsBorderBox,
			styles,

			// Provide the current computed size to request scroll gutter calculation (gh-3589)
			val
		)
	) + "px";
}

jQuery.extend( {

	// Add in style property hooks for overriding the default
	// behavior of getting and setting a style property
	cssHooks: {
		opacity: {
			get: function( elem, computed ) {
				if ( computed ) {

					// We should always get a number back from opacity
					var ret = curCSS( elem, "opacity" );
					return ret === "" ? "1" : ret;
				}
			}
		}
	},

	// Don't automatically add "px" to these possibly-unitless properties
	cssNumber: {
		"animationIterationCount": true,
		"columnCount": true,
		"fillOpacity": true,
		"flexGrow": true,
		"flexShrink": true,
		"fontWeight": true,
		"lineHeight": true,
		"opacity": true,
		"order": true,
		"orphans": true,
		"widows": true,
		"zIndex": true,
		"zoom": true
	},

	// Add in properties whose names you wish to fix before
	// setting or getting the value
	cssProps: {},

	// Get and set the style property on a DOM Node
	style: function( elem, name, value, extra ) {

		// Don't set styles on text and comment nodes
		if ( !elem || elem.nodeType === 3 || elem.nodeType === 8 || !elem.style ) {
			return;
		}

		// Make sure that we're working with the right name
		var ret, type, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name ),
			style = elem.style;

		// Make sure that we're working with the right name. We don't
		// want to query the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Gets hook for the prefixed version, then unprefixed version
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// Check if we're setting a value
		if ( value !== undefined ) {
			type = typeof value;

			// Convert "+=" or "-=" to relative numbers (#7345)
			if ( type === "string" && ( ret = rcssNum.exec( value ) ) && ret[ 1 ] ) {
				value = adjustCSS( elem, name, ret );

				// Fixes bug #9237
				type = "number";
			}

			// Make sure that null and NaN values aren't set (#7116)
			if ( value == null || value !== value ) {
				return;
			}

			// If a number was passed in, add the unit (except for certain CSS properties)
			if ( type === "number" ) {
				value += ret && ret[ 3 ] || ( jQuery.cssNumber[ origName ] ? "" : "px" );
			}

			// background-* props affect original clone's values
			if ( !support.clearCloneStyle && value === "" && name.indexOf( "background" ) === 0 ) {
				style[ name ] = "inherit";
			}

			// If a hook was provided, use that value, otherwise just set the specified value
			if ( !hooks || !( "set" in hooks ) ||
				( value = hooks.set( elem, value, extra ) ) !== undefined ) {

				if ( isCustomProp ) {
					style.setProperty( name, value );
				} else {
					style[ name ] = value;
				}
			}

		} else {

			// If a hook was provided get the non-computed value from there
			if ( hooks && "get" in hooks &&
				( ret = hooks.get( elem, false, extra ) ) !== undefined ) {

				return ret;
			}

			// Otherwise just get the value from the style object
			return style[ name ];
		}
	},

	css: function( elem, name, extra, styles ) {
		var val, num, hooks,
			origName = camelCase( name ),
			isCustomProp = rcustomProp.test( name );

		// Make sure that we're working with the right name. We don't
		// want to modify the value if it is a CSS custom property
		// since they are user-defined.
		if ( !isCustomProp ) {
			name = finalPropName( origName );
		}

		// Try prefixed name followed by the unprefixed name
		hooks = jQuery.cssHooks[ name ] || jQuery.cssHooks[ origName ];

		// If a hook was provided get the computed value from there
		if ( hooks && "get" in hooks ) {
			val = hooks.get( elem, true, extra );
		}

		// Otherwise, if a way to get the computed value exists, use that
		if ( val === undefined ) {
			val = curCSS( elem, name, styles );
		}

		// Convert "normal" to computed value
		if ( val === "normal" && name in cssNormalTransform ) {
			val = cssNormalTransform[ name ];
		}

		// Make numeric if forced or a qualifier was provided and val looks numeric
		if ( extra === "" || extra ) {
			num = parseFloat( val );
			return extra === true || isFinite( num ) ? num || 0 : val;
		}

		return val;
	}
} );

jQuery.each( [ "height", "width" ], function( i, dimension ) {
	jQuery.cssHooks[ dimension ] = {
		get: function( elem, computed, extra ) {
			if ( computed ) {

				// Certain elements can have dimension info if we invisibly show them
				// but it must have a current display style that would benefit
				return rdisplayswap.test( jQuery.css( elem, "display" ) ) &&

					// Support: Safari 8+
					// Table columns in Safari have non-zero offsetWidth & zero
					// getBoundingClientRect().width unless display is changed.
					// Support: IE <=11 only
					// Running getBoundingClientRect on a disconnected node
					// in IE throws an error.
					( !elem.getClientRects().length || !elem.getBoundingClientRect().width ) ?
						swap( elem, cssShow, function() {
							return getWidthOrHeight( elem, dimension, extra );
						} ) :
						getWidthOrHeight( elem, dimension, extra );
			}
		},

		set: function( elem, value, extra ) {
			var matches,
				styles = getStyles( elem ),
				isBorderBox = jQuery.css( elem, "boxSizing", false, styles ) === "border-box",
				subtract = extra && boxModelAdjustment(
					elem,
					dimension,
					extra,
					isBorderBox,
					styles
				);

			// Account for unreliable border-box dimensions by comparing offset* to computed and
			// faking a content-box to get border and padding (gh-3699)
			if ( isBorderBox && support.scrollboxSize() === styles.position ) {
				subtract -= Math.ceil(
					elem[ "offset" + dimension[ 0 ].toUpperCase() + dimension.slice( 1 ) ] -
					parseFloat( styles[ dimension ] ) -
					boxModelAdjustment( elem, dimension, "border", false, styles ) -
					0.5
				);
			}

			// Convert to pixels if value adjustment is needed
			if ( subtract && ( matches = rcssNum.exec( value ) ) &&
				( matches[ 3 ] || "px" ) !== "px" ) {

				elem.style[ dimension ] = value;
				value = jQuery.css( elem, dimension );
			}

			return setPositiveNumber( elem, value, subtract );
		}
	};
} );

jQuery.cssHooks.marginLeft = addGetHookIf( support.reliableMarginLeft,
	function( elem, computed ) {
		if ( computed ) {
			return ( parseFloat( curCSS( elem, "marginLeft" ) ) ||
				elem.getBoundingClientRect().left -
					swap( elem, { marginLeft: 0 }, function() {
						return elem.getBoundingClientRect().left;
					} )
				) + "px";
		}
	}
);

// These hooks are used by animate to expand properties
jQuery.each( {
	margin: "",
	padding: "",
	border: "Width"
}, function( prefix, suffix ) {
	jQuery.cssHooks[ prefix + suffix ] = {
		expand: function( value ) {
			var i = 0,
				expanded = {},

				// Assumes a single number if not a string
				parts = typeof value === "string" ? value.split( " " ) : [ value ];

			for ( ; i < 4; i++ ) {
				expanded[ prefix + cssExpand[ i ] + suffix ] =
					parts[ i ] || parts[ i - 2 ] || parts[ 0 ];
			}

			return expanded;
		}
	};

	if ( prefix !== "margin" ) {
		jQuery.cssHooks[ prefix + suffix ].set = setPositiveNumber;
	}
} );

jQuery.fn.extend( {
	css: function( name, value ) {
		return access( this, function( elem, name, value ) {
			var styles, len,
				map = {},
				i = 0;

			if ( Array.isArray( name ) ) {
				styles = getStyles( elem );
				len = name.length;

				for ( ; i < len; i++ ) {
					map[ name[ i ] ] = jQuery.css( elem, name[ i ], false, styles );
				}

				return map;
			}

			return value !== undefined ?
				jQuery.style( elem, name, value ) :
				jQuery.css( elem, name );
		}, name, value, arguments.length > 1 );
	}
} );


function Tween( elem, options, prop, end, easing ) {
	return new Tween.prototype.init( elem, options, prop, end, easing );
}
jQuery.Tween = Tween;

Tween.prototype = {
	constructor: Tween,
	init: function( elem, options, prop, end, easing, unit ) {
		this.elem = elem;
		this.prop = prop;
		this.easing = easing || jQuery.easing._default;
		this.options = options;
		this.start = this.now = this.cur();
		this.end = end;
		this.unit = unit || ( jQuery.cssNumber[ prop ] ? "" : "px" );
	},
	cur: function() {
		var hooks = Tween.propHooks[ this.prop ];

		return hooks && hooks.get ?
			hooks.get( this ) :
			Tween.propHooks._default.get( this );
	},
	run: function( percent ) {
		var eased,
			hooks = Tween.propHooks[ this.prop ];

		if ( this.options.duration ) {
			this.pos = eased = jQuery.easing[ this.easing ](
				percent, this.options.duration * percent, 0, 1, this.options.duration
			);
		} else {
			this.pos = eased = percent;
		}
		this.now = ( this.end - this.start ) * eased + this.start;

		if ( this.options.step ) {
			this.options.step.call( this.elem, this.now, this );
		}

		if ( hooks && hooks.set ) {
			hooks.set( this );
		} else {
			Tween.propHooks._default.set( this );
		}
		return this;
	}
};

Tween.prototype.init.prototype = Tween.prototype;

Tween.propHooks = {
	_default: {
		get: function( tween ) {
			var result;

			// Use a property on the element directly when it is not a DOM element,
			// or when there is no matching style property that exists.
			if ( tween.elem.nodeType !== 1 ||
				tween.elem[ tween.prop ] != null && tween.elem.style[ tween.prop ] == null ) {
				return tween.elem[ tween.prop ];
			}

			// Passing an empty string as a 3rd parameter to .css will automatically
			// attempt a parseFloat and fallback to a string if the parse fails.
			// Simple values such as "10px" are parsed to Float;
			// complex values such as "rotate(1rad)" are returned as-is.
			result = jQuery.css( tween.elem, tween.prop, "" );

			// Empty strings, null, undefined and "auto" are converted to 0.
			return !result || result === "auto" ? 0 : result;
		},
		set: function( tween ) {

			// Use step hook for back compat.
			// Use cssHook if its there.
			// Use .style if available and use plain properties where available.
			if ( jQuery.fx.step[ tween.prop ] ) {
				jQuery.fx.step[ tween.prop ]( tween );
			} else if ( tween.elem.nodeType === 1 &&
				( tween.elem.style[ jQuery.cssProps[ tween.prop ] ] != null ||
					jQuery.cssHooks[ tween.prop ] ) ) {
				jQuery.style( tween.elem, tween.prop, tween.now + tween.unit );
			} else {
				tween.elem[ tween.prop ] = tween.now;
			}
		}
	}
};

// Support: IE <=9 only
// Panic based approach to setting things on disconnected nodes
Tween.propHooks.scrollTop = Tween.propHooks.scrollLeft = {
	set: function( tween ) {
		if ( tween.elem.nodeType && tween.elem.parentNode ) {
			tween.elem[ tween.prop ] = tween.now;
		}
	}
};

jQuery.easing = {
	linear: function( p ) {
		return p;
	},
	swing: function( p ) {
		return 0.5 - Math.cos( p * Math.PI ) / 2;
	},
	_default: "swing"
};

jQuery.fx = Tween.prototype.init;

// Back compat <1.8 extension point
jQuery.fx.step = {};




var
	fxNow, inProgress,
	rfxtypes = /^(?:toggle|show|hide)$/,
	rrun = /queueHooks$/;

function schedule() {
	if ( inProgress ) {
		if ( document.hidden === false && window.requestAnimationFrame ) {
			window.requestAnimationFrame( schedule );
		} else {
			window.setTimeout( schedule, jQuery.fx.interval );
		}

		jQuery.fx.tick();
	}
}

// Animations created synchronously will run synchronously
function createFxNow() {
	window.setTimeout( function() {
		fxNow = undefined;
	} );
	return ( fxNow = Date.now() );
}

// Generate parameters to create a standard animation
function genFx( type, includeWidth ) {
	var which,
		i = 0,
		attrs = { height: type };

	// If we include width, step value is 1 to do all cssExpand values,
	// otherwise step value is 2 to skip over Left and Right
	includeWidth = includeWidth ? 1 : 0;
	for ( ; i < 4; i += 2 - includeWidth ) {
		which = cssExpand[ i ];
		attrs[ "margin" + which ] = attrs[ "padding" + which ] = type;
	}

	if ( includeWidth ) {
		attrs.opacity = attrs.width = type;
	}

	return attrs;
}

function createTween( value, prop, animation ) {
	var tween,
		collection = ( Animation.tweeners[ prop ] || [] ).concat( Animation.tweeners[ "*" ] ),
		index = 0,
		length = collection.length;
	for ( ; index < length; index++ ) {
		if ( ( tween = collection[ index ].call( animation, prop, value ) ) ) {

			// We're done with this property
			return tween;
		}
	}
}

function defaultPrefilter( elem, props, opts ) {
	var prop, value, toggle, hooks, oldfire, propTween, restoreDisplay, display,
		isBox = "width" in props || "height" in props,
		anim = this,
		orig = {},
		style = elem.style,
		hidden = elem.nodeType && isHiddenWithinTree( elem ),
		dataShow = dataPriv.get( elem, "fxshow" );

	// Queue-skipping animations hijack the fx hooks
	if ( !opts.queue ) {
		hooks = jQuery._queueHooks( elem, "fx" );
		if ( hooks.unqueued == null ) {
			hooks.unqueued = 0;
			oldfire = hooks.empty.fire;
			hooks.empty.fire = function() {
				if ( !hooks.unqueued ) {
					oldfire();
				}
			};
		}
		hooks.unqueued++;

		anim.always( function() {

			// Ensure the complete handler is called before this completes
			anim.always( function() {
				hooks.unqueued--;
				if ( !jQuery.queue( elem, "fx" ).length ) {
					hooks.empty.fire();
				}
			} );
		} );
	}

	// Detect show/hide animations
	for ( prop in props ) {
		value = props[ prop ];
		if ( rfxtypes.test( value ) ) {
			delete props[ prop ];
			toggle = toggle || value === "toggle";
			if ( value === ( hidden ? "hide" : "show" ) ) {

				// Pretend to be hidden if this is a "show" and
				// there is still data from a stopped show/hide
				if ( value === "show" && dataShow && dataShow[ prop ] !== undefined ) {
					hidden = true;

				// Ignore all other no-op show/hide data
				} else {
					continue;
				}
			}
			orig[ prop ] = dataShow && dataShow[ prop ] || jQuery.style( elem, prop );
		}
	}

	// Bail out if this is a no-op like .hide().hide()
	propTween = !jQuery.isEmptyObject( props );
	if ( !propTween && jQuery.isEmptyObject( orig ) ) {
		return;
	}

	// Restrict "overflow" and "display" styles during box animations
	if ( isBox && elem.nodeType === 1 ) {

		// Support: IE <=9 - 11, Edge 12 - 15
		// Record all 3 overflow attributes because IE does not infer the shorthand
		// from identically-valued overflowX and overflowY and Edge just mirrors
		// the overflowX value there.
		opts.overflow = [ style.overflow, style.overflowX, style.overflowY ];

		// Identify a display type, preferring old show/hide data over the CSS cascade
		restoreDisplay = dataShow && dataShow.display;
		if ( restoreDisplay == null ) {
			restoreDisplay = dataPriv.get( elem, "display" );
		}
		display = jQuery.css( elem, "display" );
		if ( display === "none" ) {
			if ( restoreDisplay ) {
				display = restoreDisplay;
			} else {

				// Get nonempty value(s) by temporarily forcing visibility
				showHide( [ elem ], true );
				restoreDisplay = elem.style.display || restoreDisplay;
				display = jQuery.css( elem, "display" );
				showHide( [ elem ] );
			}
		}

		// Animate inline elements as inline-block
		if ( display === "inline" || display === "inline-block" && restoreDisplay != null ) {
			if ( jQuery.css( elem, "float" ) === "none" ) {

				// Restore the original display value at the end of pure show/hide animations
				if ( !propTween ) {
					anim.done( function() {
						style.display = restoreDisplay;
					} );
					if ( restoreDisplay == null ) {
						display = style.display;
						restoreDisplay = display === "none" ? "" : display;
					}
				}
				style.display = "inline-block";
			}
		}
	}

	if ( opts.overflow ) {
		style.overflow = "hidden";
		anim.always( function() {
			style.overflow = opts.overflow[ 0 ];
			style.overflowX = opts.overflow[ 1 ];
			style.overflowY = opts.overflow[ 2 ];
		} );
	}

	// Implement show/hide animations
	propTween = false;
	for ( prop in orig ) {

		// General show/hide setup for this element animation
		if ( !propTween ) {
			if ( dataShow ) {
				if ( "hidden" in dataShow ) {
					hidden = dataShow.hidden;
				}
			} else {
				dataShow = dataPriv.access( elem, "fxshow", { display: restoreDisplay } );
			}

			// Store hidden/visible for toggle so `.stop().toggle()` "reverses"
			if ( toggle ) {
				dataShow.hidden = !hidden;
			}

			// Show elements before animating them
			if ( hidden ) {
				showHide( [ elem ], true );
			}

			/* eslint-disable no-loop-func */

			anim.done( function() {

			/* eslint-enable no-loop-func */

				// The final step of a "hide" animation is actually hiding the element
				if ( !hidden ) {
					showHide( [ elem ] );
				}
				dataPriv.remove( elem, "fxshow" );
				for ( prop in orig ) {
					jQuery.style( elem, prop, orig[ prop ] );
				}
			} );
		}

		// Per-property setup
		propTween = createTween( hidden ? dataShow[ prop ] : 0, prop, anim );
		if ( !( prop in dataShow ) ) {
			dataShow[ prop ] = propTween.start;
			if ( hidden ) {
				propTween.end = propTween.start;
				propTween.start = 0;
			}
		}
	}
}

function propFilter( props, specialEasing ) {
	var index, name, easing, value, hooks;

	// camelCase, specialEasing and expand cssHook pass
	for ( index in props ) {
		name = camelCase( index );
		easing = specialEasing[ name ];
		value = props[ index ];
		if ( Array.isArray( value ) ) {
			easing = value[ 1 ];
			value = props[ index ] = value[ 0 ];
		}

		if ( index !== name ) {
			props[ name ] = value;
			delete props[ index ];
		}

		hooks = jQuery.cssHooks[ name ];
		if ( hooks && "expand" in hooks ) {
			value = hooks.expand( value );
			delete props[ name ];

			// Not quite $.extend, this won't overwrite existing keys.
			// Reusing 'index' because we have the correct "name"
			for ( index in value ) {
				if ( !( index in props ) ) {
					props[ index ] = value[ index ];
					specialEasing[ index ] = easing;
				}
			}
		} else {
			specialEasing[ name ] = easing;
		}
	}
}

function Animation( elem, properties, options ) {
	var result,
		stopped,
		index = 0,
		length = Animation.prefilters.length,
		deferred = jQuery.Deferred().always( function() {

			// Don't match elem in the :animated selector
			delete tick.elem;
		} ),
		tick = function() {
			if ( stopped ) {
				return false;
			}
			var currentTime = fxNow || createFxNow(),
				remaining = Math.max( 0, animation.startTime + animation.duration - currentTime ),

				// Support: Android 2.3 only
				// Archaic crash bug won't allow us to use `1 - ( 0.5 || 0 )` (#12497)
				temp = remaining / animation.duration || 0,
				percent = 1 - temp,
				index = 0,
				length = animation.tweens.length;

			for ( ; index < length; index++ ) {
				animation.tweens[ index ].run( percent );
			}

			deferred.notifyWith( elem, [ animation, percent, remaining ] );

			// If there's more to do, yield
			if ( percent < 1 && length ) {
				return remaining;
			}

			// If this was an empty animation, synthesize a final progress notification
			if ( !length ) {
				deferred.notifyWith( elem, [ animation, 1, 0 ] );
			}

			// Resolve the animation and report its conclusion
			deferred.resolveWith( elem, [ animation ] );
			return false;
		},
		animation = deferred.promise( {
			elem: elem,
			props: jQuery.extend( {}, properties ),
			opts: jQuery.extend( true, {
				specialEasing: {},
				easing: jQuery.easing._default
			}, options ),
			originalProperties: properties,
			originalOptions: options,
			startTime: fxNow || createFxNow(),
			duration: options.duration,
			tweens: [],
			createTween: function( prop, end ) {
				var tween = jQuery.Tween( elem, animation.opts, prop, end,
						animation.opts.specialEasing[ prop ] || animation.opts.easing );
				animation.tweens.push( tween );
				return tween;
			},
			stop: function( gotoEnd ) {
				var index = 0,

					// If we are going to the end, we want to run all the tweens
					// otherwise we skip this part
					length = gotoEnd ? animation.tweens.length : 0;
				if ( stopped ) {
					return this;
				}
				stopped = true;
				for ( ; index < length; index++ ) {
					animation.tweens[ index ].run( 1 );
				}

				// Resolve when we played the last frame; otherwise, reject
				if ( gotoEnd ) {
					deferred.notifyWith( elem, [ animation, 1, 0 ] );
					deferred.resolveWith( elem, [ animation, gotoEnd ] );
				} else {
					deferred.rejectWith( elem, [ animation, gotoEnd ] );
				}
				return this;
			}
		} ),
		props = animation.props;

	propFilter( props, animation.opts.specialEasing );

	for ( ; index < length; index++ ) {
		result = Animation.prefilters[ index ].call( animation, elem, props, animation.opts );
		if ( result ) {
			if ( isFunction( result.stop ) ) {
				jQuery._queueHooks( animation.elem, animation.opts.queue ).stop =
					result.stop.bind( result );
			}
			return result;
		}
	}

	jQuery.map( props, createTween, animation );

	if ( isFunction( animation.opts.start ) ) {
		animation.opts.start.call( elem, animation );
	}

	// Attach callbacks from options
	animation
		.progress( animation.opts.progress )
		.done( animation.opts.done, animation.opts.complete )
		.fail( animation.opts.fail )
		.always( animation.opts.always );

	jQuery.fx.timer(
		jQuery.extend( tick, {
			elem: elem,
			anim: animation,
			queue: animation.opts.queue
		} )
	);

	return animation;
}

jQuery.Animation = jQuery.extend( Animation, {

	tweeners: {
		"*": [ function( prop, value ) {
			var tween = this.createTween( prop, value );
			adjustCSS( tween.elem, prop, rcssNum.exec( value ), tween );
			return tween;
		} ]
	},

	tweener: function( props, callback ) {
		if ( isFunction( props ) ) {
			callback = props;
			props = [ "*" ];
		} else {
			props = props.match( rnothtmlwhite );
		}

		var prop,
			index = 0,
			length = props.length;

		for ( ; index < length; index++ ) {
			prop = props[ index ];
			Animation.tweeners[ prop ] = Animation.tweeners[ prop ] || [];
			Animation.tweeners[ prop ].unshift( callback );
		}
	},

	prefilters: [ defaultPrefilter ],

	prefilter: function( callback, prepend ) {
		if ( prepend ) {
			Animation.prefilters.unshift( callback );
		} else {
			Animation.prefilters.push( callback );
		}
	}
} );

jQuery.speed = function( speed, easing, fn ) {
	var opt = speed && typeof speed === "object" ? jQuery.extend( {}, speed ) : {
		complete: fn || !fn && easing ||
			isFunction( speed ) && speed,
		duration: speed,
		easing: fn && easing || easing && !isFunction( easing ) && easing
	};

	// Go to the end state if fx are off
	if ( jQuery.fx.off ) {
		opt.duration = 0;

	} else {
		if ( typeof opt.duration !== "number" ) {
			if ( opt.duration in jQuery.fx.speeds ) {
				opt.duration = jQuery.fx.speeds[ opt.duration ];

			} else {
				opt.duration = jQuery.fx.speeds._default;
			}
		}
	}

	// Normalize opt.queue - true/undefined/null -> "fx"
	if ( opt.queue == null || opt.queue === true ) {
		opt.queue = "fx";
	}

	// Queueing
	opt.old = opt.complete;

	opt.complete = function() {
		if ( isFunction( opt.old ) ) {
			opt.old.call( this );
		}

		if ( opt.queue ) {
			jQuery.dequeue( this, opt.queue );
		}
	};

	return opt;
};

jQuery.fn.extend( {
	fadeTo: function( speed, to, easing, callback ) {

		// Show any hidden elements after setting opacity to 0
		return this.filter( isHiddenWithinTree ).css( "opacity", 0 ).show()

			// Animate to the value specified
			.end().animate( { opacity: to }, speed, easing, callback );
	},
	animate: function( prop, speed, easing, callback ) {
		var empty = jQuery.isEmptyObject( prop ),
			optall = jQuery.speed( speed, easing, callback ),
			doAnimation = function() {

				// Operate on a copy of prop so per-property easing won't be lost
				var anim = Animation( this, jQuery.extend( {}, prop ), optall );

				// Empty animations, or finishing resolves immediately
				if ( empty || dataPriv.get( this, "finish" ) ) {
					anim.stop( true );
				}
			};
			doAnimation.finish = doAnimation;

		return empty || optall.queue === false ?
			this.each( doAnimation ) :
			this.queue( optall.queue, doAnimation );
	},
	stop: function( type, clearQueue, gotoEnd ) {
		var stopQueue = function( hooks ) {
			var stop = hooks.stop;
			delete hooks.stop;
			stop( gotoEnd );
		};

		if ( typeof type !== "string" ) {
			gotoEnd = clearQueue;
			clearQueue = type;
			type = undefined;
		}
		if ( clearQueue && type !== false ) {
			this.queue( type || "fx", [] );
		}

		return this.each( function() {
			var dequeue = true,
				index = type != null && type + "queueHooks",
				timers = jQuery.timers,
				data = dataPriv.get( this );

			if ( index ) {
				if ( data[ index ] && data[ index ].stop ) {
					stopQueue( data[ index ] );
				}
			} else {
				for ( index in data ) {
					if ( data[ index ] && data[ index ].stop && rrun.test( index ) ) {
						stopQueue( data[ index ] );
					}
				}
			}

			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this &&
					( type == null || timers[ index ].queue === type ) ) {

					timers[ index ].anim.stop( gotoEnd );
					dequeue = false;
					timers.splice( index, 1 );
				}
			}

			// Start the next in the queue if the last step wasn't forced.
			// Timers currently will call their complete callbacks, which
			// will dequeue but only if they were gotoEnd.
			if ( dequeue || !gotoEnd ) {
				jQuery.dequeue( this, type );
			}
		} );
	},
	finish: function( type ) {
		if ( type !== false ) {
			type = type || "fx";
		}
		return this.each( function() {
			var index,
				data = dataPriv.get( this ),
				queue = data[ type + "queue" ],
				hooks = data[ type + "queueHooks" ],
				timers = jQuery.timers,
				length = queue ? queue.length : 0;

			// Enable finishing flag on private data
			data.finish = true;

			// Empty the queue first
			jQuery.queue( this, type, [] );

			if ( hooks && hooks.stop ) {
				hooks.stop.call( this, true );
			}

			// Look for any active animations, and finish them
			for ( index = timers.length; index--; ) {
				if ( timers[ index ].elem === this && timers[ index ].queue === type ) {
					timers[ index ].anim.stop( true );
					timers.splice( index, 1 );
				}
			}

			// Look for any animations in the old queue and finish them
			for ( index = 0; index < length; index++ ) {
				if ( queue[ index ] && queue[ index ].finish ) {
					queue[ index ].finish.call( this );
				}
			}

			// Turn off finishing flag
			delete data.finish;
		} );
	}
} );

jQuery.each( [ "toggle", "show", "hide" ], function( i, name ) {
	var cssFn = jQuery.fn[ name ];
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return speed == null || typeof speed === "boolean" ?
			cssFn.apply( this, arguments ) :
			this.animate( genFx( name, true ), speed, easing, callback );
	};
} );

// Generate shortcuts for custom animations
jQuery.each( {
	slideDown: genFx( "show" ),
	slideUp: genFx( "hide" ),
	slideToggle: genFx( "toggle" ),
	fadeIn: { opacity: "show" },
	fadeOut: { opacity: "hide" },
	fadeToggle: { opacity: "toggle" }
}, function( name, props ) {
	jQuery.fn[ name ] = function( speed, easing, callback ) {
		return this.animate( props, speed, easing, callback );
	};
} );

jQuery.timers = [];
jQuery.fx.tick = function() {
	var timer,
		i = 0,
		timers = jQuery.timers;

	fxNow = Date.now();

	for ( ; i < timers.length; i++ ) {
		timer = timers[ i ];

		// Run the timer and safely remove it when done (allowing for external removal)
		if ( !timer() && timers[ i ] === timer ) {
			timers.splice( i--, 1 );
		}
	}

	if ( !timers.length ) {
		jQuery.fx.stop();
	}
	fxNow = undefined;
};

jQuery.fx.timer = function( timer ) {
	jQuery.timers.push( timer );
	jQuery.fx.start();
};

jQuery.fx.interval = 13;
jQuery.fx.start = function() {
	if ( inProgress ) {
		return;
	}

	inProgress = true;
	schedule();
};

jQuery.fx.stop = function() {
	inProgress = null;
};

jQuery.fx.speeds = {
	slow: 600,
	fast: 200,

	// Default speed
	_default: 400
};


// Based off of the plugin by Clint Helfers, with permission.
// https://web.archive.org/web/20100324014747/http://blindsignals.com/index.php/2009/07/jquery-delay/
jQuery.fn.delay = function( time, type ) {
	time = jQuery.fx ? jQuery.fx.speeds[ time ] || time : time;
	type = type || "fx";

	return this.queue( type, function( next, hooks ) {
		var timeout = window.setTimeout( next, time );
		hooks.stop = function() {
			window.clearTimeout( timeout );
		};
	} );
};


( function() {
	var input = document.createElement( "input" ),
		select = document.createElement( "select" ),
		opt = select.appendChild( document.createElement( "option" ) );

	input.type = "checkbox";

	// Support: Android <=4.3 only
	// Default value for a checkbox should be "on"
	support.checkOn = input.value !== "";

	// Support: IE <=11 only
	// Must access selectedIndex to make default options select
	support.optSelected = opt.selected;

	// Support: IE <=11 only
	// An input loses its value after becoming a radio
	input = document.createElement( "input" );
	input.value = "t";
	input.type = "radio";
	support.radioValue = input.value === "t";
} )();


var boolHook,
	attrHandle = jQuery.expr.attrHandle;

jQuery.fn.extend( {
	attr: function( name, value ) {
		return access( this, jQuery.attr, name, value, arguments.length > 1 );
	},

	removeAttr: function( name ) {
		return this.each( function() {
			jQuery.removeAttr( this, name );
		} );
	}
} );

jQuery.extend( {
	attr: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set attributes on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		// Fallback to prop when attributes are not supported
		if ( typeof elem.getAttribute === "undefined" ) {
			return jQuery.prop( elem, name, value );
		}

		// Attribute hooks are determined by the lowercase version
		// Grab necessary hook if one is defined
		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {
			hooks = jQuery.attrHooks[ name.toLowerCase() ] ||
				( jQuery.expr.match.bool.test( name ) ? boolHook : undefined );
		}

		if ( value !== undefined ) {
			if ( value === null ) {
				jQuery.removeAttr( elem, name );
				return;
			}

			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			elem.setAttribute( name, value + "" );
			return value;
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		ret = jQuery.find.attr( elem, name );

		// Non-existent attributes return null, we normalize to undefined
		return ret == null ? undefined : ret;
	},

	attrHooks: {
		type: {
			set: function( elem, value ) {
				if ( !support.radioValue && value === "radio" &&
					nodeName( elem, "input" ) ) {
					var val = elem.value;
					elem.setAttribute( "type", value );
					if ( val ) {
						elem.value = val;
					}
					return value;
				}
			}
		}
	},

	removeAttr: function( elem, value ) {
		var name,
			i = 0,

			// Attribute names can contain non-HTML whitespace characters
			// https://html.spec.whatwg.org/multipage/syntax.html#attributes-2
			attrNames = value && value.match( rnothtmlwhite );

		if ( attrNames && elem.nodeType === 1 ) {
			while ( ( name = attrNames[ i++ ] ) ) {
				elem.removeAttribute( name );
			}
		}
	}
} );

// Hooks for boolean attributes
boolHook = {
	set: function( elem, value, name ) {
		if ( value === false ) {

			// Remove boolean attributes when set to false
			jQuery.removeAttr( elem, name );
		} else {
			elem.setAttribute( name, name );
		}
		return name;
	}
};

jQuery.each( jQuery.expr.match.bool.source.match( /\w+/g ), function( i, name ) {
	var getter = attrHandle[ name ] || jQuery.find.attr;

	attrHandle[ name ] = function( elem, name, isXML ) {
		var ret, handle,
			lowercaseName = name.toLowerCase();

		if ( !isXML ) {

			// Avoid an infinite loop by temporarily removing this function from the getter
			handle = attrHandle[ lowercaseName ];
			attrHandle[ lowercaseName ] = ret;
			ret = getter( elem, name, isXML ) != null ?
				lowercaseName :
				null;
			attrHandle[ lowercaseName ] = handle;
		}
		return ret;
	};
} );




var rfocusable = /^(?:input|select|textarea|button)$/i,
	rclickable = /^(?:a|area)$/i;

jQuery.fn.extend( {
	prop: function( name, value ) {
		return access( this, jQuery.prop, name, value, arguments.length > 1 );
	},

	removeProp: function( name ) {
		return this.each( function() {
			delete this[ jQuery.propFix[ name ] || name ];
		} );
	}
} );

jQuery.extend( {
	prop: function( elem, name, value ) {
		var ret, hooks,
			nType = elem.nodeType;

		// Don't get/set properties on text, comment and attribute nodes
		if ( nType === 3 || nType === 8 || nType === 2 ) {
			return;
		}

		if ( nType !== 1 || !jQuery.isXMLDoc( elem ) ) {

			// Fix name and attach hooks
			name = jQuery.propFix[ name ] || name;
			hooks = jQuery.propHooks[ name ];
		}

		if ( value !== undefined ) {
			if ( hooks && "set" in hooks &&
				( ret = hooks.set( elem, value, name ) ) !== undefined ) {
				return ret;
			}

			return ( elem[ name ] = value );
		}

		if ( hooks && "get" in hooks && ( ret = hooks.get( elem, name ) ) !== null ) {
			return ret;
		}

		return elem[ name ];
	},

	propHooks: {
		tabIndex: {
			get: function( elem ) {

				// Support: IE <=9 - 11 only
				// elem.tabIndex doesn't always return the
				// correct value when it hasn't been explicitly set
				// https://web.archive.org/web/20141116233347/http://fluidproject.org/blog/2008/01/09/getting-setting-and-removing-tabindex-values-with-javascript/
				// Use proper attribute retrieval(#12072)
				var tabindex = jQuery.find.attr( elem, "tabindex" );

				if ( tabindex ) {
					return parseInt( tabindex, 10 );
				}

				if (
					rfocusable.test( elem.nodeName ) ||
					rclickable.test( elem.nodeName ) &&
					elem.href
				) {
					return 0;
				}

				return -1;
			}
		}
	},

	propFix: {
		"for": "htmlFor",
		"class": "className"
	}
} );

// Support: IE <=11 only
// Accessing the selectedIndex property
// forces the browser to respect setting selected
// on the option
// The getter ensures a default option is selected
// when in an optgroup
// eslint rule "no-unused-expressions" is disabled for this code
// since it considers such accessions noop
if ( !support.optSelected ) {
	jQuery.propHooks.selected = {
		get: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent && parent.parentNode ) {
				parent.parentNode.selectedIndex;
			}
			return null;
		},
		set: function( elem ) {

			/* eslint no-unused-expressions: "off" */

			var parent = elem.parentNode;
			if ( parent ) {
				parent.selectedIndex;

				if ( parent.parentNode ) {
					parent.parentNode.selectedIndex;
				}
			}
		}
	};
}

jQuery.each( [
	"tabIndex",
	"readOnly",
	"maxLength",
	"cellSpacing",
	"cellPadding",
	"rowSpan",
	"colSpan",
	"useMap",
	"frameBorder",
	"contentEditable"
], function() {
	jQuery.propFix[ this.toLowerCase() ] = this;
} );




	// Strip and collapse whitespace according to HTML spec
	// https://infra.spec.whatwg.org/#strip-and-collapse-ascii-whitespace
	function stripAndCollapse( value ) {
		var tokens = value.match( rnothtmlwhite ) || [];
		return tokens.join( " " );
	}


function getClass( elem ) {
	return elem.getAttribute && elem.getAttribute( "class" ) || "";
}

function classesToArray( value ) {
	if ( Array.isArray( value ) ) {
		return value;
	}
	if ( typeof value === "string" ) {
		return value.match( rnothtmlwhite ) || [];
	}
	return [];
}

jQuery.fn.extend( {
	addClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).addClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {
						if ( cur.indexOf( " " + clazz + " " ) < 0 ) {
							cur += clazz + " ";
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	removeClass: function( value ) {
		var classes, elem, cur, curValue, clazz, j, finalValue,
			i = 0;

		if ( isFunction( value ) ) {
			return this.each( function( j ) {
				jQuery( this ).removeClass( value.call( this, j, getClass( this ) ) );
			} );
		}

		if ( !arguments.length ) {
			return this.attr( "class", "" );
		}

		classes = classesToArray( value );

		if ( classes.length ) {
			while ( ( elem = this[ i++ ] ) ) {
				curValue = getClass( elem );

				// This expression is here for better compressibility (see addClass)
				cur = elem.nodeType === 1 && ( " " + stripAndCollapse( curValue ) + " " );

				if ( cur ) {
					j = 0;
					while ( ( clazz = classes[ j++ ] ) ) {

						// Remove *all* instances
						while ( cur.indexOf( " " + clazz + " " ) > -1 ) {
							cur = cur.replace( " " + clazz + " ", " " );
						}
					}

					// Only assign if different to avoid unneeded rendering.
					finalValue = stripAndCollapse( cur );
					if ( curValue !== finalValue ) {
						elem.setAttribute( "class", finalValue );
					}
				}
			}
		}

		return this;
	},

	toggleClass: function( value, stateVal ) {
		var type = typeof value,
			isValidValue = type === "string" || Array.isArray( value );

		if ( typeof stateVal === "boolean" && isValidValue ) {
			return stateVal ? this.addClass( value ) : this.removeClass( value );
		}

		if ( isFunction( value ) ) {
			return this.each( function( i ) {
				jQuery( this ).toggleClass(
					value.call( this, i, getClass( this ), stateVal ),
					stateVal
				);
			} );
		}

		return this.each( function() {
			var className, i, self, classNames;

			if ( isValidValue ) {

				// Toggle individual class names
				i = 0;
				self = jQuery( this );
				classNames = classesToArray( value );

				while ( ( className = classNames[ i++ ] ) ) {

					// Check each className given, space separated list
					if ( self.hasClass( className ) ) {
						self.removeClass( className );
					} else {
						self.addClass( className );
					}
				}

			// Toggle whole class name
			} else if ( value === undefined || type === "boolean" ) {
				className = getClass( this );
				if ( className ) {

					// Store className if set
					dataPriv.set( this, "__className__", className );
				}

				// If the element has a class name or if we're passed `false`,
				// then remove the whole classname (if there was one, the above saved it).
				// Otherwise bring back whatever was previously saved (if anything),
				// falling back to the empty string if nothing was stored.
				if ( this.setAttribute ) {
					this.setAttribute( "class",
						className || value === false ?
						"" :
						dataPriv.get( this, "__className__" ) || ""
					);
				}
			}
		} );
	},

	hasClass: function( selector ) {
		var className, elem,
			i = 0;

		className = " " + selector + " ";
		while ( ( elem = this[ i++ ] ) ) {
			if ( elem.nodeType === 1 &&
				( " " + stripAndCollapse( getClass( elem ) ) + " " ).indexOf( className ) > -1 ) {
					return true;
			}
		}

		return false;
	}
} );




var rreturn = /\r/g;

jQuery.fn.extend( {
	val: function( value ) {
		var hooks, ret, valueIsFunction,
			elem = this[ 0 ];

		if ( !arguments.length ) {
			if ( elem ) {
				hooks = jQuery.valHooks[ elem.type ] ||
					jQuery.valHooks[ elem.nodeName.toLowerCase() ];

				if ( hooks &&
					"get" in hooks &&
					( ret = hooks.get( elem, "value" ) ) !== undefined
				) {
					return ret;
				}

				ret = elem.value;

				// Handle most common string cases
				if ( typeof ret === "string" ) {
					return ret.replace( rreturn, "" );
				}

				// Handle cases where value is null/undef or number
				return ret == null ? "" : ret;
			}

			return;
		}

		valueIsFunction = isFunction( value );

		return this.each( function( i ) {
			var val;

			if ( this.nodeType !== 1 ) {
				return;
			}

			if ( valueIsFunction ) {
				val = value.call( this, i, jQuery( this ).val() );
			} else {
				val = value;
			}

			// Treat null/undefined as ""; convert numbers to string
			if ( val == null ) {
				val = "";

			} else if ( typeof val === "number" ) {
				val += "";

			} else if ( Array.isArray( val ) ) {
				val = jQuery.map( val, function( value ) {
					return value == null ? "" : value + "";
				} );
			}

			hooks = jQuery.valHooks[ this.type ] || jQuery.valHooks[ this.nodeName.toLowerCase() ];

			// If set returns undefined, fall back to normal setting
			if ( !hooks || !( "set" in hooks ) || hooks.set( this, val, "value" ) === undefined ) {
				this.value = val;
			}
		} );
	}
} );

jQuery.extend( {
	valHooks: {
		option: {
			get: function( elem ) {

				var val = jQuery.find.attr( elem, "value" );
				return val != null ?
					val :

					// Support: IE <=10 - 11 only
					// option.text throws exceptions (#14686, #14858)
					// Strip and collapse whitespace
					// https://html.spec.whatwg.org/#strip-and-collapse-whitespace
					stripAndCollapse( jQuery.text( elem ) );
			}
		},
		select: {
			get: function( elem ) {
				var value, option, i,
					options = elem.options,
					index = elem.selectedIndex,
					one = elem.type === "select-one",
					values = one ? null : [],
					max = one ? index + 1 : options.length;

				if ( index < 0 ) {
					i = max;

				} else {
					i = one ? index : 0;
				}

				// Loop through all the selected options
				for ( ; i < max; i++ ) {
					option = options[ i ];

					// Support: IE <=9 only
					// IE8-9 doesn't update selected after form reset (#2551)
					if ( ( option.selected || i === index ) &&

							// Don't return options that are disabled or in a disabled optgroup
							!option.disabled &&
							( !option.parentNode.disabled ||
								!nodeName( option.parentNode, "optgroup" ) ) ) {

						// Get the specific value for the option
						value = jQuery( option ).val();

						// We don't need an array for one selects
						if ( one ) {
							return value;
						}

						// Multi-Selects return an array
						values.push( value );
					}
				}

				return values;
			},

			set: function( elem, value ) {
				var optionSet, option,
					options = elem.options,
					values = jQuery.makeArray( value ),
					i = options.length;

				while ( i-- ) {
					option = options[ i ];

					/* eslint-disable no-cond-assign */

					if ( option.selected =
						jQuery.inArray( jQuery.valHooks.option.get( option ), values ) > -1
					) {
						optionSet = true;
					}

					/* eslint-enable no-cond-assign */
				}

				// Force browsers to behave consistently when non-matching value is set
				if ( !optionSet ) {
					elem.selectedIndex = -1;
				}
				return values;
			}
		}
	}
} );

// Radios and checkboxes getter/setter
jQuery.each( [ "radio", "checkbox" ], function() {
	jQuery.valHooks[ this ] = {
		set: function( elem, value ) {
			if ( Array.isArray( value ) ) {
				return ( elem.checked = jQuery.inArray( jQuery( elem ).val(), value ) > -1 );
			}
		}
	};
	if ( !support.checkOn ) {
		jQuery.valHooks[ this ].get = function( elem ) {
			return elem.getAttribute( "value" ) === null ? "on" : elem.value;
		};
	}
} );




// Return jQuery for attributes-only inclusion


support.focusin = "onfocusin" in window;


var rfocusMorph = /^(?:focusinfocus|focusoutblur)$/,
	stopPropagationCallback = function( e ) {
		e.stopPropagation();
	};

jQuery.extend( jQuery.event, {

	trigger: function( event, data, elem, onlyHandlers ) {

		var i, cur, tmp, bubbleType, ontype, handle, special, lastElement,
			eventPath = [ elem || document ],
			type = hasOwn.call( event, "type" ) ? event.type : event,
			namespaces = hasOwn.call( event, "namespace" ) ? event.namespace.split( "." ) : [];

		cur = lastElement = tmp = elem = elem || document;

		// Don't do events on text and comment nodes
		if ( elem.nodeType === 3 || elem.nodeType === 8 ) {
			return;
		}

		// focus/blur morphs to focusin/out; ensure we're not firing them right now
		if ( rfocusMorph.test( type + jQuery.event.triggered ) ) {
			return;
		}

		if ( type.indexOf( "." ) > -1 ) {

			// Namespaced trigger; create a regexp to match event type in handle()
			namespaces = type.split( "." );
			type = namespaces.shift();
			namespaces.sort();
		}
		ontype = type.indexOf( ":" ) < 0 && "on" + type;

		// Caller can pass in a jQuery.Event object, Object, or just an event type string
		event = event[ jQuery.expando ] ?
			event :
			new jQuery.Event( type, typeof event === "object" && event );

		// Trigger bitmask: & 1 for native handlers; & 2 for jQuery (always true)
		event.isTrigger = onlyHandlers ? 2 : 3;
		event.namespace = namespaces.join( "." );
		event.rnamespace = event.namespace ?
			new RegExp( "(^|\\.)" + namespaces.join( "\\.(?:.*\\.|)" ) + "(\\.|$)" ) :
			null;

		// Clean up the event in case it is being reused
		event.result = undefined;
		if ( !event.target ) {
			event.target = elem;
		}

		// Clone any incoming data and prepend the event, creating the handler arg list
		data = data == null ?
			[ event ] :
			jQuery.makeArray( data, [ event ] );

		// Allow special events to draw outside the lines
		special = jQuery.event.special[ type ] || {};
		if ( !onlyHandlers && special.trigger && special.trigger.apply( elem, data ) === false ) {
			return;
		}

		// Determine event propagation path in advance, per W3C events spec (#9951)
		// Bubble up to document, then to window; watch for a global ownerDocument var (#9724)
		if ( !onlyHandlers && !special.noBubble && !isWindow( elem ) ) {

			bubbleType = special.delegateType || type;
			if ( !rfocusMorph.test( bubbleType + type ) ) {
				cur = cur.parentNode;
			}
			for ( ; cur; cur = cur.parentNode ) {
				eventPath.push( cur );
				tmp = cur;
			}

			// Only add window if we got to document (e.g., not plain obj or detached DOM)
			if ( tmp === ( elem.ownerDocument || document ) ) {
				eventPath.push( tmp.defaultView || tmp.parentWindow || window );
			}
		}

		// Fire handlers on the event path
		i = 0;
		while ( ( cur = eventPath[ i++ ] ) && !event.isPropagationStopped() ) {
			lastElement = cur;
			event.type = i > 1 ?
				bubbleType :
				special.bindType || type;

			// jQuery handler
			handle = ( dataPriv.get( cur, "events" ) || {} )[ event.type ] &&
				dataPriv.get( cur, "handle" );
			if ( handle ) {
				handle.apply( cur, data );
			}

			// Native handler
			handle = ontype && cur[ ontype ];
			if ( handle && handle.apply && acceptData( cur ) ) {
				event.result = handle.apply( cur, data );
				if ( event.result === false ) {
					event.preventDefault();
				}
			}
		}
		event.type = type;

		// If nobody prevented the default action, do it now
		if ( !onlyHandlers && !event.isDefaultPrevented() ) {

			if ( ( !special._default ||
				special._default.apply( eventPath.pop(), data ) === false ) &&
				acceptData( elem ) ) {

				// Call a native DOM method on the target with the same name as the event.
				// Don't do default actions on window, that's where global variables be (#6170)
				if ( ontype && isFunction( elem[ type ] ) && !isWindow( elem ) ) {

					// Don't re-trigger an onFOO event when we call its FOO() method
					tmp = elem[ ontype ];

					if ( tmp ) {
						elem[ ontype ] = null;
					}

					// Prevent re-triggering of the same event, since we already bubbled it above
					jQuery.event.triggered = type;

					if ( event.isPropagationStopped() ) {
						lastElement.addEventListener( type, stopPropagationCallback );
					}

					elem[ type ]();

					if ( event.isPropagationStopped() ) {
						lastElement.removeEventListener( type, stopPropagationCallback );
					}

					jQuery.event.triggered = undefined;

					if ( tmp ) {
						elem[ ontype ] = tmp;
					}
				}
			}
		}

		return event.result;
	},

	// Piggyback on a donor event to simulate a different one
	// Used only for `focus(in | out)` events
	simulate: function( type, elem, event ) {
		var e = jQuery.extend(
			new jQuery.Event(),
			event,
			{
				type: type,
				isSimulated: true
			}
		);

		jQuery.event.trigger( e, null, elem );
	}

} );

jQuery.fn.extend( {

	trigger: function( type, data ) {
		return this.each( function() {
			jQuery.event.trigger( type, data, this );
		} );
	},
	triggerHandler: function( type, data ) {
		var elem = this[ 0 ];
		if ( elem ) {
			return jQuery.event.trigger( type, data, elem, true );
		}
	}
} );


// Support: Firefox <=44
// Firefox doesn't have focus(in | out) events
// Related ticket - https://bugzilla.mozilla.org/show_bug.cgi?id=687787
//
// Support: Chrome <=48 - 49, Safari <=9.0 - 9.1
// focus(in | out) events fire after focus & blur events,
// which is spec violation - http://www.w3.org/TR/DOM-Level-3-Events/#events-focusevent-event-order
// Related ticket - https://bugs.chromium.org/p/chromium/issues/detail?id=449857
if ( !support.focusin ) {
	jQuery.each( { focus: "focusin", blur: "focusout" }, function( orig, fix ) {

		// Attach a single capturing handler on the document while someone wants focusin/focusout
		var handler = function( event ) {
			jQuery.event.simulate( fix, event.target, jQuery.event.fix( event ) );
		};

		jQuery.event.special[ fix ] = {
			setup: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix );

				if ( !attaches ) {
					doc.addEventListener( orig, handler, true );
				}
				dataPriv.access( doc, fix, ( attaches || 0 ) + 1 );
			},
			teardown: function() {
				var doc = this.ownerDocument || this,
					attaches = dataPriv.access( doc, fix ) - 1;

				if ( !attaches ) {
					doc.removeEventListener( orig, handler, true );
					dataPriv.remove( doc, fix );

				} else {
					dataPriv.access( doc, fix, attaches );
				}
			}
		};
	} );
}
var location = window.location;

var nonce = Date.now();

var rquery = ( /\?/ );



// Cross-browser xml parsing
jQuery.parseXML = function( data ) {
	var xml;
	if ( !data || typeof data !== "string" ) {
		return null;
	}

	// Support: IE 9 - 11 only
	// IE throws on parseFromString with invalid input.
	try {
		xml = ( new window.DOMParser() ).parseFromString( data, "text/xml" );
	} catch ( e ) {
		xml = undefined;
	}

	if ( !xml || xml.getElementsByTagName( "parsererror" ).length ) {
		jQuery.error( "Invalid XML: " + data );
	}
	return xml;
};


var
	rbracket = /\[\]$/,
	rCRLF = /\r?\n/g,
	rsubmitterTypes = /^(?:submit|button|image|reset|file)$/i,
	rsubmittable = /^(?:input|select|textarea|keygen)/i;

function buildParams( prefix, obj, traditional, add ) {
	var name;

	if ( Array.isArray( obj ) ) {

		// Serialize array item.
		jQuery.each( obj, function( i, v ) {
			if ( traditional || rbracket.test( prefix ) ) {

				// Treat each array item as a scalar.
				add( prefix, v );

			} else {

				// Item is non-scalar (array or object), encode its numeric index.
				buildParams(
					prefix + "[" + ( typeof v === "object" && v != null ? i : "" ) + "]",
					v,
					traditional,
					add
				);
			}
		} );

	} else if ( !traditional && toType( obj ) === "object" ) {

		// Serialize object item.
		for ( name in obj ) {
			buildParams( prefix + "[" + name + "]", obj[ name ], traditional, add );
		}

	} else {

		// Serialize scalar item.
		add( prefix, obj );
	}
}

// Serialize an array of form elements or a set of
// key/values into a query string
jQuery.param = function( a, traditional ) {
	var prefix,
		s = [],
		add = function( key, valueOrFunction ) {

			// If value is a function, invoke it and use its return value
			var value = isFunction( valueOrFunction ) ?
				valueOrFunction() :
				valueOrFunction;

			s[ s.length ] = encodeURIComponent( key ) + "=" +
				encodeURIComponent( value == null ? "" : value );
		};

	// If an array was passed in, assume that it is an array of form elements.
	if ( Array.isArray( a ) || ( a.jquery && !jQuery.isPlainObject( a ) ) ) {

		// Serialize the form elements
		jQuery.each( a, function() {
			add( this.name, this.value );
		} );

	} else {

		// If traditional, encode the "old" way (the way 1.3.2 or older
		// did it), otherwise encode params recursively.
		for ( prefix in a ) {
			buildParams( prefix, a[ prefix ], traditional, add );
		}
	}

	// Return the resulting serialization
	return s.join( "&" );
};

jQuery.fn.extend( {
	serialize: function() {
		return jQuery.param( this.serializeArray() );
	},
	serializeArray: function() {
		return this.map( function() {

			// Can add propHook for "elements" to filter or add form elements
			var elements = jQuery.prop( this, "elements" );
			return elements ? jQuery.makeArray( elements ) : this;
		} )
		.filter( function() {
			var type = this.type;

			// Use .is( ":disabled" ) so that fieldset[disabled] works
			return this.name && !jQuery( this ).is( ":disabled" ) &&
				rsubmittable.test( this.nodeName ) && !rsubmitterTypes.test( type ) &&
				( this.checked || !rcheckableType.test( type ) );
		} )
		.map( function( i, elem ) {
			var val = jQuery( this ).val();

			if ( val == null ) {
				return null;
			}

			if ( Array.isArray( val ) ) {
				return jQuery.map( val, function( val ) {
					return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
				} );
			}

			return { name: elem.name, value: val.replace( rCRLF, "\r\n" ) };
		} ).get();
	}
} );


var
	r20 = /%20/g,
	rhash = /#.*$/,
	rantiCache = /([?&])_=[^&]*/,
	rheaders = /^(.*?):[ \t]*([^\r\n]*)$/mg,

	// #7653, #8125, #8152: local protocol detection
	rlocalProtocol = /^(?:about|app|app-storage|.+-extension|file|res|widget):$/,
	rnoContent = /^(?:GET|HEAD)$/,
	rprotocol = /^\/\//,

	/* Prefilters
	 * 1) They are useful to introduce custom dataTypes (see ajax/jsonp.js for an example)
	 * 2) These are called:
	 *    - BEFORE asking for a transport
	 *    - AFTER param serialization (s.data is a string if s.processData is true)
	 * 3) key is the dataType
	 * 4) the catchall symbol "*" can be used
	 * 5) execution will start with transport dataType and THEN continue down to "*" if needed
	 */
	prefilters = {},

	/* Transports bindings
	 * 1) key is the dataType
	 * 2) the catchall symbol "*" can be used
	 * 3) selection will start with transport dataType and THEN go to "*" if needed
	 */
	transports = {},

	// Avoid comment-prolog char sequence (#10098); must appease lint and evade compression
	allTypes = "*/".concat( "*" ),

	// Anchor tag for parsing the document origin
	originAnchor = document.createElement( "a" );
	originAnchor.href = location.href;

// Base "constructor" for jQuery.ajaxPrefilter and jQuery.ajaxTransport
function addToPrefiltersOrTransports( structure ) {

	// dataTypeExpression is optional and defaults to "*"
	return function( dataTypeExpression, func ) {

		if ( typeof dataTypeExpression !== "string" ) {
			func = dataTypeExpression;
			dataTypeExpression = "*";
		}

		var dataType,
			i = 0,
			dataTypes = dataTypeExpression.toLowerCase().match( rnothtmlwhite ) || [];

		if ( isFunction( func ) ) {

			// For each dataType in the dataTypeExpression
			while ( ( dataType = dataTypes[ i++ ] ) ) {

				// Prepend if requested
				if ( dataType[ 0 ] === "+" ) {
					dataType = dataType.slice( 1 ) || "*";
					( structure[ dataType ] = structure[ dataType ] || [] ).unshift( func );

				// Otherwise append
				} else {
					( structure[ dataType ] = structure[ dataType ] || [] ).push( func );
				}
			}
		}
	};
}

// Base inspection function for prefilters and transports
function inspectPrefiltersOrTransports( structure, options, originalOptions, jqXHR ) {

	var inspected = {},
		seekingTransport = ( structure === transports );

	function inspect( dataType ) {
		var selected;
		inspected[ dataType ] = true;
		jQuery.each( structure[ dataType ] || [], function( _, prefilterOrFactory ) {
			var dataTypeOrTransport = prefilterOrFactory( options, originalOptions, jqXHR );
			if ( typeof dataTypeOrTransport === "string" &&
				!seekingTransport && !inspected[ dataTypeOrTransport ] ) {

				options.dataTypes.unshift( dataTypeOrTransport );
				inspect( dataTypeOrTransport );
				return false;
			} else if ( seekingTransport ) {
				return !( selected = dataTypeOrTransport );
			}
		} );
		return selected;
	}

	return inspect( options.dataTypes[ 0 ] ) || !inspected[ "*" ] && inspect( "*" );
}

// A special extend for ajax options
// that takes "flat" options (not to be deep extended)
// Fixes #9887
function ajaxExtend( target, src ) {
	var key, deep,
		flatOptions = jQuery.ajaxSettings.flatOptions || {};

	for ( key in src ) {
		if ( src[ key ] !== undefined ) {
			( flatOptions[ key ] ? target : ( deep || ( deep = {} ) ) )[ key ] = src[ key ];
		}
	}
	if ( deep ) {
		jQuery.extend( true, target, deep );
	}

	return target;
}

/* Handles responses to an ajax request:
 * - finds the right dataType (mediates between content-type and expected dataType)
 * - returns the corresponding response
 */
function ajaxHandleResponses( s, jqXHR, responses ) {

	var ct, type, finalDataType, firstDataType,
		contents = s.contents,
		dataTypes = s.dataTypes;

	// Remove auto dataType and get content-type in the process
	while ( dataTypes[ 0 ] === "*" ) {
		dataTypes.shift();
		if ( ct === undefined ) {
			ct = s.mimeType || jqXHR.getResponseHeader( "Content-Type" );
		}
	}

	// Check if we're dealing with a known content-type
	if ( ct ) {
		for ( type in contents ) {
			if ( contents[ type ] && contents[ type ].test( ct ) ) {
				dataTypes.unshift( type );
				break;
			}
		}
	}

	// Check to see if we have a response for the expected dataType
	if ( dataTypes[ 0 ] in responses ) {
		finalDataType = dataTypes[ 0 ];
	} else {

		// Try convertible dataTypes
		for ( type in responses ) {
			if ( !dataTypes[ 0 ] || s.converters[ type + " " + dataTypes[ 0 ] ] ) {
				finalDataType = type;
				break;
			}
			if ( !firstDataType ) {
				firstDataType = type;
			}
		}

		// Or just use first one
		finalDataType = finalDataType || firstDataType;
	}

	// If we found a dataType
	// We add the dataType to the list if needed
	// and return the corresponding response
	if ( finalDataType ) {
		if ( finalDataType !== dataTypes[ 0 ] ) {
			dataTypes.unshift( finalDataType );
		}
		return responses[ finalDataType ];
	}
}

/* Chain conversions given the request and the original response
 * Also sets the responseXXX fields on the jqXHR instance
 */
function ajaxConvert( s, response, jqXHR, isSuccess ) {
	var conv2, current, conv, tmp, prev,
		converters = {},

		// Work with a copy of dataTypes in case we need to modify it for conversion
		dataTypes = s.dataTypes.slice();

	// Create converters map with lowercased keys
	if ( dataTypes[ 1 ] ) {
		for ( conv in s.converters ) {
			converters[ conv.toLowerCase() ] = s.converters[ conv ];
		}
	}

	current = dataTypes.shift();

	// Convert to each sequential dataType
	while ( current ) {

		if ( s.responseFields[ current ] ) {
			jqXHR[ s.responseFields[ current ] ] = response;
		}

		// Apply the dataFilter if provided
		if ( !prev && isSuccess && s.dataFilter ) {
			response = s.dataFilter( response, s.dataType );
		}

		prev = current;
		current = dataTypes.shift();

		if ( current ) {

			// There's only work to do if current dataType is non-auto
			if ( current === "*" ) {

				current = prev;

			// Convert response if prev dataType is non-auto and differs from current
			} else if ( prev !== "*" && prev !== current ) {

				// Seek a direct converter
				conv = converters[ prev + " " + current ] || converters[ "* " + current ];

				// If none found, seek a pair
				if ( !conv ) {
					for ( conv2 in converters ) {

						// If conv2 outputs current
						tmp = conv2.split( " " );
						if ( tmp[ 1 ] === current ) {

							// If prev can be converted to accepted input
							conv = converters[ prev + " " + tmp[ 0 ] ] ||
								converters[ "* " + tmp[ 0 ] ];
							if ( conv ) {

								// Condense equivalence converters
								if ( conv === true ) {
									conv = converters[ conv2 ];

								// Otherwise, insert the intermediate dataType
								} else if ( converters[ conv2 ] !== true ) {
									current = tmp[ 0 ];
									dataTypes.unshift( tmp[ 1 ] );
								}
								break;
							}
						}
					}
				}

				// Apply converter (if not an equivalence)
				if ( conv !== true ) {

					// Unless errors are allowed to bubble, catch and return them
					if ( conv && s.throws ) {
						response = conv( response );
					} else {
						try {
							response = conv( response );
						} catch ( e ) {
							return {
								state: "parsererror",
								error: conv ? e : "No conversion from " + prev + " to " + current
							};
						}
					}
				}
			}
		}
	}

	return { state: "success", data: response };
}

jQuery.extend( {

	// Counter for holding the number of active queries
	active: 0,

	// Last-Modified header cache for next request
	lastModified: {},
	etag: {},

	ajaxSettings: {
		url: location.href,
		type: "GET",
		isLocal: rlocalProtocol.test( location.protocol ),
		global: true,
		processData: true,
		async: true,
		contentType: "application/x-www-form-urlencoded; charset=UTF-8",

		/*
		timeout: 0,
		data: null,
		dataType: null,
		username: null,
		password: null,
		cache: null,
		throws: false,
		traditional: false,
		headers: {},
		*/

		accepts: {
			"*": allTypes,
			text: "text/plain",
			html: "text/html",
			xml: "application/xml, text/xml",
			json: "application/json, text/javascript"
		},

		contents: {
			xml: /\bxml\b/,
			html: /\bhtml/,
			json: /\bjson\b/
		},

		responseFields: {
			xml: "responseXML",
			text: "responseText",
			json: "responseJSON"
		},

		// Data converters
		// Keys separate source (or catchall "*") and destination types with a single space
		converters: {

			// Convert anything to text
			"* text": String,

			// Text to html (true = no transformation)
			"text html": true,

			// Evaluate text as a json expression
			"text json": JSON.parse,

			// Parse text as xml
			"text xml": jQuery.parseXML
		},

		// For options that shouldn't be deep extended:
		// you can add your own custom options here if
		// and when you create one that shouldn't be
		// deep extended (see ajaxExtend)
		flatOptions: {
			url: true,
			context: true
		}
	},

	// Creates a full fledged settings object into target
	// with both ajaxSettings and settings fields.
	// If target is omitted, writes into ajaxSettings.
	ajaxSetup: function( target, settings ) {
		return settings ?

			// Building a settings object
			ajaxExtend( ajaxExtend( target, jQuery.ajaxSettings ), settings ) :

			// Extending ajaxSettings
			ajaxExtend( jQuery.ajaxSettings, target );
	},

	ajaxPrefilter: addToPrefiltersOrTransports( prefilters ),
	ajaxTransport: addToPrefiltersOrTransports( transports ),

	// Main method
	ajax: function( url, options ) {

		// If url is an object, simulate pre-1.5 signature
		if ( typeof url === "object" ) {
			options = url;
			url = undefined;
		}

		// Force options to be an object
		options = options || {};

		var transport,

			// URL without anti-cache param
			cacheURL,

			// Response headers
			responseHeadersString,
			responseHeaders,

			// timeout handle
			timeoutTimer,

			// Url cleanup var
			urlAnchor,

			// Request state (becomes false upon send and true upon completion)
			completed,

			// To know if global events are to be dispatched
			fireGlobals,

			// Loop variable
			i,

			// uncached part of the url
			uncached,

			// Create the final options object
			s = jQuery.ajaxSetup( {}, options ),

			// Callbacks context
			callbackContext = s.context || s,

			// Context for global events is callbackContext if it is a DOM node or jQuery collection
			globalEventContext = s.context &&
				( callbackContext.nodeType || callbackContext.jquery ) ?
					jQuery( callbackContext ) :
					jQuery.event,

			// Deferreds
			deferred = jQuery.Deferred(),
			completeDeferred = jQuery.Callbacks( "once memory" ),

			// Status-dependent callbacks
			statusCode = s.statusCode || {},

			// Headers (they are sent all at once)
			requestHeaders = {},
			requestHeadersNames = {},

			// Default abort message
			strAbort = "canceled",

			// Fake xhr
			jqXHR = {
				readyState: 0,

				// Builds headers hashtable if needed
				getResponseHeader: function( key ) {
					var match;
					if ( completed ) {
						if ( !responseHeaders ) {
							responseHeaders = {};
							while ( ( match = rheaders.exec( responseHeadersString ) ) ) {
								responseHeaders[ match[ 1 ].toLowerCase() ] = match[ 2 ];
							}
						}
						match = responseHeaders[ key.toLowerCase() ];
					}
					return match == null ? null : match;
				},

				// Raw string
				getAllResponseHeaders: function() {
					return completed ? responseHeadersString : null;
				},

				// Caches the header
				setRequestHeader: function( name, value ) {
					if ( completed == null ) {
						name = requestHeadersNames[ name.toLowerCase() ] =
							requestHeadersNames[ name.toLowerCase() ] || name;
						requestHeaders[ name ] = value;
					}
					return this;
				},

				// Overrides response content-type header
				overrideMimeType: function( type ) {
					if ( completed == null ) {
						s.mimeType = type;
					}
					return this;
				},

				// Status-dependent callbacks
				statusCode: function( map ) {
					var code;
					if ( map ) {
						if ( completed ) {

							// Execute the appropriate callbacks
							jqXHR.always( map[ jqXHR.status ] );
						} else {

							// Lazy-add the new callbacks in a way that preserves old ones
							for ( code in map ) {
								statusCode[ code ] = [ statusCode[ code ], map[ code ] ];
							}
						}
					}
					return this;
				},

				// Cancel the request
				abort: function( statusText ) {
					var finalText = statusText || strAbort;
					if ( transport ) {
						transport.abort( finalText );
					}
					done( 0, finalText );
					return this;
				}
			};

		// Attach deferreds
		deferred.promise( jqXHR );

		// Add protocol if not provided (prefilters might expect it)
		// Handle falsy url in the settings object (#10093: consistency with old signature)
		// We also use the url parameter if available
		s.url = ( ( url || s.url || location.href ) + "" )
			.replace( rprotocol, location.protocol + "//" );

		// Alias method option to type as per ticket #12004
		s.type = options.method || options.type || s.method || s.type;

		// Extract dataTypes list
		s.dataTypes = ( s.dataType || "*" ).toLowerCase().match( rnothtmlwhite ) || [ "" ];

		// A cross-domain request is in order when the origin doesn't match the current origin.
		if ( s.crossDomain == null ) {
			urlAnchor = document.createElement( "a" );

			// Support: IE <=8 - 11, Edge 12 - 15
			// IE throws exception on accessing the href property if url is malformed,
			// e.g. http://example.com:80x/
			try {
				urlAnchor.href = s.url;

				// Support: IE <=8 - 11 only
				// Anchor's host property isn't correctly set when s.url is relative
				urlAnchor.href = urlAnchor.href;
				s.crossDomain = originAnchor.protocol + "//" + originAnchor.host !==
					urlAnchor.protocol + "//" + urlAnchor.host;
			} catch ( e ) {

				// If there is an error parsing the URL, assume it is crossDomain,
				// it can be rejected by the transport if it is invalid
				s.crossDomain = true;
			}
		}

		// Convert data if not already a string
		if ( s.data && s.processData && typeof s.data !== "string" ) {
			s.data = jQuery.param( s.data, s.traditional );
		}

		// Apply prefilters
		inspectPrefiltersOrTransports( prefilters, s, options, jqXHR );

		// If request was aborted inside a prefilter, stop there
		if ( completed ) {
			return jqXHR;
		}

		// We can fire global events as of now if asked to
		// Don't fire events if jQuery.event is undefined in an AMD-usage scenario (#15118)
		fireGlobals = jQuery.event && s.global;

		// Watch for a new set of requests
		if ( fireGlobals && jQuery.active++ === 0 ) {
			jQuery.event.trigger( "ajaxStart" );
		}

		// Uppercase the type
		s.type = s.type.toUpperCase();

		// Determine if request has content
		s.hasContent = !rnoContent.test( s.type );

		// Save the URL in case we're toying with the If-Modified-Since
		// and/or If-None-Match header later on
		// Remove hash to simplify url manipulation
		cacheURL = s.url.replace( rhash, "" );

		// More options handling for requests with no content
		if ( !s.hasContent ) {

			// Remember the hash so we can put it back
			uncached = s.url.slice( cacheURL.length );

			// If data is available and should be processed, append data to url
			if ( s.data && ( s.processData || typeof s.data === "string" ) ) {
				cacheURL += ( rquery.test( cacheURL ) ? "&" : "?" ) + s.data;

				// #9682: remove data so that it's not used in an eventual retry
				delete s.data;
			}

			// Add or update anti-cache param if needed
			if ( s.cache === false ) {
				cacheURL = cacheURL.replace( rantiCache, "$1" );
				uncached = ( rquery.test( cacheURL ) ? "&" : "?" ) + "_=" + ( nonce++ ) + uncached;
			}

			// Put hash and anti-cache on the URL that will be requested (gh-1732)
			s.url = cacheURL + uncached;

		// Change '%20' to '+' if this is encoded form body content (gh-2658)
		} else if ( s.data && s.processData &&
			( s.contentType || "" ).indexOf( "application/x-www-form-urlencoded" ) === 0 ) {
			s.data = s.data.replace( r20, "+" );
		}

		// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
		if ( s.ifModified ) {
			if ( jQuery.lastModified[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-Modified-Since", jQuery.lastModified[ cacheURL ] );
			}
			if ( jQuery.etag[ cacheURL ] ) {
				jqXHR.setRequestHeader( "If-None-Match", jQuery.etag[ cacheURL ] );
			}
		}

		// Set the correct header, if data is being sent
		if ( s.data && s.hasContent && s.contentType !== false || options.contentType ) {
			jqXHR.setRequestHeader( "Content-Type", s.contentType );
		}

		// Set the Accepts header for the server, depending on the dataType
		jqXHR.setRequestHeader(
			"Accept",
			s.dataTypes[ 0 ] && s.accepts[ s.dataTypes[ 0 ] ] ?
				s.accepts[ s.dataTypes[ 0 ] ] +
					( s.dataTypes[ 0 ] !== "*" ? ", " + allTypes + "; q=0.01" : "" ) :
				s.accepts[ "*" ]
		);

		// Check for headers option
		for ( i in s.headers ) {
			jqXHR.setRequestHeader( i, s.headers[ i ] );
		}

		// Allow custom headers/mimetypes and early abort
		if ( s.beforeSend &&
			( s.beforeSend.call( callbackContext, jqXHR, s ) === false || completed ) ) {

			// Abort if not done already and return
			return jqXHR.abort();
		}

		// Aborting is no longer a cancellation
		strAbort = "abort";

		// Install callbacks on deferreds
		completeDeferred.add( s.complete );
		jqXHR.done( s.success );
		jqXHR.fail( s.error );

		// Get transport
		transport = inspectPrefiltersOrTransports( transports, s, options, jqXHR );

		// If no transport, we auto-abort
		if ( !transport ) {
			done( -1, "No Transport" );
		} else {
			jqXHR.readyState = 1;

			// Send global event
			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxSend", [ jqXHR, s ] );
			}

			// If request was aborted inside ajaxSend, stop there
			if ( completed ) {
				return jqXHR;
			}

			// Timeout
			if ( s.async && s.timeout > 0 ) {
				timeoutTimer = window.setTimeout( function() {
					jqXHR.abort( "timeout" );
				}, s.timeout );
			}

			try {
				completed = false;
				transport.send( requestHeaders, done );
			} catch ( e ) {

				// Rethrow post-completion exceptions
				if ( completed ) {
					throw e;
				}

				// Propagate others as results
				done( -1, e );
			}
		}

		// Callback for when everything is done
		function done( status, nativeStatusText, responses, headers ) {
			var isSuccess, success, error, response, modified,
				statusText = nativeStatusText;

			// Ignore repeat invocations
			if ( completed ) {
				return;
			}

			completed = true;

			// Clear timeout if it exists
			if ( timeoutTimer ) {
				window.clearTimeout( timeoutTimer );
			}

			// Dereference transport for early garbage collection
			// (no matter how long the jqXHR object will be used)
			transport = undefined;

			// Cache response headers
			responseHeadersString = headers || "";

			// Set readyState
			jqXHR.readyState = status > 0 ? 4 : 0;

			// Determine if successful
			isSuccess = status >= 200 && status < 300 || status === 304;

			// Get response data
			if ( responses ) {
				response = ajaxHandleResponses( s, jqXHR, responses );
			}

			// Convert no matter what (that way responseXXX fields are always set)
			response = ajaxConvert( s, response, jqXHR, isSuccess );

			// If successful, handle type chaining
			if ( isSuccess ) {

				// Set the If-Modified-Since and/or If-None-Match header, if in ifModified mode.
				if ( s.ifModified ) {
					modified = jqXHR.getResponseHeader( "Last-Modified" );
					if ( modified ) {
						jQuery.lastModified[ cacheURL ] = modified;
					}
					modified = jqXHR.getResponseHeader( "etag" );
					if ( modified ) {
						jQuery.etag[ cacheURL ] = modified;
					}
				}

				// if no content
				if ( status === 204 || s.type === "HEAD" ) {
					statusText = "nocontent";

				// if not modified
				} else if ( status === 304 ) {
					statusText = "notmodified";

				// If we have data, let's convert it
				} else {
					statusText = response.state;
					success = response.data;
					error = response.error;
					isSuccess = !error;
				}
			} else {

				// Extract error from statusText and normalize for non-aborts
				error = statusText;
				if ( status || !statusText ) {
					statusText = "error";
					if ( status < 0 ) {
						status = 0;
					}
				}
			}

			// Set data for the fake xhr object
			jqXHR.status = status;
			jqXHR.statusText = ( nativeStatusText || statusText ) + "";

			// Success/Error
			if ( isSuccess ) {
				deferred.resolveWith( callbackContext, [ success, statusText, jqXHR ] );
			} else {
				deferred.rejectWith( callbackContext, [ jqXHR, statusText, error ] );
			}

			// Status-dependent callbacks
			jqXHR.statusCode( statusCode );
			statusCode = undefined;

			if ( fireGlobals ) {
				globalEventContext.trigger( isSuccess ? "ajaxSuccess" : "ajaxError",
					[ jqXHR, s, isSuccess ? success : error ] );
			}

			// Complete
			completeDeferred.fireWith( callbackContext, [ jqXHR, statusText ] );

			if ( fireGlobals ) {
				globalEventContext.trigger( "ajaxComplete", [ jqXHR, s ] );

				// Handle the global AJAX counter
				if ( !( --jQuery.active ) ) {
					jQuery.event.trigger( "ajaxStop" );
				}
			}
		}

		return jqXHR;
	},

	getJSON: function( url, data, callback ) {
		return jQuery.get( url, data, callback, "json" );
	},

	getScript: function( url, callback ) {
		return jQuery.get( url, undefined, callback, "script" );
	}
} );

jQuery.each( [ "get", "post" ], function( i, method ) {
	jQuery[ method ] = function( url, data, callback, type ) {

		// Shift arguments if data argument was omitted
		if ( isFunction( data ) ) {
			type = type || callback;
			callback = data;
			data = undefined;
		}

		// The url can be an options object (which then must have .url)
		return jQuery.ajax( jQuery.extend( {
			url: url,
			type: method,
			dataType: type,
			data: data,
			success: callback
		}, jQuery.isPlainObject( url ) && url ) );
	};
} );


jQuery._evalUrl = function( url ) {
	return jQuery.ajax( {
		url: url,

		// Make this explicit, since user can override this through ajaxSetup (#11264)
		type: "GET",
		dataType: "script",
		cache: true,
		async: false,
		global: false,
		"throws": true
	} );
};


jQuery.fn.extend( {
	wrapAll: function( html ) {
		var wrap;

		if ( this[ 0 ] ) {
			if ( isFunction( html ) ) {
				html = html.call( this[ 0 ] );
			}

			// The elements to wrap the target around
			wrap = jQuery( html, this[ 0 ].ownerDocument ).eq( 0 ).clone( true );

			if ( this[ 0 ].parentNode ) {
				wrap.insertBefore( this[ 0 ] );
			}

			wrap.map( function() {
				var elem = this;

				while ( elem.firstElementChild ) {
					elem = elem.firstElementChild;
				}

				return elem;
			} ).append( this );
		}

		return this;
	},

	wrapInner: function( html ) {
		if ( isFunction( html ) ) {
			return this.each( function( i ) {
				jQuery( this ).wrapInner( html.call( this, i ) );
			} );
		}

		return this.each( function() {
			var self = jQuery( this ),
				contents = self.contents();

			if ( contents.length ) {
				contents.wrapAll( html );

			} else {
				self.append( html );
			}
		} );
	},

	wrap: function( html ) {
		var htmlIsFunction = isFunction( html );

		return this.each( function( i ) {
			jQuery( this ).wrapAll( htmlIsFunction ? html.call( this, i ) : html );
		} );
	},

	unwrap: function( selector ) {
		this.parent( selector ).not( "body" ).each( function() {
			jQuery( this ).replaceWith( this.childNodes );
		} );
		return this;
	}
} );


jQuery.expr.pseudos.hidden = function( elem ) {
	return !jQuery.expr.pseudos.visible( elem );
};
jQuery.expr.pseudos.visible = function( elem ) {
	return !!( elem.offsetWidth || elem.offsetHeight || elem.getClientRects().length );
};




jQuery.ajaxSettings.xhr = function() {
	try {
		return new window.XMLHttpRequest();
	} catch ( e ) {}
};

var xhrSuccessStatus = {

		// File protocol always yields status code 0, assume 200
		0: 200,

		// Support: IE <=9 only
		// #1450: sometimes IE returns 1223 when it should be 204
		1223: 204
	},
	xhrSupported = jQuery.ajaxSettings.xhr();

support.cors = !!xhrSupported && ( "withCredentials" in xhrSupported );
support.ajax = xhrSupported = !!xhrSupported;

jQuery.ajaxTransport( function( options ) {
	var callback, errorCallback;

	// Cross domain only allowed if supported through XMLHttpRequest
	if ( support.cors || xhrSupported && !options.crossDomain ) {
		return {
			send: function( headers, complete ) {
				var i,
					xhr = options.xhr();

				xhr.open(
					options.type,
					options.url,
					options.async,
					options.username,
					options.password
				);

				// Apply custom fields if provided
				if ( options.xhrFields ) {
					for ( i in options.xhrFields ) {
						xhr[ i ] = options.xhrFields[ i ];
					}
				}

				// Override mime type if needed
				if ( options.mimeType && xhr.overrideMimeType ) {
					xhr.overrideMimeType( options.mimeType );
				}

				// X-Requested-With header
				// For cross-domain requests, seeing as conditions for a preflight are
				// akin to a jigsaw puzzle, we simply never set it to be sure.
				// (it can always be set on a per-request basis or even using ajaxSetup)
				// For same-domain requests, won't change header if already provided.
				if ( !options.crossDomain && !headers[ "X-Requested-With" ] ) {
					headers[ "X-Requested-With" ] = "XMLHttpRequest";
				}

				// Set headers
				for ( i in headers ) {
					xhr.setRequestHeader( i, headers[ i ] );
				}

				// Callback
				callback = function( type ) {
					return function() {
						if ( callback ) {
							callback = errorCallback = xhr.onload =
								xhr.onerror = xhr.onabort = xhr.ontimeout =
									xhr.onreadystatechange = null;

							if ( type === "abort" ) {
								xhr.abort();
							} else if ( type === "error" ) {

								// Support: IE <=9 only
								// On a manual native abort, IE9 throws
								// errors on any property access that is not readyState
								if ( typeof xhr.status !== "number" ) {
									complete( 0, "error" );
								} else {
									complete(

										// File: protocol always yields status 0; see #8605, #14207
										xhr.status,
										xhr.statusText
									);
								}
							} else {
								complete(
									xhrSuccessStatus[ xhr.status ] || xhr.status,
									xhr.statusText,

									// Support: IE <=9 only
									// IE9 has no XHR2 but throws on binary (trac-11426)
									// For XHR2 non-text, let the caller handle it (gh-2498)
									( xhr.responseType || "text" ) !== "text"  ||
									typeof xhr.responseText !== "string" ?
										{ binary: xhr.response } :
										{ text: xhr.responseText },
									xhr.getAllResponseHeaders()
								);
							}
						}
					};
				};

				// Listen to events
				xhr.onload = callback();
				errorCallback = xhr.onerror = xhr.ontimeout = callback( "error" );

				// Support: IE 9 only
				// Use onreadystatechange to replace onabort
				// to handle uncaught aborts
				if ( xhr.onabort !== undefined ) {
					xhr.onabort = errorCallback;
				} else {
					xhr.onreadystatechange = function() {

						// Check readyState before timeout as it changes
						if ( xhr.readyState === 4 ) {

							// Allow onerror to be called first,
							// but that will not handle a native abort
							// Also, save errorCallback to a variable
							// as xhr.onerror cannot be accessed
							window.setTimeout( function() {
								if ( callback ) {
									errorCallback();
								}
							} );
						}
					};
				}

				// Create the abort callback
				callback = callback( "abort" );

				try {

					// Do send the request (this may raise an exception)
					xhr.send( options.hasContent && options.data || null );
				} catch ( e ) {

					// #14683: Only rethrow if this hasn't been notified as an error yet
					if ( callback ) {
						throw e;
					}
				}
			},

			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




// Prevent auto-execution of scripts when no explicit dataType was provided (See gh-2432)
jQuery.ajaxPrefilter( function( s ) {
	if ( s.crossDomain ) {
		s.contents.script = false;
	}
} );

// Install script dataType
jQuery.ajaxSetup( {
	accepts: {
		script: "text/javascript, application/javascript, " +
			"application/ecmascript, application/x-ecmascript"
	},
	contents: {
		script: /\b(?:java|ecma)script\b/
	},
	converters: {
		"text script": function( text ) {
			jQuery.globalEval( text );
			return text;
		}
	}
} );

// Handle cache's special case and crossDomain
jQuery.ajaxPrefilter( "script", function( s ) {
	if ( s.cache === undefined ) {
		s.cache = false;
	}
	if ( s.crossDomain ) {
		s.type = "GET";
	}
} );

// Bind script tag hack transport
jQuery.ajaxTransport( "script", function( s ) {

	// This transport only deals with cross domain requests
	if ( s.crossDomain ) {
		var script, callback;
		return {
			send: function( _, complete ) {
				script = jQuery( "<script>" ).prop( {
					charset: s.scriptCharset,
					src: s.url
				} ).on(
					"load error",
					callback = function( evt ) {
						script.remove();
						callback = null;
						if ( evt ) {
							complete( evt.type === "error" ? 404 : 200, evt.type );
						}
					}
				);

				// Use native DOM manipulation to avoid our domManip AJAX trickery
				document.head.appendChild( script[ 0 ] );
			},
			abort: function() {
				if ( callback ) {
					callback();
				}
			}
		};
	}
} );




var oldCallbacks = [],
	rjsonp = /(=)\?(?=&|$)|\?\?/;

// Default jsonp settings
jQuery.ajaxSetup( {
	jsonp: "callback",
	jsonpCallback: function() {
		var callback = oldCallbacks.pop() || ( jQuery.expando + "_" + ( nonce++ ) );
		this[ callback ] = true;
		return callback;
	}
} );

// Detect, normalize options and install callbacks for jsonp requests
jQuery.ajaxPrefilter( "json jsonp", function( s, originalSettings, jqXHR ) {

	var callbackName, overwritten, responseContainer,
		jsonProp = s.jsonp !== false && ( rjsonp.test( s.url ) ?
			"url" :
			typeof s.data === "string" &&
				( s.contentType || "" )
					.indexOf( "application/x-www-form-urlencoded" ) === 0 &&
				rjsonp.test( s.data ) && "data"
		);

	// Handle iff the expected data type is "jsonp" or we have a parameter to set
	if ( jsonProp || s.dataTypes[ 0 ] === "jsonp" ) {

		// Get callback name, remembering preexisting value associated with it
		callbackName = s.jsonpCallback = isFunction( s.jsonpCallback ) ?
			s.jsonpCallback() :
			s.jsonpCallback;

		// Insert callback into url or form data
		if ( jsonProp ) {
			s[ jsonProp ] = s[ jsonProp ].replace( rjsonp, "$1" + callbackName );
		} else if ( s.jsonp !== false ) {
			s.url += ( rquery.test( s.url ) ? "&" : "?" ) + s.jsonp + "=" + callbackName;
		}

		// Use data converter to retrieve json after script execution
		s.converters[ "script json" ] = function() {
			if ( !responseContainer ) {
				jQuery.error( callbackName + " was not called" );
			}
			return responseContainer[ 0 ];
		};

		// Force json dataType
		s.dataTypes[ 0 ] = "json";

		// Install callback
		overwritten = window[ callbackName ];
		window[ callbackName ] = function() {
			responseContainer = arguments;
		};

		// Clean-up function (fires after converters)
		jqXHR.always( function() {

			// If previous value didn't exist - remove it
			if ( overwritten === undefined ) {
				jQuery( window ).removeProp( callbackName );

			// Otherwise restore preexisting value
			} else {
				window[ callbackName ] = overwritten;
			}

			// Save back as free
			if ( s[ callbackName ] ) {

				// Make sure that re-using the options doesn't screw things around
				s.jsonpCallback = originalSettings.jsonpCallback;

				// Save the callback name for future use
				oldCallbacks.push( callbackName );
			}

			// Call if it was a function and we have a response
			if ( responseContainer && isFunction( overwritten ) ) {
				overwritten( responseContainer[ 0 ] );
			}

			responseContainer = overwritten = undefined;
		} );

		// Delegate to script
		return "script";
	}
} );




// Support: Safari 8 only
// In Safari 8 documents created via document.implementation.createHTMLDocument
// collapse sibling forms: the second one becomes a child of the first one.
// Because of that, this security measure has to be disabled in Safari 8.
// https://bugs.webkit.org/show_bug.cgi?id=137337
support.createHTMLDocument = ( function() {
	var body = document.implementation.createHTMLDocument( "" ).body;
	body.innerHTML = "<form></form><form></form>";
	return body.childNodes.length === 2;
} )();


// Argument "data" should be string of html
// context (optional): If specified, the fragment will be created in this context,
// defaults to document
// keepScripts (optional): If true, will include scripts passed in the html string
jQuery.parseHTML = function( data, context, keepScripts ) {
	if ( typeof data !== "string" ) {
		return [];
	}
	if ( typeof context === "boolean" ) {
		keepScripts = context;
		context = false;
	}

	var base, parsed, scripts;

	if ( !context ) {

		// Stop scripts or inline event handlers from being executed immediately
		// by using document.implementation
		if ( support.createHTMLDocument ) {
			context = document.implementation.createHTMLDocument( "" );

			// Set the base href for the created document
			// so any parsed elements with URLs
			// are based on the document's URL (gh-2965)
			base = context.createElement( "base" );
			base.href = document.location.href;
			context.head.appendChild( base );
		} else {
			context = document;
		}
	}

	parsed = rsingleTag.exec( data );
	scripts = !keepScripts && [];

	// Single tag
	if ( parsed ) {
		return [ context.createElement( parsed[ 1 ] ) ];
	}

	parsed = buildFragment( [ data ], context, scripts );

	if ( scripts && scripts.length ) {
		jQuery( scripts ).remove();
	}

	return jQuery.merge( [], parsed.childNodes );
};


/**
 * Load a url into a page
 */
jQuery.fn.load = function( url, params, callback ) {
	var selector, type, response,
		self = this,
		off = url.indexOf( " " );

	if ( off > -1 ) {
		selector = stripAndCollapse( url.slice( off ) );
		url = url.slice( 0, off );
	}

	// If it's a function
	if ( isFunction( params ) ) {

		// We assume that it's the callback
		callback = params;
		params = undefined;

	// Otherwise, build a param string
	} else if ( params && typeof params === "object" ) {
		type = "POST";
	}

	// If we have elements to modify, make the request
	if ( self.length > 0 ) {
		jQuery.ajax( {
			url: url,

			// If "type" variable is undefined, then "GET" method will be used.
			// Make value of this field explicit since
			// user can override it through ajaxSetup method
			type: type || "GET",
			dataType: "html",
			data: params
		} ).done( function( responseText ) {

			// Save response for use in complete callback
			response = arguments;

			self.html( selector ?

				// If a selector was specified, locate the right elements in a dummy div
				// Exclude scripts to avoid IE 'Permission Denied' errors
				jQuery( "<div>" ).append( jQuery.parseHTML( responseText ) ).find( selector ) :

				// Otherwise use the full result
				responseText );

		// If the request succeeds, this function gets "data", "status", "jqXHR"
		// but they are ignored because response was set above.
		// If it fails, this function gets "jqXHR", "status", "error"
		} ).always( callback && function( jqXHR, status ) {
			self.each( function() {
				callback.apply( this, response || [ jqXHR.responseText, status, jqXHR ] );
			} );
		} );
	}

	return this;
};




// Attach a bunch of functions for handling common AJAX events
jQuery.each( [
	"ajaxStart",
	"ajaxStop",
	"ajaxComplete",
	"ajaxError",
	"ajaxSuccess",
	"ajaxSend"
], function( i, type ) {
	jQuery.fn[ type ] = function( fn ) {
		return this.on( type, fn );
	};
} );




jQuery.expr.pseudos.animated = function( elem ) {
	return jQuery.grep( jQuery.timers, function( fn ) {
		return elem === fn.elem;
	} ).length;
};




jQuery.offset = {
	setOffset: function( elem, options, i ) {
		var curPosition, curLeft, curCSSTop, curTop, curOffset, curCSSLeft, calculatePosition,
			position = jQuery.css( elem, "position" ),
			curElem = jQuery( elem ),
			props = {};

		// Set position first, in-case top/left are set even on static elem
		if ( position === "static" ) {
			elem.style.position = "relative";
		}

		curOffset = curElem.offset();
		curCSSTop = jQuery.css( elem, "top" );
		curCSSLeft = jQuery.css( elem, "left" );
		calculatePosition = ( position === "absolute" || position === "fixed" ) &&
			( curCSSTop + curCSSLeft ).indexOf( "auto" ) > -1;

		// Need to be able to calculate position if either
		// top or left is auto and position is either absolute or fixed
		if ( calculatePosition ) {
			curPosition = curElem.position();
			curTop = curPosition.top;
			curLeft = curPosition.left;

		} else {
			curTop = parseFloat( curCSSTop ) || 0;
			curLeft = parseFloat( curCSSLeft ) || 0;
		}

		if ( isFunction( options ) ) {

			// Use jQuery.extend here to allow modification of coordinates argument (gh-1848)
			options = options.call( elem, i, jQuery.extend( {}, curOffset ) );
		}

		if ( options.top != null ) {
			props.top = ( options.top - curOffset.top ) + curTop;
		}
		if ( options.left != null ) {
			props.left = ( options.left - curOffset.left ) + curLeft;
		}

		if ( "using" in options ) {
			options.using.call( elem, props );

		} else {
			curElem.css( props );
		}
	}
};

jQuery.fn.extend( {

	// offset() relates an element's border box to the document origin
	offset: function( options ) {

		// Preserve chaining for setter
		if ( arguments.length ) {
			return options === undefined ?
				this :
				this.each( function( i ) {
					jQuery.offset.setOffset( this, options, i );
				} );
		}

		var rect, win,
			elem = this[ 0 ];

		if ( !elem ) {
			return;
		}

		// Return zeros for disconnected and hidden (display: none) elements (gh-2310)
		// Support: IE <=11 only
		// Running getBoundingClientRect on a
		// disconnected node in IE throws an error
		if ( !elem.getClientRects().length ) {
			return { top: 0, left: 0 };
		}

		// Get document-relative position by adding viewport scroll to viewport-relative gBCR
		rect = elem.getBoundingClientRect();
		win = elem.ownerDocument.defaultView;
		return {
			top: rect.top + win.pageYOffset,
			left: rect.left + win.pageXOffset
		};
	},

	// position() relates an element's margin box to its offset parent's padding box
	// This corresponds to the behavior of CSS absolute positioning
	position: function() {
		if ( !this[ 0 ] ) {
			return;
		}

		var offsetParent, offset, doc,
			elem = this[ 0 ],
			parentOffset = { top: 0, left: 0 };

		// position:fixed elements are offset from the viewport, which itself always has zero offset
		if ( jQuery.css( elem, "position" ) === "fixed" ) {

			// Assume position:fixed implies availability of getBoundingClientRect
			offset = elem.getBoundingClientRect();

		} else {
			offset = this.offset();

			// Account for the *real* offset parent, which can be the document or its root element
			// when a statically positioned element is identified
			doc = elem.ownerDocument;
			offsetParent = elem.offsetParent || doc.documentElement;
			while ( offsetParent &&
				( offsetParent === doc.body || offsetParent === doc.documentElement ) &&
				jQuery.css( offsetParent, "position" ) === "static" ) {

				offsetParent = offsetParent.parentNode;
			}
			if ( offsetParent && offsetParent !== elem && offsetParent.nodeType === 1 ) {

				// Incorporate borders into its offset, since they are outside its content origin
				parentOffset = jQuery( offsetParent ).offset();
				parentOffset.top += jQuery.css( offsetParent, "borderTopWidth", true );
				parentOffset.left += jQuery.css( offsetParent, "borderLeftWidth", true );
			}
		}

		// Subtract parent offsets and element margins
		return {
			top: offset.top - parentOffset.top - jQuery.css( elem, "marginTop", true ),
			left: offset.left - parentOffset.left - jQuery.css( elem, "marginLeft", true )
		};
	},

	// This method will return documentElement in the following cases:
	// 1) For the element inside the iframe without offsetParent, this method will return
	//    documentElement of the parent window
	// 2) For the hidden or detached element
	// 3) For body or html element, i.e. in case of the html node - it will return itself
	//
	// but those exceptions were never presented as a real life use-cases
	// and might be considered as more preferable results.
	//
	// This logic, however, is not guaranteed and can change at any point in the future
	offsetParent: function() {
		return this.map( function() {
			var offsetParent = this.offsetParent;

			while ( offsetParent && jQuery.css( offsetParent, "position" ) === "static" ) {
				offsetParent = offsetParent.offsetParent;
			}

			return offsetParent || documentElement;
		} );
	}
} );

// Create scrollLeft and scrollTop methods
jQuery.each( { scrollLeft: "pageXOffset", scrollTop: "pageYOffset" }, function( method, prop ) {
	var top = "pageYOffset" === prop;

	jQuery.fn[ method ] = function( val ) {
		return access( this, function( elem, method, val ) {

			// Coalesce documents and windows
			var win;
			if ( isWindow( elem ) ) {
				win = elem;
			} else if ( elem.nodeType === 9 ) {
				win = elem.defaultView;
			}

			if ( val === undefined ) {
				return win ? win[ prop ] : elem[ method ];
			}

			if ( win ) {
				win.scrollTo(
					!top ? val : win.pageXOffset,
					top ? val : win.pageYOffset
				);

			} else {
				elem[ method ] = val;
			}
		}, method, val, arguments.length );
	};
} );

// Support: Safari <=7 - 9.1, Chrome <=37 - 49
// Add the top/left cssHooks using jQuery.fn.position
// Webkit bug: https://bugs.webkit.org/show_bug.cgi?id=29084
// Blink bug: https://bugs.chromium.org/p/chromium/issues/detail?id=589347
// getComputedStyle returns percent when specified for top/left/bottom/right;
// rather than make the css module depend on the offset module, just check for it here
jQuery.each( [ "top", "left" ], function( i, prop ) {
	jQuery.cssHooks[ prop ] = addGetHookIf( support.pixelPosition,
		function( elem, computed ) {
			if ( computed ) {
				computed = curCSS( elem, prop );

				// If curCSS returns percentage, fallback to offset
				return rnumnonpx.test( computed ) ?
					jQuery( elem ).position()[ prop ] + "px" :
					computed;
			}
		}
	);
} );


// Create innerHeight, innerWidth, height, width, outerHeight and outerWidth methods
jQuery.each( { Height: "height", Width: "width" }, function( name, type ) {
	jQuery.each( { padding: "inner" + name, content: type, "": "outer" + name },
		function( defaultExtra, funcName ) {

		// Margin is only for outerHeight, outerWidth
		jQuery.fn[ funcName ] = function( margin, value ) {
			var chainable = arguments.length && ( defaultExtra || typeof margin !== "boolean" ),
				extra = defaultExtra || ( margin === true || value === true ? "margin" : "border" );

			return access( this, function( elem, type, value ) {
				var doc;

				if ( isWindow( elem ) ) {

					// $( window ).outerWidth/Height return w/h including scrollbars (gh-1729)
					return funcName.indexOf( "outer" ) === 0 ?
						elem[ "inner" + name ] :
						elem.document.documentElement[ "client" + name ];
				}

				// Get document width or height
				if ( elem.nodeType === 9 ) {
					doc = elem.documentElement;

					// Either scroll[Width/Height] or offset[Width/Height] or client[Width/Height],
					// whichever is greatest
					return Math.max(
						elem.body[ "scroll" + name ], doc[ "scroll" + name ],
						elem.body[ "offset" + name ], doc[ "offset" + name ],
						doc[ "client" + name ]
					);
				}

				return value === undefined ?

					// Get width or height on the element, requesting but not forcing parseFloat
					jQuery.css( elem, type, extra ) :

					// Set width or height on the element
					jQuery.style( elem, type, value, extra );
			}, type, chainable ? margin : undefined, chainable );
		};
	} );
} );


jQuery.each( ( "blur focus focusin focusout resize scroll click dblclick " +
	"mousedown mouseup mousemove mouseover mouseout mouseenter mouseleave " +
	"change select submit keydown keypress keyup contextmenu" ).split( " " ),
	function( i, name ) {

	// Handle event binding
	jQuery.fn[ name ] = function( data, fn ) {
		return arguments.length > 0 ?
			this.on( name, null, data, fn ) :
			this.trigger( name );
	};
} );

jQuery.fn.extend( {
	hover: function( fnOver, fnOut ) {
		return this.mouseenter( fnOver ).mouseleave( fnOut || fnOver );
	}
} );




jQuery.fn.extend( {

	bind: function( types, data, fn ) {
		return this.on( types, null, data, fn );
	},
	unbind: function( types, fn ) {
		return this.off( types, null, fn );
	},

	delegate: function( selector, types, data, fn ) {
		return this.on( types, selector, data, fn );
	},
	undelegate: function( selector, types, fn ) {

		// ( namespace ) or ( selector, types [, fn] )
		return arguments.length === 1 ?
			this.off( selector, "**" ) :
			this.off( types, selector || "**", fn );
	}
} );

// Bind a function to a context, optionally partially applying any
// arguments.
// jQuery.proxy is deprecated to promote standards (specifically Function#bind)
// However, it is not slated for removal any time soon
jQuery.proxy = function( fn, context ) {
	var tmp, args, proxy;

	if ( typeof context === "string" ) {
		tmp = fn[ context ];
		context = fn;
		fn = tmp;
	}

	// Quick check to determine if target is callable, in the spec
	// this throws a TypeError, but we will just return undefined.
	if ( !isFunction( fn ) ) {
		return undefined;
	}

	// Simulated bind
	args = slice.call( arguments, 2 );
	proxy = function() {
		return fn.apply( context || this, args.concat( slice.call( arguments ) ) );
	};

	// Set the guid of unique handler to the same of original handler, so it can be removed
	proxy.guid = fn.guid = fn.guid || jQuery.guid++;

	return proxy;
};

jQuery.holdReady = function( hold ) {
	if ( hold ) {
		jQuery.readyWait++;
	} else {
		jQuery.ready( true );
	}
};
jQuery.isArray = Array.isArray;
jQuery.parseJSON = JSON.parse;
jQuery.nodeName = nodeName;
jQuery.isFunction = isFunction;
jQuery.isWindow = isWindow;
jQuery.camelCase = camelCase;
jQuery.type = toType;

jQuery.now = Date.now;

jQuery.isNumeric = function( obj ) {

	// As of jQuery 3.0, isNumeric is limited to
	// strings and numbers (primitives or objects)
	// that can be coerced to finite numbers (gh-2662)
	var type = jQuery.type( obj );
	return ( type === "number" || type === "string" ) &&

		// parseFloat NaNs numeric-cast false positives ("")
		// ...but misinterprets leading-number strings, particularly hex literals ("0x...")
		// subtraction forces infinities to NaN
		!isNaN( obj - parseFloat( obj ) );
};




// Register as a named AMD module, since jQuery can be concatenated with other
// files that may use define, but not via a proper concatenation script that
// understands anonymous AMD modules. A named AMD is safest and most robust
// way to register. Lowercase jquery is used because AMD module names are
// derived from file names, and jQuery is normally delivered in a lowercase
// file name. Do this after creating the global so that if an AMD module wants
// to call noConflict to hide this version of jQuery, it will work.

// Note that for maximum portability, libraries that are not jQuery should
// declare themselves as anonymous modules, and avoid setting a global if an
// AMD loader is present. jQuery is a special case. For more information, see
// https://github.com/jrburke/requirejs/wiki/Updating-existing-libraries#wiki-anon

if ( true ) {
	!(__WEBPACK_AMD_DEFINE_ARRAY__ = [], __WEBPACK_AMD_DEFINE_RESULT__ = (function() {
		return jQuery;
	}).apply(exports, __WEBPACK_AMD_DEFINE_ARRAY__),
				__WEBPACK_AMD_DEFINE_RESULT__ !== undefined && (module.exports = __WEBPACK_AMD_DEFINE_RESULT__));
}




var

	// Map over jQuery in case of overwrite
	_jQuery = window.jQuery,

	// Map over the $ in case of overwrite
	_$ = window.$;

jQuery.noConflict = function( deep ) {
	if ( window.$ === jQuery ) {
		window.$ = _$;
	}

	if ( deep && window.jQuery === jQuery ) {
		window.jQuery = _jQuery;
	}

	return jQuery;
};

// Expose jQuery and $ identifiers, even in AMD
// (#7102#comment:10, https://github.com/jquery/jquery/pull/557)
// and CommonJS for browser emulators (#13566)
if ( !noGlobal ) {
	window.jQuery = window.$ = jQuery;
}




return jQuery;
} );


/***/ }),

/***/ "./node_modules/webpack/buildin/global.js":
/*!***********************************!*\
  !*** (webpack)/buildin/global.js ***!
  \***********************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports) {

var g;

// This works in non-strict mode
g = (function() {
	return this;
})();

try {
	// This works if eval is allowed (see CSP)
	g = g || Function("return this")() || (1,eval)("this");
} catch(e) {
	// This works if the window reference is available
	if(typeof window === "object")
		g = window;
}

// g can still be undefined, but nothing to do about it...
// We return undefined, instead of nothing here, so it's
// easier to handle this case. if(!global) { ...}

module.exports = g;


/***/ }),

/***/ 0:
/*!******************************************************************************************************************************************************************************************************************************************************************************!*\
  !*** multi ./assets/js/jquery.nice-select.js ./assets/js/bootstrap.min.js ./assets/js/loadmore.js ./assets/js/main.js ./assets/js/modal-video.js ./assets/js/niceselect-activate.js ./assets/js/owl.carousel.min.js ./assets/js/popper.min.js ./assets/js/prefixfree.min.js ***!
  \******************************************************************************************************************************************************************************************************************************************************************************/
/*! dynamic exports provided */
/*! all exports used */
/***/ (function(module, exports, __webpack_require__) {

__webpack_require__(/*! ./assets/js/jquery.nice-select.js */"./assets/js/jquery.nice-select.js");
__webpack_require__(/*! ./assets/js/bootstrap.min.js */"./assets/js/bootstrap.min.js");
__webpack_require__(/*! ./assets/js/loadmore.js */"./assets/js/loadmore.js");
__webpack_require__(/*! ./assets/js/main.js */"./assets/js/main.js");
__webpack_require__(/*! ./assets/js/modal-video.js */"./assets/js/modal-video.js");
__webpack_require__(/*! ./assets/js/niceselect-activate.js */"./assets/js/niceselect-activate.js");
__webpack_require__(/*! ./assets/js/owl.carousel.min.js */"./assets/js/owl.carousel.min.js");
__webpack_require__(/*! ./assets/js/popper.min.js */"./assets/js/popper.min.js");
module.exports = __webpack_require__(/*! ./assets/js/prefixfree.min.js */"./assets/js/prefixfree.min.js");


/***/ })

/******/ });
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly8vd2VicGFjay9ib290c3RyYXAgMDkyNDUyZjM4NGQwOTY2M2E0NWIiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2Jvb3RzdHJhcC5taW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL2pxdWVyeS5uaWNlLXNlbGVjdC5qcyIsIndlYnBhY2s6Ly8vLi9hc3NldHMvanMvbG9hZG1vcmUuanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL21haW4uanMiLCJ3ZWJwYWNrOi8vLy4vYXNzZXRzL2pzL21vZGFsLXZpZGVvLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9uaWNlc2VsZWN0LWFjdGl2YXRlLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9vd2wuY2Fyb3VzZWwubWluLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9wb3BwZXIubWluLmpzIiwid2VicGFjazovLy8uL2Fzc2V0cy9qcy9wcmVmaXhmcmVlLm1pbi5qcyIsIndlYnBhY2s6Ly8vLi9ub2RlX21vZHVsZXMvanF1ZXJ5L2Rpc3QvanF1ZXJ5LmpzIiwid2VicGFjazovLy8od2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanMiXSwibmFtZXMiOlsiYm9vdHN0cmFwIiwidCIsImUiLCJuIiwiaSIsImxlbmd0aCIsImVudW1lcmFibGUiLCJjb25maWd1cmFibGUiLCJ3cml0YWJsZSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5Iiwia2V5IiwiaGFzT3duUHJvcGVydHkiLCJkZWZhdWx0IiwicyIsInRvU3RyaW5nIiwiY2FsbCIsIm1hdGNoIiwidG9Mb3dlckNhc2UiLCJiaW5kVHlwZSIsInIiLCJlbmQiLCJkZWxlZ2F0ZVR5cGUiLCJoYW5kbGUiLCJ0YXJnZXQiLCJpcyIsImhhbmRsZU9iaiIsImhhbmRsZXIiLCJhcHBseSIsImFyZ3VtZW50cyIsIndpbmRvdyIsIlFVbml0IiwiZG9jdW1lbnQiLCJjcmVhdGVFbGVtZW50IiwibyIsInN0eWxlIiwib25lIiwiYSIsIlRSQU5TSVRJT05fRU5EIiwic2V0VGltZW91dCIsInRyaWdnZXJUcmFuc2l0aW9uRW5kIiwiV2Via2l0VHJhbnNpdGlvbiIsIk1velRyYW5zaXRpb24iLCJPVHJhbnNpdGlvbiIsInRyYW5zaXRpb24iLCJnZXRVSUQiLCJNYXRoIiwicmFuZG9tIiwiZ2V0RWxlbWVudEJ5SWQiLCJnZXRTZWxlY3RvckZyb21FbGVtZW50IiwiZ2V0QXR0cmlidXRlIiwiZmluZCIsInJlZmxvdyIsIm9mZnNldEhlaWdodCIsInRyaWdnZXIiLCJzdXBwb3J0c1RyYW5zaXRpb25FbmQiLCJCb29sZWFuIiwiaXNFbGVtZW50Iiwibm9kZVR5cGUiLCJ0eXBlQ2hlY2tDb25maWciLCJwcm90b3R5cGUiLCJsIiwiUmVnRXhwIiwidGVzdCIsIkVycm9yIiwidG9VcHBlckNhc2UiLCJmbiIsImVtdWxhdGVUcmFuc2l0aW9uRW5kIiwiZXZlbnQiLCJzcGVjaWFsIiwiY3JlYXRlIiwiY29uc3RydWN0b3IiLCJfX3Byb3RvX18iLCJDTE9TRSIsIkNMT1NFRCIsIkNMSUNLX0RBVEFfQVBJIiwiQUxFUlQiLCJGQURFIiwiU0hPVyIsIl9lbGVtZW50IiwiY2xvc2UiLCJfZ2V0Um9vdEVsZW1lbnQiLCJfdHJpZ2dlckNsb3NlRXZlbnQiLCJpc0RlZmF1bHRQcmV2ZW50ZWQiLCJfcmVtb3ZlRWxlbWVudCIsImRpc3Bvc2UiLCJyZW1vdmVEYXRhIiwiY2xvc2VzdCIsIkV2ZW50IiwicmVtb3ZlQ2xhc3MiLCJoYXNDbGFzcyIsIl9kZXN0cm95RWxlbWVudCIsImRldGFjaCIsInJlbW92ZSIsIl9qUXVlcnlJbnRlcmZhY2UiLCJlYWNoIiwiZGF0YSIsIl9oYW5kbGVEaXNtaXNzIiwicHJldmVudERlZmF1bHQiLCJnZXQiLCJvbiIsIkRJU01JU1MiLCJDb25zdHJ1Y3RvciIsIm5vQ29uZmxpY3QiLCJBQ1RJVkUiLCJCVVRUT04iLCJGT0NVUyIsIkRBVEFfVE9HR0xFX0NBUlJPVCIsIkRBVEFfVE9HR0xFIiwiSU5QVVQiLCJGT0NVU19CTFVSX0RBVEFfQVBJIiwidG9nZ2xlIiwidHlwZSIsImNoZWNrZWQiLCJoYXNBdHRyaWJ1dGUiLCJjbGFzc0xpc3QiLCJjb250YWlucyIsImZvY3VzIiwic2V0QXR0cmlidXRlIiwidG9nZ2xlQ2xhc3MiLCJoIiwiaW50ZXJ2YWwiLCJrZXlib2FyZCIsInNsaWRlIiwicGF1c2UiLCJ3cmFwIiwiTkVYVCIsIlBSRVYiLCJMRUZUIiwiUklHSFQiLCJjIiwiU0xJREUiLCJTTElEIiwiS0VZRE9XTiIsIk1PVVNFRU5URVIiLCJNT1VTRUxFQVZFIiwiVE9VQ0hFTkQiLCJMT0FEX0RBVEFfQVBJIiwidSIsIkNBUk9VU0VMIiwiSVRFTSIsImQiLCJBQ1RJVkVfSVRFTSIsIk5FWFRfUFJFViIsIklORElDQVRPUlMiLCJEQVRBX1NMSURFIiwiREFUQV9SSURFIiwiZiIsIl9pdGVtcyIsIl9pbnRlcnZhbCIsIl9hY3RpdmVFbGVtZW50IiwiX2lzUGF1c2VkIiwiX2lzU2xpZGluZyIsInRvdWNoVGltZW91dCIsIl9jb25maWciLCJfZ2V0Q29uZmlnIiwiX2luZGljYXRvcnNFbGVtZW50IiwiX2FkZEV2ZW50TGlzdGVuZXJzIiwibmV4dCIsIl9zbGlkZSIsIm5leHRXaGVuVmlzaWJsZSIsImhpZGRlbiIsImNzcyIsInByZXYiLCJjeWNsZSIsImNsZWFySW50ZXJ2YWwiLCJzZXRJbnRlcnZhbCIsInZpc2liaWxpdHlTdGF0ZSIsImJpbmQiLCJ0byIsIl9nZXRJdGVtSW5kZXgiLCJvZmYiLCJleHRlbmQiLCJfa2V5ZG93biIsImRvY3VtZW50RWxlbWVudCIsImNsZWFyVGltZW91dCIsInRhZ05hbWUiLCJ3aGljaCIsIm1ha2VBcnJheSIsInBhcmVudCIsImluZGV4T2YiLCJfZ2V0SXRlbUJ5RGlyZWN0aW9uIiwiX3RyaWdnZXJTbGlkZUV2ZW50IiwicmVsYXRlZFRhcmdldCIsImRpcmVjdGlvbiIsImZyb20iLCJfc2V0QWN0aXZlSW5kaWNhdG9yRWxlbWVudCIsImNoaWxkcmVuIiwiYWRkQ2xhc3MiLCJfIiwiZyIsIm0iLCJwIiwiX2RhdGFBcGlDbGlja0hhbmRsZXIiLCJTSE9XTiIsIkhJREUiLCJISURERU4iLCJDT0xMQVBTRSIsIkNPTExBUFNJTkciLCJDT0xMQVBTRUQiLCJXSURUSCIsIkhFSUdIVCIsIkFDVElWRVMiLCJfaXNUcmFuc2l0aW9uaW5nIiwiX3RyaWdnZXJBcnJheSIsImlkIiwiZmlsdGVyIiwicHVzaCIsIl9wYXJlbnQiLCJfZ2V0UGFyZW50IiwiX2FkZEFyaWFBbmRDb2xsYXBzZWRDbGFzcyIsImhpZGUiLCJzaG93IiwiX2dldERpbWVuc2lvbiIsImF0dHIiLCJzZXRUcmFuc2l0aW9uaW5nIiwic2xpY2UiLCJnZXRCb3VuZGluZ0NsaWVudFJlY3QiLCJqcXVlcnkiLCJfZ2V0VGFyZ2V0RnJvbUVsZW1lbnQiLCJjdXJyZW50VGFyZ2V0IiwiQ0xJQ0siLCJLRVlET1dOX0RBVEFfQVBJIiwiS0VZVVBfREFUQV9BUEkiLCJESVNBQkxFRCIsIkRST1BVUCIsIk1FTlVSSUdIVCIsIk1FTlVMRUZUIiwiRk9STV9DSElMRCIsIk1FTlUiLCJOQVZCQVJfTkFWIiwiVklTSUJMRV9JVEVNUyIsIlRPUCIsIlRPUEVORCIsIkJPVFRPTSIsIkJPVFRPTUVORCIsIm9mZnNldCIsImZsaXAiLCJfcG9wcGVyIiwiX21lbnUiLCJfZ2V0TWVudUVsZW1lbnQiLCJfaW5OYXZiYXIiLCJfZGV0ZWN0TmF2YmFyIiwiZGlzYWJsZWQiLCJfZ2V0UGFyZW50RnJvbUVsZW1lbnQiLCJfY2xlYXJNZW51cyIsIl9nZXRQb3BwZXJDb25maWciLCJub29wIiwiZGVzdHJveSIsInVwZGF0ZSIsInNjaGVkdWxlVXBkYXRlIiwic3RvcFByb3BhZ2F0aW9uIiwiRGVmYXVsdCIsIkRlZmF1bHRUeXBlIiwiX2dldFBsYWNlbWVudCIsIm9mZnNldHMiLCJwbGFjZW1lbnQiLCJtb2RpZmllcnMiLCJlbmFibGVkIiwiYXBwbHlTdHlsZSIsInBhcmVudE5vZGUiLCJfZGF0YUFwaUtleWRvd25IYW5kbGVyIiwiYmFja2Ryb3AiLCJGT0NVU0lOIiwiUkVTSVpFIiwiQ0xJQ0tfRElTTUlTUyIsIktFWURPV05fRElTTUlTUyIsIk1PVVNFVVBfRElTTUlTUyIsIk1PVVNFRE9XTl9ESVNNSVNTIiwiU0NST0xMQkFSX01FQVNVUkVSIiwiQkFDS0RST1AiLCJPUEVOIiwiRElBTE9HIiwiREFUQV9ESVNNSVNTIiwiRklYRURfQ09OVEVOVCIsIlNUSUNLWV9DT05URU5UIiwiTkFWQkFSX1RPR0dMRVIiLCJfZGlhbG9nIiwiX2JhY2tkcm9wIiwiX2lzU2hvd24iLCJfaXNCb2R5T3ZlcmZsb3dpbmciLCJfaWdub3JlQmFja2Ryb3BDbGljayIsIl9vcmlnaW5hbEJvZHlQYWRkaW5nIiwiX3Njcm9sbGJhcldpZHRoIiwiX2NoZWNrU2Nyb2xsYmFyIiwiX3NldFNjcm9sbGJhciIsIl9hZGp1c3REaWFsb2ciLCJib2R5IiwiX3NldEVzY2FwZUV2ZW50IiwiX3NldFJlc2l6ZUV2ZW50IiwiX3Nob3dCYWNrZHJvcCIsIl9zaG93RWxlbWVudCIsIl9oaWRlTW9kYWwiLCJoYW5kbGVVcGRhdGUiLCJOb2RlIiwiRUxFTUVOVF9OT0RFIiwiYXBwZW5kQ2hpbGQiLCJkaXNwbGF5IiwicmVtb3ZlQXR0cmlidXRlIiwic2Nyb2xsVG9wIiwiX2VuZm9yY2VGb2N1cyIsImhhcyIsIl9yZXNldEFkanVzdG1lbnRzIiwiX3Jlc2V0U2Nyb2xsYmFyIiwiX3JlbW92ZUJhY2tkcm9wIiwiY2xhc3NOYW1lIiwiYXBwZW5kVG8iLCJzY3JvbGxIZWlnaHQiLCJjbGllbnRIZWlnaHQiLCJwYWRkaW5nTGVmdCIsInBhZGRpbmdSaWdodCIsImxlZnQiLCJyaWdodCIsImlubmVyV2lkdGgiLCJfZ2V0U2Nyb2xsYmFyV2lkdGgiLCJwYXJzZUZsb2F0IiwibWFyZ2luUmlnaHQiLCJ3aWR0aCIsImNsaWVudFdpZHRoIiwicmVtb3ZlQ2hpbGQiLCJhbmltYXRpb24iLCJ0ZW1wbGF0ZSIsInRpdGxlIiwiZGVsYXkiLCJodG1sIiwic2VsZWN0b3IiLCJjb250YWluZXIiLCJmYWxsYmFja1BsYWNlbWVudCIsIkFVVE8iLCJPVVQiLCJJTlNFUlRFRCIsIkZPQ1VTT1VUIiwiVE9PTFRJUCIsIlRPT0xUSVBfSU5ORVIiLCJBUlJPVyIsIkhPVkVSIiwiTUFOVUFMIiwiX2lzRW5hYmxlZCIsIl90aW1lb3V0IiwiX2hvdmVyU3RhdGUiLCJfYWN0aXZlVHJpZ2dlciIsImVsZW1lbnQiLCJjb25maWciLCJ0aXAiLCJfc2V0TGlzdGVuZXJzIiwiZW5hYmxlIiwiZGlzYWJsZSIsInRvZ2dsZUVuYWJsZWQiLCJEQVRBX0tFWSIsIl9nZXREZWxlZ2F0ZUNvbmZpZyIsImNsaWNrIiwiX2lzV2l0aEFjdGl2ZVRyaWdnZXIiLCJfZW50ZXIiLCJfbGVhdmUiLCJnZXRUaXBFbGVtZW50IiwiRVZFTlRfS0VZIiwiaXNXaXRoQ29udGVudCIsIm93bmVyRG9jdW1lbnQiLCJOQU1FIiwic2V0Q29udGVudCIsIl9nZXRBdHRhY2htZW50IiwiYWRkQXR0YWNobWVudENsYXNzIiwiYmVoYXZpb3IiLCJhcnJvdyIsIm9uQ3JlYXRlIiwib3JpZ2luYWxQbGFjZW1lbnQiLCJfaGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlIiwib25VcGRhdGUiLCJfZml4VHJhbnNpdGlvbiIsIl9UUkFOU0lUSU9OX0RVUkFUSU9OIiwiX2NsZWFuVGlwQ2xhc3MiLCJnZXRUaXRsZSIsInNldEVsZW1lbnRDb250ZW50IiwiZW1wdHkiLCJhcHBlbmQiLCJ0ZXh0Iiwic3BsaXQiLCJmb3JFYWNoIiwiX2ZpeFRpdGxlIiwiY29udGVudCIsImpvaW4iLCJUSVRMRSIsIkNPTlRFTlQiLCJfZ2V0Q29udGVudCIsIm1ldGhvZCIsIkFDVElWQVRFIiwiU0NST0xMIiwiRFJPUERPV05fSVRFTSIsIkRST1BET1dOX01FTlUiLCJEQVRBX1NQWSIsIk5BVl9MSVNUX0dST1VQIiwiTkFWX0xJTktTIiwiTkFWX0lURU1TIiwiTElTVF9JVEVNUyIsIkRST1BET1dOIiwiRFJPUERPV05fSVRFTVMiLCJEUk9QRE9XTl9UT0dHTEUiLCJPRkZTRVQiLCJQT1NJVElPTiIsIl9zY3JvbGxFbGVtZW50IiwiX3NlbGVjdG9yIiwiX29mZnNldHMiLCJfdGFyZ2V0cyIsIl9hY3RpdmVUYXJnZXQiLCJfc2Nyb2xsSGVpZ2h0IiwiX3Byb2Nlc3MiLCJyZWZyZXNoIiwiX2dldFNjcm9sbFRvcCIsIl9nZXRTY3JvbGxIZWlnaHQiLCJtYXAiLCJoZWlnaHQiLCJ0b3AiLCJzb3J0IiwicGFnZVlPZmZzZXQiLCJtYXgiLCJfZ2V0T2Zmc2V0SGVpZ2h0IiwiaW5uZXJIZWlnaHQiLCJfYWN0aXZhdGUiLCJfY2xlYXIiLCJwYXJlbnRzIiwidGFiIiwiQUNUSVZFX1VMIiwiRFJPUERPV05fQUNUSVZFX0NISUxEIiwibm9kZU5hbWUiLCJfdHJhbnNpdGlvbkNvbXBsZXRlIiwiVXRpbCIsIkFsZXJ0IiwiQnV0dG9uIiwiQ2Fyb3VzZWwiLCJDb2xsYXBzZSIsIkRyb3Bkb3duIiwiTW9kYWwiLCJQb3BvdmVyIiwiU2Nyb2xsc3B5IiwiVGFiIiwiVG9vbHRpcCIsIiQiLCJQb3BwZXIiLCJuaWNlU2VsZWN0IiwiJHNlbGVjdCIsIiRkcm9wZG93biIsIm9wZW4iLCJjcmVhdGVfbmljZV9zZWxlY3QiLCJjb25zb2xlIiwibG9nIiwiYWZ0ZXIiLCIkb3B0aW9ucyIsIiRzZWxlY3RlZCIsIiRvcHRpb24iLCJ2YWwiLCJub3QiLCIkZm9jdXNlZF9vcHRpb24iLCJrZXlDb2RlIiwiJG5leHQiLCJuZXh0QWxsIiwiZmlyc3QiLCIkcHJldiIsInByZXZBbGwiLCJjc3NUZXh0IiwicG9pbnRlckV2ZW50cyIsImpRdWVyeSIsInNsaWRlRG93biIsInJlYWR5Iiwic2Nyb2xsIiwicG9zIiwiYmFja2dyb3VuZCIsIm93bENhcm91c2VsIiwiaXRlbXMiLCJsb29wIiwibmF2IiwiYXV0b3BsYXkiLCJuYXZUZXh0IiwiYW5pbWF0ZUluIiwiYW5pbWF0ZU91dCIsImRvdHMiLCJtb3VzZURyYWciLCJjZW50ZXIiLCJtYXJnaW4iLCJyZXNwb25zaXZlQ2xhc3MiLCJyZXNwb25zaXZlIiwibW9kYWxWaWRlbyIsImFuaW1hdGUiLCJmYWRlSW4iLCJmYWRlT3V0IiwiX3R5cGVvZiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwib2JqIiwidW1kIiwiZmFjdG9yeSIsImRlZmluZSIsImV4cG9ydHMiLCJtb2R1bGUiLCJyZXF1aXJlIiwiZGVmYXVsdHMiLCJjaGFubmVsIiwieW91dHViZSIsImNjX2xvYWRfcG9saWN5IiwiY29sb3IiLCJjb250cm9scyIsImRpc2FibGVrYiIsImVuYWJsZWpzYXBpIiwiZnMiLCJoMSIsIml2X2xvYWRfcG9saWN5IiwibGlzdCIsImxpc3RUeXBlIiwibW9kZXN0YnJhbmRpbmciLCJvcmlnaW4iLCJwbGF5bGlzdCIsInBsYXlzaW5saW5lIiwicmVsIiwic2hvd2luZm8iLCJzdGFydCIsIndtb2RlIiwidGhlbWUiLCJyYXRpbyIsInZpbWVvIiwiYXBpIiwiYXV0b3BhdXNlIiwiYnlsaW5lIiwiY2FsbGJhY2siLCJtYXhoZWlnaHQiLCJtYXh3aWR0aCIsInBsYXllcl9pZCIsInBvcnRyYWl0IiwieGh0bWwiLCJhbGxvd0Z1bGxTY3JlZW4iLCJhbmltYXRpb25TcGVlZCIsImNsYXNzTmFtZXMiLCJtb2RhbFZpZGVvQ2xvc2UiLCJtb2RhbFZpZGVvQm9keSIsIm1vZGFsVmlkZW9Jbm5lciIsIm1vZGFsVmlkZW9JZnJhbWVXcmFwIiwibW9kYWxWaWRlb0Nsb3NlQnRuIiwiYXJpYSIsIm9wZW5NZXNzYWdlIiwiZGlzbWlzc0J0bk1lc3NhZ2UiLCJnZXRRdWVyeVN0cmluZyIsInVybCIsInN1YnN0ciIsImdldFlvdXR1YmVVcmwiLCJ2aWRlb0lkIiwicXVlcnkiLCJnZXRWaW1lb1VybCIsImdldFZpZGVvVXJsIiwib3B0IiwiZ2V0UGFkZGluZyIsImFyciIsIk51bWJlciIsInBhZGRpbmciLCJnZXRIdG1sIiwidmlkZW9VcmwiLCIkbWUiLCIkbW9kYWwiLCIkYnRuIiwic3BlZWQiLCIkc2VsZiIsImIiLCJzZXR0aW5ncyIsIm9wdGlvbnMiLCJEZWZhdWx0cyIsIiRlbGVtZW50IiwiX2hhbmRsZXJzIiwiX3BsdWdpbnMiLCJfc3VwcmVzcyIsIl9jdXJyZW50IiwiX3NwZWVkIiwiX2Nvb3JkaW5hdGVzIiwiX2JyZWFrcG9pbnQiLCJfd2lkdGgiLCJfY2xvbmVzIiwiX21lcmdlcnMiLCJfd2lkdGhzIiwiX2ludmFsaWRhdGVkIiwiX3BpcGUiLCJfZHJhZyIsInRpbWUiLCJwb2ludGVyIiwic3RhZ2UiLCJjdXJyZW50IiwiX3N0YXRlcyIsInRhZ3MiLCJpbml0aWFsaXppbmciLCJhbmltYXRpbmciLCJkcmFnZ2luZyIsInByb3h5IiwiUGx1Z2lucyIsImNoYXJBdCIsIldvcmtlcnMiLCJydW4iLCJzZXR1cCIsImluaXRpYWxpemUiLCJyZXdpbmQiLCJ0b3VjaERyYWciLCJwdWxsRHJhZyIsImZyZWVEcmFnIiwic3RhZ2VQYWRkaW5nIiwibWVyZ2UiLCJtZXJnZUZpdCIsImF1dG9XaWR0aCIsInN0YXJ0UG9zaXRpb24iLCJydGwiLCJzbWFydFNwZWVkIiwiZmx1aWRTcGVlZCIsImRyYWdFbmRTcGVlZCIsInJlc3BvbnNpdmVSZWZyZXNoUmF0ZSIsInJlc3BvbnNpdmVCYXNlRWxlbWVudCIsImZhbGxiYWNrRWFzaW5nIiwiaW5mbyIsIm5lc3RlZEl0ZW1TZWxlY3RvciIsIml0ZW1FbGVtZW50Iiwic3RhZ2VFbGVtZW50IiwicmVmcmVzaENsYXNzIiwibG9hZGVkQ2xhc3MiLCJsb2FkaW5nQ2xhc3MiLCJydGxDbGFzcyIsImRyYWdDbGFzcyIsIml0ZW1DbGFzcyIsInN0YWdlQ2xhc3MiLCJzdGFnZU91dGVyQ2xhc3MiLCJncmFiQ2xhc3MiLCJXaWR0aCIsIklubmVyIiwiT3V0ZXIiLCJUeXBlIiwiU3RhdGUiLCJyZWxhdGl2ZSIsIiRzdGFnZSIsInRvRml4ZWQiLCJtaW4iLCJjZWlsIiwibm9ybWFsaXplIiwib3V0ZXJIVE1MIiwicHJlcGVuZFRvIiwiYWJzIiwiZXEiLCJyZW1vdmVBdHRyIiwiaW5kZXgiLCJtaW5pbXVtIiwibWF4aW11bSIsInJlc2V0IiwiY29vcmRpbmF0ZXMiLCJvcCIsImVudGVyIiwicHJlbG9hZEF1dG9XaWR0aEltYWdlcyIsInJlcGxhY2UiLCJpbnZhbGlkYXRlIiwicmVnaXN0ZXJFdmVudEhhbmRsZXJzIiwibGVhdmUiLCJ2aWV3cG9ydCIsInByb3BlcnR5IiwibmFtZSIsInZhbHVlIiwib3B0aW9uc0xvZ2ljIiwicHJlcGFyZSIsImFsbCIsImdyZXAiLCJvblRocm90dGxlZFJlc2l6ZSIsInJlc2l6ZVRpbWVyIiwib25SZXNpemUiLCJzdXBwb3J0Iiwib25UcmFuc2l0aW9uRW5kIiwib25EcmFnU3RhcnQiLCJvbkRyYWdFbmQiLCJ0cmFuc2Zvcm0iLCJ4IiwieSIsInBvc2l0aW9uIiwic3RvcCIsIkRhdGUiLCJnZXRUaW1lIiwiZGlmZmVyZW5jZSIsIm9uRHJhZ01vdmUiLCJ0cmFuc2Zvcm0zZCIsInN1cHByZXNzIiwicmVsZWFzZSIsImlzTnVtZXJpYyIsIm1lcmdlcnMiLCJjbG9uZXMiLCJkdXJhdGlvbiIsInNyY0VsZW1lbnQiLCJvcmlnaW5hbFRhcmdldCIsIndhcm4iLCJhZGRCYWNrIiwiYWRkIiwiYmVmb3JlIiwic3BsaWNlIiwiSW1hZ2UiLCJzcmMiLCJ1bndyYXAiLCJjb250ZW50cyIsImFkZEV2ZW50TGlzdGVuZXIiLCJhdHRhY2hFdmVudCIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJkZXRhY2hFdmVudCIsIml0ZW0iLCJjb3VudCIsImNhbWVsQ2FzZSIsImoiLCJvblRyaWdnZXIiLCJyZWdpc3RlciIsImNvbmNhdCIsIm93bCIsIl9kZWZhdWx0IiwibmFtZXNwYWNlIiwiaW5BcnJheSIsIm9yaWdpbmFsRXZlbnQiLCJ0b3VjaGVzIiwiY2hhbmdlZFRvdWNoZXMiLCJwYWdlWCIsInBhZ2VZIiwiY2xpZW50WCIsImNsaWVudFkiLCJpc05hTiIsIkFycmF5IiwiWmVwdG8iLCJfY29yZSIsIl92aXNpYmxlIiwiYXV0b1JlZnJlc2giLCJ3YXRjaCIsImF1dG9SZWZyZXNoSW50ZXJ2YWwiLCJnZXRPd25Qcm9wZXJ0eU5hbWVzIiwiQXV0b1JlZnJlc2giLCJfbG9hZGVkIiwibGF6eUxvYWQiLCJsb2FkIiwiZGV2aWNlUGl4ZWxSYXRpbyIsIm9ubG9hZCIsIm9wYWNpdHkiLCJoYW5kbGVycyIsIkxhenkiLCJhdXRvSGVpZ2h0IiwiYXV0b0hlaWdodENsYXNzIiwidG9BcnJheSIsIkF1dG9IZWlnaHQiLCJfdmlkZW9zIiwiX3BsYXlpbmciLCJ2aWRlbyIsImlzSW5GdWxsU2NyZWVuIiwiZmV0Y2giLCJwbGF5IiwidmlkZW9IZWlnaHQiLCJ2aWRlb1dpZHRoIiwidGh1bWJuYWlsIiwiayIsImFqYXgiLCJqc29ucCIsImRhdGFUeXBlIiwic3VjY2VzcyIsInRodW1ibmFpbF9sYXJnZSIsImZyYW1lZ3JhYl91cmwiLCJpbnNlcnRBZnRlciIsImZ1bGxzY3JlZW5FbGVtZW50IiwibW96RnVsbFNjcmVlbkVsZW1lbnQiLCJ3ZWJraXRGdWxsc2NyZWVuRWxlbWVudCIsIlZpZGVvIiwiY29yZSIsInN3YXBwaW5nIiwicHJldmlvdXMiLCJzd2FwIiwiY2xlYXIiLCJBbmltYXRlIiwiX3BhdXNlZCIsIl9zZXRBdXRvUGxheUludGVydmFsIiwiYXV0b3BsYXlIb3ZlclBhdXNlIiwiYXV0b3BsYXlUaW1lb3V0IiwiYXV0b3BsYXlTcGVlZCIsIl9nZXROZXh0VGltZW91dCIsIl9pbml0aWFsaXplZCIsIl9wYWdlcyIsIl9jb250cm9scyIsIl90ZW1wbGF0ZXMiLCJfb3ZlcnJpZGVzIiwiZG90c0RhdGEiLCJkb3RDbGFzcyIsInBvcCIsImRyYXciLCJuYXZTcGVlZCIsIm5hdkVsZW1lbnQiLCJuYXZDb250YWluZXIiLCJuYXZDb250YWluZXJDbGFzcyIsIm5hdkNsYXNzIiwic2xpZGVCeSIsImRvdHNDbGFzcyIsImRvdHNFYWNoIiwiZG90c1NwZWVkIiwiZG90c0NvbnRhaW5lciIsIiRyZWxhdGl2ZSIsIiRwcmV2aW91cyIsInByb3AiLCIkYWJzb2x1dGUiLCJvdmVyaWRlcyIsInBhZ2UiLCJzaXplIiwiZ2V0UG9zaXRpb24iLCJOYXZpZ2F0aW9uIiwiX2hhc2hlcyIsImxvY2F0aW9uIiwiaGFzaCIsInN1YnN0cmluZyIsIlVSTGhhc2hMaXN0ZW5lciIsIkhhc2giLCJXZWJraXRBbmltYXRpb24iLCJNb3pBbmltYXRpb24iLCJPQW5pbWF0aW9uIiwiY3NzdHJhbnNmb3JtcyIsImNzc3RyYW5zZm9ybXMzZCIsImNzc3RyYW5zaXRpb25zIiwiY3NzYW5pbWF0aW9ucyIsIlN0cmluZyIsImdldENvbXB1dGVkU3R5bGUiLCJob3N0Iiwib3ZlcmZsb3ciLCJvdmVyZmxvd1giLCJvdmVyZmxvd1kiLCJvZmZzZXRQYXJlbnQiLCJmaXJzdEVsZW1lbnRDaGlsZCIsImNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIiwiRE9DVU1FTlRfUE9TSVRJT05fRk9MTE9XSU5HIiwiY3JlYXRlUmFuZ2UiLCJzZXRTdGFydCIsInNldEVuZCIsImNvbW1vbkFuY2VzdG9yQ29udGFpbmVyIiwic2Nyb2xsaW5nRWxlbWVudCIsImJvdHRvbSIsIlgiLCJuZSIsImRlIiwib2Zmc2V0V2lkdGgiLCJib3JkZXJUb3BXaWR0aCIsImJvcmRlckxlZnRXaWR0aCIsIm1hcmdpblRvcCIsIm1hcmdpbkxlZnQiLCJ3IiwiRSIsInYiLCJrZXlzIiwiYXJlYSIsIk8iLCJtYXJnaW5Cb3R0b20iLCJMIiwiUyIsIlQiLCJDIiwiZmluZEluZGV4IiwiTiIsImZ1bmN0aW9uIiwicG9wcGVyIiwicmVmZXJlbmNlIiwic3RhdGUiLCJpc0Rlc3Ryb3llZCIsImluc3RhbmNlIiwic3R5bGVzIiwiYXJyb3dTdHlsZXMiLCJhdHRyaWJ1dGVzIiwiZmxpcHBlZCIsImJvdW5kYXJpZXNFbGVtZW50IiwiaXNDcmVhdGVkIiwiVyIsInNvbWUiLCJCIiwiUCIsImRpc2FibGVFdmVudExpc3RlbmVycyIsInJlbW92ZU9uRGVzdHJveSIsIkQiLCJwYXNzaXZlIiwiSCIsInVwZGF0ZUJvdW5kIiwic2Nyb2xsUGFyZW50cyIsInNjcm9sbEVsZW1lbnQiLCJldmVudHNFbmFibGVkIiwiQSIsIk0iLCJJIiwiY2FuY2VsQW5pbWF0aW9uRnJhbWUiLCJSIiwiaXNGaW5pdGUiLCJVIiwiWSIsIkYiLCJvcmRlciIsIksiLCJsZSIsInJldmVyc2UiLCJxIiwiRyIsInRyaW0iLCJzZWFyY2giLCJyZWR1Y2UiLCJ6IiwiViIsImZsb29yIiwiUSIsIkoiLCJaIiwiZWUiLCJ0ZSIsIm5hdmlnYXRvciIsInVzZXJBZ2VudCIsIm9lIiwiTXV0YXRpb25PYnNlcnZlciIsImllIiwib2JzZXJ2ZSIsImFwcFZlcnNpb24iLCJyZSIsIlR5cGVFcnJvciIsInBlIiwic2UiLCJhc3NpZ24iLCJhZSIsImZlIiwiRkxJUCIsIkNMT0NLV0lTRSIsIkNPVU5URVJDTE9DS1dJU0UiLCJtZSIsInJlcXVlc3RBbmltYXRpb25GcmFtZSIsIm9uTG9hZCIsImVuYWJsZUV2ZW50TGlzdGVuZXJzIiwiVXRpbHMiLCJnbG9iYWwiLCJQb3BwZXJVdGlscyIsInBsYWNlbWVudHMiLCJzaGlmdCIsInByZXZlbnRPdmVyZmxvdyIsImJvdW5kYXJpZXMiLCJwcmlvcml0eSIsInByaW1hcnkiLCJlc2NhcGVXaXRoUmVmZXJlbmNlIiwic2Vjb25kYXJ5Iiwia2VlcFRvZ2V0aGVyIiwicXVlcnlTZWxlY3RvciIsImFycm93RWxlbWVudCIsInJvdW5kIiwiZmxpcFZhcmlhdGlvbnMiLCJpbm5lciIsImNvbXB1dGVTdHlsZSIsImdwdUFjY2VsZXJhdGlvbiIsIndpbGxDaGFuZ2UiLCJxdWVyeVNlbGVjdG9yQWxsIiwiU3R5bGVGaXgiLCJsaW5rIiwiaHJlZiIsIlhNTEh0dHBSZXF1ZXN0Iiwib25yZWFkeXN0YXRlY2hhbmdlIiwicmVhZHlTdGF0ZSIsInJlc3BvbnNlVGV4dCIsInN0YXR1cyIsImZpeCIsInRleHRDb250ZW50IiwibWVkaWEiLCJpbnNlcnRCZWZvcmUiLCJzZW5kIiwiWERvbWFpblJlcXVlc3QiLCJvbmVycm9yIiwib25wcm9ncmVzcyIsInN0eWxlRWxlbWVudCIsInN0eWxlQXR0cmlidXRlIiwicHJvY2VzcyIsImZpeGVycyIsInVuZGVmaW5lZCIsImRlQ2FtZWxDYXNlIiwiUHJlZml4RnJlZSIsInByZWZpeENTUyIsInByZWZpeCIsImZ1bmN0aW9ucyIsInByb3BlcnRpZXMiLCJwcmVmaXhTZWxlY3RvciIsInByZWZpeFByb3BlcnR5IiwidXNlcyIsIlByZWZpeCIsInBhcmFtcyIsImNhbGMiLCJpbml0aWFsIiwiYm94IiwiZmxleGJveCIsImZsZXgiLCJrZXl3b3JkcyIsInNoZWV0IiwiY3NzUnVsZXMiLCJrZXlmcmFtZXMiLCJzZWxlY3RvcnMiLCJhdHJ1bGVzIiwidmFsdWVQcm9wZXJ0aWVzIl0sIm1hcHBpbmdzIjoiO0FBQUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLG1DQUEyQiwwQkFBMEIsRUFBRTtBQUN2RCx5Q0FBaUMsZUFBZTtBQUNoRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQSw4REFBc0QsK0RBQStEOztBQUVySDtBQUNBOztBQUVBO0FBQ0E7Ozs7Ozs7Ozs7Ozs7OztBQzdEQTs7Ozs7QUFLQSxJQUFJQSxZQUFVLFVBQVNDLENBQVQsRUFBV0MsQ0FBWCxFQUFhQyxDQUFiLEVBQWU7QUFBQztBQUFhLFdBQVNDLENBQVQsQ0FBV0gsQ0FBWCxFQUFhQyxDQUFiLEVBQWU7QUFBQyxTQUFJLElBQUlDLElBQUUsQ0FBVixFQUFZQSxJQUFFRCxFQUFFRyxNQUFoQixFQUF1QkYsR0FBdkIsRUFBMkI7QUFBQyxVQUFJQyxJQUFFRixFQUFFQyxDQUFGLENBQU4sQ0FBV0MsRUFBRUUsVUFBRixHQUFhRixFQUFFRSxVQUFGLElBQWMsQ0FBQyxDQUE1QixFQUE4QkYsRUFBRUcsWUFBRixHQUFlLENBQUMsQ0FBOUMsRUFBZ0QsV0FBVUgsQ0FBVixLQUFjQSxFQUFFSSxRQUFGLEdBQVcsQ0FBQyxDQUExQixDQUFoRCxFQUE2RUMsT0FBT0MsY0FBUCxD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QTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwrQkFBK0I7QUFDL0I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsWUFBWTs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLE1BQU07QUFDTjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGLG9CQUFvQjs7QUFFcEI7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsWUFBWTtBQUN0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsU0FBUyxTQUFTO0FBQ2xCO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsU0FBUyxZQUFZO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsVUFBVSxZQUFZO0FBQ3RCOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQSxhQUFhO0FBQ2I7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTLFNBQVM7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSwwQkFBMEI7QUFDMUI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQSxnQkFBZ0IsSUFBSTs7QUFFcEI7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0Esd0NBQXdDLElBQUk7QUFDNUM7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNELFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7O0FBRUE7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYSx5QkFBeUI7QUFDdEM7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsU0FBUztBQUNwQjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEIsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFFBQVE7QUFDbkIsV0FBVyxRQUFRO0FBQ25CLGFBQWEsT0FBTztBQUNwQjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsV0FBVyxPQUFPO0FBQ2xCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLE9BQU87QUFDbEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFdBQVcsUUFBUSw2QkFBNkI7QUFDaEQ7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGdCQUFnQjtBQUMzQixhQUFhLHVCQUF1QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxRQUFRO0FBQ3JCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGVBQWU7QUFDMUIsYUFBYSxPQUFPO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLFVBQVU7QUFDckI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxXQUFXLGNBQWM7QUFDekI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLGdDQUFnQyxNQUFNO0FBQ3RDO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBOztBQUVBLGVBQWU7O0FBRWYsU0FBUzs7QUFFVDtBQUNBLFFBQVEsaUNBQWlDO0FBQ3pDLFFBQVEsb0JBQW9CO0FBQzVCLFFBQVEsc0NBQXNDO0FBQzlDLFFBQVE7QUFDUixFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0IsYUFBYSxFQUFFO0FBQy9CO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTCxHQUFHOztBQUVIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSw0REFBNEQ7O0FBRTVEO0FBQ0E7QUFDQTtBQUNBLHlDQUF5Qzs7QUFFekM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsNkRBQTZEOztBQUU3RDtBQUNBO0FBQ0E7QUFDQSwwQ0FBMEM7O0FBRTFDO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsZ0VBQWdFOztBQUVoRTtBQUNBO0FBQ0E7QUFDQSw2Q0FBNkM7O0FBRTdDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFD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QjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxTQUFTO0FBQ2pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILFFBQVEsU0FBUztBQUNqQjtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVyxTQUFTO0FBQ3BCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSx1Q0FBdUMsaURBQWlEO0FBQ3hGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsaURBQWlEO0FBQ2pELFVBQVUsd0NBQXdDO0FBQ2xEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFdBQVcsZ0JBQWdCO0FBQzNCO0FBQ0EsV0FBVyxRQUFRO0FBQ25CLFdBQVcsTUFBTTtBQUNqQixXQUFXLE1BQU07QUFDakI7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDO0FBQ0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7O0FBRUEsQ0FBQzs7OztBQUlEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTtBQUNBOztBQUVBLFFBQVEsR0FBRztBQUNYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBOzs7O0FBSUE7O0FBRUE7O0FBRUE7QUFDQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLGdCQUFnQixTQUFTO0FBQ3pCO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBOztBQUVBLGNBQWMsU0FBUztBQUN2QjtBQUNBOztBQUVBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEOzs7QUFHQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTs7QUFFQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFVBQVUsT0FBTztBQUNqQjtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsVUFBVSxPQUFPO0FBQ2pCLDBCQUEwQix3QkFBd0I7O0FBRWxEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBLDBDQUEwQztBQUMxQyxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7QUFDRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQztBQUNEOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsY0FBYztBQUN4QjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0EsT0FBTztBQUNQLE1BQU07O0FBRU47QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBLHdDQUF3QyxzQ0FBc0M7QUFDOUUsb0NBQW9DLHVDQUF1QztBQUMzRSxvQ0FBb0Msc0NBQXNDO0FBQzFFO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUztBQUNUO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1IsT0FBTztBQUNQO0FBQ0EsTUFBTTtBQUNOLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxXQUFXOztBQUVYO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVU7O0FBRVY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBUzs7QUFFVDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXOztBQUVYO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFROztBQUVSO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNOztBQUVOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQ0FBb0M7QUFDcEMscUNBQXFDO0FBQ3JDLG9DQUFvQztBQUNwQztBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7OztBQUtBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFVBQVUsU0FBUztBQUNuQjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsK0JBQStCO0FBQy9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7OztBQUtBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsdUJBQXVCLGFBQWE7QUFDcEMsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxvQkFBb0IsU0FBUztBQUM3Qjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0osRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7QUFFQTs7O0FBR0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOzs7QUFHQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLFFBQVEsZ0JBQWdCO0FBQ3hCO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLGlCQUFpQixnQkFBZ0I7QUFDakM7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7QUFDRDs7QUFFQTs7QUFFQTs7OztBQUlBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsRUFBRTtBQUNGOztBQUVBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxRQUFRLE9BQU87QUFDZjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0Esc0JBQXNCOztBQUV0QjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsUUFBUSxPQUFPO0FBQ2Y7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7QUFDRDs7OztBQUlBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUUsZ0JBQWdCO0FBQ2xCOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXOztBQUVYOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUEsMkNBQTJDO0FBQzNDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLG9EQUFvRDtBQUNwRDs7QUFFQTtBQUNBOztBQUVBLGNBQWMsc0JBQXNCO0FBQ3BDO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSx5QkFBeUI7QUFDekI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSwrREFBK0Q7QUFDL0Q7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxVQUFVLGNBQWM7O0FBRXhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxpQkFBaUIsbUJBQW1CO0FBQ3BDOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSwwQkFBMEIsdUNBQXVDO0FBQ2pFO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLHVCQUF1Qix1REFBdUQ7QUFDOUU7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBLEdBQUc7QUFDSDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0Esc0NBQXNDO0FBQ3RDO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLHFDQUFxQyxjQUFjO0FBQ25EO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EscUNBQXFDO0FBQ3JDO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7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Q0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRixDQUFDOzs7QUFHRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxrQkFBa0I7QUFDbEI7QUFDQTtBQUNBO0FBQ0E7OztBQUdBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxZQUFZLCtEQUErRDtBQUMzRTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFFBQVEsT0FBTzs7QUFFZjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQSxhQUFhOztBQUViO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7O0FBRUEsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLE9BQU87QUFDUDtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esa0JBQWtCLGdCQUFnQjtBQUNsQztBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLGlCQUFpQjs7QUFFakI7QUFDQTs7QUFFQSxVQUFVLE9BQU87QUFDakI7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsWUFBWTtBQUNaOztBQUVBO0FBQ0E7QUFDQTs7QUFFQSxXQUFXLFNBQVM7QUFDcEI7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsV0FBVzs7QUFFWDtBQUNBO0FBQ0E7QUFDQSxRQUFRLE9BQU87QUFDZjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFFBQVEsZ0JBQWdCO0FBQ3hCOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXO0FBQ1g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsTUFBTTtBQUNOO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSixpREFBaUQsMEJBQTBCO0FBQzNFOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FB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QixjQUFjO0FBQ2QsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQSxRQUFRLG1CQUFtQjtBQUMzQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7OztBQUdBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxNQUFNO0FBQ047QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSCxFQUFFOztBQUVGO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBLGlDQUFpQztBQUNqQztBQUNBOztBQUVBLElBQUk7QUFDSjs7QUFFQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsS0FBSztBQUNMO0FBQ0E7O0FBRUE7QUFDQSxXQUFXLFNBQVM7QUFDcEI7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7Ozs7O0FBS0Q7OztBQUdBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxzQ0FBc0M7QUFDdEM7QUFDQTtBQUNBOztBQUVBOztBQUVBLHlCQUF5QjtBQUN6QjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLDhDQUE4QztBQUM5QztBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLDJDQUEyQztBQUMzQzs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFVBQVUsS0FBSztBQUNmO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsaURBQWlEO0FBQ2pEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUEsQ0FBQzs7QUFFRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0gsRUFBRTtBQUNGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGVBQWUscUNBQXFDOztBQUVwRDtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBOztBQUVBOzs7O0FBSUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7O0FBR0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUgsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsYUFBYTtBQUNiLEtBQUs7QUFDTDs7QUFFQSxXQUFXO0FBQ1gsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxnQkFBZ0I7O0FBRWhCLGdEQUFnRDtBQUNoRDs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsS0FBSztBQUNMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLG1CQUFtQjtBQUNuQjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBLEdBQUc7QUFDSDtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSx3REFBd0Q7QUFDeEQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsaUJBQWlCOztBQUVqQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQSxJQUFJOztBQUVKO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxTQUFTO0FBQ1Q7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLE1BQU07QUFDTjtBQUNBO0FBQ0EsT0FBTztBQUNQO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLFNBQVM7QUFDVDs7QUFFQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsaUJBQWlCO0FBQ2pCLFNBQVM7O0FBRVQ7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxrREFBa0Q7O0FBRWxEO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLGFBQWE7QUFDYjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRzs7QUFFSDtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxHQUFHOztBQUVIO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0EsMkJBQTJCOztBQUUzQjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0Esa0NBQWtDOztBQUVsQztBQUNBLHNCQUFzQjtBQUN0QiwyQkFBMkI7O0FBRTNCO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSzs7QUFFTDtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsT0FBTzs7QUFFUDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEtBQUs7O0FBRUw7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0Esc0RBQXNEO0FBQ3REO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsS0FBSztBQUNMOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7O0FBRUo7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEtBQUs7QUFDTDs7QUFFQTtBQUNBLEtBQUs7QUFDTDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTs7QUFFSjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQSxDQUFDOztBQUVEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOzs7QUFHQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxJQUFJO0FBQ0o7O0FBRUE7QUFDQSxFQUFFOztBQUVGO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsSUFBSTtBQUNKOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsR0FBRztBQUNILEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBLFFBQVE7O0FBRVI7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFNBQVM7QUFDVDs7QUFFQSxtREFBbUQ7QUFDbkQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxRQUFRO0FBQ1I7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxXQUFXLHVCQUF1QjtBQUNsQyxXQUFXLHlCQUF5QjtBQUNwQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsUUFBUTtBQUNSO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQSxLQUFLOztBQUVMO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxJQUFJOztBQUVKO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUNGO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxJQUFJO0FBQ0o7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0EsSUFBSTtBQUNKO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7Ozs7QUFLRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7QUFHRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOzs7QUFHQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBLEVBQUU7QUFDRjtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEdBQUc7O0FBRUg7QUFDQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQSxHQUFHO0FBQ0g7QUFDQTtBQUNBLElBQUk7QUFDSixHQUFHO0FBQ0g7O0FBRUE7QUFDQTs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjs7Ozs7QUFLQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsR0FBRztBQUNIO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTtBQUNBLHFEQUFxRDtBQUNyRDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxLQUFLO0FBQ0w7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLFdBQVc7QUFDWDs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSxtQkFBbUI7O0FBRW5CO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQSxHQUFHO0FBQ0g7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsRUFBRTs7QUFFRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQSxHQUFHO0FBQ0g7QUFDQSxDQUFDOztBQUVEO0FBQ0EsY0FBYyxzREFBc0Q7QUFDcEU7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLElBQUk7QUFDSjtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBLElBQUk7QUFDSjtBQUNBO0FBQ0EsR0FBRztBQUNIO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7O0FBR0Q7QUFDQSxjQUFjLG1DQUFtQztBQUNqRCxlQUFlLDZEQUE2RDtBQUM1RTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7O0FBRUE7QUFDQTs7QUFFQTtBQUNBO0FBQ0EsSUFBSTtBQUNKO0FBQ0EsRUFBRTtBQUNGLENBQUM7OztBQUdEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQSxDQUFDOzs7OztBQUtEOztBQUVBO0FBQ0E7QUFDQSxFQUFFO0FBQ0Y7QUFDQTtBQUNBLEVBQUU7O0FBRUY7QUFDQTtBQUNBLEVBQUU7QUFDRjs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsQ0FBQzs7QUFFRDtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBLEVBQUU7QUFDRjtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQTs7QUFFQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7Ozs7O0FBS0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0E7O0FBRUE7QUFDQTtBQUNBO0FBQ0EsRUFBRTtBQUFBO0FBQ0Y7Ozs7O0FBS0E7O0FBRUE7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTs7QUFFQTtBQUNBOztBQUVBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7Ozs7QUFLQTtBQUNBLENBQUM7Ozs7Ozs7Ozs7Ozs7QUMzblVEOztBQUVBO0FBQ0E7QUFDQTtBQUNBLENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0EsQ0FBQztBQUNEO0FBQ0E7QUFDQTtBQUNBOztBQUVBO0FBQ0E7QUFDQSw0Q0FBNEM7O0FBRTVDIiwiZmlsZSI6ImFwcC5qcyIsInNvdXJjZXNDb250ZW50IjpbIiBcdC8vIFRoZSBtb2R1bGUgY2FjaGVcbiBcdHZhciBpbnN0YWxsZWRNb2R1bGVzID0ge307XG5cbiBcdC8vIFRoZSByZXF1aXJlIGZ1bmN0aW9uXG4gXHRmdW5jdGlvbiBfX3dlYnBhY2tfcmVxdWlyZV9fKG1vZHVsZUlkKSB7XG5cbiBcdFx0Ly8gQ2hlY2sgaWYgbW9kdWxlIGlzIGluIGNhY2hlXG4gXHRcdGlmKGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdKSB7XG4gXHRcdFx0cmV0dXJuIGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdLmV4cG9ydHM7XG4gXHRcdH1cbiBcdFx0Ly8gQ3JlYXRlIGEgbmV3IG1vZHVsZSAoYW5kIHB1dCBpdCBpbnRvIHRoZSBjYWNoZSlcbiBcdFx0dmFyIG1vZHVsZSA9IGluc3RhbGxlZE1vZHVsZXNbbW9kdWxlSWRdID0ge1xuIFx0XHRcdGk6IG1vZHVsZUlkLFxuIFx0XHRcdGw6IGZhbHNlLFxuIFx0XHRcdGV4cG9ydHM6IHt9XG4gXHRcdH07XG5cbiBcdFx0Ly8gRXhlY3V0ZSB0aGUgbW9kdWxlIGZ1bmN0aW9uXG4gXHRcdG1vZHVsZXNbbW9kdWxlSWRdLmNhbGwobW9kdWxlLmV4cG9ydHMsIG1vZHVsZSwgbW9kdWxlLmV4cG9ydHMsIF9fd2VicGFja19yZXF1aXJlX18pO1xuXG4gXHRcdC8vIEZsYWcgdGhlIG1vZHVsZSBhcyBsb2FkZWRcbiBcdFx0bW9kdWxlLmwgPSB0cnVlO1xuXG4gXHRcdC8vIFJldHVybiB0aGUgZXhwb3J0cyBvZiB0aGUgbW9kdWxlXG4gXHRcdHJldHVybiBtb2R1bGUuZXhwb3J0cztcbiBcdH1cblxuXG4gXHQvLyBleHBvc2UgdGhlIG1vZHVsZXMgb2JqZWN0IChfX3dlYnBhY2tfbW9kdWxlc19fKVxuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5tID0gbW9kdWxlcztcblxuIFx0Ly8gZXhwb3NlIHRoZSBtb2R1bGUgY2FjaGVcbiBcdF9fd2VicGFja19yZXF1aXJlX18uYyA9IGluc3RhbGxlZE1vZHVsZXM7XG5cbiBcdC8vIGRlZmluZSBnZXR0ZXIgZnVuY3Rpb24gZm9yIGhhcm1vbnkgZXhwb3J0c1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kID0gZnVuY3Rpb24oZXhwb3J0cywgbmFtZSwgZ2V0dGVyKSB7XG4gXHRcdGlmKCFfX3dlYnBhY2tfcmVxdWlyZV9fLm8oZXhwb3J0cywgbmFtZSkpIHtcbiBcdFx0XHRPYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgbmFtZSwge1xuIFx0XHRcdFx0Y29uZmlndXJhYmxlOiBmYWxzZSxcbiBcdFx0XHRcdGVudW1lcmFibGU6IHRydWUsXG4gXHRcdFx0XHRnZXQ6IGdldHRlclxuIFx0XHRcdH0pO1xuIFx0XHR9XG4gXHR9O1xuXG4gXHQvLyBnZXREZWZhdWx0RXhwb3J0IGZ1bmN0aW9uIGZvciBjb21wYXRpYmlsaXR5IHdpdGggbm9uLWhhcm1vbnkgbW9kdWxlc1xuIFx0X193ZWJwYWNrX3JlcXVpcmVfXy5uID0gZnVuY3Rpb24obW9kdWxlKSB7XG4gXHRcdHZhciBnZXR0ZXIgPSBtb2R1bGUgJiYgbW9kdWxlLl9fZXNNb2R1bGUgP1xuIFx0XHRcdGZ1bmN0aW9uIGdldERlZmF1bHQoKSB7IHJldHVybiBtb2R1bGVbJ2RlZmF1bHQnXTsgfSA6XG4gXHRcdFx0ZnVuY3Rpb24gZ2V0TW9kdWxlRXhwb3J0cygpIHsgcmV0dXJuIG1vZHVsZTsgfTtcbiBcdFx0X193ZWJwYWNrX3JlcXVpcmVfXy5kKGdldHRlciwgJ2EnLCBnZXR0ZXIpO1xuIFx0XHRyZXR1cm4gZ2V0dGVyO1xuIFx0fTtcblxuIFx0Ly8gT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLm8gPSBmdW5jdGlvbihvYmplY3QsIHByb3BlcnR5KSB7IHJldHVybiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqZWN0LCBwcm9wZXJ0eSk7IH07XG5cbiBcdC8vIF9fd2VicGFja19wdWJsaWNfcGF0aF9fXG4gXHRfX3dlYnBhY2tfcmVxdWlyZV9fLnAgPSBcIi9idWlsZC9cIjtcblxuIFx0Ly8gTG9hZCBlbnRyeSBtb2R1bGUgYW5kIHJldHVybiBleHBvcnRzXG4gXHRyZXR1cm4gX193ZWJwYWNrX3JlcXVpcmVfXyhfX3dlYnBhY2tfcmVxdWlyZV9fLnMgPSAwKTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyB3ZWJwYWNrL2Jvb3RzdHJhcCAwOTI0NTJmMzg0ZDA5NjYzYTQ1YiIsIi8qIVxuICAqIEJvb3RzdHJhcCB2NC4wLjAtYmV0YS4yIChodHRwczovL2dldGJvb3RzdHJhcC5jb20pXG4gICogQ29weXJpZ2h0IDIwMTEtMjAxNyBUaGUgQm9vdHN0cmFwIEF1dGhvcnMgKGh0dHBzOi8vZ2l0aHViLmNvbS90d2JzL2Jvb3RzdHJhcC9ncmFwaHMvY29udHJpYnV0b3JzKVxuICAqIExpY2Vuc2VkIHVuZGVyIE1JVCAoaHR0cHM6Ly9naXRodWIuY29tL3R3YnMvYm9vdHN0cmFwL2Jsb2IvbWFzdGVyL0xJQ0VOU0UpXG4gICovXG52YXIgYm9vdHN0cmFwPWZ1bmN0aW9uKHQsZSxuKXtcInVzZSBzdHJpY3RcIjtmdW5jdGlvbiBpKHQsZSl7Zm9yKHZhciBuPTA7bjxlLmxlbmd0aDtuKyspe3ZhciBpPWVbbl07aS5lbnVtZXJhYmxlPWkuZW51bWVyYWJsZXx8ITEsaS5jb25maWd1cmFibGU9ITAsXCJ2YWx1ZVwiaW4gaSYmKGkud3JpdGFibGU9ITApLE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0LGkua2V5LGkpfX1lPWUmJmUuaGFzT3duUHJvcGVydHkoXCJkZWZhdWx0XCIpP2UuZGVmYXVsdDplLG49biYmbi5oYXNPd25Qcm9wZXJ0eShcImRlZmF1bHRcIik/bi5kZWZhdWx0Om47dmFyIHM9ZnVuY3Rpb24oKXtmdW5jdGlvbiB0KHQpe3JldHVybnt9LnRvU3RyaW5nLmNhbGwodCkubWF0Y2goL1xccyhbYS16QS1aXSspLylbMV0udG9Mb3dlckNhc2UoKX1mdW5jdGlvbiBuKCl7cmV0dXJue2JpbmRUeXBlOnIuZW5kLGRlbGVnYXRlVHlwZTpyLmVuZCxoYW5kbGU6ZnVuY3Rpb24odCl7aWYoZSh0LnRhcmdldCkuaXModGhpcykpcmV0dXJuIHQuaGFuZGxlT2JqLmhhbmRsZXIuYXBwbHkodGhpcyxhcmd1bWVudHMpfX19ZnVuY3Rpb24gaSgpe2lmKHdpbmRvdy5RVW5pdClyZXR1cm4hMTt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiYm9vdHN0cmFwXCIpO2Zvcih2YXIgZSBpbiBvKWlmKFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0LnN0eWxlW2VdKXJldHVybntlbmQ6b1tlXX07cmV0dXJuITF9ZnVuY3Rpb24gcyh0KXt2YXIgbj10aGlzLGk9ITE7cmV0dXJuIGUodGhpcykub25lKGEuVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oKXtpPSEwfSksc2V0VGltZW91dChmdW5jdGlvbigpe2l8fGEudHJpZ2dlclRyYW5zaXRpb25FbmQobil9LHQpLHRoaXN9dmFyIHI9ITEsbz17V2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLE9UcmFuc2l0aW9uOlwib1RyYW5zaXRpb25FbmQgb3RyYW5zaXRpb25lbmRcIix0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwifSxhPXtUUkFOU0lUSU9OX0VORDpcImJzVHJhbnNpdGlvbkVuZFwiLGdldFVJRDpmdW5jdGlvbih0KXtkb3t0Kz1+figxZTYqTWF0aC5yYW5kb20oKSl9d2hpbGUoZG9jdW1lbnQuZ2V0RWxlbWVudEJ5SWQodCkpO3JldHVybiB0fSxnZXRTZWxlY3RvckZyb21FbGVtZW50OmZ1bmN0aW9uKHQpe3ZhciBuPXQuZ2V0QXR0cmlidXRlKFwiZGF0YS10YXJnZXRcIik7biYmXCIjXCIhPT1ufHwobj10LmdldEF0dHJpYnV0ZShcImhyZWZcIil8fFwiXCIpO3RyeXtyZXR1cm4gZShkb2N1bWVudCkuZmluZChuKS5sZW5ndGg+MD9uOm51bGx9Y2F0Y2godCl7cmV0dXJuIG51bGx9fSxyZWZsb3c6ZnVuY3Rpb24odCl7cmV0dXJuIHQub2Zmc2V0SGVpZ2h0fSx0cmlnZ2VyVHJhbnNpdGlvbkVuZDpmdW5jdGlvbih0KXtlKHQpLnRyaWdnZXIoci5lbmQpfSxzdXBwb3J0c1RyYW5zaXRpb25FbmQ6ZnVuY3Rpb24oKXtyZXR1cm4gQm9vbGVhbihyKX0saXNFbGVtZW50OmZ1bmN0aW9uKHQpe3JldHVybih0WzBdfHx0KS5ub2RlVHlwZX0sdHlwZUNoZWNrQ29uZmlnOmZ1bmN0aW9uKGUsbixpKXtmb3IodmFyIHMgaW4gaSlpZihPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoaSxzKSl7dmFyIHI9aVtzXSxvPW5bc10sbD1vJiZhLmlzRWxlbWVudChvKT9cImVsZW1lbnRcIjp0KG8pO2lmKCFuZXcgUmVnRXhwKHIpLnRlc3QobCkpdGhyb3cgbmV3IEVycm9yKGUudG9VcHBlckNhc2UoKSsnOiBPcHRpb24gXCInK3MrJ1wiIHByb3ZpZGVkIHR5cGUgXCInK2wrJ1wiIGJ1dCBleHBlY3RlZCB0eXBlIFwiJytyKydcIi4nKX19fTtyZXR1cm4gcj1pKCksZS5mbi5lbXVsYXRlVHJhbnNpdGlvbkVuZD1zLGEuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJihlLmV2ZW50LnNwZWNpYWxbYS5UUkFOU0lUSU9OX0VORF09bigpKSxhfSgpLHI9ZnVuY3Rpb24odCxlLG4pe3JldHVybiBlJiZpKHQucHJvdG90eXBlLGUpLG4mJmkodCxuKSx0fSxvPWZ1bmN0aW9uKHQsZSl7dC5wcm90b3R5cGU9T2JqZWN0LmNyZWF0ZShlLnByb3RvdHlwZSksdC5wcm90b3R5cGUuY29uc3RydWN0b3I9dCx0Ll9fcHJvdG9fXz1lfSxhPWZ1bmN0aW9uKCl7dmFyIHQ9XCJhbGVydFwiLG49ZS5mblt0XSxpPXtDTE9TRTpcImNsb3NlLmJzLmFsZXJ0XCIsQ0xPU0VEOlwiY2xvc2VkLmJzLmFsZXJ0XCIsQ0xJQ0tfREFUQV9BUEk6XCJjbGljay5icy5hbGVydC5kYXRhLWFwaVwifSxvPXtBTEVSVDpcImFsZXJ0XCIsRkFERTpcImZhZGVcIixTSE9XOlwic2hvd1wifSxhPWZ1bmN0aW9uKCl7ZnVuY3Rpb24gdCh0KXt0aGlzLl9lbGVtZW50PXR9dmFyIG49dC5wcm90b3R5cGU7cmV0dXJuIG4uY2xvc2U9ZnVuY3Rpb24odCl7dD10fHx0aGlzLl9lbGVtZW50O3ZhciBlPXRoaXMuX2dldFJvb3RFbGVtZW50KHQpO3RoaXMuX3RyaWdnZXJDbG9zZUV2ZW50KGUpLmlzRGVmYXVsdFByZXZlbnRlZCgpfHx0aGlzLl9yZW1vdmVFbGVtZW50KGUpfSxuLmRpc3Bvc2U9ZnVuY3Rpb24oKXtlLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxcImJzLmFsZXJ0XCIpLHRoaXMuX2VsZW1lbnQ9bnVsbH0sbi5fZ2V0Um9vdEVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIG49cy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHQpLGk9ITE7cmV0dXJuIG4mJihpPWUobilbMF0pLGl8fChpPWUodCkuY2xvc2VzdChcIi5cIitvLkFMRVJUKVswXSksaX0sbi5fdHJpZ2dlckNsb3NlRXZlbnQ9ZnVuY3Rpb24odCl7dmFyIG49ZS5FdmVudChpLkNMT1NFKTtyZXR1cm4gZSh0KS50cmlnZ2VyKG4pLG59LG4uX3JlbW92ZUVsZW1lbnQ9ZnVuY3Rpb24odCl7dmFyIG49dGhpcztlKHQpLnJlbW92ZUNsYXNzKG8uU0hPVykscy5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSYmZSh0KS5oYXNDbGFzcyhvLkZBREUpP2UodCkub25lKHMuVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oZSl7cmV0dXJuIG4uX2Rlc3Ryb3lFbGVtZW50KHQsZSl9KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCgxNTApOnRoaXMuX2Rlc3Ryb3lFbGVtZW50KHQpfSxuLl9kZXN0cm95RWxlbWVudD1mdW5jdGlvbih0KXtlKHQpLmRldGFjaCgpLnRyaWdnZXIoaS5DTE9TRUQpLnJlbW92ZSgpfSx0Ll9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPWUodGhpcykscz1pLmRhdGEoXCJicy5hbGVydFwiKTtzfHwocz1uZXcgdCh0aGlzKSxpLmRhdGEoXCJicy5hbGVydFwiLHMpKSxcImNsb3NlXCI9PT1uJiZzW25dKHRoaXMpfSl9LHQuX2hhbmRsZURpc21pc3M9ZnVuY3Rpb24odCl7cmV0dXJuIGZ1bmN0aW9uKGUpe2UmJmUucHJldmVudERlZmF1bHQoKSx0LmNsb3NlKHRoaXMpfX0scih0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhLjJcIn19XSksdH0oKTtyZXR1cm4gZShkb2N1bWVudCkub24oaS5DTElDS19EQVRBX0FQSSx7RElTTUlTUzonW2RhdGEtZGlzbWlzcz1cImFsZXJ0XCJdJ30uRElTTUlTUyxhLl9oYW5kbGVEaXNtaXNzKG5ldyBhKSksZS5mblt0XT1hLl9qUXVlcnlJbnRlcmZhY2UsZS5mblt0XS5Db25zdHJ1Y3Rvcj1hLGUuZm5bdF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBlLmZuW3RdPW4sYS5falF1ZXJ5SW50ZXJmYWNlfSxhfSgpLGw9ZnVuY3Rpb24oKXt2YXIgdD1cImJ1dHRvblwiLG49ZS5mblt0XSxpPXtBQ1RJVkU6XCJhY3RpdmVcIixCVVRUT046XCJidG5cIixGT0NVUzpcImZvY3VzXCJ9LHM9e0RBVEFfVE9HR0xFX0NBUlJPVDonW2RhdGEtdG9nZ2xlXj1cImJ1dHRvblwiXScsREFUQV9UT0dHTEU6J1tkYXRhLXRvZ2dsZT1cImJ1dHRvbnNcIl0nLElOUFVUOlwiaW5wdXRcIixBQ1RJVkU6XCIuYWN0aXZlXCIsQlVUVE9OOlwiLmJ0blwifSxvPXtDTElDS19EQVRBX0FQSTpcImNsaWNrLmJzLmJ1dHRvbi5kYXRhLWFwaVwiLEZPQ1VTX0JMVVJfREFUQV9BUEk6XCJmb2N1cy5icy5idXR0b24uZGF0YS1hcGkgYmx1ci5icy5idXR0b24uZGF0YS1hcGlcIn0sYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5fZWxlbWVudD10fXZhciBuPXQucHJvdG90eXBlO3JldHVybiBuLnRvZ2dsZT1mdW5jdGlvbigpe3ZhciB0PSEwLG49ITAscj1lKHRoaXMuX2VsZW1lbnQpLmNsb3Nlc3Qocy5EQVRBX1RPR0dMRSlbMF07aWYocil7dmFyIG89ZSh0aGlzLl9lbGVtZW50KS5maW5kKHMuSU5QVVQpWzBdO2lmKG8pe2lmKFwicmFkaW9cIj09PW8udHlwZSlpZihvLmNoZWNrZWQmJmUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoaS5BQ1RJVkUpKXQ9ITE7ZWxzZXt2YXIgYT1lKHIpLmZpbmQocy5BQ1RJVkUpWzBdO2EmJmUoYSkucmVtb3ZlQ2xhc3MoaS5BQ1RJVkUpfWlmKHQpe2lmKG8uaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fHIuaGFzQXR0cmlidXRlKFwiZGlzYWJsZWRcIil8fG8uY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIil8fHIuY2xhc3NMaXN0LmNvbnRhaW5zKFwiZGlzYWJsZWRcIikpcmV0dXJuO28uY2hlY2tlZD0hZSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhpLkFDVElWRSksZShvKS50cmlnZ2VyKFwiY2hhbmdlXCIpfW8uZm9jdXMoKSxuPSExfX1uJiZ0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtcHJlc3NlZFwiLCFlKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGkuQUNUSVZFKSksdCYmZSh0aGlzLl9lbGVtZW50KS50b2dnbGVDbGFzcyhpLkFDVElWRSl9LG4uZGlzcG9zZT1mdW5jdGlvbigpe2UucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LFwiYnMuYnV0dG9uXCIpLHRoaXMuX2VsZW1lbnQ9bnVsbH0sdC5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT1lKHRoaXMpLmRhdGEoXCJicy5idXR0b25cIik7aXx8KGk9bmV3IHQodGhpcyksZSh0aGlzKS5kYXRhKFwiYnMuYnV0dG9uXCIsaSkpLFwidG9nZ2xlXCI9PT1uJiZpW25dKCl9KX0scih0LG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhLjJcIn19XSksdH0oKTtyZXR1cm4gZShkb2N1bWVudCkub24oby5DTElDS19EQVRBX0FQSSxzLkRBVEFfVE9HR0xFX0NBUlJPVCxmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCk7dmFyIG49dC50YXJnZXQ7ZShuKS5oYXNDbGFzcyhpLkJVVFRPTil8fChuPWUobikuY2xvc2VzdChzLkJVVFRPTikpLGEuX2pRdWVyeUludGVyZmFjZS5jYWxsKGUobiksXCJ0b2dnbGVcIil9KS5vbihvLkZPQ1VTX0JMVVJfREFUQV9BUEkscy5EQVRBX1RPR0dMRV9DQVJST1QsZnVuY3Rpb24odCl7dmFyIG49ZSh0LnRhcmdldCkuY2xvc2VzdChzLkJVVFRPTilbMF07ZShuKS50b2dnbGVDbGFzcyhpLkZPQ1VTLC9eZm9jdXMoaW4pPyQvLnRlc3QodC50eXBlKSl9KSxlLmZuW3RdPWEuX2pRdWVyeUludGVyZmFjZSxlLmZuW3RdLkNvbnN0cnVjdG9yPWEsZS5mblt0XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGUuZm5bdF09bixhLl9qUXVlcnlJbnRlcmZhY2V9LGF9KCksaD1mdW5jdGlvbigpe3ZhciB0PVwiY2Fyb3VzZWxcIixuPVwiYnMuY2Fyb3VzZWxcIixpPVwiLlwiK24sbz1lLmZuW3RdLGE9e2ludGVydmFsOjVlMyxrZXlib2FyZDohMCxzbGlkZTohMSxwYXVzZTpcImhvdmVyXCIsd3JhcDohMH0sbD17aW50ZXJ2YWw6XCIobnVtYmVyfGJvb2xlYW4pXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsc2xpZGU6XCIoYm9vbGVhbnxzdHJpbmcpXCIscGF1c2U6XCIoc3RyaW5nfGJvb2xlYW4pXCIsd3JhcDpcImJvb2xlYW5cIn0saD17TkVYVDpcIm5leHRcIixQUkVWOlwicHJldlwiLExFRlQ6XCJsZWZ0XCIsUklHSFQ6XCJyaWdodFwifSxjPXtTTElERTpcInNsaWRlXCIraSxTTElEOlwic2xpZFwiK2ksS0VZRE9XTjpcImtleWRvd25cIitpLE1PVVNFRU5URVI6XCJtb3VzZWVudGVyXCIraSxNT1VTRUxFQVZFOlwibW91c2VsZWF2ZVwiK2ksVE9VQ0hFTkQ6XCJ0b3VjaGVuZFwiK2ksTE9BRF9EQVRBX0FQSTpcImxvYWQuYnMuY2Fyb3VzZWwuZGF0YS1hcGlcIixDTElDS19EQVRBX0FQSTpcImNsaWNrLmJzLmNhcm91c2VsLmRhdGEtYXBpXCJ9LHU9e0NBUk9VU0VMOlwiY2Fyb3VzZWxcIixBQ1RJVkU6XCJhY3RpdmVcIixTTElERTpcInNsaWRlXCIsUklHSFQ6XCJjYXJvdXNlbC1pdGVtLXJpZ2h0XCIsTEVGVDpcImNhcm91c2VsLWl0ZW0tbGVmdFwiLE5FWFQ6XCJjYXJvdXNlbC1pdGVtLW5leHRcIixQUkVWOlwiY2Fyb3VzZWwtaXRlbS1wcmV2XCIsSVRFTTpcImNhcm91c2VsLWl0ZW1cIn0sZD17QUNUSVZFOlwiLmFjdGl2ZVwiLEFDVElWRV9JVEVNOlwiLmFjdGl2ZS5jYXJvdXNlbC1pdGVtXCIsSVRFTTpcIi5jYXJvdXNlbC1pdGVtXCIsTkVYVF9QUkVWOlwiLmNhcm91c2VsLWl0ZW0tbmV4dCwgLmNhcm91c2VsLWl0ZW0tcHJldlwiLElORElDQVRPUlM6XCIuY2Fyb3VzZWwtaW5kaWNhdG9yc1wiLERBVEFfU0xJREU6XCJbZGF0YS1zbGlkZV0sIFtkYXRhLXNsaWRlLXRvXVwiLERBVEFfUklERTonW2RhdGEtcmlkZT1cImNhcm91c2VsXCJdJ30sZj1mdW5jdGlvbigpe2Z1bmN0aW9uIG8odCxuKXt0aGlzLl9pdGVtcz1udWxsLHRoaXMuX2ludGVydmFsPW51bGwsdGhpcy5fYWN0aXZlRWxlbWVudD1udWxsLHRoaXMuX2lzUGF1c2VkPSExLHRoaXMuX2lzU2xpZGluZz0hMSx0aGlzLnRvdWNoVGltZW91dD1udWxsLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcobiksdGhpcy5fZWxlbWVudD1lKHQpWzBdLHRoaXMuX2luZGljYXRvcnNFbGVtZW50PWUodGhpcy5fZWxlbWVudCkuZmluZChkLklORElDQVRPUlMpWzBdLHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCl9dmFyIGY9by5wcm90b3R5cGU7cmV0dXJuIGYubmV4dD1mdW5jdGlvbigpe3RoaXMuX2lzU2xpZGluZ3x8dGhpcy5fc2xpZGUoaC5ORVhUKX0sZi5uZXh0V2hlblZpc2libGU9ZnVuY3Rpb24oKXshZG9jdW1lbnQuaGlkZGVuJiZlKHRoaXMuX2VsZW1lbnQpLmlzKFwiOnZpc2libGVcIikmJlwiaGlkZGVuXCIhPT1lKHRoaXMuX2VsZW1lbnQpLmNzcyhcInZpc2liaWxpdHlcIikmJnRoaXMubmV4dCgpfSxmLnByZXY9ZnVuY3Rpb24oKXt0aGlzLl9pc1NsaWRpbmd8fHRoaXMuX3NsaWRlKGguUFJFVil9LGYucGF1c2U9ZnVuY3Rpb24odCl7dHx8KHRoaXMuX2lzUGF1c2VkPSEwKSxlKHRoaXMuX2VsZW1lbnQpLmZpbmQoZC5ORVhUX1BSRVYpWzBdJiZzLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiYocy50cmlnZ2VyVHJhbnNpdGlvbkVuZCh0aGlzLl9lbGVtZW50KSx0aGlzLmN5Y2xlKCEwKSksY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksdGhpcy5faW50ZXJ2YWw9bnVsbH0sZi5jeWNsZT1mdW5jdGlvbih0KXt0fHwodGhpcy5faXNQYXVzZWQ9ITEpLHRoaXMuX2ludGVydmFsJiYoY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCksdGhpcy5faW50ZXJ2YWw9bnVsbCksdGhpcy5fY29uZmlnLmludGVydmFsJiYhdGhpcy5faXNQYXVzZWQmJih0aGlzLl9pbnRlcnZhbD1zZXRJbnRlcnZhbCgoZG9jdW1lbnQudmlzaWJpbGl0eVN0YXRlP3RoaXMubmV4dFdoZW5WaXNpYmxlOnRoaXMubmV4dCkuYmluZCh0aGlzKSx0aGlzLl9jb25maWcuaW50ZXJ2YWwpKX0sZi50bz1mdW5jdGlvbih0KXt2YXIgbj10aGlzO3RoaXMuX2FjdGl2ZUVsZW1lbnQ9ZSh0aGlzLl9lbGVtZW50KS5maW5kKGQuQUNUSVZFX0lURU0pWzBdO3ZhciBpPXRoaXMuX2dldEl0ZW1JbmRleCh0aGlzLl9hY3RpdmVFbGVtZW50KTtpZighKHQ+dGhpcy5faXRlbXMubGVuZ3RoLTF8fHQ8MCkpaWYodGhpcy5faXNTbGlkaW5nKWUodGhpcy5fZWxlbWVudCkub25lKGMuU0xJRCxmdW5jdGlvbigpe3JldHVybiBuLnRvKHQpfSk7ZWxzZXtpZihpPT09dClyZXR1cm4gdGhpcy5wYXVzZSgpLHZvaWQgdGhpcy5jeWNsZSgpO3ZhciBzPXQ+aT9oLk5FWFQ6aC5QUkVWO3RoaXMuX3NsaWRlKHMsdGhpcy5faXRlbXNbdF0pfX0sZi5kaXNwb3NlPWZ1bmN0aW9uKCl7ZSh0aGlzLl9lbGVtZW50KS5vZmYoaSksZS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsbiksdGhpcy5faXRlbXM9bnVsbCx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5faW50ZXJ2YWw9bnVsbCx0aGlzLl9pc1BhdXNlZD1udWxsLHRoaXMuX2lzU2xpZGluZz1udWxsLHRoaXMuX2FjdGl2ZUVsZW1lbnQ9bnVsbCx0aGlzLl9pbmRpY2F0b3JzRWxlbWVudD1udWxsfSxmLl9nZXRDb25maWc9ZnVuY3Rpb24obil7cmV0dXJuIG49ZS5leHRlbmQoe30sYSxuKSxzLnR5cGVDaGVja0NvbmZpZyh0LG4sbCksbn0sZi5fYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO3RoaXMuX2NvbmZpZy5rZXlib2FyZCYmZSh0aGlzLl9lbGVtZW50KS5vbihjLktFWURPV04sZnVuY3Rpb24oZSl7cmV0dXJuIHQuX2tleWRvd24oZSl9KSxcImhvdmVyXCI9PT10aGlzLl9jb25maWcucGF1c2UmJihlKHRoaXMuX2VsZW1lbnQpLm9uKGMuTU9VU0VFTlRFUixmdW5jdGlvbihlKXtyZXR1cm4gdC5wYXVzZShlKX0pLm9uKGMuTU9VU0VMRUFWRSxmdW5jdGlvbihlKXtyZXR1cm4gdC5jeWNsZShlKX0pLFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmUodGhpcy5fZWxlbWVudCkub24oYy5UT1VDSEVORCxmdW5jdGlvbigpe3QucGF1c2UoKSx0LnRvdWNoVGltZW91dCYmY2xlYXJUaW1lb3V0KHQudG91Y2hUaW1lb3V0KSx0LnRvdWNoVGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKGUpe3JldHVybiB0LmN5Y2xlKGUpfSw1MDArdC5fY29uZmlnLmludGVydmFsKX0pKX0sZi5fa2V5ZG93bj1mdW5jdGlvbih0KXtpZighL2lucHV0fHRleHRhcmVhL2kudGVzdCh0LnRhcmdldC50YWdOYW1lKSlzd2l0Y2godC53aGljaCl7Y2FzZSAzNzp0LnByZXZlbnREZWZhdWx0KCksdGhpcy5wcmV2KCk7YnJlYWs7Y2FzZSAzOTp0LnByZXZlbnREZWZhdWx0KCksdGhpcy5uZXh0KCk7YnJlYWs7ZGVmYXVsdDpyZXR1cm59fSxmLl9nZXRJdGVtSW5kZXg9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuX2l0ZW1zPWUubWFrZUFycmF5KGUodCkucGFyZW50KCkuZmluZChkLklURU0pKSx0aGlzLl9pdGVtcy5pbmRleE9mKHQpfSxmLl9nZXRJdGVtQnlEaXJlY3Rpb249ZnVuY3Rpb24odCxlKXt2YXIgbj10PT09aC5ORVhULGk9dD09PWguUFJFVixzPXRoaXMuX2dldEl0ZW1JbmRleChlKSxyPXRoaXMuX2l0ZW1zLmxlbmd0aC0xO2lmKChpJiYwPT09c3x8biYmcz09PXIpJiYhdGhpcy5fY29uZmlnLndyYXApcmV0dXJuIGU7dmFyIG89KHMrKHQ9PT1oLlBSRVY/LTE6MSkpJXRoaXMuX2l0ZW1zLmxlbmd0aDtyZXR1cm4tMT09PW8/dGhpcy5faXRlbXNbdGhpcy5faXRlbXMubGVuZ3RoLTFdOnRoaXMuX2l0ZW1zW29dfSxmLl90cmlnZ2VyU2xpZGVFdmVudD1mdW5jdGlvbih0LG4pe3ZhciBpPXRoaXMuX2dldEl0ZW1JbmRleCh0KSxzPXRoaXMuX2dldEl0ZW1JbmRleChlKHRoaXMuX2VsZW1lbnQpLmZpbmQoZC5BQ1RJVkVfSVRFTSlbMF0pLHI9ZS5FdmVudChjLlNMSURFLHtyZWxhdGVkVGFyZ2V0OnQsZGlyZWN0aW9uOm4sZnJvbTpzLHRvOml9KTtyZXR1cm4gZSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKHIpLHJ9LGYuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQ9ZnVuY3Rpb24odCl7aWYodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpe2UodGhpcy5faW5kaWNhdG9yc0VsZW1lbnQpLmZpbmQoZC5BQ1RJVkUpLnJlbW92ZUNsYXNzKHUuQUNUSVZFKTt2YXIgbj10aGlzLl9pbmRpY2F0b3JzRWxlbWVudC5jaGlsZHJlblt0aGlzLl9nZXRJdGVtSW5kZXgodCldO24mJmUobikuYWRkQ2xhc3ModS5BQ1RJVkUpfX0sZi5fc2xpZGU9ZnVuY3Rpb24odCxuKXt2YXIgaSxyLG8sYT10aGlzLGw9ZSh0aGlzLl9lbGVtZW50KS5maW5kKGQuQUNUSVZFX0lURU0pWzBdLGY9dGhpcy5fZ2V0SXRlbUluZGV4KGwpLF89bnx8bCYmdGhpcy5fZ2V0SXRlbUJ5RGlyZWN0aW9uKHQsbCksZz10aGlzLl9nZXRJdGVtSW5kZXgoXyksbT1Cb29sZWFuKHRoaXMuX2ludGVydmFsKTtpZih0PT09aC5ORVhUPyhpPXUuTEVGVCxyPXUuTkVYVCxvPWguTEVGVCk6KGk9dS5SSUdIVCxyPXUuUFJFVixvPWguUklHSFQpLF8mJmUoXykuaGFzQ2xhc3ModS5BQ1RJVkUpKXRoaXMuX2lzU2xpZGluZz0hMTtlbHNlIGlmKCF0aGlzLl90cmlnZ2VyU2xpZGVFdmVudChfLG8pLmlzRGVmYXVsdFByZXZlbnRlZCgpJiZsJiZfKXt0aGlzLl9pc1NsaWRpbmc9ITAsbSYmdGhpcy5wYXVzZSgpLHRoaXMuX3NldEFjdGl2ZUluZGljYXRvckVsZW1lbnQoXyk7dmFyIHA9ZS5FdmVudChjLlNMSUQse3JlbGF0ZWRUYXJnZXQ6XyxkaXJlY3Rpb246byxmcm9tOmYsdG86Z30pO3Muc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJmUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3ModS5TTElERSk/KGUoXykuYWRkQ2xhc3Mocikscy5yZWZsb3coXyksZShsKS5hZGRDbGFzcyhpKSxlKF8pLmFkZENsYXNzKGkpLGUobCkub25lKHMuVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24oKXtlKF8pLnJlbW92ZUNsYXNzKGkrXCIgXCIrcikuYWRkQ2xhc3ModS5BQ1RJVkUpLGUobCkucmVtb3ZlQ2xhc3ModS5BQ1RJVkUrXCIgXCIrcitcIiBcIitpKSxhLl9pc1NsaWRpbmc9ITEsc2V0VGltZW91dChmdW5jdGlvbigpe3JldHVybiBlKGEuX2VsZW1lbnQpLnRyaWdnZXIocCl9LDApfSkuZW11bGF0ZVRyYW5zaXRpb25FbmQoNjAwKSk6KGUobCkucmVtb3ZlQ2xhc3ModS5BQ1RJVkUpLGUoXykuYWRkQ2xhc3ModS5BQ1RJVkUpLHRoaXMuX2lzU2xpZGluZz0hMSxlKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIocCkpLG0mJnRoaXMuY3ljbGUoKX19LG8uX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIGk9ZSh0aGlzKS5kYXRhKG4pLHM9ZS5leHRlbmQoe30sYSxlKHRoaXMpLmRhdGEoKSk7XCJvYmplY3RcIj09dHlwZW9mIHQmJmUuZXh0ZW5kKHMsdCk7dmFyIHI9XCJzdHJpbmdcIj09dHlwZW9mIHQ/dDpzLnNsaWRlO2lmKGl8fChpPW5ldyBvKHRoaXMscyksZSh0aGlzKS5kYXRhKG4saSkpLFwibnVtYmVyXCI9PXR5cGVvZiB0KWkudG8odCk7ZWxzZSBpZihcInN0cmluZ1wiPT10eXBlb2Ygcil7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGlbcl0pdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3IrJ1wiJyk7aVtyXSgpfWVsc2Ugcy5pbnRlcnZhbCYmKGkucGF1c2UoKSxpLmN5Y2xlKCkpfSl9LG8uX2RhdGFBcGlDbGlja0hhbmRsZXI9ZnVuY3Rpb24odCl7dmFyIGk9cy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO2lmKGkpe3ZhciByPWUoaSlbMF07aWYociYmZShyKS5oYXNDbGFzcyh1LkNBUk9VU0VMKSl7dmFyIGE9ZS5leHRlbmQoe30sZShyKS5kYXRhKCksZSh0aGlzKS5kYXRhKCkpLGw9dGhpcy5nZXRBdHRyaWJ1dGUoXCJkYXRhLXNsaWRlLXRvXCIpO2wmJihhLmludGVydmFsPSExKSxvLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChlKHIpLGEpLGwmJmUocikuZGF0YShuKS50byhsKSx0LnByZXZlbnREZWZhdWx0KCl9fX0scihvLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhLjJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGF9fV0pLG99KCk7cmV0dXJuIGUoZG9jdW1lbnQpLm9uKGMuQ0xJQ0tfREFUQV9BUEksZC5EQVRBX1NMSURFLGYuX2RhdGFBcGlDbGlja0hhbmRsZXIpLGUod2luZG93KS5vbihjLkxPQURfREFUQV9BUEksZnVuY3Rpb24oKXtlKGQuREFUQV9SSURFKS5lYWNoKGZ1bmN0aW9uKCl7dmFyIHQ9ZSh0aGlzKTtmLl9qUXVlcnlJbnRlcmZhY2UuY2FsbCh0LHQuZGF0YSgpKX0pfSksZS5mblt0XT1mLl9qUXVlcnlJbnRlcmZhY2UsZS5mblt0XS5Db25zdHJ1Y3Rvcj1mLGUuZm5bdF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBlLmZuW3RdPW8sZi5falF1ZXJ5SW50ZXJmYWNlfSxmfSgpLGM9ZnVuY3Rpb24oKXt2YXIgdD1cImNvbGxhcHNlXCIsbj1cImJzLmNvbGxhcHNlXCIsaT1lLmZuW3RdLG89e3RvZ2dsZTohMCxwYXJlbnQ6XCJcIn0sYT17dG9nZ2xlOlwiYm9vbGVhblwiLHBhcmVudDpcIihzdHJpbmd8ZWxlbWVudClcIn0sbD17U0hPVzpcInNob3cuYnMuY29sbGFwc2VcIixTSE9XTjpcInNob3duLmJzLmNvbGxhcHNlXCIsSElERTpcImhpZGUuYnMuY29sbGFwc2VcIixISURERU46XCJoaWRkZW4uYnMuY29sbGFwc2VcIixDTElDS19EQVRBX0FQSTpcImNsaWNrLmJzLmNvbGxhcHNlLmRhdGEtYXBpXCJ9LGg9e1NIT1c6XCJzaG93XCIsQ09MTEFQU0U6XCJjb2xsYXBzZVwiLENPTExBUFNJTkc6XCJjb2xsYXBzaW5nXCIsQ09MTEFQU0VEOlwiY29sbGFwc2VkXCJ9LGM9e1dJRFRIOlwid2lkdGhcIixIRUlHSFQ6XCJoZWlnaHRcIn0sdT17QUNUSVZFUzpcIi5zaG93LCAuY29sbGFwc2luZ1wiLERBVEFfVE9HR0xFOidbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXSd9LGQ9ZnVuY3Rpb24oKXtmdW5jdGlvbiBpKHQsbil7dGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX2VsZW1lbnQ9dCx0aGlzLl9jb25maWc9dGhpcy5fZ2V0Q29uZmlnKG4pLHRoaXMuX3RyaWdnZXJBcnJheT1lLm1ha2VBcnJheShlKCdbZGF0YS10b2dnbGU9XCJjb2xsYXBzZVwiXVtocmVmPVwiIycrdC5pZCsnXCJdLFtkYXRhLXRvZ2dsZT1cImNvbGxhcHNlXCJdW2RhdGEtdGFyZ2V0PVwiIycrdC5pZCsnXCJdJykpO2Zvcih2YXIgaT1lKHUuREFUQV9UT0dHTEUpLHI9MDtyPGkubGVuZ3RoO3IrKyl7dmFyIG89aVtyXSxhPXMuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudChvKTtudWxsIT09YSYmZShhKS5maWx0ZXIodCkubGVuZ3RoPjAmJnRoaXMuX3RyaWdnZXJBcnJheS5wdXNoKG8pfXRoaXMuX3BhcmVudD10aGlzLl9jb25maWcucGFyZW50P3RoaXMuX2dldFBhcmVudCgpOm51bGwsdGhpcy5fY29uZmlnLnBhcmVudHx8dGhpcy5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKHRoaXMuX2VsZW1lbnQsdGhpcy5fdHJpZ2dlckFycmF5KSx0aGlzLl9jb25maWcudG9nZ2xlJiZ0aGlzLnRvZ2dsZSgpfXZhciBkPWkucHJvdG90eXBlO3JldHVybiBkLnRvZ2dsZT1mdW5jdGlvbigpe2UodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoaC5TSE9XKT90aGlzLmhpZGUoKTp0aGlzLnNob3coKX0sZC5zaG93PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nJiYhZSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhoLlNIT1cpKXt2YXIgcixvO2lmKHRoaXMuX3BhcmVudCYmKChyPWUubWFrZUFycmF5KGUodGhpcy5fcGFyZW50KS5jaGlsZHJlbigpLmNoaWxkcmVuKHUuQUNUSVZFUykpKS5sZW5ndGh8fChyPW51bGwpKSwhKHImJihvPWUocikuZGF0YShuKSkmJm8uX2lzVHJhbnNpdGlvbmluZykpe3ZhciBhPWUuRXZlbnQobC5TSE9XKTtpZihlKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoYSksIWEuaXNEZWZhdWx0UHJldmVudGVkKCkpe3ImJihpLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChlKHIpLFwiaGlkZVwiKSxvfHxlKHIpLmRhdGEobixudWxsKSk7dmFyIGM9dGhpcy5fZ2V0RGltZW5zaW9uKCk7ZSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhoLkNPTExBUFNFKS5hZGRDbGFzcyhoLkNPTExBUFNJTkcpLHRoaXMuX2VsZW1lbnQuc3R5bGVbY109MCx0aGlzLl90cmlnZ2VyQXJyYXkubGVuZ3RoJiZlKHRoaXMuX3RyaWdnZXJBcnJheSkucmVtb3ZlQ2xhc3MoaC5DT0xMQVBTRUQpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITApLHRoaXMuc2V0VHJhbnNpdGlvbmluZyghMCk7dmFyIGQ9ZnVuY3Rpb24oKXtlKHQuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKGguQ09MTEFQU0lORykuYWRkQ2xhc3MoaC5DT0xMQVBTRSkuYWRkQ2xhc3MoaC5TSE9XKSx0Ll9lbGVtZW50LnN0eWxlW2NdPVwiXCIsdC5zZXRUcmFuc2l0aW9uaW5nKCExKSxlKHQuX2VsZW1lbnQpLnRyaWdnZXIobC5TSE9XTil9O2lmKHMuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkpe3ZhciBmPVwic2Nyb2xsXCIrKGNbMF0udG9VcHBlckNhc2UoKStjLnNsaWNlKDEpKTtlKHRoaXMuX2VsZW1lbnQpLm9uZShzLlRSQU5TSVRJT05fRU5ELGQpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKDYwMCksdGhpcy5fZWxlbWVudC5zdHlsZVtjXT10aGlzLl9lbGVtZW50W2ZdK1wicHhcIn1lbHNlIGQoKX19fX0sZC5oaWRlPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZighdGhpcy5faXNUcmFuc2l0aW9uaW5nJiZlKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGguU0hPVykpe3ZhciBuPWUuRXZlbnQobC5ISURFKTtpZihlKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIobiksIW4uaXNEZWZhdWx0UHJldmVudGVkKCkpe3ZhciBpPXRoaXMuX2dldERpbWVuc2lvbigpO2lmKHRoaXMuX2VsZW1lbnQuc3R5bGVbaV09dGhpcy5fZWxlbWVudC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKVtpXStcInB4XCIscy5yZWZsb3codGhpcy5fZWxlbWVudCksZSh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhoLkNPTExBUFNJTkcpLnJlbW92ZUNsYXNzKGguQ09MTEFQU0UpLnJlbW92ZUNsYXNzKGguU0hPVyksdGhpcy5fdHJpZ2dlckFycmF5Lmxlbmd0aClmb3IodmFyIHI9MDtyPHRoaXMuX3RyaWdnZXJBcnJheS5sZW5ndGg7cisrKXt2YXIgbz10aGlzLl90cmlnZ2VyQXJyYXlbcl0sYT1zLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQobyk7bnVsbCE9PWEmJihlKGEpLmhhc0NsYXNzKGguU0hPVyl8fGUobykuYWRkQ2xhc3MoaC5DT0xMQVBTRUQpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsITEpKX10aGlzLnNldFRyYW5zaXRpb25pbmcoITApO3ZhciBjPWZ1bmN0aW9uKCl7dC5zZXRUcmFuc2l0aW9uaW5nKCExKSxlKHQuX2VsZW1lbnQpLnJlbW92ZUNsYXNzKGguQ09MTEFQU0lORykuYWRkQ2xhc3MoaC5DT0xMQVBTRSkudHJpZ2dlcihsLkhJRERFTil9O3RoaXMuX2VsZW1lbnQuc3R5bGVbaV09XCJcIixzLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpP2UodGhpcy5fZWxlbWVudCkub25lKHMuVFJBTlNJVElPTl9FTkQsYykuZW11bGF0ZVRyYW5zaXRpb25FbmQoNjAwKTpjKCl9fX0sZC5zZXRUcmFuc2l0aW9uaW5nPWZ1bmN0aW9uKHQpe3RoaXMuX2lzVHJhbnNpdGlvbmluZz10fSxkLmRpc3Bvc2U9ZnVuY3Rpb24oKXtlLnJlbW92ZURhdGEodGhpcy5fZWxlbWVudCxuKSx0aGlzLl9jb25maWc9bnVsbCx0aGlzLl9wYXJlbnQ9bnVsbCx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fdHJpZ2dlckFycmF5PW51bGwsdGhpcy5faXNUcmFuc2l0aW9uaW5nPW51bGx9LGQuX2dldENvbmZpZz1mdW5jdGlvbihuKXtyZXR1cm4gbj1lLmV4dGVuZCh7fSxvLG4pLG4udG9nZ2xlPUJvb2xlYW4obi50b2dnbGUpLHMudHlwZUNoZWNrQ29uZmlnKHQsbixhKSxufSxkLl9nZXREaW1lbnNpb249ZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhjLldJRFRIKT9jLldJRFRIOmMuSEVJR0hUfSxkLl9nZXRQYXJlbnQ9ZnVuY3Rpb24oKXt2YXIgdD10aGlzLG49bnVsbDtzLmlzRWxlbWVudCh0aGlzLl9jb25maWcucGFyZW50KT8obj10aGlzLl9jb25maWcucGFyZW50LFwidW5kZWZpbmVkXCIhPXR5cGVvZiB0aGlzLl9jb25maWcucGFyZW50LmpxdWVyeSYmKG49dGhpcy5fY29uZmlnLnBhcmVudFswXSkpOm49ZSh0aGlzLl9jb25maWcucGFyZW50KVswXTt2YXIgcj0nW2RhdGEtdG9nZ2xlPVwiY29sbGFwc2VcIl1bZGF0YS1wYXJlbnQ9XCInK3RoaXMuX2NvbmZpZy5wYXJlbnQrJ1wiXSc7cmV0dXJuIGUobikuZmluZChyKS5lYWNoKGZ1bmN0aW9uKGUsbil7dC5fYWRkQXJpYUFuZENvbGxhcHNlZENsYXNzKGkuX2dldFRhcmdldEZyb21FbGVtZW50KG4pLFtuXSl9KSxufSxkLl9hZGRBcmlhQW5kQ29sbGFwc2VkQ2xhc3M9ZnVuY3Rpb24odCxuKXtpZih0KXt2YXIgaT1lKHQpLmhhc0NsYXNzKGguU0hPVyk7bi5sZW5ndGgmJmUobikudG9nZ2xlQ2xhc3MoaC5DT0xMQVBTRUQsIWkpLmF0dHIoXCJhcmlhLWV4cGFuZGVkXCIsaSl9fSxpLl9nZXRUYXJnZXRGcm9tRWxlbWVudD1mdW5jdGlvbih0KXt2YXIgbj1zLmdldFNlbGVjdG9yRnJvbUVsZW1lbnQodCk7cmV0dXJuIG4/ZShuKVswXTpudWxsfSxpLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBzPWUodGhpcykscj1zLmRhdGEobiksYT1lLmV4dGVuZCh7fSxvLHMuZGF0YSgpLFwib2JqZWN0XCI9PXR5cGVvZiB0JiZ0KTtpZighciYmYS50b2dnbGUmJi9zaG93fGhpZGUvLnRlc3QodCkmJihhLnRvZ2dsZT0hMSkscnx8KHI9bmV3IGkodGhpcyxhKSxzLmRhdGEobixyKSksXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiByW3RdKXRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyt0KydcIicpO3JbdF0oKX19KX0scihpLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhLjJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIG99fV0pLGl9KCk7cmV0dXJuIGUoZG9jdW1lbnQpLm9uKGwuQ0xJQ0tfREFUQV9BUEksdS5EQVRBX1RPR0dMRSxmdW5jdGlvbih0KXtcIkFcIj09PXQuY3VycmVudFRhcmdldC50YWdOYW1lJiZ0LnByZXZlbnREZWZhdWx0KCk7dmFyIGk9ZSh0aGlzKSxyPXMuZ2V0U2VsZWN0b3JGcm9tRWxlbWVudCh0aGlzKTtlKHIpLmVhY2goZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMpLHM9dC5kYXRhKG4pP1widG9nZ2xlXCI6aS5kYXRhKCk7ZC5falF1ZXJ5SW50ZXJmYWNlLmNhbGwodCxzKX0pfSksZS5mblt0XT1kLl9qUXVlcnlJbnRlcmZhY2UsZS5mblt0XS5Db25zdHJ1Y3Rvcj1kLGUuZm5bdF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBlLmZuW3RdPWksZC5falF1ZXJ5SW50ZXJmYWNlfSxkfSgpLHU9ZnVuY3Rpb24oKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2Ygbil0aHJvdyBuZXcgRXJyb3IoXCJCb290c3RyYXAgZHJvcGRvd24gcmVxdWlyZSBQb3BwZXIuanMgKGh0dHBzOi8vcG9wcGVyLmpzLm9yZylcIik7dmFyIHQ9XCJkcm9wZG93blwiLGk9XCJicy5kcm9wZG93blwiLG89XCIuXCIraSxhPWUuZm5bdF0sbD1uZXcgUmVnRXhwKFwiMzh8NDB8MjdcIiksaD17SElERTpcImhpZGVcIitvLEhJRERFTjpcImhpZGRlblwiK28sU0hPVzpcInNob3dcIitvLFNIT1dOOlwic2hvd25cIitvLENMSUNLOlwiY2xpY2tcIitvLENMSUNLX0RBVEFfQVBJOlwiY2xpY2suYnMuZHJvcGRvd24uZGF0YS1hcGlcIixLRVlET1dOX0RBVEFfQVBJOlwia2V5ZG93bi5icy5kcm9wZG93bi5kYXRhLWFwaVwiLEtFWVVQX0RBVEFfQVBJOlwia2V5dXAuYnMuZHJvcGRvd24uZGF0YS1hcGlcIn0sYz17RElTQUJMRUQ6XCJkaXNhYmxlZFwiLFNIT1c6XCJzaG93XCIsRFJPUFVQOlwiZHJvcHVwXCIsTUVOVVJJR0hUOlwiZHJvcGRvd24tbWVudS1yaWdodFwiLE1FTlVMRUZUOlwiZHJvcGRvd24tbWVudS1sZWZ0XCJ9LHU9e0RBVEFfVE9HR0xFOidbZGF0YS10b2dnbGU9XCJkcm9wZG93blwiXScsRk9STV9DSElMRDpcIi5kcm9wZG93biBmb3JtXCIsTUVOVTpcIi5kcm9wZG93bi1tZW51XCIsTkFWQkFSX05BVjpcIi5uYXZiYXItbmF2XCIsVklTSUJMRV9JVEVNUzpcIi5kcm9wZG93bi1tZW51IC5kcm9wZG93bi1pdGVtOm5vdCguZGlzYWJsZWQpXCJ9LGQ9e1RPUDpcInRvcC1zdGFydFwiLFRPUEVORDpcInRvcC1lbmRcIixCT1RUT006XCJib3R0b20tc3RhcnRcIixCT1RUT01FTkQ6XCJib3R0b20tZW5kXCJ9LGY9e29mZnNldDowLGZsaXA6ITB9LF89e29mZnNldDpcIihudW1iZXJ8c3RyaW5nfGZ1bmN0aW9uKVwiLGZsaXA6XCJib29sZWFuXCJ9LGc9ZnVuY3Rpb24oKXtmdW5jdGlvbiBhKHQsZSl7dGhpcy5fZWxlbWVudD10LHRoaXMuX3BvcHBlcj1udWxsLHRoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy5fbWVudT10aGlzLl9nZXRNZW51RWxlbWVudCgpLHRoaXMuX2luTmF2YmFyPXRoaXMuX2RldGVjdE5hdmJhcigpLHRoaXMuX2FkZEV2ZW50TGlzdGVuZXJzKCl9dmFyIGc9YS5wcm90b3R5cGU7cmV0dXJuIGcudG9nZ2xlPWZ1bmN0aW9uKCl7aWYoIXRoaXMuX2VsZW1lbnQuZGlzYWJsZWQmJiFlKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGMuRElTQUJMRUQpKXt2YXIgdD1hLl9nZXRQYXJlbnRGcm9tRWxlbWVudCh0aGlzLl9lbGVtZW50KSxpPWUodGhpcy5fbWVudSkuaGFzQ2xhc3MoYy5TSE9XKTtpZihhLl9jbGVhck1lbnVzKCksIWkpe3ZhciBzPXtyZWxhdGVkVGFyZ2V0OnRoaXMuX2VsZW1lbnR9LHI9ZS5FdmVudChoLlNIT1cscyk7aWYoZSh0KS50cmlnZ2VyKHIpLCFyLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt2YXIgbz10aGlzLl9lbGVtZW50O2UodCkuaGFzQ2xhc3MoYy5EUk9QVVApJiYoZSh0aGlzLl9tZW51KS5oYXNDbGFzcyhjLk1FTlVMRUZUKXx8ZSh0aGlzLl9tZW51KS5oYXNDbGFzcyhjLk1FTlVSSUdIVCkpJiYobz10KSx0aGlzLl9wb3BwZXI9bmV3IG4obyx0aGlzLl9tZW51LHRoaXMuX2dldFBvcHBlckNvbmZpZygpKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiYhZSh0KS5jbG9zZXN0KHUuTkFWQkFSX05BVikubGVuZ3RoJiZlKFwiYm9keVwiKS5jaGlsZHJlbigpLm9uKFwibW91c2VvdmVyXCIsbnVsbCxlLm5vb3ApLHRoaXMuX2VsZW1lbnQuZm9jdXMoKSx0aGlzLl9lbGVtZW50LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCksZSh0aGlzLl9tZW51KS50b2dnbGVDbGFzcyhjLlNIT1cpLGUodCkudG9nZ2xlQ2xhc3MoYy5TSE9XKS50cmlnZ2VyKGUuRXZlbnQoaC5TSE9XTixzKSl9fX19LGcuZGlzcG9zZT1mdW5jdGlvbigpe2UucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LGkpLGUodGhpcy5fZWxlbWVudCkub2ZmKG8pLHRoaXMuX2VsZW1lbnQ9bnVsbCx0aGlzLl9tZW51PW51bGwsbnVsbCE9PXRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbH0sZy51cGRhdGU9ZnVuY3Rpb24oKXt0aGlzLl9pbk5hdmJhcj10aGlzLl9kZXRlY3ROYXZiYXIoKSxudWxsIT09dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKX0sZy5fYWRkRXZlbnRMaXN0ZW5lcnM9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2UodGhpcy5fZWxlbWVudCkub24oaC5DTElDSyxmdW5jdGlvbihlKXtlLnByZXZlbnREZWZhdWx0KCksZS5zdG9wUHJvcGFnYXRpb24oKSx0LnRvZ2dsZSgpfSl9LGcuX2dldENvbmZpZz1mdW5jdGlvbihuKXtyZXR1cm4gbj1lLmV4dGVuZCh7fSx0aGlzLmNvbnN0cnVjdG9yLkRlZmF1bHQsZSh0aGlzLl9lbGVtZW50KS5kYXRhKCksbikscy50eXBlQ2hlY2tDb25maWcodCxuLHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdFR5cGUpLG59LGcuX2dldE1lbnVFbGVtZW50PWZ1bmN0aW9uKCl7aWYoIXRoaXMuX21lbnUpe3ZhciB0PWEuX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO3RoaXMuX21lbnU9ZSh0KS5maW5kKHUuTUVOVSlbMF19cmV0dXJuIHRoaXMuX21lbnV9LGcuX2dldFBsYWNlbWVudD1mdW5jdGlvbigpe3ZhciB0PWUodGhpcy5fZWxlbWVudCkucGFyZW50KCksbj1kLkJPVFRPTTtyZXR1cm4gdC5oYXNDbGFzcyhjLkRST1BVUCk/KG49ZC5UT1AsZSh0aGlzLl9tZW51KS5oYXNDbGFzcyhjLk1FTlVSSUdIVCkmJihuPWQuVE9QRU5EKSk6ZSh0aGlzLl9tZW51KS5oYXNDbGFzcyhjLk1FTlVSSUdIVCkmJihuPWQuQk9UVE9NRU5EKSxufSxnLl9kZXRlY3ROYXZiYXI9ZnVuY3Rpb24oKXtyZXR1cm4gZSh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KFwiLm5hdmJhclwiKS5sZW5ndGg+MH0sZy5fZ2V0UG9wcGVyQ29uZmlnPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxuPXt9O1wiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuX2NvbmZpZy5vZmZzZXQ/bi5mbj1mdW5jdGlvbihuKXtyZXR1cm4gbi5vZmZzZXRzPWUuZXh0ZW5kKHt9LG4ub2Zmc2V0cyx0Ll9jb25maWcub2Zmc2V0KG4ub2Zmc2V0cyl8fHt9KSxufTpuLm9mZnNldD10aGlzLl9jb25maWcub2Zmc2V0O3ZhciBpPXtwbGFjZW1lbnQ6dGhpcy5fZ2V0UGxhY2VtZW50KCksbW9kaWZpZXJzOntvZmZzZXQ6bixmbGlwOntlbmFibGVkOnRoaXMuX2NvbmZpZy5mbGlwfX19O3JldHVybiB0aGlzLl9pbk5hdmJhciYmKGkubW9kaWZpZXJzLmFwcGx5U3R5bGU9e2VuYWJsZWQ6IXRoaXMuX2luTmF2YmFyfSksaX0sYS5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgbj1lKHRoaXMpLmRhdGEoaSkscz1cIm9iamVjdFwiPT10eXBlb2YgdD90Om51bGw7aWYobnx8KG49bmV3IGEodGhpcyxzKSxlKHRoaXMpLmRhdGEoaSxuKSksXCJzdHJpbmdcIj09dHlwZW9mIHQpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBuW3RdKXRocm93IG5ldyBFcnJvcignTm8gbWV0aG9kIG5hbWVkIFwiJyt0KydcIicpO25bdF0oKX19KX0sYS5fY2xlYXJNZW51cz1mdW5jdGlvbih0KXtpZighdHx8MyE9PXQud2hpY2gmJihcImtleXVwXCIhPT10LnR5cGV8fDk9PT10LndoaWNoKSlmb3IodmFyIG49ZS5tYWtlQXJyYXkoZSh1LkRBVEFfVE9HR0xFKSkscz0wO3M8bi5sZW5ndGg7cysrKXt2YXIgcj1hLl9nZXRQYXJlbnRGcm9tRWxlbWVudChuW3NdKSxvPWUobltzXSkuZGF0YShpKSxsPXtyZWxhdGVkVGFyZ2V0Om5bc119O2lmKG8pe3ZhciBkPW8uX21lbnU7aWYoZShyKS5oYXNDbGFzcyhjLlNIT1cpJiYhKHQmJihcImNsaWNrXCI9PT10LnR5cGUmJi9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSl8fFwia2V5dXBcIj09PXQudHlwZSYmOT09PXQud2hpY2gpJiZlLmNvbnRhaW5zKHIsdC50YXJnZXQpKSl7dmFyIGY9ZS5FdmVudChoLkhJREUsbCk7ZShyKS50cmlnZ2VyKGYpLGYuaXNEZWZhdWx0UHJldmVudGVkKCl8fChcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZlKFwiYm9keVwiKS5jaGlsZHJlbigpLm9mZihcIm1vdXNlb3ZlclwiLG51bGwsZS5ub29wKSxuW3NdLnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIixcImZhbHNlXCIpLGUoZCkucmVtb3ZlQ2xhc3MoYy5TSE9XKSxlKHIpLnJlbW92ZUNsYXNzKGMuU0hPVykudHJpZ2dlcihlLkV2ZW50KGguSElEREVOLGwpKSl9fX19LGEuX2dldFBhcmVudEZyb21FbGVtZW50PWZ1bmN0aW9uKHQpe3ZhciBuLGk9cy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHQpO3JldHVybiBpJiYobj1lKGkpWzBdKSxufHx0LnBhcmVudE5vZGV9LGEuX2RhdGFBcGlLZXlkb3duSGFuZGxlcj1mdW5jdGlvbih0KXtpZighKCFsLnRlc3QodC53aGljaCl8fC9idXR0b24vaS50ZXN0KHQudGFyZ2V0LnRhZ05hbWUpJiYzMj09PXQud2hpY2h8fC9pbnB1dHx0ZXh0YXJlYS9pLnRlc3QodC50YXJnZXQudGFnTmFtZSl8fCh0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSx0aGlzLmRpc2FibGVkfHxlKHRoaXMpLmhhc0NsYXNzKGMuRElTQUJMRUQpKSkpe3ZhciBuPWEuX2dldFBhcmVudEZyb21FbGVtZW50KHRoaXMpLGk9ZShuKS5oYXNDbGFzcyhjLlNIT1cpO2lmKChpfHwyNz09PXQud2hpY2gmJjMyPT09dC53aGljaCkmJighaXx8MjchPT10LndoaWNoJiYzMiE9PXQud2hpY2gpKXt2YXIgcz1lKG4pLmZpbmQodS5WSVNJQkxFX0lURU1TKS5nZXQoKTtpZihzLmxlbmd0aCl7dmFyIHI9cy5pbmRleE9mKHQudGFyZ2V0KTszOD09PXQud2hpY2gmJnI+MCYmci0tLDQwPT09dC53aGljaCYmcjxzLmxlbmd0aC0xJiZyKysscjwwJiYocj0wKSxzW3JdLmZvY3VzKCl9fWVsc2V7aWYoMjc9PT10LndoaWNoKXt2YXIgbz1lKG4pLmZpbmQodS5EQVRBX1RPR0dMRSlbMF07ZShvKS50cmlnZ2VyKFwiZm9jdXNcIil9ZSh0aGlzKS50cmlnZ2VyKFwiY2xpY2tcIil9fX0scihhLG51bGwsW3trZXk6XCJWRVJTSU9OXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuXCI0LjAuMC1iZXRhLjJcIn19LHtrZXk6XCJEZWZhdWx0XCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGZ9fSx7a2V5OlwiRGVmYXVsdFR5cGVcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gX319XSksYX0oKTtyZXR1cm4gZShkb2N1bWVudCkub24oaC5LRVlET1dOX0RBVEFfQVBJLHUuREFUQV9UT0dHTEUsZy5fZGF0YUFwaUtleWRvd25IYW5kbGVyKS5vbihoLktFWURPV05fREFUQV9BUEksdS5NRU5VLGcuX2RhdGFBcGlLZXlkb3duSGFuZGxlcikub24oaC5DTElDS19EQVRBX0FQSStcIiBcIitoLktFWVVQX0RBVEFfQVBJLGcuX2NsZWFyTWVudXMpLm9uKGguQ0xJQ0tfREFUQV9BUEksdS5EQVRBX1RPR0dMRSxmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksdC5zdG9wUHJvcGFnYXRpb24oKSxnLl9qUXVlcnlJbnRlcmZhY2UuY2FsbChlKHRoaXMpLFwidG9nZ2xlXCIpfSkub24oaC5DTElDS19EQVRBX0FQSSx1LkZPUk1fQ0hJTEQsZnVuY3Rpb24odCl7dC5zdG9wUHJvcGFnYXRpb24oKX0pLGUuZm5bdF09Zy5falF1ZXJ5SW50ZXJmYWNlLGUuZm5bdF0uQ29uc3RydWN0b3I9ZyxlLmZuW3RdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZS5mblt0XT1hLGcuX2pRdWVyeUludGVyZmFjZX0sZ30oKSxkPWZ1bmN0aW9uKCl7dmFyIHQ9XCJtb2RhbFwiLG49XCIuYnMubW9kYWxcIixpPWUuZm5bdF0sbz17YmFja2Ryb3A6ITAsa2V5Ym9hcmQ6ITAsZm9jdXM6ITAsc2hvdzohMH0sYT17YmFja2Ryb3A6XCIoYm9vbGVhbnxzdHJpbmcpXCIsa2V5Ym9hcmQ6XCJib29sZWFuXCIsZm9jdXM6XCJib29sZWFuXCIsc2hvdzpcImJvb2xlYW5cIn0sbD17SElERTpcImhpZGUuYnMubW9kYWxcIixISURERU46XCJoaWRkZW4uYnMubW9kYWxcIixTSE9XOlwic2hvdy5icy5tb2RhbFwiLFNIT1dOOlwic2hvd24uYnMubW9kYWxcIixGT0NVU0lOOlwiZm9jdXNpbi5icy5tb2RhbFwiLFJFU0laRTpcInJlc2l6ZS5icy5tb2RhbFwiLENMSUNLX0RJU01JU1M6XCJjbGljay5kaXNtaXNzLmJzLm1vZGFsXCIsS0VZRE9XTl9ESVNNSVNTOlwia2V5ZG93bi5kaXNtaXNzLmJzLm1vZGFsXCIsTU9VU0VVUF9ESVNNSVNTOlwibW91c2V1cC5kaXNtaXNzLmJzLm1vZGFsXCIsTU9VU0VET1dOX0RJU01JU1M6XCJtb3VzZWRvd24uZGlzbWlzcy5icy5tb2RhbFwiLENMSUNLX0RBVEFfQVBJOlwiY2xpY2suYnMubW9kYWwuZGF0YS1hcGlcIn0saD17U0NST0xMQkFSX01FQVNVUkVSOlwibW9kYWwtc2Nyb2xsYmFyLW1lYXN1cmVcIixCQUNLRFJPUDpcIm1vZGFsLWJhY2tkcm9wXCIsT1BFTjpcIm1vZGFsLW9wZW5cIixGQURFOlwiZmFkZVwiLFNIT1c6XCJzaG93XCJ9LGM9e0RJQUxPRzpcIi5tb2RhbC1kaWFsb2dcIixEQVRBX1RPR0dMRTonW2RhdGEtdG9nZ2xlPVwibW9kYWxcIl0nLERBVEFfRElTTUlTUzonW2RhdGEtZGlzbWlzcz1cIm1vZGFsXCJdJyxGSVhFRF9DT05URU5UOlwiLmZpeGVkLXRvcCwgLmZpeGVkLWJvdHRvbSwgLmlzLWZpeGVkLCAuc3RpY2t5LXRvcFwiLFNUSUNLWV9DT05URU5UOlwiLnN0aWNreS10b3BcIixOQVZCQVJfVE9HR0xFUjpcIi5uYXZiYXItdG9nZ2xlclwifSx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gaSh0LG4pe3RoaXMuX2NvbmZpZz10aGlzLl9nZXRDb25maWcobiksdGhpcy5fZWxlbWVudD10LHRoaXMuX2RpYWxvZz1lKHQpLmZpbmQoYy5ESUFMT0cpWzBdLHRoaXMuX2JhY2tkcm9wPW51bGwsdGhpcy5faXNTaG93bj0hMSx0aGlzLl9pc0JvZHlPdmVyZmxvd2luZz0hMSx0aGlzLl9pZ25vcmVCYWNrZHJvcENsaWNrPSExLHRoaXMuX29yaWdpbmFsQm9keVBhZGRpbmc9MCx0aGlzLl9zY3JvbGxiYXJXaWR0aD0wfXZhciB1PWkucHJvdG90eXBlO3JldHVybiB1LnRvZ2dsZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5faXNTaG93bj90aGlzLmhpZGUoKTp0aGlzLnNob3codCl9LHUuc2hvdz1mdW5jdGlvbih0KXt2YXIgbj10aGlzO2lmKCF0aGlzLl9pc1RyYW5zaXRpb25pbmcmJiF0aGlzLl9pc1Nob3duKXtzLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiZlKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGguRkFERSkmJih0aGlzLl9pc1RyYW5zaXRpb25pbmc9ITApO3ZhciBpPWUuRXZlbnQobC5TSE9XLHtyZWxhdGVkVGFyZ2V0OnR9KTtlKHRoaXMuX2VsZW1lbnQpLnRyaWdnZXIoaSksdGhpcy5faXNTaG93bnx8aS5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KHRoaXMuX2lzU2hvd249ITAsdGhpcy5fY2hlY2tTY3JvbGxiYXIoKSx0aGlzLl9zZXRTY3JvbGxiYXIoKSx0aGlzLl9hZGp1c3REaWFsb2coKSxlKGRvY3VtZW50LmJvZHkpLmFkZENsYXNzKGguT1BFTiksdGhpcy5fc2V0RXNjYXBlRXZlbnQoKSx0aGlzLl9zZXRSZXNpemVFdmVudCgpLGUodGhpcy5fZWxlbWVudCkub24obC5DTElDS19ESVNNSVNTLGMuREFUQV9ESVNNSVNTLGZ1bmN0aW9uKHQpe3JldHVybiBuLmhpZGUodCl9KSxlKHRoaXMuX2RpYWxvZykub24obC5NT1VTRURPV05fRElTTUlTUyxmdW5jdGlvbigpe2Uobi5fZWxlbWVudCkub25lKGwuTU9VU0VVUF9ESVNNSVNTLGZ1bmN0aW9uKHQpe2UodC50YXJnZXQpLmlzKG4uX2VsZW1lbnQpJiYobi5faWdub3JlQmFja2Ryb3BDbGljaz0hMCl9KX0pLHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbigpe3JldHVybiBuLl9zaG93RWxlbWVudCh0KX0pKX19LHUuaGlkZT1mdW5jdGlvbih0KXt2YXIgbj10aGlzO2lmKHQmJnQucHJldmVudERlZmF1bHQoKSwhdGhpcy5faXNUcmFuc2l0aW9uaW5nJiZ0aGlzLl9pc1Nob3duKXt2YXIgaT1lLkV2ZW50KGwuSElERSk7aWYoZSh0aGlzLl9lbGVtZW50KS50cmlnZ2VyKGkpLHRoaXMuX2lzU2hvd24mJiFpLmlzRGVmYXVsdFByZXZlbnRlZCgpKXt0aGlzLl9pc1Nob3duPSExO3ZhciByPXMuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJmUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoaC5GQURFKTtyJiYodGhpcy5faXNUcmFuc2l0aW9uaW5nPSEwKSx0aGlzLl9zZXRFc2NhcGVFdmVudCgpLHRoaXMuX3NldFJlc2l6ZUV2ZW50KCksZShkb2N1bWVudCkub2ZmKGwuRk9DVVNJTiksZSh0aGlzLl9lbGVtZW50KS5yZW1vdmVDbGFzcyhoLlNIT1cpLGUodGhpcy5fZWxlbWVudCkub2ZmKGwuQ0xJQ0tfRElTTUlTUyksZSh0aGlzLl9kaWFsb2cpLm9mZihsLk1PVVNFRE9XTl9ESVNNSVNTKSxyP2UodGhpcy5fZWxlbWVudCkub25lKHMuVFJBTlNJVElPTl9FTkQsZnVuY3Rpb24odCl7cmV0dXJuIG4uX2hpZGVNb2RhbCh0KX0pLmVtdWxhdGVUcmFuc2l0aW9uRW5kKDMwMCk6dGhpcy5faGlkZU1vZGFsKCl9fX0sdS5kaXNwb3NlPWZ1bmN0aW9uKCl7ZS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsXCJicy5tb2RhbFwiKSxlKHdpbmRvdyxkb2N1bWVudCx0aGlzLl9lbGVtZW50LHRoaXMuX2JhY2tkcm9wKS5vZmYobiksdGhpcy5fY29uZmlnPW51bGwsdGhpcy5fZWxlbWVudD1udWxsLHRoaXMuX2RpYWxvZz1udWxsLHRoaXMuX2JhY2tkcm9wPW51bGwsdGhpcy5faXNTaG93bj1udWxsLHRoaXMuX2lzQm9keU92ZXJmbG93aW5nPW51bGwsdGhpcy5faWdub3JlQmFja2Ryb3BDbGljaz1udWxsLHRoaXMuX3Njcm9sbGJhcldpZHRoPW51bGx9LHUuaGFuZGxlVXBkYXRlPWZ1bmN0aW9uKCl7dGhpcy5fYWRqdXN0RGlhbG9nKCl9LHUuX2dldENvbmZpZz1mdW5jdGlvbihuKXtyZXR1cm4gbj1lLmV4dGVuZCh7fSxvLG4pLHMudHlwZUNoZWNrQ29uZmlnKHQsbixhKSxufSx1Ll9zaG93RWxlbWVudD1mdW5jdGlvbih0KXt2YXIgbj10aGlzLGk9cy5zdXBwb3J0c1RyYW5zaXRpb25FbmQoKSYmZSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhoLkZBREUpO3RoaXMuX2VsZW1lbnQucGFyZW50Tm9kZSYmdGhpcy5fZWxlbWVudC5wYXJlbnROb2RlLm5vZGVUeXBlPT09Tm9kZS5FTEVNRU5UX05PREV8fGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodGhpcy5fZWxlbWVudCksdGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwiYmxvY2tcIix0aGlzLl9lbGVtZW50LnJlbW92ZUF0dHJpYnV0ZShcImFyaWEtaGlkZGVuXCIpLHRoaXMuX2VsZW1lbnQuc2Nyb2xsVG9wPTAsaSYmcy5yZWZsb3codGhpcy5fZWxlbWVudCksZSh0aGlzLl9lbGVtZW50KS5hZGRDbGFzcyhoLlNIT1cpLHRoaXMuX2NvbmZpZy5mb2N1cyYmdGhpcy5fZW5mb3JjZUZvY3VzKCk7dmFyIHI9ZS5FdmVudChsLlNIT1dOLHtyZWxhdGVkVGFyZ2V0OnR9KSxvPWZ1bmN0aW9uKCl7bi5fY29uZmlnLmZvY3VzJiZuLl9lbGVtZW50LmZvY3VzKCksbi5faXNUcmFuc2l0aW9uaW5nPSExLGUobi5fZWxlbWVudCkudHJpZ2dlcihyKX07aT9lKHRoaXMuX2RpYWxvZykub25lKHMuVFJBTlNJVElPTl9FTkQsbykuZW11bGF0ZVRyYW5zaXRpb25FbmQoMzAwKTpvKCl9LHUuX2VuZm9yY2VGb2N1cz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7ZShkb2N1bWVudCkub2ZmKGwuRk9DVVNJTikub24obC5GT0NVU0lOLGZ1bmN0aW9uKG4pe2RvY3VtZW50PT09bi50YXJnZXR8fHQuX2VsZW1lbnQ9PT1uLnRhcmdldHx8ZSh0Ll9lbGVtZW50KS5oYXMobi50YXJnZXQpLmxlbmd0aHx8dC5fZWxlbWVudC5mb2N1cygpfSl9LHUuX3NldEVzY2FwZUV2ZW50PWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLl9pc1Nob3duJiZ0aGlzLl9jb25maWcua2V5Ym9hcmQ/ZSh0aGlzLl9lbGVtZW50KS5vbihsLktFWURPV05fRElTTUlTUyxmdW5jdGlvbihlKXsyNz09PWUud2hpY2gmJihlLnByZXZlbnREZWZhdWx0KCksdC5oaWRlKCkpfSk6dGhpcy5faXNTaG93bnx8ZSh0aGlzLl9lbGVtZW50KS5vZmYobC5LRVlET1dOX0RJU01JU1MpfSx1Ll9zZXRSZXNpemVFdmVudD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5faXNTaG93bj9lKHdpbmRvdykub24obC5SRVNJWkUsZnVuY3Rpb24oZSl7cmV0dXJuIHQuaGFuZGxlVXBkYXRlKGUpfSk6ZSh3aW5kb3cpLm9mZihsLlJFU0laRSl9LHUuX2hpZGVNb2RhbD1mdW5jdGlvbigpe3ZhciB0PXRoaXM7dGhpcy5fZWxlbWVudC5zdHlsZS5kaXNwbGF5PVwibm9uZVwiLHRoaXMuX2VsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1oaWRkZW5cIiwhMCksdGhpcy5faXNUcmFuc2l0aW9uaW5nPSExLHRoaXMuX3Nob3dCYWNrZHJvcChmdW5jdGlvbigpe2UoZG9jdW1lbnQuYm9keSkucmVtb3ZlQ2xhc3MoaC5PUEVOKSx0Ll9yZXNldEFkanVzdG1lbnRzKCksdC5fcmVzZXRTY3JvbGxiYXIoKSxlKHQuX2VsZW1lbnQpLnRyaWdnZXIobC5ISURERU4pfSl9LHUuX3JlbW92ZUJhY2tkcm9wPWZ1bmN0aW9uKCl7dGhpcy5fYmFja2Ryb3AmJihlKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmUoKSx0aGlzLl9iYWNrZHJvcD1udWxsKX0sdS5fc2hvd0JhY2tkcm9wPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMsaT1lKHRoaXMuX2VsZW1lbnQpLmhhc0NsYXNzKGguRkFERSk/aC5GQURFOlwiXCI7aWYodGhpcy5faXNTaG93biYmdGhpcy5fY29uZmlnLmJhY2tkcm9wKXt2YXIgcj1zLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiZpO2lmKHRoaXMuX2JhY2tkcm9wPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJkaXZcIiksdGhpcy5fYmFja2Ryb3AuY2xhc3NOYW1lPWguQkFDS0RST1AsaSYmZSh0aGlzLl9iYWNrZHJvcCkuYWRkQ2xhc3MoaSksZSh0aGlzLl9iYWNrZHJvcCkuYXBwZW5kVG8oZG9jdW1lbnQuYm9keSksZSh0aGlzLl9lbGVtZW50KS5vbihsLkNMSUNLX0RJU01JU1MsZnVuY3Rpb24odCl7bi5faWdub3JlQmFja2Ryb3BDbGljaz9uLl9pZ25vcmVCYWNrZHJvcENsaWNrPSExOnQudGFyZ2V0PT09dC5jdXJyZW50VGFyZ2V0JiYoXCJzdGF0aWNcIj09PW4uX2NvbmZpZy5iYWNrZHJvcD9uLl9lbGVtZW50LmZvY3VzKCk6bi5oaWRlKCkpfSksciYmcy5yZWZsb3codGhpcy5fYmFja2Ryb3ApLGUodGhpcy5fYmFja2Ryb3ApLmFkZENsYXNzKGguU0hPVyksIXQpcmV0dXJuO2lmKCFyKXJldHVybiB2b2lkIHQoKTtlKHRoaXMuX2JhY2tkcm9wKS5vbmUocy5UUkFOU0lUSU9OX0VORCx0KS5lbXVsYXRlVHJhbnNpdGlvbkVuZCgxNTApfWVsc2UgaWYoIXRoaXMuX2lzU2hvd24mJnRoaXMuX2JhY2tkcm9wKXtlKHRoaXMuX2JhY2tkcm9wKS5yZW1vdmVDbGFzcyhoLlNIT1cpO3ZhciBvPWZ1bmN0aW9uKCl7bi5fcmVtb3ZlQmFja2Ryb3AoKSx0JiZ0KCl9O3Muc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJmUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoaC5GQURFKT9lKHRoaXMuX2JhY2tkcm9wKS5vbmUocy5UUkFOU0lUSU9OX0VORCxvKS5lbXVsYXRlVHJhbnNpdGlvbkVuZCgxNTApOm8oKX1lbHNlIHQmJnQoKX0sdS5fYWRqdXN0RGlhbG9nPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZWxlbWVudC5zY3JvbGxIZWlnaHQ+ZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodDshdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcmJnQmJih0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdMZWZ0PXRoaXMuX3Njcm9sbGJhcldpZHRoK1wicHhcIiksdGhpcy5faXNCb2R5T3ZlcmZsb3dpbmcmJiF0JiYodGhpcy5fZWxlbWVudC5zdHlsZS5wYWRkaW5nUmlnaHQ9dGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX0sdS5fcmVzZXRBZGp1c3RtZW50cz1mdW5jdGlvbigpe3RoaXMuX2VsZW1lbnQuc3R5bGUucGFkZGluZ0xlZnQ9XCJcIix0aGlzLl9lbGVtZW50LnN0eWxlLnBhZGRpbmdSaWdodD1cIlwifSx1Ll9jaGVja1Njcm9sbGJhcj1mdW5jdGlvbigpe3ZhciB0PWRvY3VtZW50LmJvZHkuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dGhpcy5faXNCb2R5T3ZlcmZsb3dpbmc9dC5sZWZ0K3QucmlnaHQ8d2luZG93LmlubmVyV2lkdGgsdGhpcy5fc2Nyb2xsYmFyV2lkdGg9dGhpcy5fZ2V0U2Nyb2xsYmFyV2lkdGgoKX0sdS5fc2V0U2Nyb2xsYmFyPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcztpZih0aGlzLl9pc0JvZHlPdmVyZmxvd2luZyl7ZShjLkZJWEVEX0NPTlRFTlQpLmVhY2goZnVuY3Rpb24obixpKXt2YXIgcz1lKGkpWzBdLnN0eWxlLnBhZGRpbmdSaWdodCxyPWUoaSkuY3NzKFwicGFkZGluZy1yaWdodFwiKTtlKGkpLmRhdGEoXCJwYWRkaW5nLXJpZ2h0XCIscykuY3NzKFwicGFkZGluZy1yaWdodFwiLHBhcnNlRmxvYXQocikrdC5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX0pLGUoYy5TVElDS1lfQ09OVEVOVCkuZWFjaChmdW5jdGlvbihuLGkpe3ZhciBzPWUoaSlbMF0uc3R5bGUubWFyZ2luUmlnaHQscj1lKGkpLmNzcyhcIm1hcmdpbi1yaWdodFwiKTtlKGkpLmRhdGEoXCJtYXJnaW4tcmlnaHRcIixzKS5jc3MoXCJtYXJnaW4tcmlnaHRcIixwYXJzZUZsb2F0KHIpLXQuX3Njcm9sbGJhcldpZHRoK1wicHhcIil9KSxlKGMuTkFWQkFSX1RPR0dMRVIpLmVhY2goZnVuY3Rpb24obixpKXt2YXIgcz1lKGkpWzBdLnN0eWxlLm1hcmdpblJpZ2h0LHI9ZShpKS5jc3MoXCJtYXJnaW4tcmlnaHRcIik7ZShpKS5kYXRhKFwibWFyZ2luLXJpZ2h0XCIscykuY3NzKFwibWFyZ2luLXJpZ2h0XCIscGFyc2VGbG9hdChyKSt0Ll9zY3JvbGxiYXJXaWR0aCtcInB4XCIpfSk7dmFyIG49ZG9jdW1lbnQuYm9keS5zdHlsZS5wYWRkaW5nUmlnaHQsaT1lKFwiYm9keVwiKS5jc3MoXCJwYWRkaW5nLXJpZ2h0XCIpO2UoXCJib2R5XCIpLmRhdGEoXCJwYWRkaW5nLXJpZ2h0XCIsbikuY3NzKFwicGFkZGluZy1yaWdodFwiLHBhcnNlRmxvYXQoaSkrdGhpcy5fc2Nyb2xsYmFyV2lkdGgrXCJweFwiKX19LHUuX3Jlc2V0U2Nyb2xsYmFyPWZ1bmN0aW9uKCl7ZShjLkZJWEVEX0NPTlRFTlQpLmVhY2goZnVuY3Rpb24odCxuKXt2YXIgaT1lKG4pLmRhdGEoXCJwYWRkaW5nLXJpZ2h0XCIpO1widW5kZWZpbmVkXCIhPXR5cGVvZiBpJiZlKG4pLmNzcyhcInBhZGRpbmctcmlnaHRcIixpKS5yZW1vdmVEYXRhKFwicGFkZGluZy1yaWdodFwiKX0pLGUoYy5TVElDS1lfQ09OVEVOVCtcIiwgXCIrYy5OQVZCQVJfVE9HR0xFUikuZWFjaChmdW5jdGlvbih0LG4pe3ZhciBpPWUobikuZGF0YShcIm1hcmdpbi1yaWdodFwiKTtcInVuZGVmaW5lZFwiIT10eXBlb2YgaSYmZShuKS5jc3MoXCJtYXJnaW4tcmlnaHRcIixpKS5yZW1vdmVEYXRhKFwibWFyZ2luLXJpZ2h0XCIpfSk7dmFyIHQ9ZShcImJvZHlcIikuZGF0YShcInBhZGRpbmctcmlnaHRcIik7XCJ1bmRlZmluZWRcIiE9dHlwZW9mIHQmJmUoXCJib2R5XCIpLmNzcyhcInBhZGRpbmctcmlnaHRcIix0KS5yZW1vdmVEYXRhKFwicGFkZGluZy1yaWdodFwiKX0sdS5fZ2V0U2Nyb2xsYmFyV2lkdGg9ZnVuY3Rpb24oKXt2YXIgdD1kb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpO3QuY2xhc3NOYW1lPWguU0NST0xMQkFSX01FQVNVUkVSLGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQodCk7dmFyIGU9dC5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS53aWR0aC10LmNsaWVudFdpZHRoO3JldHVybiBkb2N1bWVudC5ib2R5LnJlbW92ZUNoaWxkKHQpLGV9LGkuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbih0LG4pe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgcz1lKHRoaXMpLmRhdGEoXCJicy5tb2RhbFwiKSxyPWUuZXh0ZW5kKHt9LGkuRGVmYXVsdCxlKHRoaXMpLmRhdGEoKSxcIm9iamVjdFwiPT10eXBlb2YgdCYmdCk7aWYoc3x8KHM9bmV3IGkodGhpcyxyKSxlKHRoaXMpLmRhdGEoXCJicy5tb2RhbFwiLHMpKSxcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIHNbdF0pdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3QrJ1wiJyk7c1t0XShuKX1lbHNlIHIuc2hvdyYmcy5zaG93KG4pfSl9LHIoaSxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4wLjAtYmV0YS4yXCJ9fSx7a2V5OlwiRGVmYXVsdFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBvfX1dKSxpfSgpO3JldHVybiBlKGRvY3VtZW50KS5vbihsLkNMSUNLX0RBVEFfQVBJLGMuREFUQV9UT0dHTEUsZnVuY3Rpb24odCl7dmFyIG4saT10aGlzLHI9cy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMpO3ImJihuPWUocilbMF0pO3ZhciBvPWUobikuZGF0YShcImJzLm1vZGFsXCIpP1widG9nZ2xlXCI6ZS5leHRlbmQoe30sZShuKS5kYXRhKCksZSh0aGlzKS5kYXRhKCkpO1wiQVwiIT09dGhpcy50YWdOYW1lJiZcIkFSRUFcIiE9PXRoaXMudGFnTmFtZXx8dC5wcmV2ZW50RGVmYXVsdCgpO3ZhciBhPWUobikub25lKGwuU0hPVyxmdW5jdGlvbih0KXt0LmlzRGVmYXVsdFByZXZlbnRlZCgpfHxhLm9uZShsLkhJRERFTixmdW5jdGlvbigpe2UoaSkuaXMoXCI6dmlzaWJsZVwiKSYmaS5mb2N1cygpfSl9KTt1Ll9qUXVlcnlJbnRlcmZhY2UuY2FsbChlKG4pLG8sdGhpcyl9KSxlLmZuW3RdPXUuX2pRdWVyeUludGVyZmFjZSxlLmZuW3RdLkNvbnN0cnVjdG9yPXUsZS5mblt0XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGUuZm5bdF09aSx1Ll9qUXVlcnlJbnRlcmZhY2V9LHV9KCksZj1mdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBuKXRocm93IG5ldyBFcnJvcihcIkJvb3RzdHJhcCB0b29sdGlwcyByZXF1aXJlIFBvcHBlci5qcyAoaHR0cHM6Ly9wb3BwZXIuanMub3JnKVwiKTt2YXIgdD1cInRvb2x0aXBcIixpPVwiLmJzLnRvb2x0aXBcIixvPWUuZm5bdF0sYT1uZXcgUmVnRXhwKFwiKF58XFxcXHMpYnMtdG9vbHRpcFxcXFxTK1wiLFwiZ1wiKSxsPXthbmltYXRpb246XCJib29sZWFuXCIsdGVtcGxhdGU6XCJzdHJpbmdcIix0aXRsZTpcIihzdHJpbmd8ZWxlbWVudHxmdW5jdGlvbilcIix0cmlnZ2VyOlwic3RyaW5nXCIsZGVsYXk6XCIobnVtYmVyfG9iamVjdClcIixodG1sOlwiYm9vbGVhblwiLHNlbGVjdG9yOlwiKHN0cmluZ3xib29sZWFuKVwiLHBsYWNlbWVudDpcIihzdHJpbmd8ZnVuY3Rpb24pXCIsb2Zmc2V0OlwiKG51bWJlcnxzdHJpbmcpXCIsY29udGFpbmVyOlwiKHN0cmluZ3xlbGVtZW50fGJvb2xlYW4pXCIsZmFsbGJhY2tQbGFjZW1lbnQ6XCIoc3RyaW5nfGFycmF5KVwifSxoPXtBVVRPOlwiYXV0b1wiLFRPUDpcInRvcFwiLFJJR0hUOlwicmlnaHRcIixCT1RUT006XCJib3R0b21cIixMRUZUOlwibGVmdFwifSxjPXthbmltYXRpb246ITAsdGVtcGxhdGU6JzxkaXYgY2xhc3M9XCJ0b29sdGlwXCIgcm9sZT1cInRvb2x0aXBcIj48ZGl2IGNsYXNzPVwiYXJyb3dcIj48L2Rpdj48ZGl2IGNsYXNzPVwidG9vbHRpcC1pbm5lclwiPjwvZGl2PjwvZGl2PicsdHJpZ2dlcjpcImhvdmVyIGZvY3VzXCIsdGl0bGU6XCJcIixkZWxheTowLGh0bWw6ITEsc2VsZWN0b3I6ITEscGxhY2VtZW50OlwidG9wXCIsb2Zmc2V0OjAsY29udGFpbmVyOiExLGZhbGxiYWNrUGxhY2VtZW50OlwiZmxpcFwifSx1PXtTSE9XOlwic2hvd1wiLE9VVDpcIm91dFwifSxkPXtISURFOlwiaGlkZVwiK2ksSElEREVOOlwiaGlkZGVuXCIraSxTSE9XOlwic2hvd1wiK2ksU0hPV046XCJzaG93blwiK2ksSU5TRVJURUQ6XCJpbnNlcnRlZFwiK2ksQ0xJQ0s6XCJjbGlja1wiK2ksRk9DVVNJTjpcImZvY3VzaW5cIitpLEZPQ1VTT1VUOlwiZm9jdXNvdXRcIitpLE1PVVNFRU5URVI6XCJtb3VzZWVudGVyXCIraSxNT1VTRUxFQVZFOlwibW91c2VsZWF2ZVwiK2l9LGY9e0ZBREU6XCJmYWRlXCIsU0hPVzpcInNob3dcIn0sXz17VE9PTFRJUDpcIi50b29sdGlwXCIsVE9PTFRJUF9JTk5FUjpcIi50b29sdGlwLWlubmVyXCIsQVJST1c6XCIuYXJyb3dcIn0sZz17SE9WRVI6XCJob3ZlclwiLEZPQ1VTOlwiZm9jdXNcIixDTElDSzpcImNsaWNrXCIsTUFOVUFMOlwibWFudWFsXCJ9LG09ZnVuY3Rpb24oKXtmdW5jdGlvbiBvKHQsZSl7dGhpcy5faXNFbmFibGVkPSEwLHRoaXMuX3RpbWVvdXQ9MCx0aGlzLl9ob3ZlclN0YXRlPVwiXCIsdGhpcy5fYWN0aXZlVHJpZ2dlcj17fSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9dCx0aGlzLmNvbmZpZz10aGlzLl9nZXRDb25maWcoZSksdGhpcy50aXA9bnVsbCx0aGlzLl9zZXRMaXN0ZW5lcnMoKX12YXIgbT1vLnByb3RvdHlwZTtyZXR1cm4gbS5lbmFibGU9ZnVuY3Rpb24oKXt0aGlzLl9pc0VuYWJsZWQ9ITB9LG0uZGlzYWJsZT1mdW5jdGlvbigpe3RoaXMuX2lzRW5hYmxlZD0hMX0sbS50b2dnbGVFbmFibGVkPWZ1bmN0aW9uKCl7dGhpcy5faXNFbmFibGVkPSF0aGlzLl9pc0VuYWJsZWR9LG0udG9nZ2xlPWZ1bmN0aW9uKHQpe2lmKHRoaXMuX2lzRW5hYmxlZClpZih0KXt2YXIgbj10aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLGk9ZSh0LmN1cnJlbnRUYXJnZXQpLmRhdGEobik7aXx8KGk9bmV3IHRoaXMuY29uc3RydWN0b3IodC5jdXJyZW50VGFyZ2V0LHRoaXMuX2dldERlbGVnYXRlQ29uZmlnKCkpLGUodC5jdXJyZW50VGFyZ2V0KS5kYXRhKG4saSkpLGkuX2FjdGl2ZVRyaWdnZXIuY2xpY2s9IWkuX2FjdGl2ZVRyaWdnZXIuY2xpY2ssaS5faXNXaXRoQWN0aXZlVHJpZ2dlcigpP2kuX2VudGVyKG51bGwsaSk6aS5fbGVhdmUobnVsbCxpKX1lbHNle2lmKGUodGhpcy5nZXRUaXBFbGVtZW50KCkpLmhhc0NsYXNzKGYuU0hPVykpcmV0dXJuIHZvaWQgdGhpcy5fbGVhdmUobnVsbCx0aGlzKTt0aGlzLl9lbnRlcihudWxsLHRoaXMpfX0sbS5kaXNwb3NlPWZ1bmN0aW9uKCl7Y2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLGUucmVtb3ZlRGF0YSh0aGlzLmVsZW1lbnQsdGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWSksZSh0aGlzLmVsZW1lbnQpLm9mZih0aGlzLmNvbnN0cnVjdG9yLkVWRU5UX0tFWSksZSh0aGlzLmVsZW1lbnQpLmNsb3Nlc3QoXCIubW9kYWxcIikub2ZmKFwiaGlkZS5icy5tb2RhbFwiKSx0aGlzLnRpcCYmZSh0aGlzLnRpcCkucmVtb3ZlKCksdGhpcy5faXNFbmFibGVkPW51bGwsdGhpcy5fdGltZW91dD1udWxsLHRoaXMuX2hvdmVyU3RhdGU9bnVsbCx0aGlzLl9hY3RpdmVUcmlnZ2VyPW51bGwsbnVsbCE9PXRoaXMuX3BvcHBlciYmdGhpcy5fcG9wcGVyLmRlc3Ryb3koKSx0aGlzLl9wb3BwZXI9bnVsbCx0aGlzLmVsZW1lbnQ9bnVsbCx0aGlzLmNvbmZpZz1udWxsLHRoaXMudGlwPW51bGx9LG0uc2hvdz1mdW5jdGlvbigpe3ZhciB0PXRoaXM7aWYoXCJub25lXCI9PT1lKHRoaXMuZWxlbWVudCkuY3NzKFwiZGlzcGxheVwiKSl0aHJvdyBuZXcgRXJyb3IoXCJQbGVhc2UgdXNlIHNob3cgb24gdmlzaWJsZSBlbGVtZW50c1wiKTt2YXIgaT1lLkV2ZW50KHRoaXMuY29uc3RydWN0b3IuRXZlbnQuU0hPVyk7aWYodGhpcy5pc1dpdGhDb250ZW50KCkmJnRoaXMuX2lzRW5hYmxlZCl7ZSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIoaSk7dmFyIHI9ZS5jb250YWlucyh0aGlzLmVsZW1lbnQub3duZXJEb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsdGhpcy5lbGVtZW50KTtpZihpLmlzRGVmYXVsdFByZXZlbnRlZCgpfHwhcilyZXR1cm47dmFyIGE9dGhpcy5nZXRUaXBFbGVtZW50KCksbD1zLmdldFVJRCh0aGlzLmNvbnN0cnVjdG9yLk5BTUUpO2Euc2V0QXR0cmlidXRlKFwiaWRcIixsKSx0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiYXJpYS1kZXNjcmliZWRieVwiLGwpLHRoaXMuc2V0Q29udGVudCgpLHRoaXMuY29uZmlnLmFuaW1hdGlvbiYmZShhKS5hZGRDbGFzcyhmLkZBREUpO3ZhciBoPVwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY29uZmlnLnBsYWNlbWVudD90aGlzLmNvbmZpZy5wbGFjZW1lbnQuY2FsbCh0aGlzLGEsdGhpcy5lbGVtZW50KTp0aGlzLmNvbmZpZy5wbGFjZW1lbnQsYz10aGlzLl9nZXRBdHRhY2htZW50KGgpO3RoaXMuYWRkQXR0YWNobWVudENsYXNzKGMpO3ZhciBkPSExPT09dGhpcy5jb25maWcuY29udGFpbmVyP2RvY3VtZW50LmJvZHk6ZSh0aGlzLmNvbmZpZy5jb250YWluZXIpO2UoYSkuZGF0YSh0aGlzLmNvbnN0cnVjdG9yLkRBVEFfS0VZLHRoaXMpLGUuY29udGFpbnModGhpcy5lbGVtZW50Lm93bmVyRG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LHRoaXMudGlwKXx8ZShhKS5hcHBlbmRUbyhkKSxlKHRoaXMuZWxlbWVudCkudHJpZ2dlcih0aGlzLmNvbnN0cnVjdG9yLkV2ZW50LklOU0VSVEVEKSx0aGlzLl9wb3BwZXI9bmV3IG4odGhpcy5lbGVtZW50LGEse3BsYWNlbWVudDpjLG1vZGlmaWVyczp7b2Zmc2V0OntvZmZzZXQ6dGhpcy5jb25maWcub2Zmc2V0fSxmbGlwOntiZWhhdmlvcjp0aGlzLmNvbmZpZy5mYWxsYmFja1BsYWNlbWVudH0sYXJyb3c6e2VsZW1lbnQ6Xy5BUlJPV319LG9uQ3JlYXRlOmZ1bmN0aW9uKGUpe2Uub3JpZ2luYWxQbGFjZW1lbnQhPT1lLnBsYWNlbWVudCYmdC5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlKGUpfSxvblVwZGF0ZTpmdW5jdGlvbihlKXt0Ll9oYW5kbGVQb3BwZXJQbGFjZW1lbnRDaGFuZ2UoZSl9fSksZShhKS5hZGRDbGFzcyhmLlNIT1cpLFwib250b3VjaHN0YXJ0XCJpbiBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQmJmUoXCJib2R5XCIpLmNoaWxkcmVuKCkub24oXCJtb3VzZW92ZXJcIixudWxsLGUubm9vcCk7dmFyIGc9ZnVuY3Rpb24oKXt0LmNvbmZpZy5hbmltYXRpb24mJnQuX2ZpeFRyYW5zaXRpb24oKTt2YXIgbj10Ll9ob3ZlclN0YXRlO3QuX2hvdmVyU3RhdGU9bnVsbCxlKHQuZWxlbWVudCkudHJpZ2dlcih0LmNvbnN0cnVjdG9yLkV2ZW50LlNIT1dOKSxuPT09dS5PVVQmJnQuX2xlYXZlKG51bGwsdCl9O3Muc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJmUodGhpcy50aXApLmhhc0NsYXNzKGYuRkFERSk/ZSh0aGlzLnRpcCkub25lKHMuVFJBTlNJVElPTl9FTkQsZykuZW11bGF0ZVRyYW5zaXRpb25FbmQoby5fVFJBTlNJVElPTl9EVVJBVElPTik6ZygpfX0sbS5oaWRlPWZ1bmN0aW9uKHQpe3ZhciBuPXRoaXMsaT10aGlzLmdldFRpcEVsZW1lbnQoKSxyPWUuRXZlbnQodGhpcy5jb25zdHJ1Y3Rvci5FdmVudC5ISURFKSxvPWZ1bmN0aW9uKCl7bi5faG92ZXJTdGF0ZSE9PXUuU0hPVyYmaS5wYXJlbnROb2RlJiZpLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoaSksbi5fY2xlYW5UaXBDbGFzcygpLG4uZWxlbWVudC5yZW1vdmVBdHRyaWJ1dGUoXCJhcmlhLWRlc2NyaWJlZGJ5XCIpLGUobi5lbGVtZW50KS50cmlnZ2VyKG4uY29uc3RydWN0b3IuRXZlbnQuSElEREVOKSxudWxsIT09bi5fcG9wcGVyJiZuLl9wb3BwZXIuZGVzdHJveSgpLHQmJnQoKX07ZSh0aGlzLmVsZW1lbnQpLnRyaWdnZXIociksci5pc0RlZmF1bHRQcmV2ZW50ZWQoKXx8KGUoaSkucmVtb3ZlQ2xhc3MoZi5TSE9XKSxcIm9udG91Y2hzdGFydFwiaW4gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50JiZlKFwiYm9keVwiKS5jaGlsZHJlbigpLm9mZihcIm1vdXNlb3ZlclwiLG51bGwsZS5ub29wKSx0aGlzLl9hY3RpdmVUcmlnZ2VyW2cuQ0xJQ0tdPSExLHRoaXMuX2FjdGl2ZVRyaWdnZXJbZy5GT0NVU109ITEsdGhpcy5fYWN0aXZlVHJpZ2dlcltnLkhPVkVSXT0hMSxzLnN1cHBvcnRzVHJhbnNpdGlvbkVuZCgpJiZlKHRoaXMudGlwKS5oYXNDbGFzcyhmLkZBREUpP2UoaSkub25lKHMuVFJBTlNJVElPTl9FTkQsbykuZW11bGF0ZVRyYW5zaXRpb25FbmQoMTUwKTpvKCksdGhpcy5faG92ZXJTdGF0ZT1cIlwiKX0sbS51cGRhdGU9ZnVuY3Rpb24oKXtudWxsIT09dGhpcy5fcG9wcGVyJiZ0aGlzLl9wb3BwZXIuc2NoZWR1bGVVcGRhdGUoKX0sbS5pc1dpdGhDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIEJvb2xlYW4odGhpcy5nZXRUaXRsZSgpKX0sbS5hZGRBdHRhY2htZW50Q2xhc3M9ZnVuY3Rpb24odCl7ZSh0aGlzLmdldFRpcEVsZW1lbnQoKSkuYWRkQ2xhc3MoXCJicy10b29sdGlwLVwiK3QpfSxtLmdldFRpcEVsZW1lbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy50aXA9dGhpcy50aXB8fGUodGhpcy5jb25maWcudGVtcGxhdGUpWzBdLHRoaXMudGlwfSxtLnNldENvbnRlbnQ9ZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMuZ2V0VGlwRWxlbWVudCgpKTt0aGlzLnNldEVsZW1lbnRDb250ZW50KHQuZmluZChfLlRPT0xUSVBfSU5ORVIpLHRoaXMuZ2V0VGl0bGUoKSksdC5yZW1vdmVDbGFzcyhmLkZBREUrXCIgXCIrZi5TSE9XKX0sbS5zZXRFbGVtZW50Q29udGVudD1mdW5jdGlvbih0LG4pe3ZhciBpPXRoaXMuY29uZmlnLmh0bWw7XCJvYmplY3RcIj09dHlwZW9mIG4mJihuLm5vZGVUeXBlfHxuLmpxdWVyeSk/aT9lKG4pLnBhcmVudCgpLmlzKHQpfHx0LmVtcHR5KCkuYXBwZW5kKG4pOnQudGV4dChlKG4pLnRleHQoKSk6dFtpP1wiaHRtbFwiOlwidGV4dFwiXShuKX0sbS5nZXRUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJkYXRhLW9yaWdpbmFsLXRpdGxlXCIpO3JldHVybiB0fHwodD1cImZ1bmN0aW9uXCI9PXR5cGVvZiB0aGlzLmNvbmZpZy50aXRsZT90aGlzLmNvbmZpZy50aXRsZS5jYWxsKHRoaXMuZWxlbWVudCk6dGhpcy5jb25maWcudGl0bGUpLHR9LG0uX2dldEF0dGFjaG1lbnQ9ZnVuY3Rpb24odCl7cmV0dXJuIGhbdC50b1VwcGVyQ2FzZSgpXX0sbS5fc2V0TGlzdGVuZXJzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpczt0aGlzLmNvbmZpZy50cmlnZ2VyLnNwbGl0KFwiIFwiKS5mb3JFYWNoKGZ1bmN0aW9uKG4pe2lmKFwiY2xpY2tcIj09PW4pZSh0LmVsZW1lbnQpLm9uKHQuY29uc3RydWN0b3IuRXZlbnQuQ0xJQ0ssdC5jb25maWcuc2VsZWN0b3IsZnVuY3Rpb24oZSl7cmV0dXJuIHQudG9nZ2xlKGUpfSk7ZWxzZSBpZihuIT09Zy5NQU5VQUwpe3ZhciBpPW49PT1nLkhPVkVSP3QuY29uc3RydWN0b3IuRXZlbnQuTU9VU0VFTlRFUjp0LmNvbnN0cnVjdG9yLkV2ZW50LkZPQ1VTSU4scz1uPT09Zy5IT1ZFUj90LmNvbnN0cnVjdG9yLkV2ZW50Lk1PVVNFTEVBVkU6dC5jb25zdHJ1Y3Rvci5FdmVudC5GT0NVU09VVDtlKHQuZWxlbWVudCkub24oaSx0LmNvbmZpZy5zZWxlY3RvcixmdW5jdGlvbihlKXtyZXR1cm4gdC5fZW50ZXIoZSl9KS5vbihzLHQuY29uZmlnLnNlbGVjdG9yLGZ1bmN0aW9uKGUpe3JldHVybiB0Ll9sZWF2ZShlKX0pfWUodC5lbGVtZW50KS5jbG9zZXN0KFwiLm1vZGFsXCIpLm9uKFwiaGlkZS5icy5tb2RhbFwiLGZ1bmN0aW9uKCl7cmV0dXJuIHQuaGlkZSgpfSl9KSx0aGlzLmNvbmZpZy5zZWxlY3Rvcj90aGlzLmNvbmZpZz1lLmV4dGVuZCh7fSx0aGlzLmNvbmZpZyx7dHJpZ2dlcjpcIm1hbnVhbFwiLHNlbGVjdG9yOlwiXCJ9KTp0aGlzLl9maXhUaXRsZSgpfSxtLl9maXhUaXRsZT1mdW5jdGlvbigpe3ZhciB0PXR5cGVvZiB0aGlzLmVsZW1lbnQuZ2V0QXR0cmlidXRlKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiKTsodGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcInRpdGxlXCIpfHxcInN0cmluZ1wiIT09dCkmJih0aGlzLmVsZW1lbnQuc2V0QXR0cmlidXRlKFwiZGF0YS1vcmlnaW5hbC10aXRsZVwiLHRoaXMuZWxlbWVudC5nZXRBdHRyaWJ1dGUoXCJ0aXRsZVwiKXx8XCJcIiksdGhpcy5lbGVtZW50LnNldEF0dHJpYnV0ZShcInRpdGxlXCIsXCJcIikpfSxtLl9lbnRlcj1mdW5jdGlvbih0LG4pe3ZhciBpPXRoaXMuY29uc3RydWN0b3IuREFUQV9LRVk7KG49bnx8ZSh0LmN1cnJlbnRUYXJnZXQpLmRhdGEoaSkpfHwobj1uZXcgdGhpcy5jb25zdHJ1Y3Rvcih0LmN1cnJlbnRUYXJnZXQsdGhpcy5fZ2V0RGVsZWdhdGVDb25maWcoKSksZSh0LmN1cnJlbnRUYXJnZXQpLmRhdGEoaSxuKSksdCYmKG4uX2FjdGl2ZVRyaWdnZXJbXCJmb2N1c2luXCI9PT10LnR5cGU/Zy5GT0NVUzpnLkhPVkVSXT0hMCksZShuLmdldFRpcEVsZW1lbnQoKSkuaGFzQ2xhc3MoZi5TSE9XKXx8bi5faG92ZXJTdGF0ZT09PXUuU0hPVz9uLl9ob3ZlclN0YXRlPXUuU0hPVzooY2xlYXJUaW1lb3V0KG4uX3RpbWVvdXQpLG4uX2hvdmVyU3RhdGU9dS5TSE9XLG4uY29uZmlnLmRlbGF5JiZuLmNvbmZpZy5kZWxheS5zaG93P24uX3RpbWVvdXQ9c2V0VGltZW91dChmdW5jdGlvbigpe24uX2hvdmVyU3RhdGU9PT11LlNIT1cmJm4uc2hvdygpfSxuLmNvbmZpZy5kZWxheS5zaG93KTpuLnNob3coKSl9LG0uX2xlYXZlPWZ1bmN0aW9uKHQsbil7dmFyIGk9dGhpcy5jb25zdHJ1Y3Rvci5EQVRBX0tFWTsobj1ufHxlKHQuY3VycmVudFRhcmdldCkuZGF0YShpKSl8fChuPW5ldyB0aGlzLmNvbnN0cnVjdG9yKHQuY3VycmVudFRhcmdldCx0aGlzLl9nZXREZWxlZ2F0ZUNvbmZpZygpKSxlKHQuY3VycmVudFRhcmdldCkuZGF0YShpLG4pKSx0JiYobi5fYWN0aXZlVHJpZ2dlcltcImZvY3Vzb3V0XCI9PT10LnR5cGU/Zy5GT0NVUzpnLkhPVkVSXT0hMSksbi5faXNXaXRoQWN0aXZlVHJpZ2dlcigpfHwoY2xlYXJUaW1lb3V0KG4uX3RpbWVvdXQpLG4uX2hvdmVyU3RhdGU9dS5PVVQsbi5jb25maWcuZGVsYXkmJm4uY29uZmlnLmRlbGF5LmhpZGU/bi5fdGltZW91dD1zZXRUaW1lb3V0KGZ1bmN0aW9uKCl7bi5faG92ZXJTdGF0ZT09PXUuT1VUJiZuLmhpZGUoKX0sbi5jb25maWcuZGVsYXkuaGlkZSk6bi5oaWRlKCkpfSxtLl9pc1dpdGhBY3RpdmVUcmlnZ2VyPWZ1bmN0aW9uKCl7Zm9yKHZhciB0IGluIHRoaXMuX2FjdGl2ZVRyaWdnZXIpaWYodGhpcy5fYWN0aXZlVHJpZ2dlclt0XSlyZXR1cm4hMDtyZXR1cm4hMX0sbS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKG4pe3JldHVyblwibnVtYmVyXCI9PXR5cGVvZihuPWUuZXh0ZW5kKHt9LHRoaXMuY29uc3RydWN0b3IuRGVmYXVsdCxlKHRoaXMuZWxlbWVudCkuZGF0YSgpLG4pKS5kZWxheSYmKG4uZGVsYXk9e3Nob3c6bi5kZWxheSxoaWRlOm4uZGVsYXl9KSxcIm51bWJlclwiPT10eXBlb2Ygbi50aXRsZSYmKG4udGl0bGU9bi50aXRsZS50b1N0cmluZygpKSxcIm51bWJlclwiPT10eXBlb2Ygbi5jb250ZW50JiYobi5jb250ZW50PW4uY29udGVudC50b1N0cmluZygpKSxzLnR5cGVDaGVja0NvbmZpZyh0LG4sdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0VHlwZSksbn0sbS5fZ2V0RGVsZWdhdGVDb25maWc9ZnVuY3Rpb24oKXt2YXIgdD17fTtpZih0aGlzLmNvbmZpZylmb3IodmFyIGUgaW4gdGhpcy5jb25maWcpdGhpcy5jb25zdHJ1Y3Rvci5EZWZhdWx0W2VdIT09dGhpcy5jb25maWdbZV0mJih0W2VdPXRoaXMuY29uZmlnW2VdKTtyZXR1cm4gdH0sbS5fY2xlYW5UaXBDbGFzcz1mdW5jdGlvbigpe3ZhciB0PWUodGhpcy5nZXRUaXBFbGVtZW50KCkpLG49dC5hdHRyKFwiY2xhc3NcIikubWF0Y2goYSk7bnVsbCE9PW4mJm4ubGVuZ3RoPjAmJnQucmVtb3ZlQ2xhc3Mobi5qb2luKFwiXCIpKX0sbS5faGFuZGxlUG9wcGVyUGxhY2VtZW50Q2hhbmdlPWZ1bmN0aW9uKHQpe3RoaXMuX2NsZWFuVGlwQ2xhc3MoKSx0aGlzLmFkZEF0dGFjaG1lbnRDbGFzcyh0aGlzLl9nZXRBdHRhY2htZW50KHQucGxhY2VtZW50KSl9LG0uX2ZpeFRyYW5zaXRpb249ZnVuY3Rpb24oKXt2YXIgdD10aGlzLmdldFRpcEVsZW1lbnQoKSxuPXRoaXMuY29uZmlnLmFuaW1hdGlvbjtudWxsPT09dC5nZXRBdHRyaWJ1dGUoXCJ4LXBsYWNlbWVudFwiKSYmKGUodCkucmVtb3ZlQ2xhc3MoZi5GQURFKSx0aGlzLmNvbmZpZy5hbmltYXRpb249ITEsdGhpcy5oaWRlKCksdGhpcy5zaG93KCksdGhpcy5jb25maWcuYW5pbWF0aW9uPW4pfSxvLl9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24odCl7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBuPWUodGhpcykuZGF0YShcImJzLnRvb2x0aXBcIiksaT1cIm9iamVjdFwiPT10eXBlb2YgdCYmdDtpZigobnx8IS9kaXNwb3NlfGhpZGUvLnRlc3QodCkpJiYobnx8KG49bmV3IG8odGhpcyxpKSxlKHRoaXMpLmRhdGEoXCJicy50b29sdGlwXCIsbikpLFwic3RyaW5nXCI9PXR5cGVvZiB0KSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIG5bdF0pdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3QrJ1wiJyk7blt0XSgpfX0pfSxyKG8sbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMC4wLWJldGEuMlwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gY319LHtrZXk6XCJOQU1FXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9fSx7a2V5OlwiREFUQV9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cImJzLnRvb2x0aXBcIn19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiBkfX0se2tleTpcIkVWRU5UX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBpfX0se2tleTpcIkRlZmF1bHRUeXBlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9fV0pLG99KCk7cmV0dXJuIGUuZm5bdF09bS5falF1ZXJ5SW50ZXJmYWNlLGUuZm5bdF0uQ29uc3RydWN0b3I9bSxlLmZuW3RdLm5vQ29uZmxpY3Q9ZnVuY3Rpb24oKXtyZXR1cm4gZS5mblt0XT1vLG0uX2pRdWVyeUludGVyZmFjZX0sbX0oKSxfPWZ1bmN0aW9uKCl7dmFyIHQ9XCJwb3BvdmVyXCIsbj1cIi5icy5wb3BvdmVyXCIsaT1lLmZuW3RdLHM9bmV3IFJlZ0V4cChcIihefFxcXFxzKWJzLXBvcG92ZXJcXFxcUytcIixcImdcIiksYT1lLmV4dGVuZCh7fSxmLkRlZmF1bHQse3BsYWNlbWVudDpcInJpZ2h0XCIsdHJpZ2dlcjpcImNsaWNrXCIsY29udGVudDpcIlwiLHRlbXBsYXRlOic8ZGl2IGNsYXNzPVwicG9wb3ZlclwiIHJvbGU9XCJ0b29sdGlwXCI+PGRpdiBjbGFzcz1cImFycm93XCI+PC9kaXY+PGgzIGNsYXNzPVwicG9wb3Zlci1oZWFkZXJcIj48L2gzPjxkaXYgY2xhc3M9XCJwb3BvdmVyLWJvZHlcIj48L2Rpdj48L2Rpdj4nfSksbD1lLmV4dGVuZCh7fSxmLkRlZmF1bHRUeXBlLHtjb250ZW50OlwiKHN0cmluZ3xlbGVtZW50fGZ1bmN0aW9uKVwifSksaD17RkFERTpcImZhZGVcIixTSE9XOlwic2hvd1wifSxjPXtUSVRMRTpcIi5wb3BvdmVyLWhlYWRlclwiLENPTlRFTlQ6XCIucG9wb3Zlci1ib2R5XCJ9LHU9e0hJREU6XCJoaWRlXCIrbixISURERU46XCJoaWRkZW5cIituLFNIT1c6XCJzaG93XCIrbixTSE9XTjpcInNob3duXCIrbixJTlNFUlRFRDpcImluc2VydGVkXCIrbixDTElDSzpcImNsaWNrXCIrbixGT0NVU0lOOlwiZm9jdXNpblwiK24sRk9DVVNPVVQ6XCJmb2N1c291dFwiK24sTU9VU0VFTlRFUjpcIm1vdXNlZW50ZXJcIituLE1PVVNFTEVBVkU6XCJtb3VzZWxlYXZlXCIrbn0sZD1mdW5jdGlvbihpKXtmdW5jdGlvbiBkKCl7cmV0dXJuIGkuYXBwbHkodGhpcyxhcmd1bWVudHMpfHx0aGlzfW8oZCxpKTt2YXIgZj1kLnByb3RvdHlwZTtyZXR1cm4gZi5pc1dpdGhDb250ZW50PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuZ2V0VGl0bGUoKXx8dGhpcy5fZ2V0Q29udGVudCgpfSxmLmFkZEF0dGFjaG1lbnRDbGFzcz1mdW5jdGlvbih0KXtlKHRoaXMuZ2V0VGlwRWxlbWVudCgpKS5hZGRDbGFzcyhcImJzLXBvcG92ZXItXCIrdCl9LGYuZ2V0VGlwRWxlbWVudD1mdW5jdGlvbigpe3JldHVybiB0aGlzLnRpcD10aGlzLnRpcHx8ZSh0aGlzLmNvbmZpZy50ZW1wbGF0ZSlbMF0sdGhpcy50aXB9LGYuc2V0Q29udGVudD1mdW5jdGlvbigpe3ZhciB0PWUodGhpcy5nZXRUaXBFbGVtZW50KCkpO3RoaXMuc2V0RWxlbWVudENvbnRlbnQodC5maW5kKGMuVElUTEUpLHRoaXMuZ2V0VGl0bGUoKSksdGhpcy5zZXRFbGVtZW50Q29udGVudCh0LmZpbmQoYy5DT05URU5UKSx0aGlzLl9nZXRDb250ZW50KCkpLHQucmVtb3ZlQ2xhc3MoaC5GQURFK1wiIFwiK2guU0hPVyl9LGYuX2dldENvbnRlbnQ9ZnVuY3Rpb24oKXtyZXR1cm4gdGhpcy5lbGVtZW50LmdldEF0dHJpYnV0ZShcImRhdGEtY29udGVudFwiKXx8KFwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuY29uZmlnLmNvbnRlbnQ/dGhpcy5jb25maWcuY29udGVudC5jYWxsKHRoaXMuZWxlbWVudCk6dGhpcy5jb25maWcuY29udGVudCl9LGYuX2NsZWFuVGlwQ2xhc3M9ZnVuY3Rpb24oKXt2YXIgdD1lKHRoaXMuZ2V0VGlwRWxlbWVudCgpKSxuPXQuYXR0cihcImNsYXNzXCIpLm1hdGNoKHMpO251bGwhPT1uJiZuLmxlbmd0aD4wJiZ0LnJlbW92ZUNsYXNzKG4uam9pbihcIlwiKSl9LGQuX2pRdWVyeUludGVyZmFjZT1mdW5jdGlvbih0KXtyZXR1cm4gdGhpcy5lYWNoKGZ1bmN0aW9uKCl7dmFyIG49ZSh0aGlzKS5kYXRhKFwiYnMucG9wb3ZlclwiKSxpPVwib2JqZWN0XCI9PXR5cGVvZiB0P3Q6bnVsbDtpZigobnx8IS9kZXN0cm95fGhpZGUvLnRlc3QodCkpJiYobnx8KG49bmV3IGQodGhpcyxpKSxlKHRoaXMpLmRhdGEoXCJicy5wb3BvdmVyXCIsbikpLFwic3RyaW5nXCI9PXR5cGVvZiB0KSl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIG5bdF0pdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3QrJ1wiJyk7blt0XSgpfX0pfSxyKGQsbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMC4wLWJldGEuMlwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gYX19LHtrZXk6XCJOQU1FXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIHR9fSx7a2V5OlwiREFUQV9LRVlcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cImJzLnBvcG92ZXJcIn19LHtrZXk6XCJFdmVudFwiLGdldDpmdW5jdGlvbigpe3JldHVybiB1fX0se2tleTpcIkVWRU5UX0tFWVwiLGdldDpmdW5jdGlvbigpe3JldHVybiBufX0se2tleTpcIkRlZmF1bHRUeXBlXCIsZ2V0OmZ1bmN0aW9uKCl7cmV0dXJuIGx9fV0pLGR9KGYpO3JldHVybiBlLmZuW3RdPWQuX2pRdWVyeUludGVyZmFjZSxlLmZuW3RdLkNvbnN0cnVjdG9yPWQsZS5mblt0XS5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGUuZm5bdF09aSxkLl9qUXVlcnlJbnRlcmZhY2V9LGR9KCksZz1mdW5jdGlvbigpe3ZhciB0PVwic2Nyb2xsc3B5XCIsbj1lLmZuW3RdLGk9e29mZnNldDoxMCxtZXRob2Q6XCJhdXRvXCIsdGFyZ2V0OlwiXCJ9LG89e29mZnNldDpcIm51bWJlclwiLG1ldGhvZDpcInN0cmluZ1wiLHRhcmdldDpcIihzdHJpbmd8ZWxlbWVudClcIn0sYT17QUNUSVZBVEU6XCJhY3RpdmF0ZS5icy5zY3JvbGxzcHlcIixTQ1JPTEw6XCJzY3JvbGwuYnMuc2Nyb2xsc3B5XCIsTE9BRF9EQVRBX0FQSTpcImxvYWQuYnMuc2Nyb2xsc3B5LmRhdGEtYXBpXCJ9LGw9e0RST1BET1dOX0lURU06XCJkcm9wZG93bi1pdGVtXCIsRFJPUERPV05fTUVOVTpcImRyb3Bkb3duLW1lbnVcIixBQ1RJVkU6XCJhY3RpdmVcIn0saD17REFUQV9TUFk6J1tkYXRhLXNweT1cInNjcm9sbFwiXScsQUNUSVZFOlwiLmFjdGl2ZVwiLE5BVl9MSVNUX0dST1VQOlwiLm5hdiwgLmxpc3QtZ3JvdXBcIixOQVZfTElOS1M6XCIubmF2LWxpbmtcIixOQVZfSVRFTVM6XCIubmF2LWl0ZW1cIixMSVNUX0lURU1TOlwiLmxpc3QtZ3JvdXAtaXRlbVwiLERST1BET1dOOlwiLmRyb3Bkb3duXCIsRFJPUERPV05fSVRFTVM6XCIuZHJvcGRvd24taXRlbVwiLERST1BET1dOX1RPR0dMRTpcIi5kcm9wZG93bi10b2dnbGVcIn0sYz17T0ZGU0VUOlwib2Zmc2V0XCIsUE9TSVRJT046XCJwb3NpdGlvblwifSx1PWZ1bmN0aW9uKCl7ZnVuY3Rpb24gbih0LG4pe3ZhciBpPXRoaXM7dGhpcy5fZWxlbWVudD10LHRoaXMuX3Njcm9sbEVsZW1lbnQ9XCJCT0RZXCI9PT10LnRhZ05hbWU/d2luZG93OnQsdGhpcy5fY29uZmlnPXRoaXMuX2dldENvbmZpZyhuKSx0aGlzLl9zZWxlY3Rvcj10aGlzLl9jb25maWcudGFyZ2V0K1wiIFwiK2guTkFWX0xJTktTK1wiLFwiK3RoaXMuX2NvbmZpZy50YXJnZXQrXCIgXCIraC5MSVNUX0lURU1TK1wiLFwiK3RoaXMuX2NvbmZpZy50YXJnZXQrXCIgXCIraC5EUk9QRE9XTl9JVEVNUyx0aGlzLl9vZmZzZXRzPVtdLHRoaXMuX3RhcmdldHM9W10sdGhpcy5fYWN0aXZlVGFyZ2V0PW51bGwsdGhpcy5fc2Nyb2xsSGVpZ2h0PTAsZSh0aGlzLl9zY3JvbGxFbGVtZW50KS5vbihhLlNDUk9MTCxmdW5jdGlvbih0KXtyZXR1cm4gaS5fcHJvY2Vzcyh0KX0pLHRoaXMucmVmcmVzaCgpLHRoaXMuX3Byb2Nlc3MoKX12YXIgdT1uLnByb3RvdHlwZTtyZXR1cm4gdS5yZWZyZXNoPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcyxuPXRoaXMuX3Njcm9sbEVsZW1lbnQhPT10aGlzLl9zY3JvbGxFbGVtZW50LndpbmRvdz9jLlBPU0lUSU9OOmMuT0ZGU0VULGk9XCJhdXRvXCI9PT10aGlzLl9jb25maWcubWV0aG9kP246dGhpcy5fY29uZmlnLm1ldGhvZCxyPWk9PT1jLlBPU0lUSU9OP3RoaXMuX2dldFNjcm9sbFRvcCgpOjA7dGhpcy5fb2Zmc2V0cz1bXSx0aGlzLl90YXJnZXRzPVtdLHRoaXMuX3Njcm9sbEhlaWdodD10aGlzLl9nZXRTY3JvbGxIZWlnaHQoKSxlLm1ha2VBcnJheShlKHRoaXMuX3NlbGVjdG9yKSkubWFwKGZ1bmN0aW9uKHQpe3ZhciBuLG89cy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHQpO2lmKG8mJihuPWUobylbMF0pLG4pe3ZhciBhPW4uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7aWYoYS53aWR0aHx8YS5oZWlnaHQpcmV0dXJuW2UobilbaV0oKS50b3ArcixvXX1yZXR1cm4gbnVsbH0pLmZpbHRlcihmdW5jdGlvbih0KXtyZXR1cm4gdH0pLnNvcnQoZnVuY3Rpb24odCxlKXtyZXR1cm4gdFswXS1lWzBdfSkuZm9yRWFjaChmdW5jdGlvbihlKXt0Ll9vZmZzZXRzLnB1c2goZVswXSksdC5fdGFyZ2V0cy5wdXNoKGVbMV0pfSl9LHUuZGlzcG9zZT1mdW5jdGlvbigpe2UucmVtb3ZlRGF0YSh0aGlzLl9lbGVtZW50LFwiYnMuc2Nyb2xsc3B5XCIpLGUodGhpcy5fc2Nyb2xsRWxlbWVudCkub2ZmKFwiLmJzLnNjcm9sbHNweVwiKSx0aGlzLl9lbGVtZW50PW51bGwsdGhpcy5fc2Nyb2xsRWxlbWVudD1udWxsLHRoaXMuX2NvbmZpZz1udWxsLHRoaXMuX3NlbGVjdG9yPW51bGwsdGhpcy5fb2Zmc2V0cz1udWxsLHRoaXMuX3RhcmdldHM9bnVsbCx0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx0aGlzLl9zY3JvbGxIZWlnaHQ9bnVsbH0sdS5fZ2V0Q29uZmlnPWZ1bmN0aW9uKG4pe2lmKFwic3RyaW5nXCIhPXR5cGVvZihuPWUuZXh0ZW5kKHt9LGksbikpLnRhcmdldCl7dmFyIHI9ZShuLnRhcmdldCkuYXR0cihcImlkXCIpO3J8fChyPXMuZ2V0VUlEKHQpLGUobi50YXJnZXQpLmF0dHIoXCJpZFwiLHIpKSxuLnRhcmdldD1cIiNcIityfXJldHVybiBzLnR5cGVDaGVja0NvbmZpZyh0LG4sbyksbn0sdS5fZ2V0U2Nyb2xsVG9wPWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/dGhpcy5fc2Nyb2xsRWxlbWVudC5wYWdlWU9mZnNldDp0aGlzLl9zY3JvbGxFbGVtZW50LnNjcm9sbFRvcH0sdS5fZ2V0U2Nyb2xsSGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQuc2Nyb2xsSGVpZ2h0fHxNYXRoLm1heChkb2N1bWVudC5ib2R5LnNjcm9sbEhlaWdodCxkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQuc2Nyb2xsSGVpZ2h0KX0sdS5fZ2V0T2Zmc2V0SGVpZ2h0PWZ1bmN0aW9uKCl7cmV0dXJuIHRoaXMuX3Njcm9sbEVsZW1lbnQ9PT13aW5kb3c/d2luZG93LmlubmVySGVpZ2h0OnRoaXMuX3Njcm9sbEVsZW1lbnQuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkuaGVpZ2h0fSx1Ll9wcm9jZXNzPWZ1bmN0aW9uKCl7dmFyIHQ9dGhpcy5fZ2V0U2Nyb2xsVG9wKCkrdGhpcy5fY29uZmlnLm9mZnNldCxlPXRoaXMuX2dldFNjcm9sbEhlaWdodCgpLG49dGhpcy5fY29uZmlnLm9mZnNldCtlLXRoaXMuX2dldE9mZnNldEhlaWdodCgpO2lmKHRoaXMuX3Njcm9sbEhlaWdodCE9PWUmJnRoaXMucmVmcmVzaCgpLHQ+PW4pe3ZhciBpPXRoaXMuX3RhcmdldHNbdGhpcy5fdGFyZ2V0cy5sZW5ndGgtMV07dGhpcy5fYWN0aXZlVGFyZ2V0IT09aSYmdGhpcy5fYWN0aXZhdGUoaSl9ZWxzZXtpZih0aGlzLl9hY3RpdmVUYXJnZXQmJnQ8dGhpcy5fb2Zmc2V0c1swXSYmdGhpcy5fb2Zmc2V0c1swXT4wKXJldHVybiB0aGlzLl9hY3RpdmVUYXJnZXQ9bnVsbCx2b2lkIHRoaXMuX2NsZWFyKCk7Zm9yKHZhciBzPXRoaXMuX29mZnNldHMubGVuZ3RoO3MtLTspdGhpcy5fYWN0aXZlVGFyZ2V0IT09dGhpcy5fdGFyZ2V0c1tzXSYmdD49dGhpcy5fb2Zmc2V0c1tzXSYmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiB0aGlzLl9vZmZzZXRzW3MrMV18fHQ8dGhpcy5fb2Zmc2V0c1tzKzFdKSYmdGhpcy5fYWN0aXZhdGUodGhpcy5fdGFyZ2V0c1tzXSl9fSx1Ll9hY3RpdmF0ZT1mdW5jdGlvbih0KXt0aGlzLl9hY3RpdmVUYXJnZXQ9dCx0aGlzLl9jbGVhcigpO3ZhciBuPXRoaXMuX3NlbGVjdG9yLnNwbGl0KFwiLFwiKTtuPW4ubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBlKydbZGF0YS10YXJnZXQ9XCInK3QrJ1wiXSwnK2UrJ1tocmVmPVwiJyt0KydcIl0nfSk7dmFyIGk9ZShuLmpvaW4oXCIsXCIpKTtpLmhhc0NsYXNzKGwuRFJPUERPV05fSVRFTSk/KGkuY2xvc2VzdChoLkRST1BET1dOKS5maW5kKGguRFJPUERPV05fVE9HR0xFKS5hZGRDbGFzcyhsLkFDVElWRSksaS5hZGRDbGFzcyhsLkFDVElWRSkpOihpLmFkZENsYXNzKGwuQUNUSVZFKSxpLnBhcmVudHMoaC5OQVZfTElTVF9HUk9VUCkucHJldihoLk5BVl9MSU5LUytcIiwgXCIraC5MSVNUX0lURU1TKS5hZGRDbGFzcyhsLkFDVElWRSksaS5wYXJlbnRzKGguTkFWX0xJU1RfR1JPVVApLnByZXYoaC5OQVZfSVRFTVMpLmNoaWxkcmVuKGguTkFWX0xJTktTKS5hZGRDbGFzcyhsLkFDVElWRSkpLGUodGhpcy5fc2Nyb2xsRWxlbWVudCkudHJpZ2dlcihhLkFDVElWQVRFLHtyZWxhdGVkVGFyZ2V0OnR9KX0sdS5fY2xlYXI9ZnVuY3Rpb24oKXtlKHRoaXMuX3NlbGVjdG9yKS5maWx0ZXIoaC5BQ1RJVkUpLnJlbW92ZUNsYXNzKGwuQUNUSVZFKX0sbi5falF1ZXJ5SW50ZXJmYWNlPWZ1bmN0aW9uKHQpe3JldHVybiB0aGlzLmVhY2goZnVuY3Rpb24oKXt2YXIgaT1lKHRoaXMpLmRhdGEoXCJicy5zY3JvbGxzcHlcIikscz1cIm9iamVjdFwiPT10eXBlb2YgdCYmdDtpZihpfHwoaT1uZXcgbih0aGlzLHMpLGUodGhpcykuZGF0YShcImJzLnNjcm9sbHNweVwiLGkpKSxcInN0cmluZ1wiPT10eXBlb2YgdCl7aWYoXCJ1bmRlZmluZWRcIj09dHlwZW9mIGlbdF0pdGhyb3cgbmV3IEVycm9yKCdObyBtZXRob2QgbmFtZWQgXCInK3QrJ1wiJyk7aVt0XSgpfX0pfSxyKG4sbnVsbCxbe2tleTpcIlZFUlNJT05cIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm5cIjQuMC4wLWJldGEuMlwifX0se2tleTpcIkRlZmF1bHRcIixnZXQ6ZnVuY3Rpb24oKXtyZXR1cm4gaX19XSksbn0oKTtyZXR1cm4gZSh3aW5kb3cpLm9uKGEuTE9BRF9EQVRBX0FQSSxmdW5jdGlvbigpe2Zvcih2YXIgdD1lLm1ha2VBcnJheShlKGguREFUQV9TUFkpKSxuPXQubGVuZ3RoO24tLTspe3ZhciBpPWUodFtuXSk7dS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoaSxpLmRhdGEoKSl9fSksZS5mblt0XT11Ll9qUXVlcnlJbnRlcmZhY2UsZS5mblt0XS5Db25zdHJ1Y3Rvcj11LGUuZm5bdF0ubm9Db25mbGljdD1mdW5jdGlvbigpe3JldHVybiBlLmZuW3RdPW4sdS5falF1ZXJ5SW50ZXJmYWNlfSx1fSgpLG09ZnVuY3Rpb24oKXt2YXIgdD1lLmZuLnRhYixuPXtISURFOlwiaGlkZS5icy50YWJcIixISURERU46XCJoaWRkZW4uYnMudGFiXCIsU0hPVzpcInNob3cuYnMudGFiXCIsU0hPV046XCJzaG93bi5icy50YWJcIixDTElDS19EQVRBX0FQSTpcImNsaWNrLmJzLnRhYi5kYXRhLWFwaVwifSxpPXtEUk9QRE9XTl9NRU5VOlwiZHJvcGRvd24tbWVudVwiLEFDVElWRTpcImFjdGl2ZVwiLERJU0FCTEVEOlwiZGlzYWJsZWRcIixGQURFOlwiZmFkZVwiLFNIT1c6XCJzaG93XCJ9LG89e0RST1BET1dOOlwiLmRyb3Bkb3duXCIsTkFWX0xJU1RfR1JPVVA6XCIubmF2LCAubGlzdC1ncm91cFwiLEFDVElWRTpcIi5hY3RpdmVcIixBQ1RJVkVfVUw6XCI+IGxpID4gLmFjdGl2ZVwiLERBVEFfVE9HR0xFOidbZGF0YS10b2dnbGU9XCJ0YWJcIl0sIFtkYXRhLXRvZ2dsZT1cInBpbGxcIl0sIFtkYXRhLXRvZ2dsZT1cImxpc3RcIl0nLERST1BET1dOX1RPR0dMRTpcIi5kcm9wZG93bi10b2dnbGVcIixEUk9QRE9XTl9BQ1RJVkVfQ0hJTEQ6XCI+IC5kcm9wZG93bi1tZW51IC5hY3RpdmVcIn0sYT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQodCl7dGhpcy5fZWxlbWVudD10fXZhciBhPXQucHJvdG90eXBlO3JldHVybiBhLnNob3c9ZnVuY3Rpb24oKXt2YXIgdD10aGlzO2lmKCEodGhpcy5fZWxlbWVudC5wYXJlbnROb2RlJiZ0aGlzLl9lbGVtZW50LnBhcmVudE5vZGUubm9kZVR5cGU9PT1Ob2RlLkVMRU1FTlRfTk9ERSYmZSh0aGlzLl9lbGVtZW50KS5oYXNDbGFzcyhpLkFDVElWRSl8fGUodGhpcy5fZWxlbWVudCkuaGFzQ2xhc3MoaS5ESVNBQkxFRCkpKXt2YXIgcixhLGw9ZSh0aGlzLl9lbGVtZW50KS5jbG9zZXN0KG8uTkFWX0xJU1RfR1JPVVApWzBdLGg9cy5nZXRTZWxlY3RvckZyb21FbGVtZW50KHRoaXMuX2VsZW1lbnQpO2lmKGwpe3ZhciBjPVwiVUxcIj09PWwubm9kZU5hbWU/by5BQ1RJVkVfVUw6by5BQ1RJVkU7YT1lLm1ha2VBcnJheShlKGwpLmZpbmQoYykpLGE9YVthLmxlbmd0aC0xXX12YXIgdT1lLkV2ZW50KG4uSElERSx7cmVsYXRlZFRhcmdldDp0aGlzLl9lbGVtZW50fSksZD1lLkV2ZW50KG4uU0hPVyx7cmVsYXRlZFRhcmdldDphfSk7aWYoYSYmZShhKS50cmlnZ2VyKHUpLGUodGhpcy5fZWxlbWVudCkudHJpZ2dlcihkKSwhZC5pc0RlZmF1bHRQcmV2ZW50ZWQoKSYmIXUuaXNEZWZhdWx0UHJldmVudGVkKCkpe2gmJihyPWUoaClbMF0pLHRoaXMuX2FjdGl2YXRlKHRoaXMuX2VsZW1lbnQsbCk7dmFyIGY9ZnVuY3Rpb24oKXt2YXIgaT1lLkV2ZW50KG4uSElEREVOLHtyZWxhdGVkVGFyZ2V0OnQuX2VsZW1lbnR9KSxzPWUuRXZlbnQobi5TSE9XTix7cmVsYXRlZFRhcmdldDphfSk7ZShhKS50cmlnZ2VyKGkpLGUodC5fZWxlbWVudCkudHJpZ2dlcihzKX07cj90aGlzLl9hY3RpdmF0ZShyLHIucGFyZW50Tm9kZSxmKTpmKCl9fX0sYS5kaXNwb3NlPWZ1bmN0aW9uKCl7ZS5yZW1vdmVEYXRhKHRoaXMuX2VsZW1lbnQsXCJicy50YWJcIiksdGhpcy5fZWxlbWVudD1udWxsfSxhLl9hY3RpdmF0ZT1mdW5jdGlvbih0LG4scil7dmFyIGEsbD10aGlzLGg9KGE9XCJVTFwiPT09bi5ub2RlTmFtZT9lKG4pLmZpbmQoby5BQ1RJVkVfVUwpOmUobikuY2hpbGRyZW4oby5BQ1RJVkUpKVswXSxjPXImJnMuc3VwcG9ydHNUcmFuc2l0aW9uRW5kKCkmJmgmJmUoaCkuaGFzQ2xhc3MoaS5GQURFKSx1PWZ1bmN0aW9uKCl7cmV0dXJuIGwuX3RyYW5zaXRpb25Db21wbGV0ZSh0LGgsYyxyKX07aCYmYz9lKGgpLm9uZShzLlRSQU5TSVRJT05fRU5ELHUpLmVtdWxhdGVUcmFuc2l0aW9uRW5kKDE1MCk6dSgpLGgmJmUoaCkucmVtb3ZlQ2xhc3MoaS5TSE9XKX0sYS5fdHJhbnNpdGlvbkNvbXBsZXRlPWZ1bmN0aW9uKHQsbixyLGEpe2lmKG4pe2UobikucmVtb3ZlQ2xhc3MoaS5BQ1RJVkUpO3ZhciBsPWUobi5wYXJlbnROb2RlKS5maW5kKG8uRFJPUERPV05fQUNUSVZFX0NISUxEKVswXTtsJiZlKGwpLnJlbW92ZUNsYXNzKGkuQUNUSVZFKSxcInRhYlwiPT09bi5nZXRBdHRyaWJ1dGUoXCJyb2xlXCIpJiZuLnNldEF0dHJpYnV0ZShcImFyaWEtc2VsZWN0ZWRcIiwhMSl9aWYoZSh0KS5hZGRDbGFzcyhpLkFDVElWRSksXCJ0YWJcIj09PXQuZ2V0QXR0cmlidXRlKFwicm9sZVwiKSYmdC5zZXRBdHRyaWJ1dGUoXCJhcmlhLXNlbGVjdGVkXCIsITApLHI/KHMucmVmbG93KHQpLGUodCkuYWRkQ2xhc3MoaS5TSE9XKSk6ZSh0KS5yZW1vdmVDbGFzcyhpLkZBREUpLHQucGFyZW50Tm9kZSYmZSh0LnBhcmVudE5vZGUpLmhhc0NsYXNzKGkuRFJPUERPV05fTUVOVSkpe3ZhciBoPWUodCkuY2xvc2VzdChvLkRST1BET1dOKVswXTtoJiZlKGgpLmZpbmQoby5EUk9QRE9XTl9UT0dHTEUpLmFkZENsYXNzKGkuQUNUSVZFKSx0LnNldEF0dHJpYnV0ZShcImFyaWEtZXhwYW5kZWRcIiwhMCl9YSYmYSgpfSx0Ll9qUXVlcnlJbnRlcmZhY2U9ZnVuY3Rpb24obil7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBpPWUodGhpcykscz1pLmRhdGEoXCJicy50YWJcIik7aWYoc3x8KHM9bmV3IHQodGhpcyksaS5kYXRhKFwiYnMudGFiXCIscykpLFwic3RyaW5nXCI9PXR5cGVvZiBuKXtpZihcInVuZGVmaW5lZFwiPT10eXBlb2Ygc1tuXSl0aHJvdyBuZXcgRXJyb3IoJ05vIG1ldGhvZCBuYW1lZCBcIicrbisnXCInKTtzW25dKCl9fSl9LHIodCxudWxsLFt7a2V5OlwiVkVSU0lPTlwiLGdldDpmdW5jdGlvbigpe3JldHVyblwiNC4wLjAtYmV0YS4yXCJ9fV0pLHR9KCk7cmV0dXJuIGUoZG9jdW1lbnQpLm9uKG4uQ0xJQ0tfREFUQV9BUEksby5EQVRBX1RPR0dMRSxmdW5jdGlvbih0KXt0LnByZXZlbnREZWZhdWx0KCksYS5falF1ZXJ5SW50ZXJmYWNlLmNhbGwoZSh0aGlzKSxcInNob3dcIil9KSxlLmZuLnRhYj1hLl9qUXVlcnlJbnRlcmZhY2UsZS5mbi50YWIuQ29uc3RydWN0b3I9YSxlLmZuLnRhYi5ub0NvbmZsaWN0PWZ1bmN0aW9uKCl7cmV0dXJuIGUuZm4udGFiPXQsYS5falF1ZXJ5SW50ZXJmYWNlfSxhfSgpO3JldHVybiBmdW5jdGlvbigpe2lmKFwidW5kZWZpbmVkXCI9PXR5cGVvZiBlKXRocm93IG5ldyBFcnJvcihcIkJvb3RzdHJhcCdzIEphdmFTY3JpcHQgcmVxdWlyZXMgalF1ZXJ5LiBqUXVlcnkgbXVzdCBiZSBpbmNsdWRlZCBiZWZvcmUgQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdC5cIik7dmFyIHQ9ZS5mbi5qcXVlcnkuc3BsaXQoXCIgXCIpWzBdLnNwbGl0KFwiLlwiKTtpZih0WzBdPDImJnRbMV08OXx8MT09PXRbMF0mJjk9PT10WzFdJiZ0WzJdPDF8fHRbMF0+PTQpdGhyb3cgbmV3IEVycm9yKFwiQm9vdHN0cmFwJ3MgSmF2YVNjcmlwdCByZXF1aXJlcyBhdCBsZWFzdCBqUXVlcnkgdjEuOS4xIGJ1dCBsZXNzIHRoYW4gdjQuMC4wXCIpfSgpLHQuVXRpbD1zLHQuQWxlcnQ9YSx0LkJ1dHRvbj1sLHQuQ2Fyb3VzZWw9aCx0LkNvbGxhcHNlPWMsdC5Ecm9wZG93bj11LHQuTW9kYWw9ZCx0LlBvcG92ZXI9Xyx0LlNjcm9sbHNweT1nLHQuVGFiPW0sdC5Ub29sdGlwPWYsdH0oe30sJCxQb3BwZXIpO1xuLy8jIHNvdXJjZU1hcHBpbmdVUkw9Ym9vdHN0cmFwLm1pbi5qcy5tYXBcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvanMvYm9vdHN0cmFwLm1pbi5qcyIsIi8qICBqUXVlcnkgTmljZSBTZWxlY3QgLSB2MS4xLjBcbiAgICBodHRwczovL2dpdGh1Yi5jb20vaGVybmFuc2FydG9yaW8vanF1ZXJ5LW5pY2Utc2VsZWN0XG4gICAgTWFkZSBieSBIZXJuw6FuIFNhcnRvcmlvICAqL1xuIFxuKGZ1bmN0aW9uKCQpIHtcblxuICAkLmZuLm5pY2VTZWxlY3QgPSBmdW5jdGlvbihtZXRob2QpIHtcbiAgICBcbiAgICAvLyBNZXRob2RzXG4gICAgaWYgKHR5cGVvZiBtZXRob2QgPT0gJ3N0cmluZycpIHsgICAgICBcbiAgICAgIGlmIChtZXRob2QgPT0gJ3VwZGF0ZScpIHtcbiAgICAgICAgdGhpcy5lYWNoKGZ1bmN0aW9uKCkge1xuICAgICAgICAgIHZhciAkc2VsZWN0ID0gJCh0aGlzKTtcbiAgICAgICAgICB2YXIgJGRyb3Bkb3duID0gJCh0aGlzKS5uZXh0KCcubmljZS1zZWxlY3QnKTtcbiAgICAgICAgICB2YXIgb3BlbiA9ICRkcm9wZG93bi5oYXNDbGFzcygnb3BlbicpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICgkZHJvcGRvd24ubGVuZ3RoKSB7XG4gICAgICAgICAgICAkZHJvcGRvd24ucmVtb3ZlKCk7XG4gICAgICAgICAgICBjcmVhdGVfbmljZV9zZWxlY3QoJHNlbGVjdCk7XG4gICAgICAgICAgICBcbiAgICAgICAgICAgIGlmIChvcGVuKSB7XG4gICAgICAgICAgICAgICRzZWxlY3QubmV4dCgpLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgfVxuICAgICAgICB9KTtcbiAgICAgIH0gZWxzZSBpZiAobWV0aG9kID09ICdkZXN0cm95Jykge1xuICAgICAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICAgICAgdmFyICRzZWxlY3QgPSAkKHRoaXMpO1xuICAgICAgICAgIHZhciAkZHJvcGRvd24gPSAkKHRoaXMpLm5leHQoJy5uaWNlLXNlbGVjdCcpO1xuICAgICAgICAgIFxuICAgICAgICAgIGlmICgkZHJvcGRvd24ubGVuZ3RoKSB7XG4gICAgICAgICAgICAkZHJvcGRvd24ucmVtb3ZlKCk7XG4gICAgICAgICAgICAkc2VsZWN0LmNzcygnZGlzcGxheScsICcnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH0pO1xuICAgICAgICBpZiAoJCgnLm5pY2Utc2VsZWN0JykubGVuZ3RoID09IDApIHtcbiAgICAgICAgICAkKGRvY3VtZW50KS5vZmYoJy5uaWNlX3NlbGVjdCcpO1xuICAgICAgICB9XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBjb25zb2xlLmxvZygnTWV0aG9kIFwiJyArIG1ldGhvZCArICdcIiBkb2VzIG5vdCBleGlzdC4nKVxuICAgICAgfVxuICAgICAgcmV0dXJuIHRoaXM7XG4gICAgfVxuICAgICAgXG4gICAgLy8gSGlkZSBuYXRpdmUgc2VsZWN0XG4gICAgdGhpcy5oaWRlKCk7XG4gICAgXG4gICAgLy8gQ3JlYXRlIGN1c3RvbSBtYXJrdXBcbiAgICB0aGlzLmVhY2goZnVuY3Rpb24oKSB7XG4gICAgICB2YXIgJHNlbGVjdCA9ICQodGhpcyk7XG4gICAgICBcbiAgICAgIGlmICghJHNlbGVjdC5uZXh0KCkuaGFzQ2xhc3MoJ25pY2Utc2VsZWN0JykpIHtcbiAgICAgICAgY3JlYXRlX25pY2Vfc2VsZWN0KCRzZWxlY3QpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIGZ1bmN0aW9uIGNyZWF0ZV9uaWNlX3NlbGVjdCgkc2VsZWN0KSB7XG4gICAgICAkc2VsZWN0LmFmdGVyKCQoJzxkaXY+PC9kaXY+JylcbiAgICAgICAgLmFkZENsYXNzKCduaWNlLXNlbGVjdCcpXG4gICAgICAgIC5hZGRDbGFzcygkc2VsZWN0LmF0dHIoJ2NsYXNzJykgfHwgJycpXG4gICAgICAgIC5hZGRDbGFzcygkc2VsZWN0LmF0dHIoJ2Rpc2FibGVkJykgPyAnZGlzYWJsZWQnIDogJycpXG4gICAgICAgIC5hdHRyKCd0YWJpbmRleCcsICRzZWxlY3QuYXR0cignZGlzYWJsZWQnKSA/IG51bGwgOiAnMCcpXG4gICAgICAgIC5odG1sKCc8c3BhbiBjbGFzcz1cImN1cnJlbnRcIj48L3NwYW4+PHVsIGNsYXNzPVwibGlzdFwiPjwvdWw+JylcbiAgICAgICk7XG4gICAgICAgIFxuICAgICAgdmFyICRkcm9wZG93biA9ICRzZWxlY3QubmV4dCgpO1xuICAgICAgdmFyICRvcHRpb25zID0gJHNlbGVjdC5maW5kKCdvcHRpb24nKTtcbiAgICAgIHZhciAkc2VsZWN0ZWQgPSAkc2VsZWN0LmZpbmQoJ29wdGlvbjpzZWxlY3RlZCcpO1xuICAgICAgXG4gICAgICAkZHJvcGRvd24uZmluZCgnLmN1cnJlbnQnKS5odG1sKCRzZWxlY3RlZC5kYXRhKCdkaXNwbGF5JykgfHzCoCRzZWxlY3RlZC50ZXh0KCkpO1xuICAgICAgXG4gICAgICAkb3B0aW9ucy5lYWNoKGZ1bmN0aW9uKGkpIHtcbiAgICAgICAgdmFyICRvcHRpb24gPSAkKHRoaXMpO1xuICAgICAgICB2YXIgZGlzcGxheSA9ICRvcHRpb24uZGF0YSgnZGlzcGxheScpO1xuXG4gICAgICAgICRkcm9wZG93bi5maW5kKCd1bCcpLmFwcGVuZCgkKCc8bGk+PC9saT4nKVxuICAgICAgICAgIC5hdHRyKCdkYXRhLXZhbHVlJywgJG9wdGlvbi52YWwoKSlcbiAgICAgICAgICAuYXR0cignZGF0YS1kaXNwbGF5JywgKGRpc3BsYXkgfHwgbnVsbCkpXG4gICAgICAgICAgLmFkZENsYXNzKCdvcHRpb24nICtcbiAgICAgICAgICAgICgkb3B0aW9uLmlzKCc6c2VsZWN0ZWQnKSA/ICcgc2VsZWN0ZWQnIDogJycpICtcbiAgICAgICAgICAgICgkb3B0aW9uLmlzKCc6ZGlzYWJsZWQnKSA/ICcgZGlzYWJsZWQnIDogJycpKVxuICAgICAgICAgIC5odG1sKCRvcHRpb24udGV4dCgpKVxuICAgICAgICApO1xuICAgICAgfSk7XG4gICAgfVxuICAgIFxuICAgIC8qIEV2ZW50IGxpc3RlbmVycyAqL1xuICAgIFxuICAgIC8vIFVuYmluZCBleGlzdGluZyBldmVudHMgaW4gY2FzZSB0aGF0IHRoZSBwbHVnaW4gaGFzIGJlZW4gaW5pdGlhbGl6ZWQgYmVmb3JlXG4gICAgJChkb2N1bWVudCkub2ZmKCcubmljZV9zZWxlY3QnKTtcbiAgICBcbiAgICAvLyBPcGVuL2Nsb3NlXG4gICAgJChkb2N1bWVudCkub24oJ2NsaWNrLm5pY2Vfc2VsZWN0JywgJy5uaWNlLXNlbGVjdCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgJGRyb3Bkb3duID0gJCh0aGlzKTtcbiAgICAgIFxuICAgICAgJCgnLm5pY2Utc2VsZWN0Jykubm90KCRkcm9wZG93bikucmVtb3ZlQ2xhc3MoJ29wZW4nKTtcbiAgICAgICRkcm9wZG93bi50b2dnbGVDbGFzcygnb3BlbicpO1xuICAgICAgXG4gICAgICBpZiAoJGRyb3Bkb3duLmhhc0NsYXNzKCdvcGVuJykpIHtcbiAgICAgICAgJGRyb3Bkb3duLmZpbmQoJy5vcHRpb24nKTsgIFxuICAgICAgICAkZHJvcGRvd24uZmluZCgnLmZvY3VzJykucmVtb3ZlQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICAgICRkcm9wZG93bi5maW5kKCcuc2VsZWN0ZWQnKS5hZGRDbGFzcygnZm9jdXMnKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgICRkcm9wZG93bi5mb2N1cygpO1xuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIENsb3NlIHdoZW4gY2xpY2tpbmcgb3V0c2lkZVxuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljay5uaWNlX3NlbGVjdCcsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICBpZiAoJChldmVudC50YXJnZXQpLmNsb3Nlc3QoJy5uaWNlLXNlbGVjdCcpLmxlbmd0aCA9PT0gMCkge1xuICAgICAgICAkKCcubmljZS1zZWxlY3QnKS5yZW1vdmVDbGFzcygnb3BlbicpLmZpbmQoJy5vcHRpb24nKTsgIFxuICAgICAgfVxuICAgIH0pO1xuICAgIFxuICAgIC8vIE9wdGlvbiBjbGlja1xuICAgICQoZG9jdW1lbnQpLm9uKCdjbGljay5uaWNlX3NlbGVjdCcsICcubmljZS1zZWxlY3QgLm9wdGlvbjpub3QoLmRpc2FibGVkKScsIGZ1bmN0aW9uKGV2ZW50KSB7XG4gICAgICB2YXIgJG9wdGlvbiA9ICQodGhpcyk7XG4gICAgICB2YXIgJGRyb3Bkb3duID0gJG9wdGlvbi5jbG9zZXN0KCcubmljZS1zZWxlY3QnKTtcbiAgICAgIFxuICAgICAgJGRyb3Bkb3duLmZpbmQoJy5zZWxlY3RlZCcpLnJlbW92ZUNsYXNzKCdzZWxlY3RlZCcpO1xuICAgICAgJG9wdGlvbi5hZGRDbGFzcygnc2VsZWN0ZWQnKTtcbiAgICAgIFxuICAgICAgdmFyIHRleHQgPSAkb3B0aW9uLmRhdGEoJ2Rpc3BsYXknKSB8fCAkb3B0aW9uLnRleHQoKTtcbiAgICAgICRkcm9wZG93bi5maW5kKCcuY3VycmVudCcpLnRleHQodGV4dCk7XG4gICAgICBcbiAgICAgICRkcm9wZG93bi5wcmV2KCdzZWxlY3QnKS52YWwoJG9wdGlvbi5kYXRhKCd2YWx1ZScpKS50cmlnZ2VyKCdjaGFuZ2UnKTtcbiAgICB9KTtcblxuICAgIC8vIEtleWJvYXJkIGV2ZW50c1xuICAgICQoZG9jdW1lbnQpLm9uKCdrZXlkb3duLm5pY2Vfc2VsZWN0JywgJy5uaWNlLXNlbGVjdCcsIGZ1bmN0aW9uKGV2ZW50KSB7ICAgIFxuICAgICAgdmFyICRkcm9wZG93biA9ICQodGhpcyk7XG4gICAgICB2YXIgJGZvY3VzZWRfb3B0aW9uID0gJCgkZHJvcGRvd24uZmluZCgnLmZvY3VzJykgfHwgJGRyb3Bkb3duLmZpbmQoJy5saXN0IC5vcHRpb24uc2VsZWN0ZWQnKSk7XG4gICAgICBcbiAgICAgIC8vIFNwYWNlIG9yIEVudGVyXG4gICAgICBpZiAoZXZlbnQua2V5Q29kZSA9PSAzMiB8fCBldmVudC5rZXlDb2RlID09IDEzKSB7XG4gICAgICAgIGlmICgkZHJvcGRvd24uaGFzQ2xhc3MoJ29wZW4nKSkge1xuICAgICAgICAgICRmb2N1c2VkX29wdGlvbi50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgICRkcm9wZG93bi50cmlnZ2VyKCdjbGljaycpO1xuICAgICAgICB9XG4gICAgICAgIHJldHVybiBmYWxzZTtcbiAgICAgIC8vIERvd25cbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSA0MCkge1xuICAgICAgICBpZiAoISRkcm9wZG93bi5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgJGRyb3Bkb3duLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyICRuZXh0ID0gJGZvY3VzZWRfb3B0aW9uLm5leHRBbGwoJy5vcHRpb246bm90KC5kaXNhYmxlZCknKS5maXJzdCgpO1xuICAgICAgICAgIGlmICgkbmV4dC5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkZHJvcGRvd24uZmluZCgnLmZvY3VzJykucmVtb3ZlQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAkbmV4dC5hZGRDbGFzcygnZm9jdXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gVXBcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5Q29kZSA9PSAzOCkge1xuICAgICAgICBpZiAoISRkcm9wZG93bi5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgJGRyb3Bkb3duLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgdmFyICRwcmV2ID0gJGZvY3VzZWRfb3B0aW9uLnByZXZBbGwoJy5vcHRpb246bm90KC5kaXNhYmxlZCknKS5maXJzdCgpO1xuICAgICAgICAgIGlmICgkcHJldi5sZW5ndGggPiAwKSB7XG4gICAgICAgICAgICAkZHJvcGRvd24uZmluZCgnLmZvY3VzJykucmVtb3ZlQ2xhc3MoJ2ZvY3VzJyk7XG4gICAgICAgICAgICAkcHJldi5hZGRDbGFzcygnZm9jdXMnKTtcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgLy8gRXNjXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleUNvZGUgPT0gMjcpIHtcbiAgICAgICAgaWYgKCRkcm9wZG93bi5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgJGRyb3Bkb3duLnRyaWdnZXIoJ2NsaWNrJyk7XG4gICAgICAgIH1cbiAgICAgIC8vIFRhYlxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXlDb2RlID09IDkpIHtcbiAgICAgICAgaWYgKCRkcm9wZG93bi5oYXNDbGFzcygnb3BlbicpKSB7XG4gICAgICAgICAgcmV0dXJuIGZhbHNlO1xuICAgICAgICB9XG4gICAgICB9XG4gICAgfSk7XG5cbiAgICAvLyBEZXRlY3QgQ1NTIHBvaW50ZXItZXZlbnRzIHN1cHBvcnQsIGZvciBJRSA8PSAxMC4gRnJvbSBNb2Rlcm5penIuXG4gICAgdmFyIHN0eWxlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnYScpLnN0eWxlO1xuICAgIHN0eWxlLmNzc1RleHQgPSAncG9pbnRlci1ldmVudHM6YXV0byc7XG4gICAgaWYgKHN0eWxlLnBvaW50ZXJFdmVudHMgIT09ICdhdXRvJykge1xuICAgICAgJCgnaHRtbCcpLmFkZENsYXNzKCduby1jc3Nwb2ludGVyZXZlbnRzJyk7XG4gICAgfVxuICAgIFxuICAgIHJldHVybiB0aGlzO1xuXG4gIH07XG5cbn0oalF1ZXJ5KSk7XG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2pzL2pxdWVyeS5uaWNlLXNlbGVjdC5qcyIsIi8qXG5cdExvYWQgbW9yZSBjb250ZW50IHdpdGggalF1ZXJ5IC0gTWF5IDIxLCAyMDEzXG5cdChjKSAyMDEzIEBFbG1haGRpTWFobW91ZFxuKi8gICBcblxuJChmdW5jdGlvbiAoKSB7XG4gICAgJChcImRpdlwiKS5zbGljZSgwLCA0KS5zaG93KCk7XG4gICAgJChcIiNsb2FkTW9yZVwiKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xuICAgICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgICAgICQoXCJkaXY6aGlkZGVuXCIpLnNsaWNlKDAsIDQpLnNsaWRlRG93bigpO1xuLy8gICAgICAgIGlmICgkKFwiZGl2OmhpZGRlblwiKS5sZW5ndGggPT0gMCkge1xuXHQvLyAgICAgICAgICAgICQoXCIjbG9hZFwiKS5mYWRlT3V0KCdzbG93Jyk7XG5cdC8vICAgICAgICB9XG4gICAgfSk7XG59KTtcblxuXG4vLyBXRUJQQUNLIEZPT1RFUiAvL1xuLy8gLi9hc3NldHMvanMvbG9hZG1vcmUuanMiLCJqUXVlcnkoZG9jdW1lbnQpLnJlYWR5KGZ1bmN0aW9uICgkKSB7XHJcblxyXG5cclxuXHJcblx0Ly9uYXZiYXIgY2xpY2sgYWRkIGNsYXNzIGFjdGl2ZVxyXG5cdCQoXCIubmF2YmFyLW5hdlwiKS5vbihcImNsaWNrXCIsIFwibGlcIiwgZnVuY3Rpb24gKCkge1xyXG5cdFx0JChcIi5uYXZiYXItbmF2IGxpXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpO1xyXG5cdFx0JCh0aGlzKS5hZGRDbGFzcyhcImFjdGl2ZVwiKTtcclxuXHR9KTtcclxuXHJcblxyXG5cdC8vT24gc2Nyb2xsIGhlYWRlciBhZGQgYmFja2dyb3VuZFxyXG5cdCQod2luZG93KS5zY3JvbGwoZnVuY3Rpb24gKCkge1xyXG5cdFx0dmFyIGEgPSAxMDtcclxuXHRcdHZhciBwb3MgPSAkKHdpbmRvdykuc2Nyb2xsVG9wKCk7XHJcblx0XHRpZiAocG9zID4gYSkge1xyXG5cdFx0XHQkKFwiLmhlYWRlci10b3AgLm5hdmJhclwiKS5jc3Moe1xyXG5cdFx0XHRcdGJhY2tncm91bmQ6ICcjNzM2MmRlJyxcclxuXHRcdFx0XHR0cmFuc2l0aW9uOiAnYWxsIDAuM3MgZWFzZS1pbi1vdXQnLFxyXG5cdFx0XHRcdGhlaWdodDogNjAsXHJcblx0XHRcdH0pO1xyXG5cdFx0XHQkKFwiLmhlYWRlci10b3AgLm5hdmJhclwiKS5hZGRDbGFzcyhcImFuaW1hdGVkIHNsaWRlSW5Eb3duXCIpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JChcIi5oZWFkZXItdG9wIC5uYXZiYXJcIikuY3NzKHtcclxuXHRcdFx0XHRiYWNrZ3JvdW5kOiAndHJhbnNwYXJlbnQnXHJcblx0XHRcdH0pO1xyXG5cdFx0XHQkKFwiLmhlYWRlci10b3AgLm5hdmJhclwiKS5yZW1vdmVDbGFzcyhcImFuaW1hdGVkIHNsaWRlSW5Eb3duXCIpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cclxuXHQkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHtcclxuXHRcdHZhciBhID0gMTA7XHJcblx0XHR2YXIgcG9zID0gJCh3aW5kb3cpLnNjcm9sbFRvcCgpO1xyXG5cdFx0aWYgKHBvcyA+IGEpIHtcclxuXHRcdFx0JChcIi5hcnRpY2xlcyAuaGVhZGVyLXRvcCAubmF2YmFyXCIpLmNzcyh7XHJcblx0XHRcdFx0YmFja2dyb3VuZDogJyNmZmYnLFxyXG5cdFx0XHRcdHRyYW5zaXRpb246ICdhbGwgMC4zcyBlYXNlLWluLW91dCcsXHJcblx0XHRcdFx0aGVpZ2h0OiA2MCxcclxuXHRcdFx0fSk7XHJcblx0XHRcdCQoXCIuYXJ0aWNsZXMgLmhlYWRlci10b3AgLm5hdmJhclwiKS5hZGRDbGFzcyhcImFuaW1hdGVkIHNsaWRlSW5Eb3duXCIpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JChcIi5hcnRpY2xlcyAuaGVhZGVyLXRvcCAubmF2YmFyXCIpLmNzcyh7XHJcblx0XHRcdFx0YmFja2dyb3VuZDogJyNmZmYnXHJcblx0XHRcdH0pO1xyXG5cdFx0XHQkKFwiLmFydGljbGVzIC5oZWFkZXItdG9wIC5uYXZiYXJcIikucmVtb3ZlQ2xhc3MoXCJhbmltYXRlZCBzbGlkZUluRG93blwiKTtcclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly9GZWF1dGVzIFNsaWRlclxyXG5cdCQoXCIuZmVhdHVyZXMtc2xpZGVyXCIpLm93bENhcm91c2VsKHtcclxuXHRcdGl0ZW1zOiAxLFxyXG5cdFx0bG9vcDogdHJ1ZSxcclxuXHRcdG5hdjogdHJ1ZSxcclxuXHRcdGF1dG9wbGF5OiB0cnVlLFxyXG5cdFx0bmF2VGV4dDogWyc8aSBjbGFzcz1cImZhIGZhLWFuZ2xlLWxlZnRcIj48L2k+JywgJzxpIGNsYXNzPVwiZmEgZmEtYW5nbGUtcmlnaHRcIj48L2k+J10sXHJcblx0XHRhbmltYXRlSW46ICdmYWRlSW4nLFxyXG5cdFx0YW5pbWF0ZU91dDogJ2ZhZGVPdXQnLFxyXG5cdH0pO1xyXG5cclxuXHJcblx0Ly9GZWF1dGVzIFNsaWRlclxyXG5cdCQoXCIudGVzdGltb25pYWwtc2xpZGVyXCIpLm93bENhcm91c2VsKHtcclxuXHRcdGl0ZW1zOiAxLFxyXG5cdFx0bG9vcDogdHJ1ZSxcclxuXHRcdG5hdjogZmFsc2UsXHJcblx0XHRkb3RzOiB0cnVlLFxyXG5cdFx0YXV0b3BsYXk6IHRydWUsXHJcblx0XHRhbmltYXRlSW46ICdmYWRlSW4nLFxyXG5cdFx0YW5pbWF0ZU91dDogJ2ZhZGVPdXQnLFxyXG5cdH0pO1xyXG5cclxuXHJcblx0Ly9TaW5nbGUgQmxvZyBTbGlkZXJcclxuXHQkKFwiLnNpbmdsZWJsb2ctc2xpZGVyXCIpLm93bENhcm91c2VsKHtcclxuXHRcdGl0ZW1zOiAxLFxyXG5cdFx0bG9vcDogdHJ1ZSxcclxuXHRcdG5hdjogdHJ1ZSxcclxuXHRcdC8vXHRcdGF1dG9wbGF5OiB0cnVlLFxyXG5cdFx0YW5pbWF0ZUluOiAnZmFkZUluJyxcclxuXHRcdGFuaW1hdGVPdXQ6ICdmYWRlT3V0JyxcclxuXHRcdG5hdlRleHQ6IFtcclxuXHRcdFx0XCI8aSBjbGFzcz0nZmEgZmEtYXJyb3ctbGVmdCc+PC9pPnByZXZpb3VzIHBvc3RcIixcclxuXHRcdFx0XCJuZXh0IHBvc3QgPGkgY2xhc3M9J2ZhIGZhLWFycm93LXJpZ2h0Jz48L2k+XCJcclxuXHRcdF0sXHJcblx0XHRkb3RzOiBmYWxzZSxcclxuXHRcdG1vdXNlRHJhZzogZmFsc2UsXHJcblx0fSk7XHJcblxyXG5cclxuXHJcblx0Ly9BcnRpY2xlcyBTbGlkZXJcclxuXHQkKFwiLmFydGljbGVzLXNsaWRlclwiKS5vd2xDYXJvdXNlbCh7XHJcblx0XHRjZW50ZXI6IHRydWUsXHJcblx0XHRpdGVtczogMixcclxuXHRcdGxvb3A6IHRydWUsXHJcblx0XHRtYXJnaW46IDUwLFxyXG5cdFx0YXV0b3BsYXk6IHRydWUsXHJcblx0XHRyZXNwb25zaXZlQ2xhc3M6IHRydWUsXHJcblx0XHRkb3RzOiB0cnVlLFxyXG5cdFx0cmVzcG9uc2l2ZToge1xyXG5cdFx0XHQwOiB7XHJcblx0XHRcdFx0aXRlbXM6IDEsXHJcblx0XHRcdH0sXHJcblx0XHRcdDYwMDoge1xyXG5cdFx0XHRcdGl0ZW1zOiAxLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHQxMDAwOiB7XHJcblx0XHRcdFx0aXRlbXM6IDIsXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxuXHQvL1NpbmdsZS1ibG9nIFNsaWRlclxyXG5cdCQoXCIuc2luZ2xlLWJsb2ctc2xpZGVyXCIpLm93bENhcm91c2VsKHtcclxuXHRcdGl0ZW1zOiAyLFxyXG5cdFx0bG9vcDogdHJ1ZSxcclxuXHRcdG1hcmdpbjogNTAsXHJcblx0XHQvL1x0XHRhdXRvcGxheTogdHJ1ZSxcclxuXHRcdHJlc3BvbnNpdmVDbGFzczogdHJ1ZSxcclxuXHRcdGRvdHM6IHRydWUsXHJcblx0XHRyZXNwb25zaXZlOiB7XHJcblx0XHRcdDA6IHtcclxuXHRcdFx0XHRpdGVtczogMSxcclxuXHRcdFx0fSxcclxuXHRcdFx0NzY3OiB7XHJcblx0XHRcdFx0aXRlbXM6IDEsXHJcblx0XHRcdH0sXHJcblx0XHRcdDYwMDoge1xyXG5cdFx0XHRcdGl0ZW1zOiAxLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHQxMDAwOiB7XHJcblx0XHRcdFx0aXRlbXM6IDIsXHJcblx0XHRcdH1cclxuXHRcdH1cclxuXHR9KTtcclxuXHJcblx0Ly9BcnRpY2xlcyBTbGlkZXJcclxuXHQkKFwiLmhlcm8tc2xpZGVyLWFyZWFcIikub3dsQ2Fyb3VzZWwoe1xyXG5cdFx0aXRlbXM6IDMsXHJcblx0XHRsb29wOiB0cnVlLFxyXG5cdFx0ZG90czogdHJ1ZSxcclxuXHRcdHJlc3BvbnNpdmVDbGFzczogdHJ1ZSxcclxuXHRcdHJlc3BvbnNpdmU6IHtcclxuXHRcdFx0MDoge1xyXG5cdFx0XHRcdGl0ZW1zOiAxLFxyXG5cdFx0XHR9LFxyXG5cdFx0XHQ2MDA6IHtcclxuXHRcdFx0XHRpdGVtczogMixcclxuXHRcdFx0fSxcclxuXHRcdFx0MTAwMDoge1xyXG5cdFx0XHRcdGl0ZW1zOiAzLFxyXG5cdFx0XHR9XHJcblx0XHR9XHJcblx0fSk7XHJcblxyXG5cclxuXHQvL3BvcHVwIE1vZGFsIFZpZGVvXHJcblx0JChcIi5qcy1tb2RhbC1idG5cIikubW9kYWxWaWRlbygpO1xyXG5cdC8vUHJldmVudCBkZWZhdWx0IGJlaGF2aW9yIG9mIEFuY2hvciB0YWdcclxuXHQkKFwiYS5qcy1tb2RhbC1idG5cIikuY2xpY2soZnVuY3Rpb24gKGV2ZW50KSB7XHJcblx0XHRyZXR1cm4gZmFsc2U7XHJcblx0fSk7XHJcblxyXG5cclxuXHQvL0NsaWNrIHRvIHNjcm9sbCB0byBuZXh0IHNlY3Rpb25cclxuXHQkKCcuc2NybC1kb3duJykub24oJ2NsaWNrJywgZnVuY3Rpb24gKGUpIHtcclxuXHRcdGUucHJldmVudERlZmF1bHQoKTtcclxuXHRcdCQoJ2h0bWwsIGJvZHknKS5hbmltYXRlKHtcclxuXHRcdFx0c2Nyb2xsVG9wOiAkKCQodGhpcykuYXR0cignaHJlZicpKS5vZmZzZXQoKS50b3BcclxuXHRcdH0sIDUwMCwgJ2xpbmVhcicpO1xyXG5cdH0pO1xyXG5cclxuXHQvL09uIGNsaWNrIGNoYW5nZSBmb290ZXIgbWVudSBhY3RpdmVcclxuXHQkKFwiLmZvb3Rlci1tZW51IGxpXCIpLm9uKFwiY2xpY2tcIiwgZnVuY3Rpb24gKCkge1xyXG5cdFx0JChcIi5mb290ZXItbWVudSBsaVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKTtcclxuXHRcdCQodGhpcykuYWRkQ2xhc3MoXCJhY3RpdmVcIik7XHJcblx0fSk7XHJcblxyXG5cdC8vQmFjayB0byB0b3BcclxuXHQkKHdpbmRvdykuc2Nyb2xsKGZ1bmN0aW9uICgpIHtcclxuXHRcdGlmICgkKHRoaXMpLnNjcm9sbFRvcCgpID4gOTAwKSB7XHJcblx0XHRcdCQoJy5iYWNrLXRvLXRvcCcpLmZhZGVJbigpO1xyXG5cdFx0fSBlbHNlIHtcclxuXHRcdFx0JCgnLmJhY2stdG8tdG9wJykuZmFkZU91dCgpO1xyXG5cdFx0fVxyXG5cdH0pO1xyXG5cdCQoXCIuYmFjay10by10b3BcIikuY2xpY2soZnVuY3Rpb24gKCkge1xyXG5cdFx0JChcImh0bWwsIGJvZHlcIikuYW5pbWF0ZSh7XHJcblx0XHRcdHNjcm9sbFRvcDogMFxyXG5cdFx0fSwgMTAwMCk7XHJcblx0fSk7XHJcblxyXG5cdC8vTG9hZG1vcmVcclxuXHQkKGZ1bmN0aW9uICgpIHtcclxuXHRcdCQoXCIuYmxvZ3MtbG9hZFwiKS5zbGljZSgwLCA5KS5zaG93KCk7XHJcblx0XHQkKFwiLmFsbC1ibG9nc1wiKS5vbignY2xpY2snLCBmdW5jdGlvbiAoZSkge1xyXG5cdFx0XHRlLnByZXZlbnREZWZhdWx0KCk7XHJcblx0XHRcdCQoXCIuYmxvZ3MtbG9hZDpoaWRkZW5cIikuc2xpY2UoMCwgMykuc2xpZGVEb3duKCk7XHJcblx0XHR9KTtcclxuXHR9KTtcclxuXHJcblxyXG59KTtcclxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2pzL21haW4uanMiLCIndXNlIHN0cmljdCc7XG5cbnZhciBfdHlwZW9mID0gdHlwZW9mIFN5bWJvbCA9PT0gXCJmdW5jdGlvblwiICYmIHR5cGVvZiBTeW1ib2wuaXRlcmF0b3IgPT09IFwic3ltYm9sXCIgPyBmdW5jdGlvbiAob2JqKSB7IHJldHVybiB0eXBlb2Ygb2JqOyB9IDogZnVuY3Rpb24gKG9iaikgeyByZXR1cm4gb2JqICYmIHR5cGVvZiBTeW1ib2wgPT09IFwiZnVuY3Rpb25cIiAmJiBvYmouY29uc3RydWN0b3IgPT09IFN5bWJvbCAmJiBvYmogIT09IFN5bWJvbC5wcm90b3R5cGUgPyBcInN5bWJvbFwiIDogdHlwZW9mIG9iajsgfTtcblxuLyohXG4gKiBtb2RhbC12aWRlbyBWZXIuMS4wLjAgKGh0dHBzOi8vd3d3LmFwcGxlcGxlLmNvbSlcbiAqIENvcHlyaWdodCBhcHBsZXBsZSB8IE1JVCBMaWNlbnNlXG4gKlxuICovXG47KGZ1bmN0aW9uIHVtZChmYWN0b3J5KSB7XG5cdCd1c2Ugc3RyaWN0JztcblxuXHRpZiAodHlwZW9mIGRlZmluZSA9PT0gJ2Z1bmN0aW9uJyAmJiBkZWZpbmUuYW1kKSB7XG5cdFx0ZGVmaW5lKFsnanF1ZXJ5J10sIGZhY3RvcnkpO1xuXHR9IGVsc2UgaWYgKCh0eXBlb2YgZXhwb3J0cyA9PT0gJ3VuZGVmaW5lZCcgPyAndW5kZWZpbmVkJyA6IF90eXBlb2YoZXhwb3J0cykpID09PSAnb2JqZWN0Jykge1xuXHRcdG1vZHVsZS5leHBvcnRzID0gZmFjdG9yeShyZXF1aXJlKCdqcXVlcnknKSk7XG5cdH0gZWxzZSB7XG5cdFx0ZmFjdG9yeShqUXVlcnkpO1xuXHR9XG59KShmdW5jdGlvbiBtb2RhbFZpZGVvKCQpIHtcblxuXHR2YXIgZGVmYXVsdHMgPSB7XG5cdFx0Y2hhbm5lbDogJ3lvdXR1YmUnLFxuXHRcdHlvdXR1YmU6IHtcblx0XHRcdGF1dG9wbGF5OiAxLFxuXHRcdFx0Y2NfbG9hZF9wb2xpY3k6IDEsXG5cdFx0XHRjb2xvcjogbnVsbCxcblx0XHRcdGNvbnRyb2xzOiAxLFxuXHRcdFx0ZGlzYWJsZWtiOiAwLFxuXHRcdFx0ZW5hYmxlanNhcGk6IDAsXG5cdFx0XHRlbmQ6IG51bGwsXG5cdFx0XHRmczogMSxcblx0XHRcdGgxOiBudWxsLFxuXHRcdFx0aXZfbG9hZF9wb2xpY3k6IDEsXG5cdFx0XHRsaXN0OiBudWxsLFxuXHRcdFx0bGlzdFR5cGU6IG51bGwsXG5cdFx0XHRsb29wOiAwLFxuXHRcdFx0bW9kZXN0YnJhbmRpbmc6IG51bGwsXG5cdFx0XHRvcmlnaW46IG51bGwsXG5cdFx0XHRwbGF5bGlzdDogbnVsbCxcblx0XHRcdHBsYXlzaW5saW5lOiBudWxsLFxuXHRcdFx0cmVsOiAwLFxuXHRcdFx0c2hvd2luZm86IDEsXG5cdFx0XHRzdGFydDogMCxcblx0XHRcdHdtb2RlOiAndHJhbnNwYXJlbnQnLFxuXHRcdFx0dGhlbWU6ICdkYXJrJ1xuXHRcdH0sXG5cdFx0cmF0aW86ICcxNjo5Jyxcblx0XHR2aW1lbzoge1xuXHRcdFx0YXBpOiBmYWxzZSxcblx0XHRcdGF1dG9wYXVzZTogdHJ1ZSxcblx0XHRcdGF1dG9wbGF5OiB0cnVlLFxuXHRcdFx0YnlsaW5lOiB0cnVlLFxuXHRcdFx0Y2FsbGJhY2s6IG51bGwsXG5cdFx0XHRjb2xvcjogbnVsbCxcblx0XHRcdGhlaWdodDogbnVsbCxcblx0XHRcdGxvb3A6IGZhbHNlLFxuXHRcdFx0bWF4aGVpZ2h0OiBudWxsLFxuXHRcdFx0bWF4d2lkdGg6IG51bGwsXG5cdFx0XHRwbGF5ZXJfaWQ6IG51bGwsXG5cdFx0XHRwb3J0cmFpdDogdHJ1ZSxcblx0XHRcdHRpdGxlOiB0cnVlLFxuXHRcdFx0d2lkdGg6IG51bGwsXG5cdFx0XHR4aHRtbDogZmFsc2Vcblx0XHR9LFxuXHRcdGFsbG93RnVsbFNjcmVlbjogdHJ1ZSxcblx0XHRhbmltYXRpb25TcGVlZDogMzAwLFxuXHRcdGNsYXNzTmFtZXM6IHtcblx0XHRcdG1vZGFsVmlkZW86ICdtb2RhbC12aWRlbycsXG5cdFx0XHRtb2RhbFZpZGVvQ2xvc2U6ICdtb2RhbC12aWRlby1jbG9zZScsXG5cdFx0XHRtb2RhbFZpZGVvQm9keTogJ21vZGFsLXZpZGVvLWJvZHknLFxuXHRcdFx0bW9kYWxWaWRlb0lubmVyOiAnbW9kYWwtdmlkZW8taW5uZXInLFxuXHRcdFx0bW9kYWxWaWRlb0lmcmFtZVdyYXA6ICdtb2RhbC12aWRlby1tb3ZpZS13cmFwJyxcblx0XHRcdG1vZGFsVmlkZW9DbG9zZUJ0bjogJ21vZGFsLXZpZGVvLWNsb3NlLWJ0bidcblx0XHR9LFxuXHRcdGFyaWE6IHtcblx0XHRcdG9wZW5NZXNzYWdlOiAnWW91IGp1c3Qgb3Blbm5lZCB0aGUgbW9kYWwgdmlkZW8nLFxuXHRcdFx0ZGlzbWlzc0J0bk1lc3NhZ2U6ICdDbG9zZSB0aGUgbW9kYWwgYnkgY2xpY2tpbmcgaGVyZSdcblx0XHR9XG5cdH07XG5cblx0ZnVuY3Rpb24gZ2V0UXVlcnlTdHJpbmcob2JqKSB7XG5cdFx0dmFyIHVybCA9IFwiXCI7XG5cdFx0Zm9yICh2YXIga2V5IGluIG9iaikge1xuXHRcdFx0aWYgKG9iai5oYXNPd25Qcm9wZXJ0eShrZXkpKSB7XG5cdFx0XHRcdGlmIChvYmpba2V5XSAhPT0gbnVsbCkge1xuXHRcdFx0XHRcdHVybCArPSBrZXkgKyAnPScgKyBvYmpba2V5XSArICcmJztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gdXJsLnN1YnN0cigwLCB1cmwubGVuZ3RoIC0gMSk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRZb3V0dWJlVXJsKHlvdXR1YmUsIHZpZGVvSWQpIHtcblx0XHR2YXIgcXVlcnkgPSBnZXRRdWVyeVN0cmluZyh5b3V0dWJlKTtcblx0XHRyZXR1cm4gJy8vd3d3LnlvdXR1YmUuY29tL2VtYmVkLycgKyB2aWRlb0lkICsgJz8nICsgcXVlcnk7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRWaW1lb1VybCh2aW1lbywgdmlkZW9JZCkge1xuXHRcdHZhciBxdWVyeSA9IGdldFF1ZXJ5U3RyaW5nKHZpbWVvKTtcblx0XHRyZXR1cm4gJy8vcGxheWVyLnZpbWVvLmNvbS92aWRlby8nICsgdmlkZW9JZCArICc/JyArIHF1ZXJ5O1xuXHR9XG5cblx0ZnVuY3Rpb24gZ2V0VmlkZW9Vcmwob3B0LCB2aWRlb0lkKSB7XG5cdFx0aWYgKG9wdC5jaGFubmVsID09PSAneW91dHViZScpIHtcblx0XHRcdHJldHVybiBnZXRZb3V0dWJlVXJsKG9wdC55b3V0dWJlLCB2aWRlb0lkKTtcblx0XHR9IGVsc2UgaWYgKG9wdC5jaGFubmVsID09PSAndmltZW8nKSB7XG5cdFx0XHRyZXR1cm4gZ2V0VmltZW9Vcmwob3B0LnZpbWVvLCB2aWRlb0lkKTtcblx0XHR9XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRQYWRkaW5nKHJhdGlvKSB7XG5cdFx0dmFyIGFyciA9IHJhdGlvLnNwbGl0KCc6Jyk7XG5cdFx0dmFyIHdpZHRoID0gTnVtYmVyKGFyclswXSk7XG5cdFx0dmFyIGhlaWdodCA9IE51bWJlcihhcnJbMV0pO1xuXHRcdHZhciBwYWRkaW5nID0gaGVpZ2h0ICogMTAwIC8gd2lkdGg7XG5cdFx0cmV0dXJuIHBhZGRpbmcgKyAnJSc7XG5cdH1cblxuXHRmdW5jdGlvbiBnZXRIdG1sKG9wdCwgdmlkZW9JZCkge1xuXHRcdHZhciB2aWRlb1VybCA9IGdldFZpZGVvVXJsKG9wdCwgdmlkZW9JZCk7XG5cdFx0dmFyIHBhZGRpbmcgPSBnZXRQYWRkaW5nKG9wdC5yYXRpbyk7XG5cdFx0cmV0dXJuICdcXG5cXHRcXHRcXHRcXHRcXHQ8ZGl2IGNsYXNzPVwiJyArIG9wdC5jbGFzc05hbWVzLm1vZGFsVmlkZW8gKyAnXCIgdGFiaW5kZXg9XCItMVwiIHJvbGU9XCJkaWFsb2dcIiBhcmlhLWxhYmVsPVwiJyArIG9wdC5hcmlhLm9wZW5NZXNzYWdlICsgJ1wiPlxcblxcdFxcdFxcdFxcdFxcdFxcdDxkaXYgY2xhc3M9XCInICsgb3B0LmNsYXNzTmFtZXMubW9kYWxWaWRlb0JvZHkgKyAnXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cIicgKyBvcHQuY2xhc3NOYW1lcy5tb2RhbFZpZGVvSW5uZXIgKyAnXCI+XFxuXFx0XFx0XFx0XFx0XFx0XFx0XFx0XFx0PGRpdiBjbGFzcz1cIicgKyBvcHQuY2xhc3NOYW1lcy5tb2RhbFZpZGVvSWZyYW1lV3JhcCArICdcIiBzdHlsZT1cInBhZGRpbmctYm90dG9tOicgKyBwYWRkaW5nICsgJ1wiPlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDxidXR0b24gY2xhc3M9XCInICsgb3B0LmNsYXNzTmFtZXMubW9kYWxWaWRlb0Nsb3NlQnRuICsgJyBqcy1tb2RhbC12aWRlby1kaXNtaXNzLWJ0blwiIGFyaWEtbGFiZWw9XCInICsgb3B0LmFyaWEuZGlzbWlzc0J0bk1lc3NhZ2UgKyAnXCIvPlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDxpZnJhbWUgd2lkdGg9XFwnNDYwXFwnIGhlaWdodD1cXCcyMzBcXCcgc3JjPVwiJyArIHZpZGVvVXJsICsgJ1wiIGZyYW1lYm9yZGVyPVxcJzBcXCcgYWxsb3dmdWxsc2NyZWVuPScgKyBvcHQuYWxsb3dGdWxsU2NyZWVuICsgJyB0YWJpbmRleD1cIi0xXCIvPlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdFxcdFxcdDwvZGl2PlxcblxcdFxcdFxcdCc7XG5cdH1cblxuXHQkLmZuLm1vZGFsVmlkZW8gPSBmdW5jdGlvbiAob3B0KSB7XG5cdFx0b3B0ID0gJC5leHRlbmQoe30sIGRlZmF1bHRzLCBvcHQpO1xuXHRcdCQodGhpcykuZWFjaChmdW5jdGlvbiAoKSB7XG5cdFx0XHRpZiAoISQodGhpcykuZGF0YSgndmlkZW8taWQnKSkge1xuXHRcdFx0XHQkKHRoaXMpLmRhdGEoJ3ZpZGVvLWlkJywgb3B0LnZpZGVvSWQpO1xuXHRcdFx0fVxuXHRcdH0pO1xuXHRcdCQodGhpcykuY2xpY2soZnVuY3Rpb24gKCkge1xuXHRcdFx0dmFyICRtZSA9ICQodGhpcyk7XG5cdFx0XHR2YXIgdmlkZW9JZCA9ICRtZS5kYXRhKCd2aWRlby1pZCcpO1xuXHRcdFx0dmFyIGh0bWwgPSBnZXRIdG1sKG9wdCwgdmlkZW9JZCk7XG5cdFx0XHR2YXIgJG1vZGFsID0gJChodG1sKTtcblx0XHRcdHZhciAkYnRuID0gJG1vZGFsLmZpbmQoJy5qcy1tb2RhbC12aWRlby1kaXNtaXNzLWJ0bicpO1xuXHRcdFx0dmFyIHNwZWVkID0gb3B0LmFuaW1hdGlvblNwZWVkO1xuXHRcdFx0JCgnYm9keScpLmFwcGVuZCgkbW9kYWwpO1xuXHRcdFx0JG1vZGFsLmZvY3VzKCk7XG5cdFx0XHQkbW9kYWwub24oJ2NsaWNrJywgZnVuY3Rpb24gKCkge1xuXHRcdFx0XHR2YXIgJHNlbGYgPSAkKHRoaXMpO1xuXHRcdFx0XHQkc2VsZi5hZGRDbGFzcyhvcHQuY2xhc3NOYW1lcy5tb2RhbFZpZGVvQ2xvc2UpO1xuXHRcdFx0XHQkc2VsZi5vZmYoJ2NsaWNrJyk7XG5cdFx0XHRcdCRzZWxmLm9mZigna2V5ZG93bicpO1xuXHRcdFx0XHQkYnRuLm9mZignY2xpY2snKTtcblx0XHRcdFx0c2V0VGltZW91dChmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdFx0JHNlbGYucmVtb3ZlKCk7XG5cdFx0XHRcdFx0JG1lLmZvY3VzKCk7XG5cdFx0XHRcdH0sIHNwZWVkKTtcblx0XHRcdH0pO1xuXHRcdFx0JGJ0bi5vbignY2xpY2snLCBmdW5jdGlvbiAoKSB7XG5cdFx0XHRcdCRtb2RhbC50cmlnZ2VyKCdjbGljaycpO1xuXHRcdFx0fSk7XG5cdFx0XHQkbW9kYWwub24oJ2tleWRvd24nLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRpZiAoZS53aGljaCA9PT0gOSkge1xuXHRcdFx0XHRcdGUucHJldmVudERlZmF1bHQoKTtcblx0XHRcdFx0XHRpZiAoJG1vZGFsLmlzKCc6Zm9jdXMnKSkge1xuXHRcdFx0XHRcdFx0JGJ0bi5mb2N1cygpO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHQkbW9kYWwuYXR0cignYXJpYS1sYWJlbCcsICcnKTtcblx0XHRcdFx0XHRcdCRtb2RhbC5mb2N1cygpO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSk7XG5cdFx0fSk7XG5cdH07XG59KTtcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9tb2RhbC12aWRlby5qcyIsIihmdW5jdGlvbiAoJCkge1xyXG5cdFwidXNlIHN0cmljdFwiLFxyXG5cdC8vTmljZSBTZWxlY3RcclxuXHQkKGRvY3VtZW50KS5yZWFkeShmdW5jdGlvbiAoKSB7XHJcblx0XHQkKCdzZWxlY3QnKS5uaWNlU2VsZWN0KCk7XHJcblx0fSk7XHJcblx0XHJcbn0oalF1ZXJ5KSk7XHJcblxuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9uaWNlc2VsZWN0LWFjdGl2YXRlLmpzIiwiLyoqXG4gKiBPd2wgQ2Fyb3VzZWwgdjIuMi4xXG4gKiBDb3B5cmlnaHQgMjAxMy0yMDE3IERhdmlkIERldXRzY2hcbiAqIExpY2Vuc2VkIHVuZGVyICAoKVxuICovXG4hZnVuY3Rpb24oYSxiLGMsZCl7ZnVuY3Rpb24gZShiLGMpe3RoaXMuc2V0dGluZ3M9bnVsbCx0aGlzLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyxjKSx0aGlzLiRlbGVtZW50PWEoYiksdGhpcy5faGFuZGxlcnM9e30sdGhpcy5fcGx1Z2lucz17fSx0aGlzLl9zdXByZXNzPXt9LHRoaXMuX2N1cnJlbnQ9bnVsbCx0aGlzLl9zcGVlZD1udWxsLHRoaXMuX2Nvb3JkaW5hdGVzPVtdLHRoaXMuX2JyZWFrcG9pbnQ9bnVsbCx0aGlzLl93aWR0aD1udWxsLHRoaXMuX2l0ZW1zPVtdLHRoaXMuX2Nsb25lcz1bXSx0aGlzLl9tZXJnZXJzPVtdLHRoaXMuX3dpZHRocz1bXSx0aGlzLl9pbnZhbGlkYXRlZD17fSx0aGlzLl9waXBlPVtdLHRoaXMuX2RyYWc9e3RpbWU6bnVsbCx0YXJnZXQ6bnVsbCxwb2ludGVyOm51bGwsc3RhZ2U6e3N0YXJ0Om51bGwsY3VycmVudDpudWxsfSxkaXJlY3Rpb246bnVsbH0sdGhpcy5fc3RhdGVzPXtjdXJyZW50Ont9LHRhZ3M6e2luaXRpYWxpemluZzpbXCJidXN5XCJdLGFuaW1hdGluZzpbXCJidXN5XCJdLGRyYWdnaW5nOltcImludGVyYWN0aW5nXCJdfX0sYS5lYWNoKFtcIm9uUmVzaXplXCIsXCJvblRocm90dGxlZFJlc2l6ZVwiXSxhLnByb3h5KGZ1bmN0aW9uKGIsYyl7dGhpcy5faGFuZGxlcnNbY109YS5wcm94eSh0aGlzW2NdLHRoaXMpfSx0aGlzKSksYS5lYWNoKGUuUGx1Z2lucyxhLnByb3h5KGZ1bmN0aW9uKGEsYil7dGhpcy5fcGx1Z2luc1thLmNoYXJBdCgwKS50b0xvd2VyQ2FzZSgpK2Euc2xpY2UoMSldPW5ldyBiKHRoaXMpfSx0aGlzKSksYS5lYWNoKGUuV29ya2VycyxhLnByb3h5KGZ1bmN0aW9uKGIsYyl7dGhpcy5fcGlwZS5wdXNoKHtmaWx0ZXI6Yy5maWx0ZXIscnVuOmEucHJveHkoYy5ydW4sdGhpcyl9KX0sdGhpcykpLHRoaXMuc2V0dXAoKSx0aGlzLmluaXRpYWxpemUoKX1lLkRlZmF1bHRzPXtpdGVtczozLGxvb3A6ITEsY2VudGVyOiExLHJld2luZDohMSxtb3VzZURyYWc6ITAsdG91Y2hEcmFnOiEwLHB1bGxEcmFnOiEwLGZyZWVEcmFnOiExLG1hcmdpbjowLHN0YWdlUGFkZGluZzowLG1lcmdlOiExLG1lcmdlRml0OiEwLGF1dG9XaWR0aDohMSxzdGFydFBvc2l0aW9uOjAscnRsOiExLHNtYXJ0U3BlZWQ6MjUwLGZsdWlkU3BlZWQ6ITEsZHJhZ0VuZFNwZWVkOiExLHJlc3BvbnNpdmU6e30scmVzcG9uc2l2ZVJlZnJlc2hSYXRlOjIwMCxyZXNwb25zaXZlQmFzZUVsZW1lbnQ6YixmYWxsYmFja0Vhc2luZzpcInN3aW5nXCIsaW5mbzohMSxuZXN0ZWRJdGVtU2VsZWN0b3I6ITEsaXRlbUVsZW1lbnQ6XCJkaXZcIixzdGFnZUVsZW1lbnQ6XCJkaXZcIixyZWZyZXNoQ2xhc3M6XCJvd2wtcmVmcmVzaFwiLGxvYWRlZENsYXNzOlwib3dsLWxvYWRlZFwiLGxvYWRpbmdDbGFzczpcIm93bC1sb2FkaW5nXCIscnRsQ2xhc3M6XCJvd2wtcnRsXCIscmVzcG9uc2l2ZUNsYXNzOlwib3dsLXJlc3BvbnNpdmVcIixkcmFnQ2xhc3M6XCJvd2wtZHJhZ1wiLGl0ZW1DbGFzczpcIm93bC1pdGVtXCIsc3RhZ2VDbGFzczpcIm93bC1zdGFnZVwiLHN0YWdlT3V0ZXJDbGFzczpcIm93bC1zdGFnZS1vdXRlclwiLGdyYWJDbGFzczpcIm93bC1ncmFiXCJ9LGUuV2lkdGg9e0RlZmF1bHQ6XCJkZWZhdWx0XCIsSW5uZXI6XCJpbm5lclwiLE91dGVyOlwib3V0ZXJcIn0sZS5UeXBlPXtFdmVudDpcImV2ZW50XCIsU3RhdGU6XCJzdGF0ZVwifSxlLlBsdWdpbnM9e30sZS5Xb3JrZXJzPVt7ZmlsdGVyOltcIndpZHRoXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt0aGlzLl93aWR0aD10aGlzLiRlbGVtZW50LndpZHRoKCl9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKGEpe2EuY3VycmVudD10aGlzLl9pdGVtcyYmdGhpcy5faXRlbXNbdGhpcy5yZWxhdGl2ZSh0aGlzLl9jdXJyZW50KV19fSx7ZmlsdGVyOltcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt0aGlzLiRzdGFnZS5jaGlsZHJlbihcIi5jbG9uZWRcIikucmVtb3ZlKCl9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKGEpe3ZhciBiPXRoaXMuc2V0dGluZ3MubWFyZ2lufHxcIlwiLGM9IXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLGQ9dGhpcy5zZXR0aW5ncy5ydGwsZT17d2lkdGg6XCJhdXRvXCIsXCJtYXJnaW4tbGVmdFwiOmQ/YjpcIlwiLFwibWFyZ2luLXJpZ2h0XCI6ZD9cIlwiOmJ9OyFjJiZ0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNzcyhlKSxhLmNzcz1lfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbihhKXt2YXIgYj0odGhpcy53aWR0aCgpL3RoaXMuc2V0dGluZ3MuaXRlbXMpLnRvRml4ZWQoMyktdGhpcy5zZXR0aW5ncy5tYXJnaW4sYz1udWxsLGQ9dGhpcy5faXRlbXMubGVuZ3RoLGU9IXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLGY9W107Zm9yKGEuaXRlbXM9e21lcmdlOiExLHdpZHRoOmJ9O2QtLTspYz10aGlzLl9tZXJnZXJzW2RdLGM9dGhpcy5zZXR0aW5ncy5tZXJnZUZpdCYmTWF0aC5taW4oYyx0aGlzLnNldHRpbmdzLml0ZW1zKXx8YyxhLml0ZW1zLm1lcmdlPWM+MXx8YS5pdGVtcy5tZXJnZSxmW2RdPWU/YipjOnRoaXMuX2l0ZW1zW2RdLndpZHRoKCk7dGhpcy5fd2lkdGhzPWZ9fSx7ZmlsdGVyOltcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oKXt2YXIgYj1bXSxjPXRoaXMuX2l0ZW1zLGQ9dGhpcy5zZXR0aW5ncyxlPU1hdGgubWF4KDIqZC5pdGVtcyw0KSxmPTIqTWF0aC5jZWlsKGMubGVuZ3RoLzIpLGc9ZC5sb29wJiZjLmxlbmd0aD9kLnJld2luZD9lOk1hdGgubWF4KGUsZik6MCxoPVwiXCIsaT1cIlwiO2ZvcihnLz0yO2ctLTspYi5wdXNoKHRoaXMubm9ybWFsaXplKGIubGVuZ3RoLzIsITApKSxoKz1jW2JbYi5sZW5ndGgtMV1dWzBdLm91dGVySFRNTCxiLnB1c2godGhpcy5ub3JtYWxpemUoYy5sZW5ndGgtMS0oYi5sZW5ndGgtMSkvMiwhMCkpLGk9Y1tiW2IubGVuZ3RoLTFdXVswXS5vdXRlckhUTUwraTt0aGlzLl9jbG9uZXM9YixhKGgpLmFkZENsYXNzKFwiY2xvbmVkXCIpLmFwcGVuZFRvKHRoaXMuJHN0YWdlKSxhKGkpLmFkZENsYXNzKFwiY2xvbmVkXCIpLnByZXBlbmRUbyh0aGlzLiRzdGFnZSl9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJpdGVtc1wiLFwic2V0dGluZ3NcIl0scnVuOmZ1bmN0aW9uKCl7Zm9yKHZhciBhPXRoaXMuc2V0dGluZ3MucnRsPzE6LTEsYj10aGlzLl9jbG9uZXMubGVuZ3RoK3RoaXMuX2l0ZW1zLmxlbmd0aCxjPS0xLGQ9MCxlPTAsZj1bXTsrK2M8YjspZD1mW2MtMV18fDAsZT10aGlzLl93aWR0aHNbdGhpcy5yZWxhdGl2ZShjKV0rdGhpcy5zZXR0aW5ncy5tYXJnaW4sZi5wdXNoKGQrZSphKTt0aGlzLl9jb29yZGluYXRlcz1mfX0se2ZpbHRlcjpbXCJ3aWR0aFwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbigpe3ZhciBhPXRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nLGI9dGhpcy5fY29vcmRpbmF0ZXMsYz17d2lkdGg6TWF0aC5jZWlsKE1hdGguYWJzKGJbYi5sZW5ndGgtMV0pKSsyKmEsXCJwYWRkaW5nLWxlZnRcIjphfHxcIlwiLFwicGFkZGluZy1yaWdodFwiOmF8fFwiXCJ9O3RoaXMuJHN0YWdlLmNzcyhjKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oYSl7dmFyIGI9dGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoLGM9IXRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoLGQ9dGhpcy4kc3RhZ2UuY2hpbGRyZW4oKTtpZihjJiZhLml0ZW1zLm1lcmdlKWZvcig7Yi0tOylhLmNzcy53aWR0aD10aGlzLl93aWR0aHNbdGhpcy5yZWxhdGl2ZShiKV0sZC5lcShiKS5jc3MoYS5jc3MpO2Vsc2UgYyYmKGEuY3NzLndpZHRoPWEuaXRlbXMud2lkdGgsZC5jc3MoYS5jc3MpKX19LHtmaWx0ZXI6W1wiaXRlbXNcIl0scnVuOmZ1bmN0aW9uKCl7dGhpcy5fY29vcmRpbmF0ZXMubGVuZ3RoPDEmJnRoaXMuJHN0YWdlLnJlbW92ZUF0dHIoXCJzdHlsZVwiKX19LHtmaWx0ZXI6W1wid2lkdGhcIixcIml0ZW1zXCIsXCJzZXR0aW5nc1wiXSxydW46ZnVuY3Rpb24oYSl7YS5jdXJyZW50PWEuY3VycmVudD90aGlzLiRzdGFnZS5jaGlsZHJlbigpLmluZGV4KGEuY3VycmVudCk6MCxhLmN1cnJlbnQ9TWF0aC5tYXgodGhpcy5taW5pbXVtKCksTWF0aC5taW4odGhpcy5tYXhpbXVtKCksYS5jdXJyZW50KSksdGhpcy5yZXNldChhLmN1cnJlbnQpfX0se2ZpbHRlcjpbXCJwb3NpdGlvblwiXSxydW46ZnVuY3Rpb24oKXt0aGlzLmFuaW1hdGUodGhpcy5jb29yZGluYXRlcyh0aGlzLl9jdXJyZW50KSl9fSx7ZmlsdGVyOltcIndpZHRoXCIsXCJwb3NpdGlvblwiLFwiaXRlbXNcIixcInNldHRpbmdzXCJdLHJ1bjpmdW5jdGlvbigpe3ZhciBhLGIsYyxkLGU9dGhpcy5zZXR0aW5ncy5ydGw/MTotMSxmPTIqdGhpcy5zZXR0aW5ncy5zdGFnZVBhZGRpbmcsZz10aGlzLmNvb3JkaW5hdGVzKHRoaXMuY3VycmVudCgpKStmLGg9Zyt0aGlzLndpZHRoKCkqZSxpPVtdO2ZvcihjPTAsZD10aGlzLl9jb29yZGluYXRlcy5sZW5ndGg7YzxkO2MrKylhPXRoaXMuX2Nvb3JkaW5hdGVzW2MtMV18fDAsYj1NYXRoLmFicyh0aGlzLl9jb29yZGluYXRlc1tjXSkrZiplLCh0aGlzLm9wKGEsXCI8PVwiLGcpJiZ0aGlzLm9wKGEsXCI+XCIsaCl8fHRoaXMub3AoYixcIjxcIixnKSYmdGhpcy5vcChiLFwiPlwiLGgpKSYmaS5wdXNoKGMpO3RoaXMuJHN0YWdlLmNoaWxkcmVuKFwiLmFjdGl2ZVwiKS5yZW1vdmVDbGFzcyhcImFjdGl2ZVwiKSx0aGlzLiRzdGFnZS5jaGlsZHJlbihcIjplcShcIitpLmpvaW4oXCIpLCA6ZXEoXCIpK1wiKVwiKS5hZGRDbGFzcyhcImFjdGl2ZVwiKSx0aGlzLnNldHRpbmdzLmNlbnRlciYmKHRoaXMuJHN0YWdlLmNoaWxkcmVuKFwiLmNlbnRlclwiKS5yZW1vdmVDbGFzcyhcImNlbnRlclwiKSx0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMuY3VycmVudCgpKS5hZGRDbGFzcyhcImNlbnRlclwiKSl9fV0sZS5wcm90b3R5cGUuaW5pdGlhbGl6ZT1mdW5jdGlvbigpe2lmKHRoaXMuZW50ZXIoXCJpbml0aWFsaXppbmdcIiksdGhpcy50cmlnZ2VyKFwiaW5pdGlhbGl6ZVwiKSx0aGlzLiRlbGVtZW50LnRvZ2dsZUNsYXNzKHRoaXMuc2V0dGluZ3MucnRsQ2xhc3MsdGhpcy5zZXR0aW5ncy5ydGwpLHRoaXMuc2V0dGluZ3MuYXV0b1dpZHRoJiYhdGhpcy5pcyhcInByZS1sb2FkaW5nXCIpKXt2YXIgYixjLGU7Yj10aGlzLiRlbGVtZW50LmZpbmQoXCJpbWdcIiksYz10aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3Rvcj9cIi5cIit0aGlzLnNldHRpbmdzLm5lc3RlZEl0ZW1TZWxlY3RvcjpkLGU9dGhpcy4kZWxlbWVudC5jaGlsZHJlbihjKS53aWR0aCgpLGIubGVuZ3RoJiZlPD0wJiZ0aGlzLnByZWxvYWRBdXRvV2lkdGhJbWFnZXMoYil9dGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMubG9hZGluZ0NsYXNzKSx0aGlzLiRzdGFnZT1hKFwiPFwiK3RoaXMuc2V0dGluZ3Muc3RhZ2VFbGVtZW50KycgY2xhc3M9XCInK3RoaXMuc2V0dGluZ3Muc3RhZ2VDbGFzcysnXCIvPicpLndyYXAoJzxkaXYgY2xhc3M9XCInK3RoaXMuc2V0dGluZ3Muc3RhZ2VPdXRlckNsYXNzKydcIi8+JyksdGhpcy4kZWxlbWVudC5hcHBlbmQodGhpcy4kc3RhZ2UucGFyZW50KCkpLHRoaXMucmVwbGFjZSh0aGlzLiRlbGVtZW50LmNoaWxkcmVuKCkubm90KHRoaXMuJHN0YWdlLnBhcmVudCgpKSksdGhpcy4kZWxlbWVudC5pcyhcIjp2aXNpYmxlXCIpP3RoaXMucmVmcmVzaCgpOnRoaXMuaW52YWxpZGF0ZShcIndpZHRoXCIpLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRpbmdDbGFzcykuYWRkQ2xhc3ModGhpcy5vcHRpb25zLmxvYWRlZENsYXNzKSx0aGlzLnJlZ2lzdGVyRXZlbnRIYW5kbGVycygpLHRoaXMubGVhdmUoXCJpbml0aWFsaXppbmdcIiksdGhpcy50cmlnZ2VyKFwiaW5pdGlhbGl6ZWRcIil9LGUucHJvdG90eXBlLnNldHVwPWZ1bmN0aW9uKCl7dmFyIGI9dGhpcy52aWV3cG9ydCgpLGM9dGhpcy5vcHRpb25zLnJlc3BvbnNpdmUsZD0tMSxlPW51bGw7Yz8oYS5lYWNoKGMsZnVuY3Rpb24oYSl7YTw9YiYmYT5kJiYoZD1OdW1iZXIoYSkpfSksZT1hLmV4dGVuZCh7fSx0aGlzLm9wdGlvbnMsY1tkXSksXCJmdW5jdGlvblwiPT10eXBlb2YgZS5zdGFnZVBhZGRpbmcmJihlLnN0YWdlUGFkZGluZz1lLnN0YWdlUGFkZGluZygpKSxkZWxldGUgZS5yZXNwb25zaXZlLGUucmVzcG9uc2l2ZUNsYXNzJiZ0aGlzLiRlbGVtZW50LmF0dHIoXCJjbGFzc1wiLHRoaXMuJGVsZW1lbnQuYXR0cihcImNsYXNzXCIpLnJlcGxhY2UobmV3IFJlZ0V4cChcIihcIit0aGlzLm9wdGlvbnMucmVzcG9uc2l2ZUNsYXNzK1wiLSlcXFxcUytcXFxcc1wiLFwiZ1wiKSxcIiQxXCIrZCkpKTplPWEuZXh0ZW5kKHt9LHRoaXMub3B0aW9ucyksdGhpcy50cmlnZ2VyKFwiY2hhbmdlXCIse3Byb3BlcnR5OntuYW1lOlwic2V0dGluZ3NcIix2YWx1ZTplfX0pLHRoaXMuX2JyZWFrcG9pbnQ9ZCx0aGlzLnNldHRpbmdzPWUsdGhpcy5pbnZhbGlkYXRlKFwic2V0dGluZ3NcIiksdGhpcy50cmlnZ2VyKFwiY2hhbmdlZFwiLHtwcm9wZXJ0eTp7bmFtZTpcInNldHRpbmdzXCIsdmFsdWU6dGhpcy5zZXR0aW5nc319KX0sZS5wcm90b3R5cGUub3B0aW9uc0xvZ2ljPWZ1bmN0aW9uKCl7dGhpcy5zZXR0aW5ncy5hdXRvV2lkdGgmJih0aGlzLnNldHRpbmdzLnN0YWdlUGFkZGluZz0hMSx0aGlzLnNldHRpbmdzLm1lcmdlPSExKX0sZS5wcm90b3R5cGUucHJlcGFyZT1mdW5jdGlvbihiKXt2YXIgYz10aGlzLnRyaWdnZXIoXCJwcmVwYXJlXCIse2NvbnRlbnQ6Yn0pO3JldHVybiBjLmRhdGF8fChjLmRhdGE9YShcIjxcIit0aGlzLnNldHRpbmdzLml0ZW1FbGVtZW50K1wiLz5cIikuYWRkQ2xhc3ModGhpcy5vcHRpb25zLml0ZW1DbGFzcykuYXBwZW5kKGIpKSx0aGlzLnRyaWdnZXIoXCJwcmVwYXJlZFwiLHtjb250ZW50OmMuZGF0YX0pLGMuZGF0YX0sZS5wcm90b3R5cGUudXBkYXRlPWZ1bmN0aW9uKCl7Zm9yKHZhciBiPTAsYz10aGlzLl9waXBlLmxlbmd0aCxkPWEucHJveHkoZnVuY3Rpb24oYSl7cmV0dXJuIHRoaXNbYV19LHRoaXMuX2ludmFsaWRhdGVkKSxlPXt9O2I8YzspKHRoaXMuX2ludmFsaWRhdGVkLmFsbHx8YS5ncmVwKHRoaXMuX3BpcGVbYl0uZmlsdGVyLGQpLmxlbmd0aD4wKSYmdGhpcy5fcGlwZVtiXS5ydW4oZSksYisrO3RoaXMuX2ludmFsaWRhdGVkPXt9LCF0aGlzLmlzKFwidmFsaWRcIikmJnRoaXMuZW50ZXIoXCJ2YWxpZFwiKX0sZS5wcm90b3R5cGUud2lkdGg9ZnVuY3Rpb24oYSl7c3dpdGNoKGE9YXx8ZS5XaWR0aC5EZWZhdWx0KXtjYXNlIGUuV2lkdGguSW5uZXI6Y2FzZSBlLldpZHRoLk91dGVyOnJldHVybiB0aGlzLl93aWR0aDtkZWZhdWx0OnJldHVybiB0aGlzLl93aWR0aC0yKnRoaXMuc2V0dGluZ3Muc3RhZ2VQYWRkaW5nK3RoaXMuc2V0dGluZ3MubWFyZ2lufX0sZS5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbigpe3RoaXMuZW50ZXIoXCJyZWZyZXNoaW5nXCIpLHRoaXMudHJpZ2dlcihcInJlZnJlc2hcIiksdGhpcy5zZXR1cCgpLHRoaXMub3B0aW9uc0xvZ2ljKCksdGhpcy4kZWxlbWVudC5hZGRDbGFzcyh0aGlzLm9wdGlvbnMucmVmcmVzaENsYXNzKSx0aGlzLnVwZGF0ZSgpLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJlZnJlc2hDbGFzcyksdGhpcy5sZWF2ZShcInJlZnJlc2hpbmdcIiksdGhpcy50cmlnZ2VyKFwicmVmcmVzaGVkXCIpfSxlLnByb3RvdHlwZS5vblRocm90dGxlZFJlc2l6ZT1mdW5jdGlvbigpe2IuY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZXIpLHRoaXMucmVzaXplVGltZXI9Yi5zZXRUaW1lb3V0KHRoaXMuX2hhbmRsZXJzLm9uUmVzaXplLHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZVJlZnJlc2hSYXRlKX0sZS5wcm90b3R5cGUub25SZXNpemU9ZnVuY3Rpb24oKXtyZXR1cm4hIXRoaXMuX2l0ZW1zLmxlbmd0aCYmKHRoaXMuX3dpZHRoIT09dGhpcy4kZWxlbWVudC53aWR0aCgpJiYoISF0aGlzLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIikmJih0aGlzLmVudGVyKFwicmVzaXppbmdcIiksdGhpcy50cmlnZ2VyKFwicmVzaXplXCIpLmlzRGVmYXVsdFByZXZlbnRlZCgpPyh0aGlzLmxlYXZlKFwicmVzaXppbmdcIiksITEpOih0aGlzLmludmFsaWRhdGUoXCJ3aWR0aFwiKSx0aGlzLnJlZnJlc2goKSx0aGlzLmxlYXZlKFwicmVzaXppbmdcIiksdm9pZCB0aGlzLnRyaWdnZXIoXCJyZXNpemVkXCIpKSkpKX0sZS5wcm90b3R5cGUucmVnaXN0ZXJFdmVudEhhbmRsZXJzPWZ1bmN0aW9uKCl7YS5zdXBwb3J0LnRyYW5zaXRpb24mJnRoaXMuJHN0YWdlLm9uKGEuc3VwcG9ydC50cmFuc2l0aW9uLmVuZCtcIi5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vblRyYW5zaXRpb25FbmQsdGhpcykpLHRoaXMuc2V0dGluZ3MucmVzcG9uc2l2ZSE9PSExJiZ0aGlzLm9uKGIsXCJyZXNpemVcIix0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSksdGhpcy5zZXR0aW5ncy5tb3VzZURyYWcmJih0aGlzLiRlbGVtZW50LmFkZENsYXNzKHRoaXMub3B0aW9ucy5kcmFnQ2xhc3MpLHRoaXMuJHN0YWdlLm9uKFwibW91c2Vkb3duLm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uRHJhZ1N0YXJ0LHRoaXMpKSx0aGlzLiRzdGFnZS5vbihcImRyYWdzdGFydC5vd2wuY29yZSBzZWxlY3RzdGFydC5vd2wuY29yZVwiLGZ1bmN0aW9uKCl7cmV0dXJuITF9KSksdGhpcy5zZXR0aW5ncy50b3VjaERyYWcmJih0aGlzLiRzdGFnZS5vbihcInRvdWNoc3RhcnQub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25EcmFnU3RhcnQsdGhpcykpLHRoaXMuJHN0YWdlLm9uKFwidG91Y2hjYW5jZWwub3dsLmNvcmVcIixhLnByb3h5KHRoaXMub25EcmFnRW5kLHRoaXMpKSl9LGUucHJvdG90eXBlLm9uRHJhZ1N0YXJ0PWZ1bmN0aW9uKGIpe3ZhciBkPW51bGw7MyE9PWIud2hpY2gmJihhLnN1cHBvcnQudHJhbnNmb3JtPyhkPXRoaXMuJHN0YWdlLmNzcyhcInRyYW5zZm9ybVwiKS5yZXBsYWNlKC8uKlxcKHxcXCl8IC9nLFwiXCIpLnNwbGl0KFwiLFwiKSxkPXt4OmRbMTY9PT1kLmxlbmd0aD8xMjo0XSx5OmRbMTY9PT1kLmxlbmd0aD8xMzo1XX0pOihkPXRoaXMuJHN0YWdlLnBvc2l0aW9uKCksZD17eDp0aGlzLnNldHRpbmdzLnJ0bD9kLmxlZnQrdGhpcy4kc3RhZ2Uud2lkdGgoKS10aGlzLndpZHRoKCkrdGhpcy5zZXR0aW5ncy5tYXJnaW46ZC5sZWZ0LHk6ZC50b3B9KSx0aGlzLmlzKFwiYW5pbWF0aW5nXCIpJiYoYS5zdXBwb3J0LnRyYW5zZm9ybT90aGlzLmFuaW1hdGUoZC54KTp0aGlzLiRzdGFnZS5zdG9wKCksdGhpcy5pbnZhbGlkYXRlKFwicG9zaXRpb25cIikpLHRoaXMuJGVsZW1lbnQudG9nZ2xlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcyxcIm1vdXNlZG93blwiPT09Yi50eXBlKSx0aGlzLnNwZWVkKDApLHRoaXMuX2RyYWcudGltZT0obmV3IERhdGUpLmdldFRpbWUoKSx0aGlzLl9kcmFnLnRhcmdldD1hKGIudGFyZ2V0KSx0aGlzLl9kcmFnLnN0YWdlLnN0YXJ0PWQsdGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50PWQsdGhpcy5fZHJhZy5wb2ludGVyPXRoaXMucG9pbnRlcihiKSxhKGMpLm9uKFwibW91c2V1cC5vd2wuY29yZSB0b3VjaGVuZC5vd2wuY29yZVwiLGEucHJveHkodGhpcy5vbkRyYWdFbmQsdGhpcykpLGEoYykub25lKFwibW91c2Vtb3ZlLm93bC5jb3JlIHRvdWNobW92ZS5vd2wuY29yZVwiLGEucHJveHkoZnVuY3Rpb24oYil7dmFyIGQ9dGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlcix0aGlzLnBvaW50ZXIoYikpO2EoYykub24oXCJtb3VzZW1vdmUub3dsLmNvcmUgdG91Y2htb3ZlLm93bC5jb3JlXCIsYS5wcm94eSh0aGlzLm9uRHJhZ01vdmUsdGhpcykpLE1hdGguYWJzKGQueCk8TWF0aC5hYnMoZC55KSYmdGhpcy5pcyhcInZhbGlkXCIpfHwoYi5wcmV2ZW50RGVmYXVsdCgpLHRoaXMuZW50ZXIoXCJkcmFnZ2luZ1wiKSx0aGlzLnRyaWdnZXIoXCJkcmFnXCIpKX0sdGhpcykpKX0sZS5wcm90b3R5cGUub25EcmFnTW92ZT1mdW5jdGlvbihhKXt2YXIgYj1udWxsLGM9bnVsbCxkPW51bGwsZT10aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5wb2ludGVyLHRoaXMucG9pbnRlcihhKSksZj10aGlzLmRpZmZlcmVuY2UodGhpcy5fZHJhZy5zdGFnZS5zdGFydCxlKTt0aGlzLmlzKFwiZHJhZ2dpbmdcIikmJihhLnByZXZlbnREZWZhdWx0KCksdGhpcy5zZXR0aW5ncy5sb29wPyhiPXRoaXMuY29vcmRpbmF0ZXModGhpcy5taW5pbXVtKCkpLGM9dGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSsxKS1iLGYueD0oKGYueC1iKSVjK2MpJWMrYik6KGI9dGhpcy5zZXR0aW5ncy5ydGw/dGhpcy5jb29yZGluYXRlcyh0aGlzLm1heGltdW0oKSk6dGhpcy5jb29yZGluYXRlcyh0aGlzLm1pbmltdW0oKSksYz10aGlzLnNldHRpbmdzLnJ0bD90aGlzLmNvb3JkaW5hdGVzKHRoaXMubWluaW11bSgpKTp0aGlzLmNvb3JkaW5hdGVzKHRoaXMubWF4aW11bSgpKSxkPXRoaXMuc2V0dGluZ3MucHVsbERyYWc/LTEqZS54LzU6MCxmLng9TWF0aC5tYXgoTWF0aC5taW4oZi54LGIrZCksYytkKSksdGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50PWYsdGhpcy5hbmltYXRlKGYueCkpfSxlLnByb3RvdHlwZS5vbkRyYWdFbmQ9ZnVuY3Rpb24oYil7dmFyIGQ9dGhpcy5kaWZmZXJlbmNlKHRoaXMuX2RyYWcucG9pbnRlcix0aGlzLnBvaW50ZXIoYikpLGU9dGhpcy5fZHJhZy5zdGFnZS5jdXJyZW50LGY9ZC54PjBedGhpcy5zZXR0aW5ncy5ydGw/XCJsZWZ0XCI6XCJyaWdodFwiO2EoYykub2ZmKFwiLm93bC5jb3JlXCIpLHRoaXMuJGVsZW1lbnQucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLmdyYWJDbGFzcyksKDAhPT1kLngmJnRoaXMuaXMoXCJkcmFnZ2luZ1wiKXx8IXRoaXMuaXMoXCJ2YWxpZFwiKSkmJih0aGlzLnNwZWVkKHRoaXMuc2V0dGluZ3MuZHJhZ0VuZFNwZWVkfHx0aGlzLnNldHRpbmdzLnNtYXJ0U3BlZWQpLHRoaXMuY3VycmVudCh0aGlzLmNsb3Nlc3QoZS54LDAhPT1kLng/Zjp0aGlzLl9kcmFnLmRpcmVjdGlvbikpLHRoaXMuaW52YWxpZGF0ZShcInBvc2l0aW9uXCIpLHRoaXMudXBkYXRlKCksdGhpcy5fZHJhZy5kaXJlY3Rpb249ZiwoTWF0aC5hYnMoZC54KT4zfHwobmV3IERhdGUpLmdldFRpbWUoKS10aGlzLl9kcmFnLnRpbWU+MzAwKSYmdGhpcy5fZHJhZy50YXJnZXQub25lKFwiY2xpY2sub3dsLmNvcmVcIixmdW5jdGlvbigpe3JldHVybiExfSkpLHRoaXMuaXMoXCJkcmFnZ2luZ1wiKSYmKHRoaXMubGVhdmUoXCJkcmFnZ2luZ1wiKSx0aGlzLnRyaWdnZXIoXCJkcmFnZ2VkXCIpKX0sZS5wcm90b3R5cGUuY2xvc2VzdD1mdW5jdGlvbihiLGMpe3ZhciBkPS0xLGU9MzAsZj10aGlzLndpZHRoKCksZz10aGlzLmNvb3JkaW5hdGVzKCk7cmV0dXJuIHRoaXMuc2V0dGluZ3MuZnJlZURyYWd8fGEuZWFjaChnLGEucHJveHkoZnVuY3Rpb24oYSxoKXtyZXR1cm5cImxlZnRcIj09PWMmJmI+aC1lJiZiPGgrZT9kPWE6XCJyaWdodFwiPT09YyYmYj5oLWYtZSYmYjxoLWYrZT9kPWErMTp0aGlzLm9wKGIsXCI8XCIsaCkmJnRoaXMub3AoYixcIj5cIixnW2ErMV18fGgtZikmJihkPVwibGVmdFwiPT09Yz9hKzE6YSksZD09PS0xfSx0aGlzKSksdGhpcy5zZXR0aW5ncy5sb29wfHwodGhpcy5vcChiLFwiPlwiLGdbdGhpcy5taW5pbXVtKCldKT9kPWI9dGhpcy5taW5pbXVtKCk6dGhpcy5vcChiLFwiPFwiLGdbdGhpcy5tYXhpbXVtKCldKSYmKGQ9Yj10aGlzLm1heGltdW0oKSkpLGR9LGUucHJvdG90eXBlLmFuaW1hdGU9ZnVuY3Rpb24oYil7dmFyIGM9dGhpcy5zcGVlZCgpPjA7dGhpcy5pcyhcImFuaW1hdGluZ1wiKSYmdGhpcy5vblRyYW5zaXRpb25FbmQoKSxjJiYodGhpcy5lbnRlcihcImFuaW1hdGluZ1wiKSx0aGlzLnRyaWdnZXIoXCJ0cmFuc2xhdGVcIikpLGEuc3VwcG9ydC50cmFuc2Zvcm0zZCYmYS5zdXBwb3J0LnRyYW5zaXRpb24/dGhpcy4kc3RhZ2UuY3NzKHt0cmFuc2Zvcm06XCJ0cmFuc2xhdGUzZChcIitiK1wicHgsMHB4LDBweClcIix0cmFuc2l0aW9uOnRoaXMuc3BlZWQoKS8xZTMrXCJzXCJ9KTpjP3RoaXMuJHN0YWdlLmFuaW1hdGUoe2xlZnQ6YitcInB4XCJ9LHRoaXMuc3BlZWQoKSx0aGlzLnNldHRpbmdzLmZhbGxiYWNrRWFzaW5nLGEucHJveHkodGhpcy5vblRyYW5zaXRpb25FbmQsdGhpcykpOnRoaXMuJHN0YWdlLmNzcyh7bGVmdDpiK1wicHhcIn0pfSxlLnByb3RvdHlwZS5pcz1mdW5jdGlvbihhKXtyZXR1cm4gdGhpcy5fc3RhdGVzLmN1cnJlbnRbYV0mJnRoaXMuX3N0YXRlcy5jdXJyZW50W2FdPjB9LGUucHJvdG90eXBlLmN1cnJlbnQ9ZnVuY3Rpb24oYSl7aWYoYT09PWQpcmV0dXJuIHRoaXMuX2N1cnJlbnQ7aWYoMD09PXRoaXMuX2l0ZW1zLmxlbmd0aClyZXR1cm4gZDtpZihhPXRoaXMubm9ybWFsaXplKGEpLHRoaXMuX2N1cnJlbnQhPT1hKXt2YXIgYj10aGlzLnRyaWdnZXIoXCJjaGFuZ2VcIix7cHJvcGVydHk6e25hbWU6XCJwb3NpdGlvblwiLHZhbHVlOmF9fSk7Yi5kYXRhIT09ZCYmKGE9dGhpcy5ub3JtYWxpemUoYi5kYXRhKSksdGhpcy5fY3VycmVudD1hLHRoaXMuaW52YWxpZGF0ZShcInBvc2l0aW9uXCIpLHRoaXMudHJpZ2dlcihcImNoYW5nZWRcIix7cHJvcGVydHk6e25hbWU6XCJwb3NpdGlvblwiLHZhbHVlOnRoaXMuX2N1cnJlbnR9fSl9cmV0dXJuIHRoaXMuX2N1cnJlbnR9LGUucHJvdG90eXBlLmludmFsaWRhdGU9ZnVuY3Rpb24oYil7cmV0dXJuXCJzdHJpbmdcIj09PWEudHlwZShiKSYmKHRoaXMuX2ludmFsaWRhdGVkW2JdPSEwLHRoaXMuaXMoXCJ2YWxpZFwiKSYmdGhpcy5sZWF2ZShcInZhbGlkXCIpKSxhLm1hcCh0aGlzLl9pbnZhbGlkYXRlZCxmdW5jdGlvbihhLGIpe3JldHVybiBifSl9LGUucHJvdG90eXBlLnJlc2V0PWZ1bmN0aW9uKGEpe2E9dGhpcy5ub3JtYWxpemUoYSksYSE9PWQmJih0aGlzLl9zcGVlZD0wLHRoaXMuX2N1cnJlbnQ9YSx0aGlzLnN1cHByZXNzKFtcInRyYW5zbGF0ZVwiLFwidHJhbnNsYXRlZFwiXSksdGhpcy5hbmltYXRlKHRoaXMuY29vcmRpbmF0ZXMoYSkpLHRoaXMucmVsZWFzZShbXCJ0cmFuc2xhdGVcIixcInRyYW5zbGF0ZWRcIl0pKX0sZS5wcm90b3R5cGUubm9ybWFsaXplPWZ1bmN0aW9uKGEsYil7dmFyIGM9dGhpcy5faXRlbXMubGVuZ3RoLGU9Yj8wOnRoaXMuX2Nsb25lcy5sZW5ndGg7cmV0dXJuIXRoaXMuaXNOdW1lcmljKGEpfHxjPDE/YT1kOihhPDB8fGE+PWMrZSkmJihhPSgoYS1lLzIpJWMrYyklYytlLzIpLGF9LGUucHJvdG90eXBlLnJlbGF0aXZlPWZ1bmN0aW9uKGEpe3JldHVybiBhLT10aGlzLl9jbG9uZXMubGVuZ3RoLzIsdGhpcy5ub3JtYWxpemUoYSwhMCl9LGUucHJvdG90eXBlLm1heGltdW09ZnVuY3Rpb24oYSl7dmFyIGIsYyxkLGU9dGhpcy5zZXR0aW5ncyxmPXRoaXMuX2Nvb3JkaW5hdGVzLmxlbmd0aDtpZihlLmxvb3ApZj10aGlzLl9jbG9uZXMubGVuZ3RoLzIrdGhpcy5faXRlbXMubGVuZ3RoLTE7ZWxzZSBpZihlLmF1dG9XaWR0aHx8ZS5tZXJnZSl7Zm9yKGI9dGhpcy5faXRlbXMubGVuZ3RoLGM9dGhpcy5faXRlbXNbLS1iXS53aWR0aCgpLGQ9dGhpcy4kZWxlbWVudC53aWR0aCgpO2ItLSYmKGMrPXRoaXMuX2l0ZW1zW2JdLndpZHRoKCkrdGhpcy5zZXR0aW5ncy5tYXJnaW4sIShjPmQpKTspO2Y9YisxfWVsc2UgZj1lLmNlbnRlcj90aGlzLl9pdGVtcy5sZW5ndGgtMTp0aGlzLl9pdGVtcy5sZW5ndGgtZS5pdGVtcztyZXR1cm4gYSYmKGYtPXRoaXMuX2Nsb25lcy5sZW5ndGgvMiksTWF0aC5tYXgoZiwwKX0sZS5wcm90b3R5cGUubWluaW11bT1mdW5jdGlvbihhKXtyZXR1cm4gYT8wOnRoaXMuX2Nsb25lcy5sZW5ndGgvMn0sZS5wcm90b3R5cGUuaXRlbXM9ZnVuY3Rpb24oYSl7cmV0dXJuIGE9PT1kP3RoaXMuX2l0ZW1zLnNsaWNlKCk6KGE9dGhpcy5ub3JtYWxpemUoYSwhMCksdGhpcy5faXRlbXNbYV0pfSxlLnByb3RvdHlwZS5tZXJnZXJzPWZ1bmN0aW9uKGEpe3JldHVybiBhPT09ZD90aGlzLl9tZXJnZXJzLnNsaWNlKCk6KGE9dGhpcy5ub3JtYWxpemUoYSwhMCksdGhpcy5fbWVyZ2Vyc1thXSl9LGUucHJvdG90eXBlLmNsb25lcz1mdW5jdGlvbihiKXt2YXIgYz10aGlzLl9jbG9uZXMubGVuZ3RoLzIsZT1jK3RoaXMuX2l0ZW1zLmxlbmd0aCxmPWZ1bmN0aW9uKGEpe3JldHVybiBhJTI9PT0wP2UrYS8yOmMtKGErMSkvMn07cmV0dXJuIGI9PT1kP2EubWFwKHRoaXMuX2Nsb25lcyxmdW5jdGlvbihhLGIpe3JldHVybiBmKGIpfSk6YS5tYXAodGhpcy5fY2xvbmVzLGZ1bmN0aW9uKGEsYyl7cmV0dXJuIGE9PT1iP2YoYyk6bnVsbH0pfSxlLnByb3RvdHlwZS5zcGVlZD1mdW5jdGlvbihhKXtyZXR1cm4gYSE9PWQmJih0aGlzLl9zcGVlZD1hKSx0aGlzLl9zcGVlZH0sZS5wcm90b3R5cGUuY29vcmRpbmF0ZXM9ZnVuY3Rpb24oYil7dmFyIGMsZT0xLGY9Yi0xO3JldHVybiBiPT09ZD9hLm1hcCh0aGlzLl9jb29yZGluYXRlcyxhLnByb3h5KGZ1bmN0aW9uKGEsYil7cmV0dXJuIHRoaXMuY29vcmRpbmF0ZXMoYil9LHRoaXMpKToodGhpcy5zZXR0aW5ncy5jZW50ZXI/KHRoaXMuc2V0dGluZ3MucnRsJiYoZT0tMSxmPWIrMSksYz10aGlzLl9jb29yZGluYXRlc1tiXSxjKz0odGhpcy53aWR0aCgpLWMrKHRoaXMuX2Nvb3JkaW5hdGVzW2ZdfHwwKSkvMiplKTpjPXRoaXMuX2Nvb3JkaW5hdGVzW2ZdfHwwLGM9TWF0aC5jZWlsKGMpKX0sZS5wcm90b3R5cGUuZHVyYXRpb249ZnVuY3Rpb24oYSxiLGMpe3JldHVybiAwPT09Yz8wOk1hdGgubWluKE1hdGgubWF4KE1hdGguYWJzKGItYSksMSksNikqTWF0aC5hYnMoY3x8dGhpcy5zZXR0aW5ncy5zbWFydFNwZWVkKX0sZS5wcm90b3R5cGUudG89ZnVuY3Rpb24oYSxiKXt2YXIgYz10aGlzLmN1cnJlbnQoKSxkPW51bGwsZT1hLXRoaXMucmVsYXRpdmUoYyksZj0oZT4wKS0oZTwwKSxnPXRoaXMuX2l0ZW1zLmxlbmd0aCxoPXRoaXMubWluaW11bSgpLGk9dGhpcy5tYXhpbXVtKCk7dGhpcy5zZXR0aW5ncy5sb29wPyghdGhpcy5zZXR0aW5ncy5yZXdpbmQmJk1hdGguYWJzKGUpPmcvMiYmKGUrPWYqLTEqZyksYT1jK2UsZD0oKGEtaCklZytnKSVnK2gsZCE9PWEmJmQtZTw9aSYmZC1lPjAmJihjPWQtZSxhPWQsdGhpcy5yZXNldChjKSkpOnRoaXMuc2V0dGluZ3MucmV3aW5kPyhpKz0xLGE9KGElaStpKSVpKTphPU1hdGgubWF4KGgsTWF0aC5taW4oaSxhKSksdGhpcy5zcGVlZCh0aGlzLmR1cmF0aW9uKGMsYSxiKSksdGhpcy5jdXJyZW50KGEpLHRoaXMuJGVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSYmdGhpcy51cGRhdGUoKX0sZS5wcm90b3R5cGUubmV4dD1mdW5jdGlvbihhKXthPWF8fCExLHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSkrMSxhKX0sZS5wcm90b3R5cGUucHJldj1mdW5jdGlvbihhKXthPWF8fCExLHRoaXMudG8odGhpcy5yZWxhdGl2ZSh0aGlzLmN1cnJlbnQoKSktMSxhKX0sZS5wcm90b3R5cGUub25UcmFuc2l0aW9uRW5kPWZ1bmN0aW9uKGEpe2lmKGEhPT1kJiYoYS5zdG9wUHJvcGFnYXRpb24oKSwoYS50YXJnZXR8fGEuc3JjRWxlbWVudHx8YS5vcmlnaW5hbFRhcmdldCkhPT10aGlzLiRzdGFnZS5nZXQoMCkpKXJldHVybiExO3RoaXMubGVhdmUoXCJhbmltYXRpbmdcIiksdGhpcy50cmlnZ2VyKFwidHJhbnNsYXRlZFwiKX0sZS5wcm90b3R5cGUudmlld3BvcnQ9ZnVuY3Rpb24oKXt2YXIgZDtyZXR1cm4gdGhpcy5vcHRpb25zLnJlc3BvbnNpdmVCYXNlRWxlbWVudCE9PWI/ZD1hKHRoaXMub3B0aW9ucy5yZXNwb25zaXZlQmFzZUVsZW1lbnQpLndpZHRoKCk6Yi5pbm5lcldpZHRoP2Q9Yi5pbm5lcldpZHRoOmMuZG9jdW1lbnRFbGVtZW50JiZjLmRvY3VtZW50RWxlbWVudC5jbGllbnRXaWR0aD9kPWMuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoOmNvbnNvbGUud2FybihcIkNhbiBub3QgZGV0ZWN0IHZpZXdwb3J0IHdpZHRoLlwiKSxkfSxlLnByb3RvdHlwZS5yZXBsYWNlPWZ1bmN0aW9uKGIpe3RoaXMuJHN0YWdlLmVtcHR5KCksdGhpcy5faXRlbXM9W10sYiYmKGI9YiBpbnN0YW5jZW9mIGpRdWVyeT9iOmEoYikpLHRoaXMuc2V0dGluZ3MubmVzdGVkSXRlbVNlbGVjdG9yJiYoYj1iLmZpbmQoXCIuXCIrdGhpcy5zZXR0aW5ncy5uZXN0ZWRJdGVtU2VsZWN0b3IpKSxiLmZpbHRlcihmdW5jdGlvbigpe3JldHVybiAxPT09dGhpcy5ub2RlVHlwZX0pLmVhY2goYS5wcm94eShmdW5jdGlvbihhLGIpe2I9dGhpcy5wcmVwYXJlKGIpLHRoaXMuJHN0YWdlLmFwcGVuZChiKSx0aGlzLl9pdGVtcy5wdXNoKGIpLHRoaXMuX21lcmdlcnMucHVzaCgxKmIuZmluZChcIltkYXRhLW1lcmdlXVwiKS5hZGRCYWNrKFwiW2RhdGEtbWVyZ2VdXCIpLmF0dHIoXCJkYXRhLW1lcmdlXCIpfHwxKX0sdGhpcykpLHRoaXMucmVzZXQodGhpcy5pc051bWVyaWModGhpcy5zZXR0aW5ncy5zdGFydFBvc2l0aW9uKT90aGlzLnNldHRpbmdzLnN0YXJ0UG9zaXRpb246MCksdGhpcy5pbnZhbGlkYXRlKFwiaXRlbXNcIil9LGUucHJvdG90eXBlLmFkZD1mdW5jdGlvbihiLGMpe3ZhciBlPXRoaXMucmVsYXRpdmUodGhpcy5fY3VycmVudCk7Yz1jPT09ZD90aGlzLl9pdGVtcy5sZW5ndGg6dGhpcy5ub3JtYWxpemUoYywhMCksYj1iIGluc3RhbmNlb2YgalF1ZXJ5P2I6YShiKSx0aGlzLnRyaWdnZXIoXCJhZGRcIix7Y29udGVudDpiLHBvc2l0aW9uOmN9KSxiPXRoaXMucHJlcGFyZShiKSwwPT09dGhpcy5faXRlbXMubGVuZ3RofHxjPT09dGhpcy5faXRlbXMubGVuZ3RoPygwPT09dGhpcy5faXRlbXMubGVuZ3RoJiZ0aGlzLiRzdGFnZS5hcHBlbmQoYiksMCE9PXRoaXMuX2l0ZW1zLmxlbmd0aCYmdGhpcy5faXRlbXNbYy0xXS5hZnRlcihiKSx0aGlzLl9pdGVtcy5wdXNoKGIpLHRoaXMuX21lcmdlcnMucHVzaCgxKmIuZmluZChcIltkYXRhLW1lcmdlXVwiKS5hZGRCYWNrKFwiW2RhdGEtbWVyZ2VdXCIpLmF0dHIoXCJkYXRhLW1lcmdlXCIpfHwxKSk6KHRoaXMuX2l0ZW1zW2NdLmJlZm9yZShiKSx0aGlzLl9pdGVtcy5zcGxpY2UoYywwLGIpLHRoaXMuX21lcmdlcnMuc3BsaWNlKGMsMCwxKmIuZmluZChcIltkYXRhLW1lcmdlXVwiKS5hZGRCYWNrKFwiW2RhdGEtbWVyZ2VdXCIpLmF0dHIoXCJkYXRhLW1lcmdlXCIpfHwxKSksdGhpcy5faXRlbXNbZV0mJnRoaXMucmVzZXQodGhpcy5faXRlbXNbZV0uaW5kZXgoKSksdGhpcy5pbnZhbGlkYXRlKFwiaXRlbXNcIiksdGhpcy50cmlnZ2VyKFwiYWRkZWRcIix7Y29udGVudDpiLHBvc2l0aW9uOmN9KX0sZS5wcm90b3R5cGUucmVtb3ZlPWZ1bmN0aW9uKGEpe2E9dGhpcy5ub3JtYWxpemUoYSwhMCksYSE9PWQmJih0aGlzLnRyaWdnZXIoXCJyZW1vdmVcIix7Y29udGVudDp0aGlzLl9pdGVtc1thXSxwb3NpdGlvbjphfSksdGhpcy5faXRlbXNbYV0ucmVtb3ZlKCksdGhpcy5faXRlbXMuc3BsaWNlKGEsMSksdGhpcy5fbWVyZ2Vycy5zcGxpY2UoYSwxKSx0aGlzLmludmFsaWRhdGUoXCJpdGVtc1wiKSx0aGlzLnRyaWdnZXIoXCJyZW1vdmVkXCIse2NvbnRlbnQ6bnVsbCxwb3NpdGlvbjphfSkpfSxlLnByb3RvdHlwZS5wcmVsb2FkQXV0b1dpZHRoSW1hZ2VzPWZ1bmN0aW9uKGIpe2IuZWFjaChhLnByb3h5KGZ1bmN0aW9uKGIsYyl7dGhpcy5lbnRlcihcInByZS1sb2FkaW5nXCIpLGM9YShjKSxhKG5ldyBJbWFnZSkub25lKFwibG9hZFwiLGEucHJveHkoZnVuY3Rpb24oYSl7Yy5hdHRyKFwic3JjXCIsYS50YXJnZXQuc3JjKSxjLmNzcyhcIm9wYWNpdHlcIiwxKSx0aGlzLmxlYXZlKFwicHJlLWxvYWRpbmdcIiksIXRoaXMuaXMoXCJwcmUtbG9hZGluZ1wiKSYmIXRoaXMuaXMoXCJpbml0aWFsaXppbmdcIikmJnRoaXMucmVmcmVzaCgpfSx0aGlzKSkuYXR0cihcInNyY1wiLGMuYXR0cihcInNyY1wiKXx8Yy5hdHRyKFwiZGF0YS1zcmNcIil8fGMuYXR0cihcImRhdGEtc3JjLXJldGluYVwiKSl9LHRoaXMpKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3RoaXMuJGVsZW1lbnQub2ZmKFwiLm93bC5jb3JlXCIpLHRoaXMuJHN0YWdlLm9mZihcIi5vd2wuY29yZVwiKSxhKGMpLm9mZihcIi5vd2wuY29yZVwiKSx0aGlzLnNldHRpbmdzLnJlc3BvbnNpdmUhPT0hMSYmKGIuY2xlYXJUaW1lb3V0KHRoaXMucmVzaXplVGltZXIpLHRoaXMub2ZmKGIsXCJyZXNpemVcIix0aGlzLl9oYW5kbGVycy5vblRocm90dGxlZFJlc2l6ZSkpO2Zvcih2YXIgZCBpbiB0aGlzLl9wbHVnaW5zKXRoaXMuX3BsdWdpbnNbZF0uZGVzdHJveSgpO3RoaXMuJHN0YWdlLmNoaWxkcmVuKFwiLmNsb25lZFwiKS5yZW1vdmUoKSx0aGlzLiRzdGFnZS51bndyYXAoKSx0aGlzLiRzdGFnZS5jaGlsZHJlbigpLmNvbnRlbnRzKCkudW53cmFwKCksdGhpcy4kc3RhZ2UuY2hpbGRyZW4oKS51bndyYXAoKSx0aGlzLiRlbGVtZW50LnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5yZWZyZXNoQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkaW5nQ2xhc3MpLnJlbW92ZUNsYXNzKHRoaXMub3B0aW9ucy5sb2FkZWRDbGFzcykucmVtb3ZlQ2xhc3ModGhpcy5vcHRpb25zLnJ0bENsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZHJhZ0NsYXNzKS5yZW1vdmVDbGFzcyh0aGlzLm9wdGlvbnMuZ3JhYkNsYXNzKS5hdHRyKFwiY2xhc3NcIix0aGlzLiRlbGVtZW50LmF0dHIoXCJjbGFzc1wiKS5yZXBsYWNlKG5ldyBSZWdFeHAodGhpcy5vcHRpb25zLnJlc3BvbnNpdmVDbGFzcytcIi1cXFxcUytcXFxcc1wiLFwiZ1wiKSxcIlwiKSkucmVtb3ZlRGF0YShcIm93bC5jYXJvdXNlbFwiKX0sZS5wcm90b3R5cGUub3A9ZnVuY3Rpb24oYSxiLGMpe3ZhciBkPXRoaXMuc2V0dGluZ3MucnRsO3N3aXRjaChiKXtjYXNlXCI8XCI6cmV0dXJuIGQ/YT5jOmE8YztjYXNlXCI+XCI6cmV0dXJuIGQ/YTxjOmE+YztjYXNlXCI+PVwiOnJldHVybiBkP2E8PWM6YT49YztjYXNlXCI8PVwiOnJldHVybiBkP2E+PWM6YTw9Y319LGUucHJvdG90eXBlLm9uPWZ1bmN0aW9uKGEsYixjLGQpe2EuYWRkRXZlbnRMaXN0ZW5lcj9hLmFkZEV2ZW50TGlzdGVuZXIoYixjLGQpOmEuYXR0YWNoRXZlbnQmJmEuYXR0YWNoRXZlbnQoXCJvblwiK2IsYyl9LGUucHJvdG90eXBlLm9mZj1mdW5jdGlvbihhLGIsYyxkKXthLnJlbW92ZUV2ZW50TGlzdGVuZXI/YS5yZW1vdmVFdmVudExpc3RlbmVyKGIsYyxkKTphLmRldGFjaEV2ZW50JiZhLmRldGFjaEV2ZW50KFwib25cIitiLGMpfSxlLnByb3RvdHlwZS50cmlnZ2VyPWZ1bmN0aW9uKGIsYyxkLGYsZyl7dmFyIGg9e2l0ZW06e2NvdW50OnRoaXMuX2l0ZW1zLmxlbmd0aCxpbmRleDp0aGlzLmN1cnJlbnQoKX19LGk9YS5jYW1lbENhc2UoYS5ncmVwKFtcIm9uXCIsYixkXSxmdW5jdGlvbihhKXtyZXR1cm4gYX0pLmpvaW4oXCItXCIpLnRvTG93ZXJDYXNlKCkpLGo9YS5FdmVudChbYixcIm93bFwiLGR8fFwiY2Fyb3VzZWxcIl0uam9pbihcIi5cIikudG9Mb3dlckNhc2UoKSxhLmV4dGVuZCh7cmVsYXRlZFRhcmdldDp0aGlzfSxoLGMpKTtyZXR1cm4gdGhpcy5fc3VwcmVzc1tiXXx8KGEuZWFjaCh0aGlzLl9wbHVnaW5zLGZ1bmN0aW9uKGEsYil7Yi5vblRyaWdnZXImJmIub25UcmlnZ2VyKGopfSksdGhpcy5yZWdpc3Rlcih7dHlwZTplLlR5cGUuRXZlbnQsbmFtZTpifSksdGhpcy4kZWxlbWVudC50cmlnZ2VyKGopLHRoaXMuc2V0dGluZ3MmJlwiZnVuY3Rpb25cIj09dHlwZW9mIHRoaXMuc2V0dGluZ3NbaV0mJnRoaXMuc2V0dGluZ3NbaV0uY2FsbCh0aGlzLGopKSxqfSxlLnByb3RvdHlwZS5lbnRlcj1mdW5jdGlvbihiKXthLmVhY2goW2JdLmNvbmNhdCh0aGlzLl9zdGF0ZXMudGFnc1tiXXx8W10pLGEucHJveHkoZnVuY3Rpb24oYSxiKXt0aGlzLl9zdGF0ZXMuY3VycmVudFtiXT09PWQmJih0aGlzLl9zdGF0ZXMuY3VycmVudFtiXT0wKSx0aGlzLl9zdGF0ZXMuY3VycmVudFtiXSsrfSx0aGlzKSl9LGUucHJvdG90eXBlLmxlYXZlPWZ1bmN0aW9uKGIpe2EuZWFjaChbYl0uY29uY2F0KHRoaXMuX3N0YXRlcy50YWdzW2JdfHxbXSksYS5wcm94eShmdW5jdGlvbihhLGIpe3RoaXMuX3N0YXRlcy5jdXJyZW50W2JdLS19LHRoaXMpKX0sZS5wcm90b3R5cGUucmVnaXN0ZXI9ZnVuY3Rpb24oYil7aWYoYi50eXBlPT09ZS5UeXBlLkV2ZW50KXtpZihhLmV2ZW50LnNwZWNpYWxbYi5uYW1lXXx8KGEuZXZlbnQuc3BlY2lhbFtiLm5hbWVdPXt9KSwhYS5ldmVudC5zcGVjaWFsW2IubmFtZV0ub3dsKXt2YXIgYz1hLmV2ZW50LnNwZWNpYWxbYi5uYW1lXS5fZGVmYXVsdDthLmV2ZW50LnNwZWNpYWxbYi5uYW1lXS5fZGVmYXVsdD1mdW5jdGlvbihhKXtyZXR1cm4hY3x8IWMuYXBwbHl8fGEubmFtZXNwYWNlJiZhLm5hbWVzcGFjZS5pbmRleE9mKFwib3dsXCIpIT09LTE/YS5uYW1lc3BhY2UmJmEubmFtZXNwYWNlLmluZGV4T2YoXCJvd2xcIik+LTE6Yy5hcHBseSh0aGlzLGFyZ3VtZW50cyl9LGEuZXZlbnQuc3BlY2lhbFtiLm5hbWVdLm93bD0hMH19ZWxzZSBiLnR5cGU9PT1lLlR5cGUuU3RhdGUmJih0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdP3RoaXMuX3N0YXRlcy50YWdzW2IubmFtZV09dGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXS5jb25jYXQoYi50YWdzKTp0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdPWIudGFncyx0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdPWEuZ3JlcCh0aGlzLl9zdGF0ZXMudGFnc1tiLm5hbWVdLGEucHJveHkoZnVuY3Rpb24oYyxkKXtyZXR1cm4gYS5pbkFycmF5KGMsdGhpcy5fc3RhdGVzLnRhZ3NbYi5uYW1lXSk9PT1kfSx0aGlzKSkpfSxlLnByb3RvdHlwZS5zdXBwcmVzcz1mdW5jdGlvbihiKXthLmVhY2goYixhLnByb3h5KGZ1bmN0aW9uKGEsYil7dGhpcy5fc3VwcmVzc1tiXT0hMH0sdGhpcykpfSxlLnByb3RvdHlwZS5yZWxlYXNlPWZ1bmN0aW9uKGIpe2EuZWFjaChiLGEucHJveHkoZnVuY3Rpb24oYSxiKXtkZWxldGUgdGhpcy5fc3VwcmVzc1tiXX0sdGhpcykpfSxlLnByb3RvdHlwZS5wb2ludGVyPWZ1bmN0aW9uKGEpe3ZhciBjPXt4Om51bGwseTpudWxsfTtyZXR1cm4gYT1hLm9yaWdpbmFsRXZlbnR8fGF8fGIuZXZlbnQsYT1hLnRvdWNoZXMmJmEudG91Y2hlcy5sZW5ndGg/YS50b3VjaGVzWzBdOmEuY2hhbmdlZFRvdWNoZXMmJmEuY2hhbmdlZFRvdWNoZXMubGVuZ3RoP2EuY2hhbmdlZFRvdWNoZXNbMF06YSxhLnBhZ2VYPyhjLng9YS5wYWdlWCxjLnk9YS5wYWdlWSk6KGMueD1hLmNsaWVudFgsYy55PWEuY2xpZW50WSksY30sZS5wcm90b3R5cGUuaXNOdW1lcmljPWZ1bmN0aW9uKGEpe3JldHVybiFpc05hTihwYXJzZUZsb2F0KGEpKX0sZS5wcm90b3R5cGUuZGlmZmVyZW5jZT1mdW5jdGlvbihhLGIpe3JldHVybnt4OmEueC1iLngseTphLnktYi55fX0sYS5mbi5vd2xDYXJvdXNlbD1mdW5jdGlvbihiKXt2YXIgYz1BcnJheS5wcm90b3R5cGUuc2xpY2UuY2FsbChhcmd1bWVudHMsMSk7cmV0dXJuIHRoaXMuZWFjaChmdW5jdGlvbigpe3ZhciBkPWEodGhpcyksZj1kLmRhdGEoXCJvd2wuY2Fyb3VzZWxcIik7Znx8KGY9bmV3IGUodGhpcyxcIm9iamVjdFwiPT10eXBlb2YgYiYmYiksZC5kYXRhKFwib3dsLmNhcm91c2VsXCIsZiksYS5lYWNoKFtcIm5leHRcIixcInByZXZcIixcInRvXCIsXCJkZXN0cm95XCIsXCJyZWZyZXNoXCIsXCJyZXBsYWNlXCIsXCJhZGRcIixcInJlbW92ZVwiXSxmdW5jdGlvbihiLGMpe2YucmVnaXN0ZXIoe3R5cGU6ZS5UeXBlLkV2ZW50LG5hbWU6Y30pLGYuJGVsZW1lbnQub24oYytcIi5vd2wuY2Fyb3VzZWwuY29yZVwiLGEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJmEucmVsYXRlZFRhcmdldCE9PXRoaXMmJih0aGlzLnN1cHByZXNzKFtjXSksZltjXS5hcHBseSh0aGlzLFtdLnNsaWNlLmNhbGwoYXJndW1lbnRzLDEpKSx0aGlzLnJlbGVhc2UoW2NdKSl9LGYpKX0pKSxcInN0cmluZ1wiPT10eXBlb2YgYiYmXCJfXCIhPT1iLmNoYXJBdCgwKSYmZltiXS5hcHBseShmLGMpfSl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3I9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX2ludGVydmFsPW51bGwsdGhpcy5fdmlzaWJsZT1udWxsLHRoaXMuX2hhbmRsZXJzPXtcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b1JlZnJlc2gmJnRoaXMud2F0Y2goKX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy5fY29yZS4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyl9O2UuRGVmYXVsdHM9e2F1dG9SZWZyZXNoOiEwLGF1dG9SZWZyZXNoSW50ZXJ2YWw6NTAwfSxlLnByb3RvdHlwZS53YXRjaD1mdW5jdGlvbigpe3RoaXMuX2ludGVydmFsfHwodGhpcy5fdmlzaWJsZT10aGlzLl9jb3JlLiRlbGVtZW50LmlzKFwiOnZpc2libGVcIiksdGhpcy5faW50ZXJ2YWw9Yi5zZXRJbnRlcnZhbChhLnByb3h5KHRoaXMucmVmcmVzaCx0aGlzKSx0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9SZWZyZXNoSW50ZXJ2YWwpKX0sZS5wcm90b3R5cGUucmVmcmVzaD1mdW5jdGlvbigpe3RoaXMuX2NvcmUuJGVsZW1lbnQuaXMoXCI6dmlzaWJsZVwiKSE9PXRoaXMuX3Zpc2libGUmJih0aGlzLl92aXNpYmxlPSF0aGlzLl92aXNpYmxlLHRoaXMuX2NvcmUuJGVsZW1lbnQudG9nZ2xlQ2xhc3MoXCJvd2wtaGlkZGVuXCIsIXRoaXMuX3Zpc2libGUpLHRoaXMuX3Zpc2libGUmJnRoaXMuX2NvcmUuaW52YWxpZGF0ZShcIndpZHRoXCIpJiZ0aGlzLl9jb3JlLnJlZnJlc2goKSl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxjO2IuY2xlYXJJbnRlcnZhbCh0aGlzLl9pbnRlcnZhbCk7Zm9yKGEgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoYSx0aGlzLl9oYW5kbGVyc1thXSk7Zm9yKGMgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tjXSYmKHRoaXNbY109bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5BdXRvUmVmcmVzaD1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5fbG9hZGVkPVtdLHRoaXMuX2hhbmRsZXJzPXtcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbCBjaGFuZ2Uub3dsLmNhcm91c2VsIHJlc2l6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtpZihiLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncyYmdGhpcy5fY29yZS5zZXR0aW5ncy5sYXp5TG9hZCYmKGIucHJvcGVydHkmJlwicG9zaXRpb25cIj09Yi5wcm9wZXJ0eS5uYW1lfHxcImluaXRpYWxpemVkXCI9PWIudHlwZSkpZm9yKHZhciBjPXRoaXMuX2NvcmUuc2V0dGluZ3MsZT1jLmNlbnRlciYmTWF0aC5jZWlsKGMuaXRlbXMvMil8fGMuaXRlbXMsZj1jLmNlbnRlciYmZSotMXx8MCxnPShiLnByb3BlcnR5JiZiLnByb3BlcnR5LnZhbHVlIT09ZD9iLnByb3BlcnR5LnZhbHVlOnRoaXMuX2NvcmUuY3VycmVudCgpKStmLGg9dGhpcy5fY29yZS5jbG9uZXMoKS5sZW5ndGgsaT1hLnByb3h5KGZ1bmN0aW9uKGEsYil7dGhpcy5sb2FkKGIpfSx0aGlzKTtmKys8ZTspdGhpcy5sb2FkKGgvMit0aGlzLl9jb3JlLnJlbGF0aXZlKGcpKSxoJiZhLmVhY2godGhpcy5fY29yZS5jbG9uZXModGhpcy5fY29yZS5yZWxhdGl2ZShnKSksaSksZysrfSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKX07ZS5EZWZhdWx0cz17bGF6eUxvYWQ6ITF9LGUucHJvdG90eXBlLmxvYWQ9ZnVuY3Rpb24oYyl7dmFyIGQ9dGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKS5lcShjKSxlPWQmJmQuZmluZChcIi5vd2wtbGF6eVwiKTshZXx8YS5pbkFycmF5KGQuZ2V0KDApLHRoaXMuX2xvYWRlZCk+LTF8fChlLmVhY2goYS5wcm94eShmdW5jdGlvbihjLGQpe3ZhciBlLGY9YShkKSxnPWIuZGV2aWNlUGl4ZWxSYXRpbz4xJiZmLmF0dHIoXCJkYXRhLXNyYy1yZXRpbmFcIil8fGYuYXR0cihcImRhdGEtc3JjXCIpO3RoaXMuX2NvcmUudHJpZ2dlcihcImxvYWRcIix7ZWxlbWVudDpmLHVybDpnfSxcImxhenlcIiksZi5pcyhcImltZ1wiKT9mLm9uZShcImxvYWQub3dsLmxhenlcIixhLnByb3h5KGZ1bmN0aW9uKCl7Zi5jc3MoXCJvcGFjaXR5XCIsMSksdGhpcy5fY29yZS50cmlnZ2VyKFwibG9hZGVkXCIse2VsZW1lbnQ6Zix1cmw6Z30sXCJsYXp5XCIpfSx0aGlzKSkuYXR0cihcInNyY1wiLGcpOihlPW5ldyBJbWFnZSxlLm9ubG9hZD1hLnByb3h5KGZ1bmN0aW9uKCl7Zi5jc3Moe1wiYmFja2dyb3VuZC1pbWFnZVwiOid1cmwoXCInK2crJ1wiKScsb3BhY2l0eTpcIjFcIn0pLHRoaXMuX2NvcmUudHJpZ2dlcihcImxvYWRlZFwiLHtlbGVtZW50OmYsdXJsOmd9LFwibGF6eVwiKX0sdGhpcyksZS5zcmM9Zyl9LHRoaXMpKSx0aGlzLl9sb2FkZWQucHVzaChkLmdldCgwKSkpfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGEsYjtmb3IoYSBpbiB0aGlzLmhhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5oYW5kbGVyc1thXSk7Zm9yKGIgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tiXSYmKHRoaXNbYl09bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5MYXp5PWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe3ZhciBlPWZ1bmN0aW9uKGIpe3RoaXMuX2NvcmU9Yix0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWwgcmVmcmVzaGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmdGhpcy51cGRhdGUoKX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b0hlaWdodCYmXCJwb3NpdGlvblwiPT1hLnByb3BlcnR5Lm5hbWUmJnRoaXMudXBkYXRlKCl9LHRoaXMpLFwibG9hZGVkLm93bC5sYXp5XCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvSGVpZ2h0JiZhLmVsZW1lbnQuY2xvc2VzdChcIi5cIit0aGlzLl9jb3JlLnNldHRpbmdzLml0ZW1DbGFzcykuaW5kZXgoKT09PXRoaXMuX2NvcmUuY3VycmVudCgpJiZ0aGlzLnVwZGF0ZSgpfSx0aGlzKX0sdGhpcy5fY29yZS5vcHRpb25zPWEuZXh0ZW5kKHt9LGUuRGVmYXVsdHMsdGhpcy5fY29yZS5vcHRpb25zKSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKX07ZS5EZWZhdWx0cz17YXV0b0hlaWdodDohMSxhdXRvSGVpZ2h0Q2xhc3M6XCJvd2wtaGVpZ2h0XCJ9LGUucHJvdG90eXBlLnVwZGF0ZT1mdW5jdGlvbigpe3ZhciBiPXRoaXMuX2NvcmUuX2N1cnJlbnQsYz1iK3RoaXMuX2NvcmUuc2V0dGluZ3MuaXRlbXMsZD10aGlzLl9jb3JlLiRzdGFnZS5jaGlsZHJlbigpLnRvQXJyYXkoKS5zbGljZShiLGMpLGU9W10sZj0wO2EuZWFjaChkLGZ1bmN0aW9uKGIsYyl7ZS5wdXNoKGEoYykuaGVpZ2h0KCkpfSksZj1NYXRoLm1heC5hcHBseShudWxsLGUpLHRoaXMuX2NvcmUuJHN0YWdlLnBhcmVudCgpLmhlaWdodChmKS5hZGRDbGFzcyh0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9IZWlnaHRDbGFzcyl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuQXV0b0hlaWdodD1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5fdmlkZW9zPXt9LHRoaXMuX3BsYXlpbmc9bnVsbCx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9jb3JlLnJlZ2lzdGVyKHt0eXBlOlwic3RhdGVcIixuYW1lOlwicGxheWluZ1wiLHRhZ3M6W1wiaW50ZXJhY3RpbmdcIl19KX0sdGhpcyksXCJyZXNpemUub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy52aWRlbyYmdGhpcy5pc0luRnVsbFNjcmVlbigpJiZhLnByZXZlbnREZWZhdWx0KCl9LHRoaXMpLFwicmVmcmVzaGVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuaXMoXCJyZXNpemluZ1wiKSYmdGhpcy5fY29yZS4kc3RhZ2UuZmluZChcIi5jbG9uZWQgLm93bC12aWRlby1mcmFtZVwiKS5yZW1vdmUoKX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJlwicG9zaXRpb25cIj09PWEucHJvcGVydHkubmFtZSYmdGhpcy5fcGxheWluZyYmdGhpcy5zdG9wKCl9LHRoaXMpLFwicHJlcGFyZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihiKXtpZihiLm5hbWVzcGFjZSl7dmFyIGM9YShiLmNvbnRlbnQpLmZpbmQoXCIub3dsLXZpZGVvXCIpO2MubGVuZ3RoJiYoYy5jc3MoXCJkaXNwbGF5XCIsXCJub25lXCIpLHRoaXMuZmV0Y2goYyxhKGIuY29udGVudCkpKX19LHRoaXMpfSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpLHRoaXMuX2NvcmUuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpLHRoaXMuX2NvcmUuJGVsZW1lbnQub24oXCJjbGljay5vd2wudmlkZW9cIixcIi5vd2wtdmlkZW8tcGxheS1pY29uXCIsYS5wcm94eShmdW5jdGlvbihhKXt0aGlzLnBsYXkoYSl9LHRoaXMpKX07ZS5EZWZhdWx0cz17dmlkZW86ITEsdmlkZW9IZWlnaHQ6ITEsdmlkZW9XaWR0aDohMX0sZS5wcm90b3R5cGUuZmV0Y2g9ZnVuY3Rpb24oYSxiKXt2YXIgYz1mdW5jdGlvbigpe3JldHVybiBhLmF0dHIoXCJkYXRhLXZpbWVvLWlkXCIpP1widmltZW9cIjphLmF0dHIoXCJkYXRhLXZ6YWFyLWlkXCIpP1widnphYXJcIjpcInlvdXR1YmVcIn0oKSxkPWEuYXR0cihcImRhdGEtdmltZW8taWRcIil8fGEuYXR0cihcImRhdGEteW91dHViZS1pZFwiKXx8YS5hdHRyKFwiZGF0YS12emFhci1pZFwiKSxlPWEuYXR0cihcImRhdGEtd2lkdGhcIil8fHRoaXMuX2NvcmUuc2V0dGluZ3MudmlkZW9XaWR0aCxmPWEuYXR0cihcImRhdGEtaGVpZ2h0XCIpfHx0aGlzLl9jb3JlLnNldHRpbmdzLnZpZGVvSGVpZ2h0LGc9YS5hdHRyKFwiaHJlZlwiKTtpZighZyl0aHJvdyBuZXcgRXJyb3IoXCJNaXNzaW5nIHZpZGVvIFVSTC5cIik7aWYoZD1nLm1hdGNoKC8oaHR0cDp8aHR0cHM6fClcXC9cXC8ocGxheWVyLnx3d3cufGFwcC4pPyh2aW1lb1xcLmNvbXx5b3V0dShiZVxcLmNvbXxcXC5iZXxiZVxcLmdvb2dsZWFwaXNcXC5jb20pfHZ6YWFyXFwuY29tKVxcLyh2aWRlb1xcL3x2aWRlb3NcXC98ZW1iZWRcXC98Y2hhbm5lbHNcXC8uK1xcL3xncm91cHNcXC8uK1xcL3x3YXRjaFxcP3Y9fHZcXC8pPyhbQS1aYS16MC05Ll8lLV0qKShcXCZcXFMrKT8vKSxkWzNdLmluZGV4T2YoXCJ5b3V0dVwiKT4tMSljPVwieW91dHViZVwiO2Vsc2UgaWYoZFszXS5pbmRleE9mKFwidmltZW9cIik+LTEpYz1cInZpbWVvXCI7ZWxzZXtpZighKGRbM10uaW5kZXhPZihcInZ6YWFyXCIpPi0xKSl0aHJvdyBuZXcgRXJyb3IoXCJWaWRlbyBVUkwgbm90IHN1cHBvcnRlZC5cIik7Yz1cInZ6YWFyXCJ9ZD1kWzZdLHRoaXMuX3ZpZGVvc1tnXT17dHlwZTpjLGlkOmQsd2lkdGg6ZSxoZWlnaHQ6Zn0sYi5hdHRyKFwiZGF0YS12aWRlb1wiLGcpLHRoaXMudGh1bWJuYWlsKGEsdGhpcy5fdmlkZW9zW2ddKX0sZS5wcm90b3R5cGUudGh1bWJuYWlsPWZ1bmN0aW9uKGIsYyl7dmFyIGQsZSxmLGc9Yy53aWR0aCYmYy5oZWlnaHQ/J3N0eWxlPVwid2lkdGg6JytjLndpZHRoK1wicHg7aGVpZ2h0OlwiK2MuaGVpZ2h0KydweDtcIic6XCJcIixoPWIuZmluZChcImltZ1wiKSxpPVwic3JjXCIsaj1cIlwiLGs9dGhpcy5fY29yZS5zZXR0aW5ncyxsPWZ1bmN0aW9uKGEpe2U9JzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tcGxheS1pY29uXCI+PC9kaXY+JyxkPWsubGF6eUxvYWQ/JzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tdG4gJytqKydcIiAnK2krJz1cIicrYSsnXCI+PC9kaXY+JzonPGRpdiBjbGFzcz1cIm93bC12aWRlby10blwiIHN0eWxlPVwib3BhY2l0eToxO2JhY2tncm91bmQtaW1hZ2U6dXJsKCcrYSsnKVwiPjwvZGl2PicsYi5hZnRlcihkKSxiLmFmdGVyKGUpfTtpZihiLndyYXAoJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8td3JhcHBlclwiJytnK1wiPjwvZGl2PlwiKSx0aGlzLl9jb3JlLnNldHRpbmdzLmxhenlMb2FkJiYoaT1cImRhdGEtc3JjXCIsaj1cIm93bC1sYXp5XCIpLGgubGVuZ3RoKXJldHVybiBsKGguYXR0cihpKSksaC5yZW1vdmUoKSwhMTtcInlvdXR1YmVcIj09PWMudHlwZT8oZj1cIi8vaW1nLnlvdXR1YmUuY29tL3ZpL1wiK2MuaWQrXCIvaHFkZWZhdWx0LmpwZ1wiLGwoZikpOlwidmltZW9cIj09PWMudHlwZT9hLmFqYXgoe3R5cGU6XCJHRVRcIix1cmw6XCIvL3ZpbWVvLmNvbS9hcGkvdjIvdmlkZW8vXCIrYy5pZCtcIi5qc29uXCIsanNvbnA6XCJjYWxsYmFja1wiLGRhdGFUeXBlOlwianNvbnBcIixzdWNjZXNzOmZ1bmN0aW9uKGEpe2Y9YVswXS50aHVtYm5haWxfbGFyZ2UsbChmKX19KTpcInZ6YWFyXCI9PT1jLnR5cGUmJmEuYWpheCh7dHlwZTpcIkdFVFwiLHVybDpcIi8vdnphYXIuY29tL2FwaS92aWRlb3MvXCIrYy5pZCtcIi5qc29uXCIsanNvbnA6XCJjYWxsYmFja1wiLGRhdGFUeXBlOlwianNvbnBcIixzdWNjZXNzOmZ1bmN0aW9uKGEpe2Y9YS5mcmFtZWdyYWJfdXJsLGwoZil9fSl9LGUucHJvdG90eXBlLnN0b3A9ZnVuY3Rpb24oKXt0aGlzLl9jb3JlLnRyaWdnZXIoXCJzdG9wXCIsbnVsbCxcInZpZGVvXCIpLHRoaXMuX3BsYXlpbmcuZmluZChcIi5vd2wtdmlkZW8tZnJhbWVcIikucmVtb3ZlKCksdGhpcy5fcGxheWluZy5yZW1vdmVDbGFzcyhcIm93bC12aWRlby1wbGF5aW5nXCIpLHRoaXMuX3BsYXlpbmc9bnVsbCx0aGlzLl9jb3JlLmxlYXZlKFwicGxheWluZ1wiKSx0aGlzLl9jb3JlLnRyaWdnZXIoXCJzdG9wcGVkXCIsbnVsbCxcInZpZGVvXCIpfSxlLnByb3RvdHlwZS5wbGF5PWZ1bmN0aW9uKGIpe3ZhciBjLGQ9YShiLnRhcmdldCksZT1kLmNsb3Nlc3QoXCIuXCIrdGhpcy5fY29yZS5zZXR0aW5ncy5pdGVtQ2xhc3MpLGY9dGhpcy5fdmlkZW9zW2UuYXR0cihcImRhdGEtdmlkZW9cIildLGc9Zi53aWR0aHx8XCIxMDAlXCIsaD1mLmhlaWdodHx8dGhpcy5fY29yZS4kc3RhZ2UuaGVpZ2h0KCk7dGhpcy5fcGxheWluZ3x8KHRoaXMuX2NvcmUuZW50ZXIoXCJwbGF5aW5nXCIpLHRoaXMuX2NvcmUudHJpZ2dlcihcInBsYXlcIixudWxsLFwidmlkZW9cIiksZT10aGlzLl9jb3JlLml0ZW1zKHRoaXMuX2NvcmUucmVsYXRpdmUoZS5pbmRleCgpKSksdGhpcy5fY29yZS5yZXNldChlLmluZGV4KCkpLFwieW91dHViZVwiPT09Zi50eXBlP2M9JzxpZnJhbWUgd2lkdGg9XCInK2crJ1wiIGhlaWdodD1cIicraCsnXCIgc3JjPVwiLy93d3cueW91dHViZS5jb20vZW1iZWQvJytmLmlkK1wiP2F1dG9wbGF5PTEmcmVsPTAmdj1cIitmLmlkKydcIiBmcmFtZWJvcmRlcj1cIjBcIiBhbGxvd2Z1bGxzY3JlZW4+PC9pZnJhbWU+JzpcInZpbWVvXCI9PT1mLnR5cGU/Yz0nPGlmcmFtZSBzcmM9XCIvL3BsYXllci52aW1lby5jb20vdmlkZW8vJytmLmlkKyc/YXV0b3BsYXk9MVwiIHdpZHRoPVwiJytnKydcIiBoZWlnaHQ9XCInK2grJ1wiIGZyYW1lYm9yZGVyPVwiMFwiIHdlYmtpdGFsbG93ZnVsbHNjcmVlbiBtb3phbGxvd2Z1bGxzY3JlZW4gYWxsb3dmdWxsc2NyZWVuPjwvaWZyYW1lPic6XCJ2emFhclwiPT09Zi50eXBlJiYoYz0nPGlmcmFtZSBmcmFtZWJvcmRlcj1cIjBcImhlaWdodD1cIicraCsnXCJ3aWR0aD1cIicrZysnXCIgYWxsb3dmdWxsc2NyZWVuIG1vemFsbG93ZnVsbHNjcmVlbiB3ZWJraXRBbGxvd0Z1bGxTY3JlZW4gc3JjPVwiLy92aWV3LnZ6YWFyLmNvbS8nK2YuaWQrJy9wbGF5ZXI/YXV0b3BsYXk9dHJ1ZVwiPjwvaWZyYW1lPicpLGEoJzxkaXYgY2xhc3M9XCJvd2wtdmlkZW8tZnJhbWVcIj4nK2MrXCI8L2Rpdj5cIikuaW5zZXJ0QWZ0ZXIoZS5maW5kKFwiLm93bC12aWRlb1wiKSksdGhpcy5fcGxheWluZz1lLmFkZENsYXNzKFwib3dsLXZpZGVvLXBsYXlpbmdcIikpfSxlLnByb3RvdHlwZS5pc0luRnVsbFNjcmVlbj1mdW5jdGlvbigpe3ZhciBiPWMuZnVsbHNjcmVlbkVsZW1lbnR8fGMubW96RnVsbFNjcmVlbkVsZW1lbnR8fGMud2Via2l0RnVsbHNjcmVlbkVsZW1lbnQ7cmV0dXJuIGImJmEoYikucGFyZW50KCkuaGFzQ2xhc3MoXCJvd2wtdmlkZW8tZnJhbWVcIil9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiO3RoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKFwiY2xpY2sub3dsLnZpZGVvXCIpO2ZvcihhIGluIHRoaXMuX2hhbmRsZXJzKXRoaXMuX2NvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5faGFuZGxlcnNbYV0pO2ZvcihiIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbYl0mJih0aGlzW2JdPW51bGwpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuVmlkZW89ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5jb3JlPWIsdGhpcy5jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLmNvcmUub3B0aW9ucyksdGhpcy5zd2FwcGluZz0hMCx0aGlzLnByZXZpb3VzPWQsdGhpcy5uZXh0PWQsdGhpcy5oYW5kbGVycz17XCJjaGFuZ2Uub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmXCJwb3NpdGlvblwiPT1hLnByb3BlcnR5Lm5hbWUmJih0aGlzLnByZXZpb3VzPXRoaXMuY29yZS5jdXJyZW50KCksdGhpcy5uZXh0PWEucHJvcGVydHkudmFsdWUpfSx0aGlzKSxcImRyYWcub3dsLmNhcm91c2VsIGRyYWdnZWQub3dsLmNhcm91c2VsIHRyYW5zbGF0ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmKHRoaXMuc3dhcHBpbmc9XCJ0cmFuc2xhdGVkXCI9PWEudHlwZSl9LHRoaXMpLFwidHJhbnNsYXRlLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJnRoaXMuc3dhcHBpbmcmJih0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlT3V0fHx0aGlzLmNvcmUub3B0aW9ucy5hbmltYXRlSW4pJiZ0aGlzLnN3YXAoKX0sdGhpcyl9LHRoaXMuY29yZS4kZWxlbWVudC5vbih0aGlzLmhhbmRsZXJzKX07ZS5EZWZhdWx0cz17YW5pbWF0ZU91dDohMSxhbmltYXRlSW46ITF9LGUucHJvdG90eXBlLnN3YXA9ZnVuY3Rpb24oKXtpZigxPT09dGhpcy5jb3JlLnNldHRpbmdzLml0ZW1zJiZhLnN1cHBvcnQuYW5pbWF0aW9uJiZhLnN1cHBvcnQudHJhbnNpdGlvbil7dGhpcy5jb3JlLnNwZWVkKDApO3ZhciBiLGM9YS5wcm94eSh0aGlzLmNsZWFyLHRoaXMpLGQ9dGhpcy5jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMucHJldmlvdXMpLGU9dGhpcy5jb3JlLiRzdGFnZS5jaGlsZHJlbigpLmVxKHRoaXMubmV4dCksZj10aGlzLmNvcmUuc2V0dGluZ3MuYW5pbWF0ZUluLGc9dGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVPdXQ7dGhpcy5jb3JlLmN1cnJlbnQoKSE9PXRoaXMucHJldmlvdXMmJihnJiYoYj10aGlzLmNvcmUuY29vcmRpbmF0ZXModGhpcy5wcmV2aW91cyktdGhpcy5jb3JlLmNvb3JkaW5hdGVzKHRoaXMubmV4dCksZC5vbmUoYS5zdXBwb3J0LmFuaW1hdGlvbi5lbmQsYykuY3NzKHtsZWZ0OmIrXCJweFwifSkuYWRkQ2xhc3MoXCJhbmltYXRlZCBvd2wtYW5pbWF0ZWQtb3V0XCIpLmFkZENsYXNzKGcpKSxmJiZlLm9uZShhLnN1cHBvcnQuYW5pbWF0aW9uLmVuZCxjKS5hZGRDbGFzcyhcImFuaW1hdGVkIG93bC1hbmltYXRlZC1pblwiKS5hZGRDbGFzcyhmKSl9fSxlLnByb3RvdHlwZS5jbGVhcj1mdW5jdGlvbihiKXthKGIudGFyZ2V0KS5jc3Moe2xlZnQ6XCJcIn0pLnJlbW92ZUNsYXNzKFwiYW5pbWF0ZWQgb3dsLWFuaW1hdGVkLW91dCBvd2wtYW5pbWF0ZWQtaW5cIikucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVJbikucmVtb3ZlQ2xhc3ModGhpcy5jb3JlLnNldHRpbmdzLmFuaW1hdGVPdXQpLHRoaXMuY29yZS5vblRyYW5zaXRpb25FbmQoKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhLGI7Zm9yKGEgaW4gdGhpcy5oYW5kbGVycyl0aGlzLmNvcmUuJGVsZW1lbnQub2ZmKGEsdGhpcy5oYW5kbGVyc1thXSk7Zm9yKGIgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tiXSYmKHRoaXNbYl09bnVsbCl9LFxuYS5mbi5vd2xDYXJvdXNlbC5Db25zdHJ1Y3Rvci5QbHVnaW5zLkFuaW1hdGU9ZX0od2luZG93LlplcHRvfHx3aW5kb3cualF1ZXJ5LHdpbmRvdyxkb2N1bWVudCksZnVuY3Rpb24oYSxiLGMsZCl7dmFyIGU9ZnVuY3Rpb24oYil7dGhpcy5fY29yZT1iLHRoaXMuX3RpbWVvdXQ9bnVsbCx0aGlzLl9wYXVzZWQ9ITEsdGhpcy5faGFuZGxlcnM9e1wiY2hhbmdlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZcInNldHRpbmdzXCI9PT1hLnByb3BlcnR5Lm5hbWU/dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheT90aGlzLnBsYXkoKTp0aGlzLnN0b3AoKTphLm5hbWVzcGFjZSYmXCJwb3NpdGlvblwiPT09YS5wcm9wZXJ0eS5uYW1lJiZ0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5JiZ0aGlzLl9zZXRBdXRvUGxheUludGVydmFsKCl9LHRoaXMpLFwiaW5pdGlhbGl6ZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheSYmdGhpcy5wbGF5KCl9LHRoaXMpLFwicGxheS5vd2wuYXV0b3BsYXlcIjphLnByb3h5KGZ1bmN0aW9uKGEsYixjKXthLm5hbWVzcGFjZSYmdGhpcy5wbGF5KGIsYyl9LHRoaXMpLFwic3RvcC5vd2wuYXV0b3BsYXlcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLnN0b3AoKX0sdGhpcyksXCJtb3VzZW92ZXIub3dsLmF1dG9wbGF5XCI6YS5wcm94eShmdW5jdGlvbigpe3RoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlJiZ0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIikmJnRoaXMucGF1c2UoKX0sdGhpcyksXCJtb3VzZWxlYXZlLm93bC5hdXRvcGxheVwiOmEucHJveHkoZnVuY3Rpb24oKXt0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSYmdGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpJiZ0aGlzLnBsYXkoKX0sdGhpcyksXCJ0b3VjaHN0YXJ0Lm93bC5jb3JlXCI6YS5wcm94eShmdW5jdGlvbigpe3RoaXMuX2NvcmUuc2V0dGluZ3MuYXV0b3BsYXlIb3ZlclBhdXNlJiZ0aGlzLl9jb3JlLmlzKFwicm90YXRpbmdcIikmJnRoaXMucGF1c2UoKX0sdGhpcyksXCJ0b3VjaGVuZC5vd2wuY29yZVwiOmEucHJveHkoZnVuY3Rpb24oKXt0aGlzLl9jb3JlLnNldHRpbmdzLmF1dG9wbGF5SG92ZXJQYXVzZSYmdGhpcy5wbGF5KCl9LHRoaXMpfSx0aGlzLl9jb3JlLiRlbGVtZW50Lm9uKHRoaXMuX2hhbmRsZXJzKSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpfTtlLkRlZmF1bHRzPXthdXRvcGxheTohMSxhdXRvcGxheVRpbWVvdXQ6NWUzLGF1dG9wbGF5SG92ZXJQYXVzZTohMSxhdXRvcGxheVNwZWVkOiExfSxlLnByb3RvdHlwZS5wbGF5PWZ1bmN0aW9uKGEsYil7dGhpcy5fcGF1c2VkPSExLHRoaXMuX2NvcmUuaXMoXCJyb3RhdGluZ1wiKXx8KHRoaXMuX2NvcmUuZW50ZXIoXCJyb3RhdGluZ1wiKSx0aGlzLl9zZXRBdXRvUGxheUludGVydmFsKCkpfSxlLnByb3RvdHlwZS5fZ2V0TmV4dFRpbWVvdXQ9ZnVuY3Rpb24oZCxlKXtyZXR1cm4gdGhpcy5fdGltZW91dCYmYi5jbGVhclRpbWVvdXQodGhpcy5fdGltZW91dCksYi5zZXRUaW1lb3V0KGEucHJveHkoZnVuY3Rpb24oKXt0aGlzLl9wYXVzZWR8fHRoaXMuX2NvcmUuaXMoXCJidXN5XCIpfHx0aGlzLl9jb3JlLmlzKFwiaW50ZXJhY3RpbmdcIil8fGMuaGlkZGVufHx0aGlzLl9jb3JlLm5leHQoZXx8dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheVNwZWVkKX0sdGhpcyksZHx8dGhpcy5fY29yZS5zZXR0aW5ncy5hdXRvcGxheVRpbWVvdXQpfSxlLnByb3RvdHlwZS5fc2V0QXV0b1BsYXlJbnRlcnZhbD1mdW5jdGlvbigpe3RoaXMuX3RpbWVvdXQ9dGhpcy5fZ2V0TmV4dFRpbWVvdXQoKX0sZS5wcm90b3R5cGUuc3RvcD1mdW5jdGlvbigpe3RoaXMuX2NvcmUuaXMoXCJyb3RhdGluZ1wiKSYmKGIuY2xlYXJUaW1lb3V0KHRoaXMuX3RpbWVvdXQpLHRoaXMuX2NvcmUubGVhdmUoXCJyb3RhdGluZ1wiKSl9LGUucHJvdG90eXBlLnBhdXNlPWZ1bmN0aW9uKCl7dGhpcy5fY29yZS5pcyhcInJvdGF0aW5nXCIpJiYodGhpcy5fcGF1c2VkPSEwKX0sZS5wcm90b3R5cGUuZGVzdHJveT1mdW5jdGlvbigpe3ZhciBhLGI7dGhpcy5zdG9wKCk7Zm9yKGEgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoYSx0aGlzLl9oYW5kbGVyc1thXSk7Zm9yKGIgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tiXSYmKHRoaXNbYl09bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5hdXRvcGxheT1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1mdW5jdGlvbihiKXt0aGlzLl9jb3JlPWIsdGhpcy5faW5pdGlhbGl6ZWQ9ITEsdGhpcy5fcGFnZXM9W10sdGhpcy5fY29udHJvbHM9e30sdGhpcy5fdGVtcGxhdGVzPVtdLHRoaXMuJGVsZW1lbnQ9dGhpcy5fY29yZS4kZWxlbWVudCx0aGlzLl9vdmVycmlkZXM9e25leHQ6dGhpcy5fY29yZS5uZXh0LHByZXY6dGhpcy5fY29yZS5wcmV2LHRvOnRoaXMuX2NvcmUudG99LHRoaXMuX2hhbmRsZXJzPXtcInByZXBhcmVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYil7Yi5uYW1lc3BhY2UmJnRoaXMuX2NvcmUuc2V0dGluZ3MuZG90c0RhdGEmJnRoaXMuX3RlbXBsYXRlcy5wdXNoKCc8ZGl2IGNsYXNzPVwiJyt0aGlzLl9jb3JlLnNldHRpbmdzLmRvdENsYXNzKydcIj4nK2EoYi5jb250ZW50KS5maW5kKFwiW2RhdGEtZG90XVwiKS5hZGRCYWNrKFwiW2RhdGEtZG90XVwiKS5hdHRyKFwiZGF0YS1kb3RcIikrXCI8L2Rpdj5cIil9LHRoaXMpLFwiYWRkZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSYmdGhpcy5fdGVtcGxhdGVzLnNwbGljZShhLnBvc2l0aW9uLDAsdGhpcy5fdGVtcGxhdGVzLnBvcCgpKX0sdGhpcyksXCJyZW1vdmUub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmdGhpcy5fY29yZS5zZXR0aW5ncy5kb3RzRGF0YSYmdGhpcy5fdGVtcGxhdGVzLnNwbGljZShhLnBvc2l0aW9uLDEpfSx0aGlzKSxcImNoYW5nZWQub3dsLmNhcm91c2VsXCI6YS5wcm94eShmdW5jdGlvbihhKXthLm5hbWVzcGFjZSYmXCJwb3NpdGlvblwiPT1hLnByb3BlcnR5Lm5hbWUmJnRoaXMuZHJhdygpfSx0aGlzKSxcImluaXRpYWxpemVkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYSl7YS5uYW1lc3BhY2UmJiF0aGlzLl9pbml0aWFsaXplZCYmKHRoaXMuX2NvcmUudHJpZ2dlcihcImluaXRpYWxpemVcIixudWxsLFwibmF2aWdhdGlvblwiKSx0aGlzLmluaXRpYWxpemUoKSx0aGlzLnVwZGF0ZSgpLHRoaXMuZHJhdygpLHRoaXMuX2luaXRpYWxpemVkPSEwLHRoaXMuX2NvcmUudHJpZ2dlcihcImluaXRpYWxpemVkXCIsbnVsbCxcIm5hdmlnYXRpb25cIikpfSx0aGlzKSxcInJlZnJlc2hlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGEpe2EubmFtZXNwYWNlJiZ0aGlzLl9pbml0aWFsaXplZCYmKHRoaXMuX2NvcmUudHJpZ2dlcihcInJlZnJlc2hcIixudWxsLFwibmF2aWdhdGlvblwiKSx0aGlzLnVwZGF0ZSgpLHRoaXMuZHJhdygpLHRoaXMuX2NvcmUudHJpZ2dlcihcInJlZnJlc2hlZFwiLG51bGwsXCJuYXZpZ2F0aW9uXCIpKX0sdGhpcyl9LHRoaXMuX2NvcmUub3B0aW9ucz1hLmV4dGVuZCh7fSxlLkRlZmF1bHRzLHRoaXMuX2NvcmUub3B0aW9ucyksdGhpcy4kZWxlbWVudC5vbih0aGlzLl9oYW5kbGVycyl9O2UuRGVmYXVsdHM9e25hdjohMSxuYXZUZXh0OltcInByZXZcIixcIm5leHRcIl0sbmF2U3BlZWQ6ITEsbmF2RWxlbWVudDpcImRpdlwiLG5hdkNvbnRhaW5lcjohMSxuYXZDb250YWluZXJDbGFzczpcIm93bC1uYXZcIixuYXZDbGFzczpbXCJvd2wtcHJldlwiLFwib3dsLW5leHRcIl0sc2xpZGVCeToxLGRvdENsYXNzOlwib3dsLWRvdFwiLGRvdHNDbGFzczpcIm93bC1kb3RzXCIsZG90czohMCxkb3RzRWFjaDohMSxkb3RzRGF0YTohMSxkb3RzU3BlZWQ6ITEsZG90c0NvbnRhaW5lcjohMX0sZS5wcm90b3R5cGUuaW5pdGlhbGl6ZT1mdW5jdGlvbigpe3ZhciBiLGM9dGhpcy5fY29yZS5zZXR0aW5nczt0aGlzLl9jb250cm9scy4kcmVsYXRpdmU9KGMubmF2Q29udGFpbmVyP2EoYy5uYXZDb250YWluZXIpOmEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhjLm5hdkNvbnRhaW5lckNsYXNzKS5hcHBlbmRUbyh0aGlzLiRlbGVtZW50KSkuYWRkQ2xhc3MoXCJkaXNhYmxlZFwiKSx0aGlzLl9jb250cm9scy4kcHJldmlvdXM9YShcIjxcIitjLm5hdkVsZW1lbnQrXCI+XCIpLmFkZENsYXNzKGMubmF2Q2xhc3NbMF0pLmh0bWwoYy5uYXZUZXh0WzBdKS5wcmVwZW5kVG8odGhpcy5fY29udHJvbHMuJHJlbGF0aXZlKS5vbihcImNsaWNrXCIsYS5wcm94eShmdW5jdGlvbihhKXt0aGlzLnByZXYoYy5uYXZTcGVlZCl9LHRoaXMpKSx0aGlzLl9jb250cm9scy4kbmV4dD1hKFwiPFwiK2MubmF2RWxlbWVudCtcIj5cIikuYWRkQ2xhc3MoYy5uYXZDbGFzc1sxXSkuaHRtbChjLm5hdlRleHRbMV0pLmFwcGVuZFRvKHRoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZSkub24oXCJjbGlja1wiLGEucHJveHkoZnVuY3Rpb24oYSl7dGhpcy5uZXh0KGMubmF2U3BlZWQpfSx0aGlzKSksYy5kb3RzRGF0YXx8KHRoaXMuX3RlbXBsYXRlcz1bYShcIjxkaXY+XCIpLmFkZENsYXNzKGMuZG90Q2xhc3MpLmFwcGVuZChhKFwiPHNwYW4+XCIpKS5wcm9wKFwib3V0ZXJIVE1MXCIpXSksdGhpcy5fY29udHJvbHMuJGFic29sdXRlPShjLmRvdHNDb250YWluZXI/YShjLmRvdHNDb250YWluZXIpOmEoXCI8ZGl2PlwiKS5hZGRDbGFzcyhjLmRvdHNDbGFzcykuYXBwZW5kVG8odGhpcy4kZWxlbWVudCkpLmFkZENsYXNzKFwiZGlzYWJsZWRcIiksdGhpcy5fY29udHJvbHMuJGFic29sdXRlLm9uKFwiY2xpY2tcIixcImRpdlwiLGEucHJveHkoZnVuY3Rpb24oYil7dmFyIGQ9YShiLnRhcmdldCkucGFyZW50KCkuaXModGhpcy5fY29udHJvbHMuJGFic29sdXRlKT9hKGIudGFyZ2V0KS5pbmRleCgpOmEoYi50YXJnZXQpLnBhcmVudCgpLmluZGV4KCk7Yi5wcmV2ZW50RGVmYXVsdCgpLHRoaXMudG8oZCxjLmRvdHNTcGVlZCl9LHRoaXMpKTtmb3IoYiBpbiB0aGlzLl9vdmVycmlkZXMpdGhpcy5fY29yZVtiXT1hLnByb3h5KHRoaXNbYl0sdGhpcyl9LGUucHJvdG90eXBlLmRlc3Ryb3k9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZDtmb3IoYSBpbiB0aGlzLl9oYW5kbGVycyl0aGlzLiRlbGVtZW50Lm9mZihhLHRoaXMuX2hhbmRsZXJzW2FdKTtmb3IoYiBpbiB0aGlzLl9jb250cm9scyl0aGlzLl9jb250cm9sc1tiXS5yZW1vdmUoKTtmb3IoZCBpbiB0aGlzLm92ZXJpZGVzKXRoaXMuX2NvcmVbZF09dGhpcy5fb3ZlcnJpZGVzW2RdO2ZvcihjIGluIE9iamVjdC5nZXRPd25Qcm9wZXJ0eU5hbWVzKHRoaXMpKVwiZnVuY3Rpb25cIiE9dHlwZW9mIHRoaXNbY10mJih0aGlzW2NdPW51bGwpfSxlLnByb3RvdHlwZS51cGRhdGU9ZnVuY3Rpb24oKXt2YXIgYSxiLGMsZD10aGlzLl9jb3JlLmNsb25lcygpLmxlbmd0aC8yLGU9ZCt0aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoLGY9dGhpcy5fY29yZS5tYXhpbXVtKCEwKSxnPXRoaXMuX2NvcmUuc2V0dGluZ3MsaD1nLmNlbnRlcnx8Zy5hdXRvV2lkdGh8fGcuZG90c0RhdGE/MTpnLmRvdHNFYWNofHxnLml0ZW1zO2lmKFwicGFnZVwiIT09Zy5zbGlkZUJ5JiYoZy5zbGlkZUJ5PU1hdGgubWluKGcuc2xpZGVCeSxnLml0ZW1zKSksZy5kb3RzfHxcInBhZ2VcIj09Zy5zbGlkZUJ5KWZvcih0aGlzLl9wYWdlcz1bXSxhPWQsYj0wLGM9MDthPGU7YSsrKXtpZihiPj1ofHwwPT09Yil7aWYodGhpcy5fcGFnZXMucHVzaCh7c3RhcnQ6TWF0aC5taW4oZixhLWQpLGVuZDphLWQraC0xfSksTWF0aC5taW4oZixhLWQpPT09ZilicmVhaztiPTAsKytjfWIrPXRoaXMuX2NvcmUubWVyZ2Vycyh0aGlzLl9jb3JlLnJlbGF0aXZlKGEpKX19LGUucHJvdG90eXBlLmRyYXc9ZnVuY3Rpb24oKXt2YXIgYixjPXRoaXMuX2NvcmUuc2V0dGluZ3MsZD10aGlzLl9jb3JlLml0ZW1zKCkubGVuZ3RoPD1jLml0ZW1zLGU9dGhpcy5fY29yZS5yZWxhdGl2ZSh0aGlzLl9jb3JlLmN1cnJlbnQoKSksZj1jLmxvb3B8fGMucmV3aW5kO3RoaXMuX2NvbnRyb2xzLiRyZWxhdGl2ZS50b2dnbGVDbGFzcyhcImRpc2FibGVkXCIsIWMubmF2fHxkKSxjLm5hdiYmKHRoaXMuX2NvbnRyb2xzLiRwcmV2aW91cy50b2dnbGVDbGFzcyhcImRpc2FibGVkXCIsIWYmJmU8PXRoaXMuX2NvcmUubWluaW11bSghMCkpLHRoaXMuX2NvbnRyb2xzLiRuZXh0LnRvZ2dsZUNsYXNzKFwiZGlzYWJsZWRcIiwhZiYmZT49dGhpcy5fY29yZS5tYXhpbXVtKCEwKSkpLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS50b2dnbGVDbGFzcyhcImRpc2FibGVkXCIsIWMuZG90c3x8ZCksYy5kb3RzJiYoYj10aGlzLl9wYWdlcy5sZW5ndGgtdGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkubGVuZ3RoLGMuZG90c0RhdGEmJjAhPT1iP3RoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5odG1sKHRoaXMuX3RlbXBsYXRlcy5qb2luKFwiXCIpKTpiPjA/dGhpcy5fY29udHJvbHMuJGFic29sdXRlLmFwcGVuZChuZXcgQXJyYXkoYisxKS5qb2luKHRoaXMuX3RlbXBsYXRlc1swXSkpOmI8MCYmdGhpcy5fY29udHJvbHMuJGFic29sdXRlLmNoaWxkcmVuKCkuc2xpY2UoYikucmVtb3ZlKCksdGhpcy5fY29udHJvbHMuJGFic29sdXRlLmZpbmQoXCIuYWN0aXZlXCIpLnJlbW92ZUNsYXNzKFwiYWN0aXZlXCIpLHRoaXMuX2NvbnRyb2xzLiRhYnNvbHV0ZS5jaGlsZHJlbigpLmVxKGEuaW5BcnJheSh0aGlzLmN1cnJlbnQoKSx0aGlzLl9wYWdlcykpLmFkZENsYXNzKFwiYWN0aXZlXCIpKX0sZS5wcm90b3R5cGUub25UcmlnZ2VyPWZ1bmN0aW9uKGIpe3ZhciBjPXRoaXMuX2NvcmUuc2V0dGluZ3M7Yi5wYWdlPXtpbmRleDphLmluQXJyYXkodGhpcy5jdXJyZW50KCksdGhpcy5fcGFnZXMpLGNvdW50OnRoaXMuX3BhZ2VzLmxlbmd0aCxzaXplOmMmJihjLmNlbnRlcnx8Yy5hdXRvV2lkdGh8fGMuZG90c0RhdGE/MTpjLmRvdHNFYWNofHxjLml0ZW1zKX19LGUucHJvdG90eXBlLmN1cnJlbnQ9ZnVuY3Rpb24oKXt2YXIgYj10aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKTtyZXR1cm4gYS5ncmVwKHRoaXMuX3BhZ2VzLGEucHJveHkoZnVuY3Rpb24oYSxjKXtyZXR1cm4gYS5zdGFydDw9YiYmYS5lbmQ+PWJ9LHRoaXMpKS5wb3AoKX0sZS5wcm90b3R5cGUuZ2V0UG9zaXRpb249ZnVuY3Rpb24oYil7dmFyIGMsZCxlPXRoaXMuX2NvcmUuc2V0dGluZ3M7cmV0dXJuXCJwYWdlXCI9PWUuc2xpZGVCeT8oYz1hLmluQXJyYXkodGhpcy5jdXJyZW50KCksdGhpcy5fcGFnZXMpLGQ9dGhpcy5fcGFnZXMubGVuZ3RoLGI/KytjOi0tYyxjPXRoaXMuX3BhZ2VzWyhjJWQrZCklZF0uc3RhcnQpOihjPXRoaXMuX2NvcmUucmVsYXRpdmUodGhpcy5fY29yZS5jdXJyZW50KCkpLGQ9dGhpcy5fY29yZS5pdGVtcygpLmxlbmd0aCxiP2MrPWUuc2xpZGVCeTpjLT1lLnNsaWRlQnkpLGN9LGUucHJvdG90eXBlLm5leHQ9ZnVuY3Rpb24oYil7YS5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sdGhpcy5fY29yZSkodGhpcy5nZXRQb3NpdGlvbighMCksYil9LGUucHJvdG90eXBlLnByZXY9ZnVuY3Rpb24oYil7YS5wcm94eSh0aGlzLl9vdmVycmlkZXMudG8sdGhpcy5fY29yZSkodGhpcy5nZXRQb3NpdGlvbighMSksYil9LGUucHJvdG90eXBlLnRvPWZ1bmN0aW9uKGIsYyxkKXt2YXIgZTshZCYmdGhpcy5fcGFnZXMubGVuZ3RoPyhlPXRoaXMuX3BhZ2VzLmxlbmd0aCxhLnByb3h5KHRoaXMuX292ZXJyaWRlcy50byx0aGlzLl9jb3JlKSh0aGlzLl9wYWdlc1soYiVlK2UpJWVdLnN0YXJ0LGMpKTphLnByb3h5KHRoaXMuX292ZXJyaWRlcy50byx0aGlzLl9jb3JlKShiLGMpfSxhLmZuLm93bENhcm91c2VsLkNvbnN0cnVjdG9yLlBsdWdpbnMuTmF2aWdhdGlvbj1lfSh3aW5kb3cuWmVwdG98fHdpbmRvdy5qUXVlcnksd2luZG93LGRvY3VtZW50KSxmdW5jdGlvbihhLGIsYyxkKXtcInVzZSBzdHJpY3RcIjt2YXIgZT1mdW5jdGlvbihjKXt0aGlzLl9jb3JlPWMsdGhpcy5faGFzaGVzPXt9LHRoaXMuJGVsZW1lbnQ9dGhpcy5fY29yZS4kZWxlbWVudCx0aGlzLl9oYW5kbGVycz17XCJpbml0aWFsaXplZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGMpe2MubmFtZXNwYWNlJiZcIlVSTEhhc2hcIj09PXRoaXMuX2NvcmUuc2V0dGluZ3Muc3RhcnRQb3NpdGlvbiYmYShiKS50cmlnZ2VyKFwiaGFzaGNoYW5nZS5vd2wubmF2aWdhdGlvblwiKX0sdGhpcyksXCJwcmVwYXJlZC5vd2wuY2Fyb3VzZWxcIjphLnByb3h5KGZ1bmN0aW9uKGIpe2lmKGIubmFtZXNwYWNlKXt2YXIgYz1hKGIuY29udGVudCkuZmluZChcIltkYXRhLWhhc2hdXCIpLmFkZEJhY2soXCJbZGF0YS1oYXNoXVwiKS5hdHRyKFwiZGF0YS1oYXNoXCIpO2lmKCFjKXJldHVybjt0aGlzLl9oYXNoZXNbY109Yi5jb250ZW50fX0sdGhpcyksXCJjaGFuZ2VkLm93bC5jYXJvdXNlbFwiOmEucHJveHkoZnVuY3Rpb24oYyl7aWYoYy5uYW1lc3BhY2UmJlwicG9zaXRpb25cIj09PWMucHJvcGVydHkubmFtZSl7dmFyIGQ9dGhpcy5fY29yZS5pdGVtcyh0aGlzLl9jb3JlLnJlbGF0aXZlKHRoaXMuX2NvcmUuY3VycmVudCgpKSksZT1hLm1hcCh0aGlzLl9oYXNoZXMsZnVuY3Rpb24oYSxiKXtyZXR1cm4gYT09PWQ/YjpudWxsfSkuam9pbigpO2lmKCFlfHxiLmxvY2F0aW9uLmhhc2guc2xpY2UoMSk9PT1lKXJldHVybjtiLmxvY2F0aW9uLmhhc2g9ZX19LHRoaXMpfSx0aGlzLl9jb3JlLm9wdGlvbnM9YS5leHRlbmQoe30sZS5EZWZhdWx0cyx0aGlzLl9jb3JlLm9wdGlvbnMpLHRoaXMuJGVsZW1lbnQub24odGhpcy5faGFuZGxlcnMpLGEoYikub24oXCJoYXNoY2hhbmdlLm93bC5uYXZpZ2F0aW9uXCIsYS5wcm94eShmdW5jdGlvbihhKXt2YXIgYz1iLmxvY2F0aW9uLmhhc2guc3Vic3RyaW5nKDEpLGU9dGhpcy5fY29yZS4kc3RhZ2UuY2hpbGRyZW4oKSxmPXRoaXMuX2hhc2hlc1tjXSYmZS5pbmRleCh0aGlzLl9oYXNoZXNbY10pO2YhPT1kJiZmIT09dGhpcy5fY29yZS5jdXJyZW50KCkmJnRoaXMuX2NvcmUudG8odGhpcy5fY29yZS5yZWxhdGl2ZShmKSwhMSwhMCl9LHRoaXMpKX07ZS5EZWZhdWx0cz17VVJMaGFzaExpc3RlbmVyOiExfSxlLnByb3RvdHlwZS5kZXN0cm95PWZ1bmN0aW9uKCl7dmFyIGMsZDthKGIpLm9mZihcImhhc2hjaGFuZ2Uub3dsLm5hdmlnYXRpb25cIik7Zm9yKGMgaW4gdGhpcy5faGFuZGxlcnMpdGhpcy5fY29yZS4kZWxlbWVudC5vZmYoYyx0aGlzLl9oYW5kbGVyc1tjXSk7Zm9yKGQgaW4gT2JqZWN0LmdldE93blByb3BlcnR5TmFtZXModGhpcykpXCJmdW5jdGlvblwiIT10eXBlb2YgdGhpc1tkXSYmKHRoaXNbZF09bnVsbCl9LGEuZm4ub3dsQ2Fyb3VzZWwuQ29uc3RydWN0b3IuUGx1Z2lucy5IYXNoPWV9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpLGZ1bmN0aW9uKGEsYixjLGQpe2Z1bmN0aW9uIGUoYixjKXt2YXIgZT0hMSxmPWIuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrYi5zbGljZSgxKTtyZXR1cm4gYS5lYWNoKChiK1wiIFwiK2guam9pbihmK1wiIFwiKStmKS5zcGxpdChcIiBcIiksZnVuY3Rpb24oYSxiKXtpZihnW2JdIT09ZClyZXR1cm4gZT0hY3x8YiwhMX0pLGV9ZnVuY3Rpb24gZihhKXtyZXR1cm4gZShhLCEwKX12YXIgZz1hKFwiPHN1cHBvcnQ+XCIpLmdldCgwKS5zdHlsZSxoPVwiV2Via2l0IE1veiBPIG1zXCIuc3BsaXQoXCIgXCIpLGk9e3RyYW5zaXRpb246e2VuZDp7V2Via2l0VHJhbnNpdGlvbjpcIndlYmtpdFRyYW5zaXRpb25FbmRcIixNb3pUcmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwiLE9UcmFuc2l0aW9uOlwib1RyYW5zaXRpb25FbmRcIix0cmFuc2l0aW9uOlwidHJhbnNpdGlvbmVuZFwifX0sYW5pbWF0aW9uOntlbmQ6e1dlYmtpdEFuaW1hdGlvbjpcIndlYmtpdEFuaW1hdGlvbkVuZFwiLE1vekFuaW1hdGlvbjpcImFuaW1hdGlvbmVuZFwiLE9BbmltYXRpb246XCJvQW5pbWF0aW9uRW5kXCIsYW5pbWF0aW9uOlwiYW5pbWF0aW9uZW5kXCJ9fX0saj17Y3NzdHJhbnNmb3JtczpmdW5jdGlvbigpe3JldHVybiEhZShcInRyYW5zZm9ybVwiKX0sY3NzdHJhbnNmb3JtczNkOmZ1bmN0aW9uKCl7cmV0dXJuISFlKFwicGVyc3BlY3RpdmVcIil9LGNzc3RyYW5zaXRpb25zOmZ1bmN0aW9uKCl7cmV0dXJuISFlKFwidHJhbnNpdGlvblwiKX0sY3NzYW5pbWF0aW9uczpmdW5jdGlvbigpe3JldHVybiEhZShcImFuaW1hdGlvblwiKX19O2ouY3NzdHJhbnNpdGlvbnMoKSYmKGEuc3VwcG9ydC50cmFuc2l0aW9uPW5ldyBTdHJpbmcoZihcInRyYW5zaXRpb25cIikpLGEuc3VwcG9ydC50cmFuc2l0aW9uLmVuZD1pLnRyYW5zaXRpb24uZW5kW2Euc3VwcG9ydC50cmFuc2l0aW9uXSksai5jc3NhbmltYXRpb25zKCkmJihhLnN1cHBvcnQuYW5pbWF0aW9uPW5ldyBTdHJpbmcoZihcImFuaW1hdGlvblwiKSksYS5zdXBwb3J0LmFuaW1hdGlvbi5lbmQ9aS5hbmltYXRpb24uZW5kW2Euc3VwcG9ydC5hbmltYXRpb25dKSxqLmNzc3RyYW5zZm9ybXMoKSYmKGEuc3VwcG9ydC50cmFuc2Zvcm09bmV3IFN0cmluZyhmKFwidHJhbnNmb3JtXCIpKSxhLnN1cHBvcnQudHJhbnNmb3JtM2Q9ai5jc3N0cmFuc2Zvcm1zM2QoKSl9KHdpbmRvdy5aZXB0b3x8d2luZG93LmpRdWVyeSx3aW5kb3csZG9jdW1lbnQpO1xuXG5cbi8vIFdFQlBBQ0sgRk9PVEVSIC8vXG4vLyAuL2Fzc2V0cy9qcy9vd2wuY2Fyb3VzZWwubWluLmpzIiwiLypcbiBDb3B5cmlnaHQgKEMpIEZlZGVyaWNvIFppdm9sbyAyMDE3XG4gRGlzdHJpYnV0ZWQgdW5kZXIgdGhlIE1JVCBMaWNlbnNlIChsaWNlbnNlIHRlcm1zIGFyZSBhdCBodHRwOi8vb3BlbnNvdXJjZS5vcmcvbGljZW5zZXMvTUlUKS5cbiAqL1xuIChmdW5jdGlvbihlLHQpeydvYmplY3QnPT10eXBlb2YgZXhwb3J0cyYmJ3VuZGVmaW5lZCchPXR5cGVvZiBtb2R1bGU/bW9kdWxlLmV4cG9ydHM9dCgpOidmdW5jdGlvbic9PXR5cGVvZiBkZWZpbmUmJmRlZmluZS5hbWQ/ZGVmaW5lKHQpOmUuUG9wcGVyPXQoKX0pKHRoaXMsZnVuY3Rpb24oKXsndXNlIHN0cmljdCc7ZnVuY3Rpb24gZShlKXtyZXR1cm4gZSYmJ1tvYmplY3QgRnVuY3Rpb25dJz09PXt9LnRvU3RyaW5nLmNhbGwoZSl9ZnVuY3Rpb24gdChlLHQpe2lmKDEhPT1lLm5vZGVUeXBlKXJldHVybltdO3ZhciBvPXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUsbnVsbCk7cmV0dXJuIHQ/b1t0XTpvfWZ1bmN0aW9uIG8oZSl7cmV0dXJuJ0hUTUwnPT09ZS5ub2RlTmFtZT9lOmUucGFyZW50Tm9kZXx8ZS5ob3N0fWZ1bmN0aW9uIG4oZSl7aWYoIWV8fC0xIT09WydIVE1MJywnQk9EWScsJyNkb2N1bWVudCddLmluZGV4T2YoZS5ub2RlTmFtZSkpcmV0dXJuIHdpbmRvdy5kb2N1bWVudC5ib2R5O3ZhciBpPXQoZSkscj1pLm92ZXJmbG93LHA9aS5vdmVyZmxvd1gscz1pLm92ZXJmbG93WTtyZXR1cm4gLyhhdXRvfHNjcm9sbCkvLnRlc3QocitzK3ApP2U6bihvKGUpKX1mdW5jdGlvbiByKGUpe3ZhciBvPWUmJmUub2Zmc2V0UGFyZW50LGk9byYmby5ub2RlTmFtZTtyZXR1cm4gaSYmJ0JPRFknIT09aSYmJ0hUTUwnIT09aT8tMSE9PVsnVEQnLCdUQUJMRSddLmluZGV4T2Yoby5ub2RlTmFtZSkmJidzdGF0aWMnPT09dChvLCdwb3NpdGlvbicpP3Iobyk6bzp3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50fWZ1bmN0aW9uIHAoZSl7dmFyIHQ9ZS5ub2RlTmFtZTtyZXR1cm4nQk9EWSchPT10JiYoJ0hUTUwnPT09dHx8cihlLmZpcnN0RWxlbWVudENoaWxkKT09PWUpfWZ1bmN0aW9uIHMoZSl7cmV0dXJuIG51bGw9PT1lLnBhcmVudE5vZGU/ZTpzKGUucGFyZW50Tm9kZSl9ZnVuY3Rpb24gZChlLHQpe2lmKCFlfHwhZS5ub2RlVHlwZXx8IXR8fCF0Lm5vZGVUeXBlKXJldHVybiB3aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O3ZhciBvPWUuY29tcGFyZURvY3VtZW50UG9zaXRpb24odCkmTm9kZS5ET0NVTUVOVF9QT1NJVElPTl9GT0xMT1dJTkcsaT1vP2U6dCxuPW8/dDplLGE9ZG9jdW1lbnQuY3JlYXRlUmFuZ2UoKTthLnNldFN0YXJ0KGksMCksYS5zZXRFbmQobiwwKTt2YXIgbD1hLmNvbW1vbkFuY2VzdG9yQ29udGFpbmVyO2lmKGUhPT1sJiZ0IT09bHx8aS5jb250YWlucyhuKSlyZXR1cm4gcChsKT9sOnIobCk7dmFyIGY9cyhlKTtyZXR1cm4gZi5ob3N0P2QoZi5ob3N0LHQpOmQoZSxzKHQpLmhvc3QpfWZ1bmN0aW9uIGEoZSl7dmFyIHQ9MTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMV0/YXJndW1lbnRzWzFdOid0b3AnLG89J3RvcCc9PT10PydzY3JvbGxUb3AnOidzY3JvbGxMZWZ0JyxpPWUubm9kZU5hbWU7aWYoJ0JPRFknPT09aXx8J0hUTUwnPT09aSl7dmFyIG49d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxyPXdpbmRvdy5kb2N1bWVudC5zY3JvbGxpbmdFbGVtZW50fHxuO3JldHVybiByW29dfXJldHVybiBlW29dfWZ1bmN0aW9uIGwoZSx0KXt2YXIgbz0yPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1syXSYmYXJndW1lbnRzWzJdLGk9YSh0LCd0b3AnKSxuPWEodCwnbGVmdCcpLHI9bz8tMToxO3JldHVybiBlLnRvcCs9aSpyLGUuYm90dG9tKz1pKnIsZS5sZWZ0Kz1uKnIsZS5yaWdodCs9bipyLGV9ZnVuY3Rpb24gZihlLHQpe3ZhciBvPSd4Jz09PXQ/J0xlZnQnOidUb3AnLGk9J0xlZnQnPT1vPydSaWdodCc6J0JvdHRvbSc7cmV0dXJuK2VbJ2JvcmRlcicrbysnV2lkdGgnXS5zcGxpdCgncHgnKVswXSsgK2VbJ2JvcmRlcicraSsnV2lkdGgnXS5zcGxpdCgncHgnKVswXX1mdW5jdGlvbiBtKGUsdCxvLGkpe3JldHVybiBYKHRbJ29mZnNldCcrZV0sdFsnc2Nyb2xsJytlXSxvWydjbGllbnQnK2VdLG9bJ29mZnNldCcrZV0sb1snc2Nyb2xsJytlXSxuZSgpP29bJ29mZnNldCcrZV0raVsnbWFyZ2luJysoJ0hlaWdodCc9PT1lPydUb3AnOidMZWZ0JyldK2lbJ21hcmdpbicrKCdIZWlnaHQnPT09ZT8nQm90dG9tJzonUmlnaHQnKV06MCl9ZnVuY3Rpb24gYygpe3ZhciBlPXdpbmRvdy5kb2N1bWVudC5ib2R5LHQ9d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudCxvPW5lKCkmJndpbmRvdy5nZXRDb21wdXRlZFN0eWxlKHQpO3JldHVybntoZWlnaHQ6bSgnSGVpZ2h0JyxlLHQsbyksd2lkdGg6bSgnV2lkdGgnLGUsdCxvKX19ZnVuY3Rpb24gaChlKXtyZXR1cm4gZGUoe30sZSx7cmlnaHQ6ZS5sZWZ0K2Uud2lkdGgsYm90dG9tOmUudG9wK2UuaGVpZ2h0fSl9ZnVuY3Rpb24gZyhlKXt2YXIgbz17fTtpZihuZSgpKXRyeXtvPWUuZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCk7dmFyIGk9YShlLCd0b3AnKSxuPWEoZSwnbGVmdCcpO28udG9wKz1pLG8ubGVmdCs9bixvLmJvdHRvbSs9aSxvLnJpZ2h0Kz1ufWNhdGNoKGUpe31lbHNlIG89ZS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTt2YXIgcj17bGVmdDpvLmxlZnQsdG9wOm8udG9wLHdpZHRoOm8ucmlnaHQtby5sZWZ0LGhlaWdodDpvLmJvdHRvbS1vLnRvcH0scD0nSFRNTCc9PT1lLm5vZGVOYW1lP2MoKTp7fSxzPXAud2lkdGh8fGUuY2xpZW50V2lkdGh8fHIucmlnaHQtci5sZWZ0LGQ9cC5oZWlnaHR8fGUuY2xpZW50SGVpZ2h0fHxyLmJvdHRvbS1yLnRvcCxsPWUub2Zmc2V0V2lkdGgtcyxtPWUub2Zmc2V0SGVpZ2h0LWQ7aWYobHx8bSl7dmFyIGc9dChlKTtsLT1mKGcsJ3gnKSxtLT1mKGcsJ3knKSxyLndpZHRoLT1sLHIuaGVpZ2h0LT1tfXJldHVybiBoKHIpfWZ1bmN0aW9uIHUoZSxvKXt2YXIgaT1uZSgpLHI9J0hUTUwnPT09by5ub2RlTmFtZSxwPWcoZSkscz1nKG8pLGQ9bihlKSxhPXQobyksZj0rYS5ib3JkZXJUb3BXaWR0aC5zcGxpdCgncHgnKVswXSxtPSthLmJvcmRlckxlZnRXaWR0aC5zcGxpdCgncHgnKVswXSxjPWgoe3RvcDpwLnRvcC1zLnRvcC1mLGxlZnQ6cC5sZWZ0LXMubGVmdC1tLHdpZHRoOnAud2lkdGgsaGVpZ2h0OnAuaGVpZ2h0fSk7aWYoYy5tYXJnaW5Ub3A9MCxjLm1hcmdpbkxlZnQ9MCwhaSYmcil7dmFyIHU9K2EubWFyZ2luVG9wLnNwbGl0KCdweCcpWzBdLGI9K2EubWFyZ2luTGVmdC5zcGxpdCgncHgnKVswXTtjLnRvcC09Zi11LGMuYm90dG9tLT1mLXUsYy5sZWZ0LT1tLWIsYy5yaWdodC09bS1iLGMubWFyZ2luVG9wPXUsYy5tYXJnaW5MZWZ0PWJ9cmV0dXJuKGk/by5jb250YWlucyhkKTpvPT09ZCYmJ0JPRFknIT09ZC5ub2RlTmFtZSkmJihjPWwoYyxvKSksY31mdW5jdGlvbiBiKGUpe3ZhciB0PXdpbmRvdy5kb2N1bWVudC5kb2N1bWVudEVsZW1lbnQsbz11KGUsdCksaT1YKHQuY2xpZW50V2lkdGgsd2luZG93LmlubmVyV2lkdGh8fDApLG49WCh0LmNsaWVudEhlaWdodCx3aW5kb3cuaW5uZXJIZWlnaHR8fDApLHI9YSh0KSxwPWEodCwnbGVmdCcpLHM9e3RvcDpyLW8udG9wK28ubWFyZ2luVG9wLGxlZnQ6cC1vLmxlZnQrby5tYXJnaW5MZWZ0LHdpZHRoOmksaGVpZ2h0Om59O3JldHVybiBoKHMpfWZ1bmN0aW9uIHkoZSl7dmFyIGk9ZS5ub2RlTmFtZTtyZXR1cm4nQk9EWSc9PT1pfHwnSFRNTCc9PT1pPyExOidmaXhlZCc9PT10KGUsJ3Bvc2l0aW9uJyl8fHkobyhlKSl9ZnVuY3Rpb24gdyhlLHQsaSxyKXt2YXIgcD17dG9wOjAsbGVmdDowfSxzPWQoZSx0KTtpZigndmlld3BvcnQnPT09cilwPWIocyk7ZWxzZXt2YXIgYTsnc2Nyb2xsUGFyZW50Jz09PXI/KGE9bihvKGUpKSwnQk9EWSc9PT1hLm5vZGVOYW1lJiYoYT13aW5kb3cuZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50KSk6J3dpbmRvdyc9PT1yP2E9d2luZG93LmRvY3VtZW50LmRvY3VtZW50RWxlbWVudDphPXI7dmFyIGw9dShhLHMpO2lmKCdIVE1MJz09PWEubm9kZU5hbWUmJiF5KHMpKXt2YXIgZj1jKCksbT1mLmhlaWdodCxoPWYud2lkdGg7cC50b3ArPWwudG9wLWwubWFyZ2luVG9wLHAuYm90dG9tPW0rbC50b3AscC5sZWZ0Kz1sLmxlZnQtbC5tYXJnaW5MZWZ0LHAucmlnaHQ9aCtsLmxlZnR9ZWxzZSBwPWx9cmV0dXJuIHAubGVmdCs9aSxwLnRvcCs9aSxwLnJpZ2h0LT1pLHAuYm90dG9tLT1pLHB9ZnVuY3Rpb24gRShlKXt2YXIgdD1lLndpZHRoLG89ZS5oZWlnaHQ7cmV0dXJuIHQqb31mdW5jdGlvbiB2KGUsdCxvLGksbil7dmFyIHI9NTxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbNV0/YXJndW1lbnRzWzVdOjA7aWYoLTE9PT1lLmluZGV4T2YoJ2F1dG8nKSlyZXR1cm4gZTt2YXIgcD13KG8saSxyLG4pLHM9e3RvcDp7d2lkdGg6cC53aWR0aCxoZWlnaHQ6dC50b3AtcC50b3B9LHJpZ2h0Ont3aWR0aDpwLnJpZ2h0LXQucmlnaHQsaGVpZ2h0OnAuaGVpZ2h0fSxib3R0b206e3dpZHRoOnAud2lkdGgsaGVpZ2h0OnAuYm90dG9tLXQuYm90dG9tfSxsZWZ0Ont3aWR0aDp0LmxlZnQtcC5sZWZ0LGhlaWdodDpwLmhlaWdodH19LGQ9T2JqZWN0LmtleXMocykubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBkZSh7a2V5OmV9LHNbZV0se2FyZWE6RShzW2VdKX0pfSkuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiB0LmFyZWEtZS5hcmVhfSksYT1kLmZpbHRlcihmdW5jdGlvbihlKXt2YXIgdD1lLndpZHRoLGk9ZS5oZWlnaHQ7cmV0dXJuIHQ+PW8uY2xpZW50V2lkdGgmJmk+PW8uY2xpZW50SGVpZ2h0fSksbD0wPGEubGVuZ3RoP2FbMF0ua2V5OmRbMF0ua2V5LGY9ZS5zcGxpdCgnLScpWzFdO3JldHVybiBsKyhmPyctJytmOicnKX1mdW5jdGlvbiB4KGUsdCxvKXt2YXIgaT1kKHQsbyk7cmV0dXJuIHUobyxpKX1mdW5jdGlvbiBPKGUpe3ZhciB0PXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKGUpLG89cGFyc2VGbG9hdCh0Lm1hcmdpblRvcCkrcGFyc2VGbG9hdCh0Lm1hcmdpbkJvdHRvbSksaT1wYXJzZUZsb2F0KHQubWFyZ2luTGVmdCkrcGFyc2VGbG9hdCh0Lm1hcmdpblJpZ2h0KSxuPXt3aWR0aDplLm9mZnNldFdpZHRoK2ksaGVpZ2h0OmUub2Zmc2V0SGVpZ2h0K299O3JldHVybiBufWZ1bmN0aW9uIEwoZSl7dmFyIHQ9e2xlZnQ6J3JpZ2h0JyxyaWdodDonbGVmdCcsYm90dG9tOid0b3AnLHRvcDonYm90dG9tJ307cmV0dXJuIGUucmVwbGFjZSgvbGVmdHxyaWdodHxib3R0b218dG9wL2csZnVuY3Rpb24oZSl7cmV0dXJuIHRbZV19KX1mdW5jdGlvbiBTKGUsdCxvKXtvPW8uc3BsaXQoJy0nKVswXTt2YXIgaT1PKGUpLG49e3dpZHRoOmkud2lkdGgsaGVpZ2h0OmkuaGVpZ2h0fSxyPS0xIT09WydyaWdodCcsJ2xlZnQnXS5pbmRleE9mKG8pLHA9cj8ndG9wJzonbGVmdCcscz1yPydsZWZ0JzondG9wJyxkPXI/J2hlaWdodCc6J3dpZHRoJyxhPXI/J3dpZHRoJzonaGVpZ2h0JztyZXR1cm4gbltwXT10W3BdK3RbZF0vMi1pW2RdLzIsbltzXT1vPT09cz90W3NdLWlbYV06dFtMKHMpXSxufWZ1bmN0aW9uIFQoZSx0KXtyZXR1cm4gQXJyYXkucHJvdG90eXBlLmZpbmQ/ZS5maW5kKHQpOmUuZmlsdGVyKHQpWzBdfWZ1bmN0aW9uIEMoZSx0LG8pe2lmKEFycmF5LnByb3RvdHlwZS5maW5kSW5kZXgpcmV0dXJuIGUuZmluZEluZGV4KGZ1bmN0aW9uKGUpe3JldHVybiBlW3RdPT09b30pO3ZhciBpPVQoZSxmdW5jdGlvbihlKXtyZXR1cm4gZVt0XT09PW99KTtyZXR1cm4gZS5pbmRleE9mKGkpfWZ1bmN0aW9uIE4odCxvLGkpe3ZhciBuPXZvaWQgMD09PWk/dDp0LnNsaWNlKDAsQyh0LCduYW1lJyxpKSk7cmV0dXJuIG4uZm9yRWFjaChmdW5jdGlvbih0KXt0LmZ1bmN0aW9uJiZjb25zb2xlLndhcm4oJ2Btb2RpZmllci5mdW5jdGlvbmAgaXMgZGVwcmVjYXRlZCwgdXNlIGBtb2RpZmllci5mbmAhJyk7dmFyIGk9dC5mdW5jdGlvbnx8dC5mbjt0LmVuYWJsZWQmJmUoaSkmJihvLm9mZnNldHMucG9wcGVyPWgoby5vZmZzZXRzLnBvcHBlciksby5vZmZzZXRzLnJlZmVyZW5jZT1oKG8ub2Zmc2V0cy5yZWZlcmVuY2UpLG89aShvLHQpKX0pLG99ZnVuY3Rpb24gaygpe2lmKCF0aGlzLnN0YXRlLmlzRGVzdHJveWVkKXt2YXIgZT17aW5zdGFuY2U6dGhpcyxzdHlsZXM6e30sYXJyb3dTdHlsZXM6e30sYXR0cmlidXRlczp7fSxmbGlwcGVkOiExLG9mZnNldHM6e319O2Uub2Zmc2V0cy5yZWZlcmVuY2U9eCh0aGlzLnN0YXRlLHRoaXMucG9wcGVyLHRoaXMucmVmZXJlbmNlKSxlLnBsYWNlbWVudD12KHRoaXMub3B0aW9ucy5wbGFjZW1lbnQsZS5vZmZzZXRzLnJlZmVyZW5jZSx0aGlzLnBvcHBlcix0aGlzLnJlZmVyZW5jZSx0aGlzLm9wdGlvbnMubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsdGhpcy5vcHRpb25zLm1vZGlmaWVycy5mbGlwLnBhZGRpbmcpLGUub3JpZ2luYWxQbGFjZW1lbnQ9ZS5wbGFjZW1lbnQsZS5vZmZzZXRzLnBvcHBlcj1TKHRoaXMucG9wcGVyLGUub2Zmc2V0cy5yZWZlcmVuY2UsZS5wbGFjZW1lbnQpLGUub2Zmc2V0cy5wb3BwZXIucG9zaXRpb249J2Fic29sdXRlJyxlPU4odGhpcy5tb2RpZmllcnMsZSksdGhpcy5zdGF0ZS5pc0NyZWF0ZWQ/dGhpcy5vcHRpb25zLm9uVXBkYXRlKGUpOih0aGlzLnN0YXRlLmlzQ3JlYXRlZD0hMCx0aGlzLm9wdGlvbnMub25DcmVhdGUoZSkpfX1mdW5jdGlvbiBXKGUsdCl7cmV0dXJuIGUuc29tZShmdW5jdGlvbihlKXt2YXIgbz1lLm5hbWUsaT1lLmVuYWJsZWQ7cmV0dXJuIGkmJm89PT10fSl9ZnVuY3Rpb24gQihlKXtmb3IodmFyIHQ9WyExLCdtcycsJ1dlYmtpdCcsJ01veicsJ08nXSxvPWUuY2hhckF0KDApLnRvVXBwZXJDYXNlKCkrZS5zbGljZSgxKSxuPTA7bjx0Lmxlbmd0aC0xO24rKyl7dmFyIGk9dFtuXSxyPWk/JycraStvOmU7aWYoJ3VuZGVmaW5lZCchPXR5cGVvZiB3aW5kb3cuZG9jdW1lbnQuYm9keS5zdHlsZVtyXSlyZXR1cm4gcn1yZXR1cm4gbnVsbH1mdW5jdGlvbiBQKCl7cmV0dXJuIHRoaXMuc3RhdGUuaXNEZXN0cm95ZWQ9ITAsVyh0aGlzLm1vZGlmaWVycywnYXBwbHlTdHlsZScpJiYodGhpcy5wb3BwZXIucmVtb3ZlQXR0cmlidXRlKCd4LXBsYWNlbWVudCcpLHRoaXMucG9wcGVyLnN0eWxlLmxlZnQ9JycsdGhpcy5wb3BwZXIuc3R5bGUucG9zaXRpb249JycsdGhpcy5wb3BwZXIuc3R5bGUudG9wPScnLHRoaXMucG9wcGVyLnN0eWxlW0IoJ3RyYW5zZm9ybScpXT0nJyksdGhpcy5kaXNhYmxlRXZlbnRMaXN0ZW5lcnMoKSx0aGlzLm9wdGlvbnMucmVtb3ZlT25EZXN0cm95JiZ0aGlzLnBvcHBlci5wYXJlbnROb2RlLnJlbW92ZUNoaWxkKHRoaXMucG9wcGVyKSx0aGlzfWZ1bmN0aW9uIEQoZSx0LG8saSl7dmFyIHI9J0JPRFknPT09ZS5ub2RlTmFtZSxwPXI/d2luZG93OmU7cC5hZGRFdmVudExpc3RlbmVyKHQsbyx7cGFzc2l2ZTohMH0pLHJ8fEQobihwLnBhcmVudE5vZGUpLHQsbyxpKSxpLnB1c2gocCl9ZnVuY3Rpb24gSChlLHQsbyxpKXtvLnVwZGF0ZUJvdW5kPWksd2luZG93LmFkZEV2ZW50TGlzdGVuZXIoJ3Jlc2l6ZScsby51cGRhdGVCb3VuZCx7cGFzc2l2ZTohMH0pO3ZhciByPW4oZSk7cmV0dXJuIEQociwnc2Nyb2xsJyxvLnVwZGF0ZUJvdW5kLG8uc2Nyb2xsUGFyZW50cyksby5zY3JvbGxFbGVtZW50PXIsby5ldmVudHNFbmFibGVkPSEwLG99ZnVuY3Rpb24gQSgpe3RoaXMuc3RhdGUuZXZlbnRzRW5hYmxlZHx8KHRoaXMuc3RhdGU9SCh0aGlzLnJlZmVyZW5jZSx0aGlzLm9wdGlvbnMsdGhpcy5zdGF0ZSx0aGlzLnNjaGVkdWxlVXBkYXRlKSl9ZnVuY3Rpb24gTShlLHQpe3JldHVybiB3aW5kb3cucmVtb3ZlRXZlbnRMaXN0ZW5lcigncmVzaXplJyx0LnVwZGF0ZUJvdW5kKSx0LnNjcm9sbFBhcmVudHMuZm9yRWFjaChmdW5jdGlvbihlKXtlLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ3Njcm9sbCcsdC51cGRhdGVCb3VuZCl9KSx0LnVwZGF0ZUJvdW5kPW51bGwsdC5zY3JvbGxQYXJlbnRzPVtdLHQuc2Nyb2xsRWxlbWVudD1udWxsLHQuZXZlbnRzRW5hYmxlZD0hMSx0fWZ1bmN0aW9uIEkoKXt0aGlzLnN0YXRlLmV2ZW50c0VuYWJsZWQmJih3aW5kb3cuY2FuY2VsQW5pbWF0aW9uRnJhbWUodGhpcy5zY2hlZHVsZVVwZGF0ZSksdGhpcy5zdGF0ZT1NKHRoaXMucmVmZXJlbmNlLHRoaXMuc3RhdGUpKX1mdW5jdGlvbiBSKGUpe3JldHVybicnIT09ZSYmIWlzTmFOKHBhcnNlRmxvYXQoZSkpJiZpc0Zpbml0ZShlKX1mdW5jdGlvbiBVKGUsdCl7T2JqZWN0LmtleXModCkuZm9yRWFjaChmdW5jdGlvbihvKXt2YXIgaT0nJzstMSE9PVsnd2lkdGgnLCdoZWlnaHQnLCd0b3AnLCdyaWdodCcsJ2JvdHRvbScsJ2xlZnQnXS5pbmRleE9mKG8pJiZSKHRbb10pJiYoaT0ncHgnKSxlLnN0eWxlW29dPXRbb10raX0pfWZ1bmN0aW9uIFkoZSx0KXtPYmplY3Qua2V5cyh0KS5mb3JFYWNoKGZ1bmN0aW9uKG8pe3ZhciBpPXRbb107ITE9PT1pP2UucmVtb3ZlQXR0cmlidXRlKG8pOmUuc2V0QXR0cmlidXRlKG8sdFtvXSl9KX1mdW5jdGlvbiBGKGUsdCxvKXt2YXIgaT1UKGUsZnVuY3Rpb24oZSl7dmFyIG89ZS5uYW1lO3JldHVybiBvPT09dH0pLG49ISFpJiZlLnNvbWUoZnVuY3Rpb24oZSl7cmV0dXJuIGUubmFtZT09PW8mJmUuZW5hYmxlZCYmZS5vcmRlcjxpLm9yZGVyfSk7aWYoIW4pe3ZhciByPSdgJyt0KydgJztjb25zb2xlLndhcm4oJ2AnK28rJ2AnKycgbW9kaWZpZXIgaXMgcmVxdWlyZWQgYnkgJytyKycgbW9kaWZpZXIgaW4gb3JkZXIgdG8gd29yaywgYmUgc3VyZSB0byBpbmNsdWRlIGl0IGJlZm9yZSAnK3IrJyEnKX1yZXR1cm4gbn1mdW5jdGlvbiBqKGUpe3JldHVybidlbmQnPT09ZT8nc3RhcnQnOidzdGFydCc9PT1lPydlbmQnOmV9ZnVuY3Rpb24gSyhlKXt2YXIgdD0xPGFyZ3VtZW50cy5sZW5ndGgmJnZvaWQgMCE9PWFyZ3VtZW50c1sxXSYmYXJndW1lbnRzWzFdLG89bGUuaW5kZXhPZihlKSxpPWxlLnNsaWNlKG8rMSkuY29uY2F0KGxlLnNsaWNlKDAsbykpO3JldHVybiB0P2kucmV2ZXJzZSgpOml9ZnVuY3Rpb24gcShlLHQsbyxpKXt2YXIgbj1lLm1hdGNoKC8oKD86XFwtfFxcKyk/XFxkKlxcLj9cXGQqKSguKikvKSxyPStuWzFdLHA9blsyXTtpZighcilyZXR1cm4gZTtpZigwPT09cC5pbmRleE9mKCclJykpe3ZhciBzO3N3aXRjaChwKXtjYXNlJyVwJzpzPW87YnJlYWs7Y2FzZSclJzpjYXNlJyVyJzpkZWZhdWx0OnM9aTt9dmFyIGQ9aChzKTtyZXR1cm4gZFt0XS8xMDAqcn1pZigndmgnPT09cHx8J3Z3Jz09PXApe3ZhciBhO3JldHVybiBhPSd2aCc9PT1wP1goZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudEhlaWdodCx3aW5kb3cuaW5uZXJIZWlnaHR8fDApOlgoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmNsaWVudFdpZHRoLHdpbmRvdy5pbm5lcldpZHRofHwwKSxhLzEwMCpyfXJldHVybiByfWZ1bmN0aW9uIEcoZSx0LG8saSl7dmFyIG49WzAsMF0scj0tMSE9PVsncmlnaHQnLCdsZWZ0J10uaW5kZXhPZihpKSxwPWUuc3BsaXQoLyhcXCt8XFwtKS8pLm1hcChmdW5jdGlvbihlKXtyZXR1cm4gZS50cmltKCl9KSxzPXAuaW5kZXhPZihUKHAsZnVuY3Rpb24oZSl7cmV0dXJuLTEhPT1lLnNlYXJjaCgvLHxcXHMvKX0pKTtwW3NdJiYtMT09PXBbc10uaW5kZXhPZignLCcpJiZjb25zb2xlLndhcm4oJ09mZnNldHMgc2VwYXJhdGVkIGJ5IHdoaXRlIHNwYWNlKHMpIGFyZSBkZXByZWNhdGVkLCB1c2UgYSBjb21tYSAoLCkgaW5zdGVhZC4nKTt2YXIgZD0vXFxzKixcXHMqfFxccysvLGE9LTE9PT1zP1twXTpbcC5zbGljZSgwLHMpLmNvbmNhdChbcFtzXS5zcGxpdChkKVswXV0pLFtwW3NdLnNwbGl0KGQpWzFdXS5jb25jYXQocC5zbGljZShzKzEpKV07cmV0dXJuIGE9YS5tYXAoZnVuY3Rpb24oZSxpKXt2YXIgbj0oMT09PWk/IXI6cik/J2hlaWdodCc6J3dpZHRoJyxwPSExO3JldHVybiBlLnJlZHVjZShmdW5jdGlvbihlLHQpe3JldHVybicnPT09ZVtlLmxlbmd0aC0xXSYmLTEhPT1bJysnLCctJ10uaW5kZXhPZih0KT8oZVtlLmxlbmd0aC0xXT10LHA9ITAsZSk6cD8oZVtlLmxlbmd0aC0xXSs9dCxwPSExLGUpOmUuY29uY2F0KHQpfSxbXSkubWFwKGZ1bmN0aW9uKGUpe3JldHVybiBxKGUsbix0LG8pfSl9KSxhLmZvckVhY2goZnVuY3Rpb24oZSx0KXtlLmZvckVhY2goZnVuY3Rpb24obyxpKXtSKG8pJiYoblt0XSs9byooJy0nPT09ZVtpLTFdPy0xOjEpKX0pfSksbn1mdW5jdGlvbiB6KGUsdCl7dmFyIG8saT10Lm9mZnNldCxuPWUucGxhY2VtZW50LHI9ZS5vZmZzZXRzLHA9ci5wb3BwZXIscz1yLnJlZmVyZW5jZSxkPW4uc3BsaXQoJy0nKVswXTtyZXR1cm4gbz1SKCtpKT9bK2ksMF06RyhpLHAscyxkKSwnbGVmdCc9PT1kPyhwLnRvcCs9b1swXSxwLmxlZnQtPW9bMV0pOidyaWdodCc9PT1kPyhwLnRvcCs9b1swXSxwLmxlZnQrPW9bMV0pOid0b3AnPT09ZD8ocC5sZWZ0Kz1vWzBdLHAudG9wLT1vWzFdKTonYm90dG9tJz09PWQmJihwLmxlZnQrPW9bMF0scC50b3ArPW9bMV0pLGUucG9wcGVyPXAsZX1mb3IodmFyIFY9TWF0aC5taW4sXz1NYXRoLmZsb29yLFg9TWF0aC5tYXgsUT1bJ25hdGl2ZSBjb2RlJywnW29iamVjdCBNdXRhdGlvbk9ic2VydmVyQ29uc3RydWN0b3JdJ10sSj1mdW5jdGlvbihlKXtyZXR1cm4gUS5zb21lKGZ1bmN0aW9uKHQpe3JldHVybi0xPChlfHwnJykudG9TdHJpbmcoKS5pbmRleE9mKHQpfSl9LFo9J3VuZGVmaW5lZCchPXR5cGVvZiB3aW5kb3csJD1bJ0VkZ2UnLCdUcmlkZW50JywnRmlyZWZveCddLGVlPTAsdGU9MDt0ZTwkLmxlbmd0aDt0ZSs9MSlpZihaJiYwPD1uYXZpZ2F0b3IudXNlckFnZW50LmluZGV4T2YoJFt0ZV0pKXtlZT0xO2JyZWFrfXZhciBpLG9lPVomJkood2luZG93Lk11dGF0aW9uT2JzZXJ2ZXIpLGllPW9lP2Z1bmN0aW9uKGUpe3ZhciB0PSExLG89MCxpPWRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NwYW4nKSxuPW5ldyBNdXRhdGlvbk9ic2VydmVyKGZ1bmN0aW9uKCl7ZSgpLHQ9ITF9KTtyZXR1cm4gbi5vYnNlcnZlKGkse2F0dHJpYnV0ZXM6ITB9KSxmdW5jdGlvbigpe3R8fCh0PSEwLGkuc2V0QXR0cmlidXRlKCd4LWluZGV4JyxvKSwrK28pfX06ZnVuY3Rpb24oZSl7dmFyIHQ9ITE7cmV0dXJuIGZ1bmN0aW9uKCl7dHx8KHQ9ITAsc2V0VGltZW91dChmdW5jdGlvbigpe3Q9ITEsZSgpfSxlZSkpfX0sbmU9ZnVuY3Rpb24oKXtyZXR1cm4gdm9pZCAwPT1pJiYoaT0tMSE9PW5hdmlnYXRvci5hcHBWZXJzaW9uLmluZGV4T2YoJ01TSUUgMTAnKSksaX0scmU9ZnVuY3Rpb24oZSx0KXtpZighKGUgaW5zdGFuY2VvZiB0KSl0aHJvdyBuZXcgVHlwZUVycm9yKCdDYW5ub3QgY2FsbCBhIGNsYXNzIGFzIGEgZnVuY3Rpb24nKX0scGU9ZnVuY3Rpb24oKXtmdW5jdGlvbiBlKGUsdCl7Zm9yKHZhciBvLG49MDtuPHQubGVuZ3RoO24rKylvPXRbbl0sby5lbnVtZXJhYmxlPW8uZW51bWVyYWJsZXx8ITEsby5jb25maWd1cmFibGU9ITAsJ3ZhbHVlJ2luIG8mJihvLndyaXRhYmxlPSEwKSxPYmplY3QuZGVmaW5lUHJvcGVydHkoZSxvLmtleSxvKX1yZXR1cm4gZnVuY3Rpb24odCxvLGkpe3JldHVybiBvJiZlKHQucHJvdG90eXBlLG8pLGkmJmUodCxpKSx0fX0oKSxzZT1mdW5jdGlvbihlLHQsbyl7cmV0dXJuIHQgaW4gZT9PYmplY3QuZGVmaW5lUHJvcGVydHkoZSx0LHt2YWx1ZTpvLGVudW1lcmFibGU6ITAsY29uZmlndXJhYmxlOiEwLHdyaXRhYmxlOiEwfSk6ZVt0XT1vLGV9LGRlPU9iamVjdC5hc3NpZ258fGZ1bmN0aW9uKGUpe2Zvcih2YXIgdCxvPTE7bzxhcmd1bWVudHMubGVuZ3RoO28rKylmb3IodmFyIGkgaW4gdD1hcmd1bWVudHNbb10sdClPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwodCxpKSYmKGVbaV09dFtpXSk7cmV0dXJuIGV9LGFlPVsnYXV0by1zdGFydCcsJ2F1dG8nLCdhdXRvLWVuZCcsJ3RvcC1zdGFydCcsJ3RvcCcsJ3RvcC1lbmQnLCdyaWdodC1zdGFydCcsJ3JpZ2h0JywncmlnaHQtZW5kJywnYm90dG9tLWVuZCcsJ2JvdHRvbScsJ2JvdHRvbS1zdGFydCcsJ2xlZnQtZW5kJywnbGVmdCcsJ2xlZnQtc3RhcnQnXSxsZT1hZS5zbGljZSgzKSxmZT17RkxJUDonZmxpcCcsQ0xPQ0tXSVNFOidjbG9ja3dpc2UnLENPVU5URVJDTE9DS1dJU0U6J2NvdW50ZXJjbG9ja3dpc2UnfSxtZT1mdW5jdGlvbigpe2Z1bmN0aW9uIHQobyxpKXt2YXIgbj10aGlzLHI9Mjxhcmd1bWVudHMubGVuZ3RoJiZ2b2lkIDAhPT1hcmd1bWVudHNbMl0/YXJndW1lbnRzWzJdOnt9O3JlKHRoaXMsdCksdGhpcy5zY2hlZHVsZVVwZGF0ZT1mdW5jdGlvbigpe3JldHVybiByZXF1ZXN0QW5pbWF0aW9uRnJhbWUobi51cGRhdGUpfSx0aGlzLnVwZGF0ZT1pZSh0aGlzLnVwZGF0ZS5iaW5kKHRoaXMpKSx0aGlzLm9wdGlvbnM9ZGUoe30sdC5EZWZhdWx0cyxyKSx0aGlzLnN0YXRlPXtpc0Rlc3Ryb3llZDohMSxpc0NyZWF0ZWQ6ITEsc2Nyb2xsUGFyZW50czpbXX0sdGhpcy5yZWZlcmVuY2U9by5qcXVlcnk/b1swXTpvLHRoaXMucG9wcGVyPWkuanF1ZXJ5P2lbMF06aSx0aGlzLm9wdGlvbnMubW9kaWZpZXJzPXt9LE9iamVjdC5rZXlzKGRlKHt9LHQuRGVmYXVsdHMubW9kaWZpZXJzLHIubW9kaWZpZXJzKSkuZm9yRWFjaChmdW5jdGlvbihlKXtuLm9wdGlvbnMubW9kaWZpZXJzW2VdPWRlKHt9LHQuRGVmYXVsdHMubW9kaWZpZXJzW2VdfHx7fSxyLm1vZGlmaWVycz9yLm1vZGlmaWVyc1tlXTp7fSl9KSx0aGlzLm1vZGlmaWVycz1PYmplY3Qua2V5cyh0aGlzLm9wdGlvbnMubW9kaWZpZXJzKS5tYXAoZnVuY3Rpb24oZSl7cmV0dXJuIGRlKHtuYW1lOmV9LG4ub3B0aW9ucy5tb2RpZmllcnNbZV0pfSkuc29ydChmdW5jdGlvbihlLHQpe3JldHVybiBlLm9yZGVyLXQub3JkZXJ9KSx0aGlzLm1vZGlmaWVycy5mb3JFYWNoKGZ1bmN0aW9uKHQpe3QuZW5hYmxlZCYmZSh0Lm9uTG9hZCkmJnQub25Mb2FkKG4ucmVmZXJlbmNlLG4ucG9wcGVyLG4ub3B0aW9ucyx0LG4uc3RhdGUpfSksdGhpcy51cGRhdGUoKTt2YXIgcD10aGlzLm9wdGlvbnMuZXZlbnRzRW5hYmxlZDtwJiZ0aGlzLmVuYWJsZUV2ZW50TGlzdGVuZXJzKCksdGhpcy5zdGF0ZS5ldmVudHNFbmFibGVkPXB9cmV0dXJuIHBlKHQsW3trZXk6J3VwZGF0ZScsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gay5jYWxsKHRoaXMpfX0se2tleTonZGVzdHJveScsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gUC5jYWxsKHRoaXMpfX0se2tleTonZW5hYmxlRXZlbnRMaXN0ZW5lcnMnLHZhbHVlOmZ1bmN0aW9uKCl7cmV0dXJuIEEuY2FsbCh0aGlzKX19LHtrZXk6J2Rpc2FibGVFdmVudExpc3RlbmVycycsdmFsdWU6ZnVuY3Rpb24oKXtyZXR1cm4gSS5jYWxsKHRoaXMpfX1dKSx0fSgpO3JldHVybiBtZS5VdGlscz0oJ3VuZGVmaW5lZCc9PXR5cGVvZiB3aW5kb3c/Z2xvYmFsOndpbmRvdykuUG9wcGVyVXRpbHMsbWUucGxhY2VtZW50cz1hZSxtZS5EZWZhdWx0cz17cGxhY2VtZW50Oidib3R0b20nLGV2ZW50c0VuYWJsZWQ6ITAscmVtb3ZlT25EZXN0cm95OiExLG9uQ3JlYXRlOmZ1bmN0aW9uKCl7fSxvblVwZGF0ZTpmdW5jdGlvbigpe30sbW9kaWZpZXJzOntzaGlmdDp7b3JkZXI6MTAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5wbGFjZW1lbnQsbz10LnNwbGl0KCctJylbMF0saT10LnNwbGl0KCctJylbMV07aWYoaSl7dmFyIG49ZS5vZmZzZXRzLHI9bi5yZWZlcmVuY2UscD1uLnBvcHBlcixzPS0xIT09Wydib3R0b20nLCd0b3AnXS5pbmRleE9mKG8pLGQ9cz8nbGVmdCc6J3RvcCcsYT1zPyd3aWR0aCc6J2hlaWdodCcsbD17c3RhcnQ6c2Uoe30sZCxyW2RdKSxlbmQ6c2Uoe30sZCxyW2RdK3JbYV0tcFthXSl9O2Uub2Zmc2V0cy5wb3BwZXI9ZGUoe30scCxsW2ldKX1yZXR1cm4gZX19LG9mZnNldDp7b3JkZXI6MjAwLGVuYWJsZWQ6ITAsZm46eixvZmZzZXQ6MH0scHJldmVudE92ZXJmbG93OntvcmRlcjozMDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihlLHQpe3ZhciBvPXQuYm91bmRhcmllc0VsZW1lbnR8fHIoZS5pbnN0YW5jZS5wb3BwZXIpO2UuaW5zdGFuY2UucmVmZXJlbmNlPT09byYmKG89cihvKSk7dmFyIGk9dyhlLmluc3RhbmNlLnBvcHBlcixlLmluc3RhbmNlLnJlZmVyZW5jZSx0LnBhZGRpbmcsbyk7dC5ib3VuZGFyaWVzPWk7dmFyIG49dC5wcmlvcml0eSxwPWUub2Zmc2V0cy5wb3BwZXIscz17cHJpbWFyeTpmdW5jdGlvbihlKXt2YXIgbz1wW2VdO3JldHVybiBwW2VdPGlbZV0mJiF0LmVzY2FwZVdpdGhSZWZlcmVuY2UmJihvPVgocFtlXSxpW2VdKSksc2Uoe30sZSxvKX0sc2Vjb25kYXJ5OmZ1bmN0aW9uKGUpe3ZhciBvPSdyaWdodCc9PT1lPydsZWZ0JzondG9wJyxuPXBbb107cmV0dXJuIHBbZV0+aVtlXSYmIXQuZXNjYXBlV2l0aFJlZmVyZW5jZSYmKG49VihwW29dLGlbZV0tKCdyaWdodCc9PT1lP3Aud2lkdGg6cC5oZWlnaHQpKSksc2Uoe30sbyxuKX19O3JldHVybiBuLmZvckVhY2goZnVuY3Rpb24oZSl7dmFyIHQ9LTE9PT1bJ2xlZnQnLCd0b3AnXS5pbmRleE9mKGUpPydzZWNvbmRhcnknOidwcmltYXJ5JztwPWRlKHt9LHAsc1t0XShlKSl9KSxlLm9mZnNldHMucG9wcGVyPXAsZX0scHJpb3JpdHk6WydsZWZ0JywncmlnaHQnLCd0b3AnLCdib3R0b20nXSxwYWRkaW5nOjUsYm91bmRhcmllc0VsZW1lbnQ6J3Njcm9sbFBhcmVudCd9LGtlZXBUb2dldGhlcjp7b3JkZXI6NDAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSl7dmFyIHQ9ZS5vZmZzZXRzLG89dC5wb3BwZXIsaT10LnJlZmVyZW5jZSxuPWUucGxhY2VtZW50LnNwbGl0KCctJylbMF0scj1fLHA9LTEhPT1bJ3RvcCcsJ2JvdHRvbSddLmluZGV4T2Yobikscz1wPydyaWdodCc6J2JvdHRvbScsZD1wPydsZWZ0JzondG9wJyxhPXA/J3dpZHRoJzonaGVpZ2h0JztyZXR1cm4gb1tzXTxyKGlbZF0pJiYoZS5vZmZzZXRzLnBvcHBlcltkXT1yKGlbZF0pLW9bYV0pLG9bZF0+cihpW3NdKSYmKGUub2Zmc2V0cy5wb3BwZXJbZF09cihpW3NdKSksZX19LGFycm93OntvcmRlcjo1MDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihlLG8pe2lmKCFGKGUuaW5zdGFuY2UubW9kaWZpZXJzLCdhcnJvdycsJ2tlZXBUb2dldGhlcicpKXJldHVybiBlO3ZhciBpPW8uZWxlbWVudDtpZignc3RyaW5nJz09dHlwZW9mIGkpe2lmKGk9ZS5pbnN0YW5jZS5wb3BwZXIucXVlcnlTZWxlY3RvcihpKSwhaSlyZXR1cm4gZTt9ZWxzZSBpZighZS5pbnN0YW5jZS5wb3BwZXIuY29udGFpbnMoaSkpcmV0dXJuIGNvbnNvbGUud2FybignV0FSTklORzogYGFycm93LmVsZW1lbnRgIG11c3QgYmUgY2hpbGQgb2YgaXRzIHBvcHBlciBlbGVtZW50IScpLGU7dmFyIG49ZS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXSxyPWUub2Zmc2V0cyxwPXIucG9wcGVyLHM9ci5yZWZlcmVuY2UsZD0tMSE9PVsnbGVmdCcsJ3JpZ2h0J10uaW5kZXhPZihuKSxhPWQ/J2hlaWdodCc6J3dpZHRoJyxsPWQ/J1RvcCc6J0xlZnQnLGY9bC50b0xvd2VyQ2FzZSgpLG09ZD8nbGVmdCc6J3RvcCcsYz1kPydib3R0b20nOidyaWdodCcsZz1PKGkpW2FdO3NbY10tZzxwW2ZdJiYoZS5vZmZzZXRzLnBvcHBlcltmXS09cFtmXS0oc1tjXS1nKSksc1tmXStnPnBbY10mJihlLm9mZnNldHMucG9wcGVyW2ZdKz1zW2ZdK2ctcFtjXSk7dmFyIHU9c1tmXStzW2FdLzItZy8yLGI9dChlLmluc3RhbmNlLnBvcHBlciwnbWFyZ2luJytsKS5yZXBsYWNlKCdweCcsJycpLHk9dS1oKGUub2Zmc2V0cy5wb3BwZXIpW2ZdLWI7cmV0dXJuIHk9WChWKHBbYV0tZyx5KSwwKSxlLmFycm93RWxlbWVudD1pLGUub2Zmc2V0cy5hcnJvdz17fSxlLm9mZnNldHMuYXJyb3dbZl09TWF0aC5yb3VuZCh5KSxlLm9mZnNldHMuYXJyb3dbbV09JycsZX0sZWxlbWVudDonW3gtYXJyb3ddJ30sZmxpcDp7b3JkZXI6NjAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSx0KXtpZihXKGUuaW5zdGFuY2UubW9kaWZpZXJzLCdpbm5lcicpKXJldHVybiBlO2lmKGUuZmxpcHBlZCYmZS5wbGFjZW1lbnQ9PT1lLm9yaWdpbmFsUGxhY2VtZW50KXJldHVybiBlO3ZhciBvPXcoZS5pbnN0YW5jZS5wb3BwZXIsZS5pbnN0YW5jZS5yZWZlcmVuY2UsdC5wYWRkaW5nLHQuYm91bmRhcmllc0VsZW1lbnQpLGk9ZS5wbGFjZW1lbnQuc3BsaXQoJy0nKVswXSxuPUwoaSkscj1lLnBsYWNlbWVudC5zcGxpdCgnLScpWzFdfHwnJyxwPVtdO3N3aXRjaCh0LmJlaGF2aW9yKXtjYXNlIGZlLkZMSVA6cD1baSxuXTticmVhaztjYXNlIGZlLkNMT0NLV0lTRTpwPUsoaSk7YnJlYWs7Y2FzZSBmZS5DT1VOVEVSQ0xPQ0tXSVNFOnA9SyhpLCEwKTticmVhaztkZWZhdWx0OnA9dC5iZWhhdmlvcjt9cmV0dXJuIHAuZm9yRWFjaChmdW5jdGlvbihzLGQpe2lmKGkhPT1zfHxwLmxlbmd0aD09PWQrMSlyZXR1cm4gZTtpPWUucGxhY2VtZW50LnNwbGl0KCctJylbMF0sbj1MKGkpO3ZhciBhPWUub2Zmc2V0cy5wb3BwZXIsbD1lLm9mZnNldHMucmVmZXJlbmNlLGY9XyxtPSdsZWZ0Jz09PWkmJmYoYS5yaWdodCk+ZihsLmxlZnQpfHwncmlnaHQnPT09aSYmZihhLmxlZnQpPGYobC5yaWdodCl8fCd0b3AnPT09aSYmZihhLmJvdHRvbSk+ZihsLnRvcCl8fCdib3R0b20nPT09aSYmZihhLnRvcCk8ZihsLmJvdHRvbSksYz1mKGEubGVmdCk8ZihvLmxlZnQpLGg9ZihhLnJpZ2h0KT5mKG8ucmlnaHQpLGc9ZihhLnRvcCk8ZihvLnRvcCksdT1mKGEuYm90dG9tKT5mKG8uYm90dG9tKSxiPSdsZWZ0Jz09PWkmJmN8fCdyaWdodCc9PT1pJiZofHwndG9wJz09PWkmJmd8fCdib3R0b20nPT09aSYmdSx5PS0xIT09Wyd0b3AnLCdib3R0b20nXS5pbmRleE9mKGkpLHc9ISF0LmZsaXBWYXJpYXRpb25zJiYoeSYmJ3N0YXJ0Jz09PXImJmN8fHkmJidlbmQnPT09ciYmaHx8IXkmJidzdGFydCc9PT1yJiZnfHwheSYmJ2VuZCc9PT1yJiZ1KTsobXx8Ynx8dykmJihlLmZsaXBwZWQ9ITAsKG18fGIpJiYoaT1wW2QrMV0pLHcmJihyPWoocikpLGUucGxhY2VtZW50PWkrKHI/Jy0nK3I6JycpLGUub2Zmc2V0cy5wb3BwZXI9ZGUoe30sZS5vZmZzZXRzLnBvcHBlcixTKGUuaW5zdGFuY2UucG9wcGVyLGUub2Zmc2V0cy5yZWZlcmVuY2UsZS5wbGFjZW1lbnQpKSxlPU4oZS5pbnN0YW5jZS5tb2RpZmllcnMsZSwnZmxpcCcpKX0pLGV9LGJlaGF2aW9yOidmbGlwJyxwYWRkaW5nOjUsYm91bmRhcmllc0VsZW1lbnQ6J3ZpZXdwb3J0J30saW5uZXI6e29yZGVyOjcwMCxlbmFibGVkOiExLGZuOmZ1bmN0aW9uKGUpe3ZhciB0PWUucGxhY2VtZW50LG89dC5zcGxpdCgnLScpWzBdLGk9ZS5vZmZzZXRzLG49aS5wb3BwZXIscj1pLnJlZmVyZW5jZSxwPS0xIT09WydsZWZ0JywncmlnaHQnXS5pbmRleE9mKG8pLHM9LTE9PT1bJ3RvcCcsJ2xlZnQnXS5pbmRleE9mKG8pO3JldHVybiBuW3A/J2xlZnQnOid0b3AnXT1yW29dLShzP25bcD8nd2lkdGgnOidoZWlnaHQnXTowKSxlLnBsYWNlbWVudD1MKHQpLGUub2Zmc2V0cy5wb3BwZXI9aChuKSxlfX0saGlkZTp7b3JkZXI6ODAwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSl7aWYoIUYoZS5pbnN0YW5jZS5tb2RpZmllcnMsJ2hpZGUnLCdwcmV2ZW50T3ZlcmZsb3cnKSlyZXR1cm4gZTt2YXIgdD1lLm9mZnNldHMucmVmZXJlbmNlLG89VChlLmluc3RhbmNlLm1vZGlmaWVycyxmdW5jdGlvbihlKXtyZXR1cm4ncHJldmVudE92ZXJmbG93Jz09PWUubmFtZX0pLmJvdW5kYXJpZXM7aWYodC5ib3R0b208by50b3B8fHQubGVmdD5vLnJpZ2h0fHx0LnRvcD5vLmJvdHRvbXx8dC5yaWdodDxvLmxlZnQpe2lmKCEwPT09ZS5oaWRlKXJldHVybiBlO2UuaGlkZT0hMCxlLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXT0nJ31lbHNle2lmKCExPT09ZS5oaWRlKXJldHVybiBlO2UuaGlkZT0hMSxlLmF0dHJpYnV0ZXNbJ3gtb3V0LW9mLWJvdW5kYXJpZXMnXT0hMX1yZXR1cm4gZX19LGNvbXB1dGVTdHlsZTp7b3JkZXI6ODUwLGVuYWJsZWQ6ITAsZm46ZnVuY3Rpb24oZSx0KXt2YXIgbz10LngsaT10Lnksbj1lLm9mZnNldHMucG9wcGVyLHA9VChlLmluc3RhbmNlLm1vZGlmaWVycyxmdW5jdGlvbihlKXtyZXR1cm4nYXBwbHlTdHlsZSc9PT1lLm5hbWV9KS5ncHVBY2NlbGVyYXRpb247dm9pZCAwIT09cCYmY29uc29sZS53YXJuKCdXQVJOSU5HOiBgZ3B1QWNjZWxlcmF0aW9uYCBvcHRpb24gbW92ZWQgdG8gYGNvbXB1dGVTdHlsZWAgbW9kaWZpZXIgYW5kIHdpbGwgbm90IGJlIHN1cHBvcnRlZCBpbiBmdXR1cmUgdmVyc2lvbnMgb2YgUG9wcGVyLmpzIScpO3ZhciBzLGQsYT12b2lkIDA9PT1wP3QuZ3B1QWNjZWxlcmF0aW9uOnAsbD1yKGUuaW5zdGFuY2UucG9wcGVyKSxmPWcobCksbT17cG9zaXRpb246bi5wb3NpdGlvbn0sYz17bGVmdDpfKG4ubGVmdCksdG9wOl8obi50b3ApLGJvdHRvbTpfKG4uYm90dG9tKSxyaWdodDpfKG4ucmlnaHQpfSxoPSdib3R0b20nPT09bz8ndG9wJzonYm90dG9tJyx1PSdyaWdodCc9PT1pPydsZWZ0JzoncmlnaHQnLGI9QigndHJhbnNmb3JtJyk7aWYoZD0nYm90dG9tJz09aD8tZi5oZWlnaHQrYy5ib3R0b206Yy50b3Ascz0ncmlnaHQnPT11Py1mLndpZHRoK2MucmlnaHQ6Yy5sZWZ0LGEmJmIpbVtiXT0ndHJhbnNsYXRlM2QoJytzKydweCwgJytkKydweCwgMCknLG1baF09MCxtW3VdPTAsbS53aWxsQ2hhbmdlPSd0cmFuc2Zvcm0nO2Vsc2V7dmFyIHk9J2JvdHRvbSc9PWg/LTE6MSx3PSdyaWdodCc9PXU/LTE6MTttW2hdPWQqeSxtW3VdPXMqdyxtLndpbGxDaGFuZ2U9aCsnLCAnK3V9dmFyIEU9e1wieC1wbGFjZW1lbnRcIjplLnBsYWNlbWVudH07cmV0dXJuIGUuYXR0cmlidXRlcz1kZSh7fSxFLGUuYXR0cmlidXRlcyksZS5zdHlsZXM9ZGUoe30sbSxlLnN0eWxlcyksZS5hcnJvd1N0eWxlcz1kZSh7fSxlLm9mZnNldHMuYXJyb3csZS5hcnJvd1N0eWxlcyksZX0sZ3B1QWNjZWxlcmF0aW9uOiEwLHg6J2JvdHRvbScseToncmlnaHQnfSxhcHBseVN0eWxlOntvcmRlcjo5MDAsZW5hYmxlZDohMCxmbjpmdW5jdGlvbihlKXtyZXR1cm4gVShlLmluc3RhbmNlLnBvcHBlcixlLnN0eWxlcyksWShlLmluc3RhbmNlLnBvcHBlcixlLmF0dHJpYnV0ZXMpLGUuYXJyb3dFbGVtZW50JiZPYmplY3Qua2V5cyhlLmFycm93U3R5bGVzKS5sZW5ndGgmJlUoZS5hcnJvd0VsZW1lbnQsZS5hcnJvd1N0eWxlcyksZX0sb25Mb2FkOmZ1bmN0aW9uKGUsdCxvLGksbil7dmFyIHI9eChuLHQsZSkscD12KG8ucGxhY2VtZW50LHIsdCxlLG8ubW9kaWZpZXJzLmZsaXAuYm91bmRhcmllc0VsZW1lbnQsby5tb2RpZmllcnMuZmxpcC5wYWRkaW5nKTtyZXR1cm4gdC5zZXRBdHRyaWJ1dGUoJ3gtcGxhY2VtZW50JyxwKSxVKHQse3Bvc2l0aW9uOidhYnNvbHV0ZSd9KSxvfSxncHVBY2NlbGVyYXRpb246dm9pZCAwfX19LG1lfSk7XG4vLyMgc291cmNlTWFwcGluZ1VSTD1wb3BwZXIubWluLmpzLm1hcFxuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2pzL3BvcHBlci5taW4uanMiLCIvKipcbiAqIFN0eWxlRml4IDEuMC4zICYgUHJlZml4RnJlZSAxLjAuN1xuICogQGF1dGhvciBMZWEgVmVyb3VcbiAqIE1JVCBsaWNlbnNlXG4gKi9cbihmdW5jdGlvbiAoKSB7XG5cdGZ1bmN0aW9uIHQoZSwgdCkge1xuXHRcdHJldHVybiBbXS5zbGljZS5jYWxsKCh0IHx8IGRvY3VtZW50KS5xdWVyeVNlbGVjdG9yQWxsKGUpKVxuXHR9XG5cdGlmICghd2luZG93LmFkZEV2ZW50TGlzdGVuZXIpIHJldHVybjtcblx0dmFyIGUgPSB3aW5kb3cuU3R5bGVGaXggPSB7XG5cdFx0bGluazogZnVuY3Rpb24gKHQpIHtcblx0XHRcdHRyeSB7XG5cdFx0XHRcdGlmICh0LnJlbCAhPT0gXCJzdHlsZXNoZWV0XCIgfHwgdC5oYXNBdHRyaWJ1dGUoXCJkYXRhLW5vcHJlZml4XCIpKSByZXR1cm5cblx0XHRcdH0gY2F0Y2ggKG4pIHtcblx0XHRcdFx0cmV0dXJuXG5cdFx0XHR9XG5cdFx0XHR2YXIgciA9IHQuaHJlZiB8fCB0LmdldEF0dHJpYnV0ZShcImRhdGEtaHJlZlwiKSxcblx0XHRcdFx0aSA9IHIucmVwbGFjZSgvW15cXC9dKyQvLCBcIlwiKSxcblx0XHRcdFx0cyA9IHQucGFyZW50Tm9kZSxcblx0XHRcdFx0byA9IG5ldyBYTUxIdHRwUmVxdWVzdCxcblx0XHRcdFx0dTtcblx0XHRcdG8ub25yZWFkeXN0YXRlY2hhbmdlID0gZnVuY3Rpb24gKCkge1xuXHRcdFx0XHRvLnJlYWR5U3RhdGUgPT09IDQgJiYgdSgpXG5cdFx0XHR9O1xuXHRcdFx0dSA9IGZ1bmN0aW9uICgpIHtcblx0XHRcdFx0dmFyIG4gPSBvLnJlc3BvbnNlVGV4dDtcblx0XHRcdFx0aWYgKG4gJiYgdC5wYXJlbnROb2RlICYmICghby5zdGF0dXMgfHwgby5zdGF0dXMgPCA0MDAgfHwgby5zdGF0dXMgPiA2MDApKSB7XG5cdFx0XHRcdFx0biA9IGUuZml4KG4sICEwLCB0KTtcblx0XHRcdFx0XHRpZiAoaSkge1xuXHRcdFx0XHRcdFx0biA9IG4ucmVwbGFjZSgvdXJsXFwoXFxzKj8oKD86XCJ8Jyk/KSguKz8pXFwxXFxzKj9cXCkvZ2ksIGZ1bmN0aW9uIChlLCB0LCBuKSB7XG5cdFx0XHRcdFx0XHRcdHJldHVybiAvXihbYS16XXszLDEwfTp8XFwvfCMpL2kudGVzdChuKSA/IGUgOiAndXJsKFwiJyArIGkgKyBuICsgJ1wiKSdcblx0XHRcdFx0XHRcdH0pO1xuXHRcdFx0XHRcdFx0dmFyIHIgPSBpLnJlcGxhY2UoLyhbXFxcXFxcXlxcJCorW1xcXT97fS49IToofCldKS9nLCBcIlxcXFwkMVwiKTtcblx0XHRcdFx0XHRcdG4gPSBuLnJlcGxhY2UoUmVnRXhwKFwiXFxcXGIoYmVoYXZpb3I6XFxcXHMqP3VybFxcXFwoJz9cXFwiPylcIiArIHIsIFwiZ2lcIiksIFwiJDFcIilcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0dmFyIHUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwic3R5bGVcIik7XG5cdFx0XHRcdFx0dS50ZXh0Q29udGVudCA9IG47XG5cdFx0XHRcdFx0dS5tZWRpYSA9IHQubWVkaWE7XG5cdFx0XHRcdFx0dS5kaXNhYmxlZCA9IHQuZGlzYWJsZWQ7XG5cdFx0XHRcdFx0dS5zZXRBdHRyaWJ1dGUoXCJkYXRhLWhyZWZcIiwgdC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpKTtcblx0XHRcdFx0XHRzLmluc2VydEJlZm9yZSh1LCB0KTtcblx0XHRcdFx0XHRzLnJlbW92ZUNoaWxkKHQpO1xuXHRcdFx0XHRcdHUubWVkaWEgPSB0Lm1lZGlhXG5cdFx0XHRcdH1cblx0XHRcdH07XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRvLm9wZW4oXCJHRVRcIiwgcik7XG5cdFx0XHRcdG8uc2VuZChudWxsKVxuXHRcdFx0fSBjYXRjaCAobikge1xuXHRcdFx0XHRpZiAodHlwZW9mIFhEb21haW5SZXF1ZXN0ICE9IFwidW5kZWZpbmVkXCIpIHtcblx0XHRcdFx0XHRvID0gbmV3IFhEb21haW5SZXF1ZXN0O1xuXHRcdFx0XHRcdG8ub25lcnJvciA9IG8ub25wcm9ncmVzcyA9IGZ1bmN0aW9uICgpIHt9O1xuXHRcdFx0XHRcdG8ub25sb2FkID0gdTtcblx0XHRcdFx0XHRvLm9wZW4oXCJHRVRcIiwgcik7XG5cdFx0XHRcdFx0by5zZW5kKG51bGwpXG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHQuc2V0QXR0cmlidXRlKFwiZGF0YS1pbnByb2dyZXNzXCIsIFwiXCIpXG5cdFx0fSxcblx0XHRzdHlsZUVsZW1lbnQ6IGZ1bmN0aW9uICh0KSB7XG5cdFx0XHRpZiAodC5oYXNBdHRyaWJ1dGUoXCJkYXRhLW5vcHJlZml4XCIpKSByZXR1cm47XG5cdFx0XHR2YXIgbiA9IHQuZGlzYWJsZWQ7XG5cdFx0XHR0LnRleHRDb250ZW50ID0gZS5maXgodC50ZXh0Q29udGVudCwgITAsIHQpO1xuXHRcdFx0dC5kaXNhYmxlZCA9IG5cblx0XHR9LFxuXHRcdHN0eWxlQXR0cmlidXRlOiBmdW5jdGlvbiAodCkge1xuXHRcdFx0dmFyIG4gPSB0LmdldEF0dHJpYnV0ZShcInN0eWxlXCIpO1xuXHRcdFx0biA9IGUuZml4KG4sICExLCB0KTtcblx0XHRcdHQuc2V0QXR0cmlidXRlKFwic3R5bGVcIiwgbilcblx0XHR9LFxuXHRcdHByb2Nlc3M6IGZ1bmN0aW9uICgpIHtcblx0XHRcdHQoJ2xpbmtbcmVsPVwic3R5bGVzaGVldFwiXTpub3QoW2RhdGEtaW5wcm9ncmVzc10pJykuZm9yRWFjaChTdHlsZUZpeC5saW5rKTtcblx0XHRcdHQoXCJzdHlsZVwiKS5mb3JFYWNoKFN0eWxlRml4LnN0eWxlRWxlbWVudCk7XG5cdFx0XHR0KFwiW3N0eWxlXVwiKS5mb3JFYWNoKFN0eWxlRml4LnN0eWxlQXR0cmlidXRlKVxuXHRcdH0sXG5cdFx0cmVnaXN0ZXI6IGZ1bmN0aW9uICh0LCBuKSB7XG5cdFx0XHQoZS5maXhlcnMgPSBlLmZpeGVycyB8fCBbXSkuc3BsaWNlKG4gPT09IHVuZGVmaW5lZCA/IGUuZml4ZXJzLmxlbmd0aCA6IG4sIDAsIHQpXG5cdFx0fSxcblx0XHRmaXg6IGZ1bmN0aW9uICh0LCBuLCByKSB7XG5cdFx0XHRmb3IgKHZhciBpID0gMDsgaSA8IGUuZml4ZXJzLmxlbmd0aDsgaSsrKSB0ID0gZS5maXhlcnNbaV0odCwgbiwgcikgfHwgdDtcblx0XHRcdHJldHVybiB0XG5cdFx0fSxcblx0XHRjYW1lbENhc2U6IGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRyZXR1cm4gZS5yZXBsYWNlKC8tKFthLXpdKS9nLCBmdW5jdGlvbiAoZSwgdCkge1xuXHRcdFx0XHRyZXR1cm4gdC50b1VwcGVyQ2FzZSgpXG5cdFx0XHR9KS5yZXBsYWNlKFwiLVwiLCBcIlwiKVxuXHRcdH0sXG5cdFx0ZGVDYW1lbENhc2U6IGZ1bmN0aW9uIChlKSB7XG5cdFx0XHRyZXR1cm4gZS5yZXBsYWNlKC9bQS1aXS9nLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRyZXR1cm4gXCItXCIgKyBlLnRvTG93ZXJDYXNlKClcblx0XHRcdH0pXG5cdFx0fVxuXHR9O1xuXHQoZnVuY3Rpb24gKCkge1xuXHRcdHNldFRpbWVvdXQoZnVuY3Rpb24gKCkge1xuXHRcdFx0dCgnbGlua1tyZWw9XCJzdHlsZXNoZWV0XCJdJykuZm9yRWFjaChTdHlsZUZpeC5saW5rKVxuXHRcdH0sIDEwKTtcblx0XHRkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKFwiRE9NQ29udGVudExvYWRlZFwiLCBTdHlsZUZpeC5wcm9jZXNzLCAhMSlcblx0fSkoKVxufSkoKTtcbihmdW5jdGlvbiAoZSkge1xuXHRmdW5jdGlvbiB0KGUsIHQsIHIsIGksIHMpIHtcblx0XHRlID0gbltlXTtcblx0XHRpZiAoZS5sZW5ndGgpIHtcblx0XHRcdHZhciBvID0gUmVnRXhwKHQgKyBcIihcIiArIGUuam9pbihcInxcIikgKyBcIilcIiArIHIsIFwiZ2lcIik7XG5cdFx0XHRzID0gcy5yZXBsYWNlKG8sIGkpXG5cdFx0fVxuXHRcdHJldHVybiBzXG5cdH1cblx0aWYgKCF3aW5kb3cuU3R5bGVGaXggfHwgIXdpbmRvdy5nZXRDb21wdXRlZFN0eWxlKSByZXR1cm47XG5cdHZhciBuID0gd2luZG93LlByZWZpeEZyZWUgPSB7XG5cdFx0cHJlZml4Q1NTOiBmdW5jdGlvbiAoZSwgciwgaSkge1xuXHRcdFx0dmFyIHMgPSBuLnByZWZpeDtcblx0XHRcdG4uZnVuY3Rpb25zLmluZGV4T2YoXCJsaW5lYXItZ3JhZGllbnRcIikgPiAtMSAmJiAoZSA9IGUucmVwbGFjZSgvKFxcc3w6fCwpKHJlcGVhdGluZy0pP2xpbmVhci1ncmFkaWVudFxcKFxccyooLT9cXGQqXFwuP1xcZCopZGVnL2lnLCBmdW5jdGlvbiAoZSwgdCwgbiwgcikge1xuXHRcdFx0XHRyZXR1cm4gdCArIChuIHx8IFwiXCIpICsgXCJsaW5lYXItZ3JhZGllbnQoXCIgKyAoOTAgLSByKSArIFwiZGVnXCJcblx0XHRcdH0pKTtcblx0XHRcdGUgPSB0KFwiZnVuY3Rpb25zXCIsIFwiKFxcXFxzfDp8LClcIiwgXCJcXFxccypcXFxcKFwiLCBcIiQxXCIgKyBzICsgXCIkMihcIiwgZSk7XG5cdFx0XHRlID0gdChcImtleXdvcmRzXCIsIFwiKFxcXFxzfDopXCIsIFwiKFxcXFxzfDt8XFxcXH18JClcIiwgXCIkMVwiICsgcyArIFwiJDIkM1wiLCBlKTtcblx0XHRcdGUgPSB0KFwicHJvcGVydGllc1wiLCBcIihefFxcXFx7fFxcXFxzfDspXCIsIFwiXFxcXHMqOlwiLCBcIiQxXCIgKyBzICsgXCIkMjpcIiwgZSk7XG5cdFx0XHRpZiAobi5wcm9wZXJ0aWVzLmxlbmd0aCkge1xuXHRcdFx0XHR2YXIgbyA9IFJlZ0V4cChcIlxcXFxiKFwiICsgbi5wcm9wZXJ0aWVzLmpvaW4oXCJ8XCIpICsgXCIpKD8hOilcIiwgXCJnaVwiKTtcblx0XHRcdFx0ZSA9IHQoXCJ2YWx1ZVByb3BlcnRpZXNcIiwgXCJcXFxcYlwiLCBcIjooLis/KTtcIiwgZnVuY3Rpb24gKGUpIHtcblx0XHRcdFx0XHRyZXR1cm4gZS5yZXBsYWNlKG8sIHMgKyBcIiQxXCIpXG5cdFx0XHRcdH0sIGUpXG5cdFx0XHR9XG5cdFx0XHRpZiAocikge1xuXHRcdFx0XHRlID0gdChcInNlbGVjdG9yc1wiLCBcIlwiLCBcIlxcXFxiXCIsIG4ucHJlZml4U2VsZWN0b3IsIGUpO1xuXHRcdFx0XHRlID0gdChcImF0cnVsZXNcIiwgXCJAXCIsIFwiXFxcXGJcIiwgXCJAXCIgKyBzICsgXCIkMVwiLCBlKVxuXHRcdFx0fVxuXHRcdFx0ZSA9IGUucmVwbGFjZShSZWdFeHAoXCItXCIgKyBzLCBcImdcIiksIFwiLVwiKTtcblx0XHRcdGUgPSBlLnJlcGxhY2UoLy1cXCotKD89W2Etel0rKS9naSwgbi5wcmVmaXgpO1xuXHRcdFx0cmV0dXJuIGVcblx0XHR9LFxuXHRcdHByb3BlcnR5OiBmdW5jdGlvbiAoZSkge1xuXHRcdFx0cmV0dXJuIChuLnByb3BlcnRpZXMuaW5kZXhPZihlKSA/IG4ucHJlZml4IDogXCJcIikgKyBlXG5cdFx0fSxcblx0XHR2YWx1ZTogZnVuY3Rpb24gKGUsIHIpIHtcblx0XHRcdGUgPSB0KFwiZnVuY3Rpb25zXCIsIFwiKF58XFxcXHN8LClcIiwgXCJcXFxccypcXFxcKFwiLCBcIiQxXCIgKyBuLnByZWZpeCArIFwiJDIoXCIsIGUpO1xuXHRcdFx0ZSA9IHQoXCJrZXl3b3Jkc1wiLCBcIihefFxcXFxzKVwiLCBcIihcXFxcc3wkKVwiLCBcIiQxXCIgKyBuLnByZWZpeCArIFwiJDIkM1wiLCBlKTtcblx0XHRcdHJldHVybiBlXG5cdFx0fSxcblx0XHRwcmVmaXhTZWxlY3RvcjogZnVuY3Rpb24gKGUpIHtcblx0XHRcdHJldHVybiBlLnJlcGxhY2UoL146ezEsMn0vLCBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRyZXR1cm4gZSArIG4ucHJlZml4XG5cdFx0XHR9KVxuXHRcdH0sXG5cdFx0cHJlZml4UHJvcGVydHk6IGZ1bmN0aW9uIChlLCB0KSB7XG5cdFx0XHR2YXIgciA9IG4ucHJlZml4ICsgZTtcblx0XHRcdHJldHVybiB0ID8gU3R5bGVGaXguY2FtZWxDYXNlKHIpIDogclxuXHRcdH1cblx0fTtcblx0KGZ1bmN0aW9uICgpIHtcblx0XHR2YXIgZSA9IHt9LFxuXHRcdFx0dCA9IFtdLFxuXHRcdFx0ciA9IHt9LFxuXHRcdFx0aSA9IGdldENvbXB1dGVkU3R5bGUoZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LCBudWxsKSxcblx0XHRcdHMgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiZGl2XCIpLnN0eWxlLFxuXHRcdFx0byA9IGZ1bmN0aW9uIChuKSB7XG5cdFx0XHRcdGlmIChuLmNoYXJBdCgwKSA9PT0gXCItXCIpIHtcblx0XHRcdFx0XHR0LnB1c2gobik7XG5cdFx0XHRcdFx0dmFyIHIgPSBuLnNwbGl0KFwiLVwiKSxcblx0XHRcdFx0XHRcdGkgPSByWzFdO1xuXHRcdFx0XHRcdGVbaV0gPSArK2VbaV0gfHwgMTtcblx0XHRcdFx0XHR3aGlsZSAoci5sZW5ndGggPiAzKSB7XG5cdFx0XHRcdFx0XHRyLnBvcCgpO1xuXHRcdFx0XHRcdFx0dmFyIHMgPSByLmpvaW4oXCItXCIpO1xuXHRcdFx0XHRcdFx0dShzKSAmJiB0LmluZGV4T2YocykgPT09IC0xICYmIHQucHVzaChzKVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdHUgPSBmdW5jdGlvbiAoZSkge1xuXHRcdFx0XHRyZXR1cm4gU3R5bGVGaXguY2FtZWxDYXNlKGUpIGluIHNcblx0XHRcdH07XG5cdFx0aWYgKGkubGVuZ3RoID4gMClcblx0XHRcdGZvciAodmFyIGEgPSAwOyBhIDwgaS5sZW5ndGg7IGErKykgbyhpW2FdKTtcblx0XHRlbHNlXG5cdFx0XHRmb3IgKHZhciBmIGluIGkpIG8oU3R5bGVGaXguZGVDYW1lbENhc2UoZikpO1xuXHRcdHZhciBsID0ge1xuXHRcdFx0dXNlczogMFxuXHRcdH07XG5cdFx0Zm9yICh2YXIgYyBpbiBlKSB7XG5cdFx0XHR2YXIgaCA9IGVbY107XG5cdFx0XHRsLnVzZXMgPCBoICYmIChsID0ge1xuXHRcdFx0XHRwcmVmaXg6IGMsXG5cdFx0XHRcdHVzZXM6IGhcblx0XHRcdH0pXG5cdFx0fVxuXHRcdG4ucHJlZml4ID0gXCItXCIgKyBsLnByZWZpeCArIFwiLVwiO1xuXHRcdG4uUHJlZml4ID0gU3R5bGVGaXguY2FtZWxDYXNlKG4ucHJlZml4KTtcblx0XHRuLnByb3BlcnRpZXMgPSBbXTtcblx0XHRmb3IgKHZhciBhID0gMDsgYSA8IHQubGVuZ3RoOyBhKyspIHtcblx0XHRcdHZhciBmID0gdFthXTtcblx0XHRcdGlmIChmLmluZGV4T2Yobi5wcmVmaXgpID09PSAwKSB7XG5cdFx0XHRcdHZhciBwID0gZi5zbGljZShuLnByZWZpeC5sZW5ndGgpO1xuXHRcdFx0XHR1KHApIHx8IG4ucHJvcGVydGllcy5wdXNoKHApXG5cdFx0XHR9XG5cdFx0fVxuXHRcdG4uUHJlZml4ID09IFwiTXNcIiAmJiAhKFwidHJhbnNmb3JtXCIgaW4gcykgJiYgIShcIk1zVHJhbnNmb3JtXCIgaW4gcykgJiYgXCJtc1RyYW5zZm9ybVwiIGluIHMgJiYgbi5wcm9wZXJ0aWVzLnB1c2goXCJ0cmFuc2Zvcm1cIiwgXCJ0cmFuc2Zvcm0tb3JpZ2luXCIpO1xuXHRcdG4ucHJvcGVydGllcy5zb3J0KClcblx0fSkoKTtcblx0KGZ1bmN0aW9uICgpIHtcblx0XHRmdW5jdGlvbiBpKGUsIHQpIHtcblx0XHRcdHJbdF0gPSBcIlwiO1xuXHRcdFx0clt0XSA9IGU7XG5cdFx0XHRyZXR1cm4gISFyW3RdXG5cdFx0fVxuXHRcdHZhciBlID0ge1xuXHRcdFx0XCJsaW5lYXItZ3JhZGllbnRcIjoge1xuXHRcdFx0XHRwcm9wZXJ0eTogXCJiYWNrZ3JvdW5kSW1hZ2VcIixcblx0XHRcdFx0cGFyYW1zOiBcInJlZCwgdGVhbFwiXG5cdFx0XHR9LFxuXHRcdFx0Y2FsYzoge1xuXHRcdFx0XHRwcm9wZXJ0eTogXCJ3aWR0aFwiLFxuXHRcdFx0XHRwYXJhbXM6IFwiMXB4ICsgNSVcIlxuXHRcdFx0fSxcblx0XHRcdGVsZW1lbnQ6IHtcblx0XHRcdFx0cHJvcGVydHk6IFwiYmFja2dyb3VuZEltYWdlXCIsXG5cdFx0XHRcdHBhcmFtczogXCIjZm9vXCJcblx0XHRcdH0sXG5cdFx0XHRcImNyb3NzLWZhZGVcIjoge1xuXHRcdFx0XHRwcm9wZXJ0eTogXCJiYWNrZ3JvdW5kSW1hZ2VcIixcblx0XHRcdFx0cGFyYW1zOiBcInVybChhLnBuZyksIHVybChiLnBuZyksIDUwJVwiXG5cdFx0XHR9XG5cdFx0fTtcblx0XHRlW1wicmVwZWF0aW5nLWxpbmVhci1ncmFkaWVudFwiXSA9IGVbXCJyZXBlYXRpbmctcmFkaWFsLWdyYWRpZW50XCJdID0gZVtcInJhZGlhbC1ncmFkaWVudFwiXSA9IGVbXCJsaW5lYXItZ3JhZGllbnRcIl07XG5cdFx0dmFyIHQgPSB7XG5cdFx0XHRpbml0aWFsOiBcImNvbG9yXCIsXG5cdFx0XHRcInpvb20taW5cIjogXCJjdXJzb3JcIixcblx0XHRcdFwiem9vbS1vdXRcIjogXCJjdXJzb3JcIixcblx0XHRcdGJveDogXCJkaXNwbGF5XCIsXG5cdFx0XHRmbGV4Ym94OiBcImRpc3BsYXlcIixcblx0XHRcdFwiaW5saW5lLWZsZXhib3hcIjogXCJkaXNwbGF5XCIsXG5cdFx0XHRmbGV4OiBcImRpc3BsYXlcIixcblx0XHRcdFwiaW5saW5lLWZsZXhcIjogXCJkaXNwbGF5XCJcblx0XHR9O1xuXHRcdG4uZnVuY3Rpb25zID0gW107XG5cdFx0bi5rZXl3b3JkcyA9IFtdO1xuXHRcdHZhciByID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImRpdlwiKS5zdHlsZTtcblx0XHRmb3IgKHZhciBzIGluIGUpIHtcblx0XHRcdHZhciBvID0gZVtzXSxcblx0XHRcdFx0dSA9IG8ucHJvcGVydHksXG5cdFx0XHRcdGEgPSBzICsgXCIoXCIgKyBvLnBhcmFtcyArIFwiKVwiO1xuXHRcdFx0IWkoYSwgdSkgJiYgaShuLnByZWZpeCArIGEsIHUpICYmIG4uZnVuY3Rpb25zLnB1c2gocylcblx0XHR9XG5cdFx0Zm9yICh2YXIgZiBpbiB0KSB7XG5cdFx0XHR2YXIgdSA9IHRbZl07XG5cdFx0XHQhaShmLCB1KSAmJiBpKG4ucHJlZml4ICsgZiwgdSkgJiYgbi5rZXl3b3Jkcy5wdXNoKGYpXG5cdFx0fVxuXHR9KSgpO1xuXHQoZnVuY3Rpb24gKCkge1xuXHRcdGZ1bmN0aW9uIHMoZSkge1xuXHRcdFx0aS50ZXh0Q29udGVudCA9IGUgKyBcInt9XCI7XG5cdFx0XHRyZXR1cm4gISFpLnNoZWV0LmNzc1J1bGVzLmxlbmd0aFxuXHRcdH1cblx0XHR2YXIgdCA9IHtcblx0XHRcdFx0XCI6cmVhZC1vbmx5XCI6IG51bGwsXG5cdFx0XHRcdFwiOnJlYWQtd3JpdGVcIjogbnVsbCxcblx0XHRcdFx0XCI6YW55LWxpbmtcIjogbnVsbCxcblx0XHRcdFx0XCI6OnNlbGVjdGlvblwiOiBudWxsXG5cdFx0XHR9LFxuXHRcdFx0ciA9IHtcblx0XHRcdFx0a2V5ZnJhbWVzOiBcIm5hbWVcIixcblx0XHRcdFx0dmlld3BvcnQ6IG51bGwsXG5cdFx0XHRcdGRvY3VtZW50OiAncmVnZXhwKFwiLlwiKSdcblx0XHRcdH07XG5cdFx0bi5zZWxlY3RvcnMgPSBbXTtcblx0XHRuLmF0cnVsZXMgPSBbXTtcblx0XHR2YXIgaSA9IGUuYXBwZW5kQ2hpbGQoZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcInN0eWxlXCIpKTtcblx0XHRmb3IgKHZhciBvIGluIHQpIHtcblx0XHRcdHZhciB1ID0gbyArICh0W29dID8gXCIoXCIgKyB0W29dICsgXCIpXCIgOiBcIlwiKTtcblx0XHRcdCFzKHUpICYmIHMobi5wcmVmaXhTZWxlY3Rvcih1KSkgJiYgbi5zZWxlY3RvcnMucHVzaChvKVxuXHRcdH1cblx0XHRmb3IgKHZhciBhIGluIHIpIHtcblx0XHRcdHZhciB1ID0gYSArIFwiIFwiICsgKHJbYV0gfHwgXCJcIik7XG5cdFx0XHQhcyhcIkBcIiArIHUpICYmIHMoXCJAXCIgKyBuLnByZWZpeCArIHUpICYmIG4uYXRydWxlcy5wdXNoKGEpXG5cdFx0fVxuXHRcdGUucmVtb3ZlQ2hpbGQoaSlcblx0fSkoKTtcblx0bi52YWx1ZVByb3BlcnRpZXMgPSBbXCJ0cmFuc2l0aW9uXCIsIFwidHJhbnNpdGlvbi1wcm9wZXJ0eVwiXTtcblx0ZS5jbGFzc05hbWUgKz0gXCIgXCIgKyBuLnByZWZpeDtcblx0U3R5bGVGaXgucmVnaXN0ZXIobi5wcmVmaXhDU1MpXG59KShkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQpO1xuXG5cblxuLy8gV0VCUEFDSyBGT09URVIgLy9cbi8vIC4vYXNzZXRzL2pzL3ByZWZpeGZyZWUubWluLmpzIiwiLyohXG4gKiBqUXVlcnkgSmF2YVNjcmlwdCBMaWJyYXJ5IHYzLjMuMVxuICogaHR0cHM6Ly9qcXVlcnkuY29tL1xuICpcbiAqIEluY2x1ZGVzIFNpenpsZS5qc1xuICogaHR0cHM6Ly9zaXp6bGVqcy5jb20vXG4gKlxuICogQ29weXJpZ2h0IEpTIEZvdW5kYXRpb24gYW5kIG90aGVyIGNvbnRyaWJ1dG9yc1xuICogUmVsZWFzZWQgdW5kZXIgdGhlIE1JVCBsaWNlbnNlXG4gKiBodHRwczovL2pxdWVyeS5vcmcvbGljZW5zZVxuICpcbiAqIERhdGU6IDIwMTgtMDEtMjBUMTc6MjRaXG4gKi9cbiggZnVuY3Rpb24oIGdsb2JhbCwgZmFjdG9yeSApIHtcblxuXHRcInVzZSBzdHJpY3RcIjtcblxuXHRpZiAoIHR5cGVvZiBtb2R1bGUgPT09IFwib2JqZWN0XCIgJiYgdHlwZW9mIG1vZHVsZS5leHBvcnRzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gRm9yIENvbW1vbkpTIGFuZCBDb21tb25KUy1saWtlIGVudmlyb25tZW50cyB3aGVyZSBhIHByb3BlciBgd2luZG93YFxuXHRcdC8vIGlzIHByZXNlbnQsIGV4ZWN1dGUgdGhlIGZhY3RvcnkgYW5kIGdldCBqUXVlcnkuXG5cdFx0Ly8gRm9yIGVudmlyb25tZW50cyB0aGF0IGRvIG5vdCBoYXZlIGEgYHdpbmRvd2Agd2l0aCBhIGBkb2N1bWVudGBcblx0XHQvLyAoc3VjaCBhcyBOb2RlLmpzKSwgZXhwb3NlIGEgZmFjdG9yeSBhcyBtb2R1bGUuZXhwb3J0cy5cblx0XHQvLyBUaGlzIGFjY2VudHVhdGVzIHRoZSBuZWVkIGZvciB0aGUgY3JlYXRpb24gb2YgYSByZWFsIGB3aW5kb3dgLlxuXHRcdC8vIGUuZy4gdmFyIGpRdWVyeSA9IHJlcXVpcmUoXCJqcXVlcnlcIikod2luZG93KTtcblx0XHQvLyBTZWUgdGlja2V0ICMxNDU0OSBmb3IgbW9yZSBpbmZvLlxuXHRcdG1vZHVsZS5leHBvcnRzID0gZ2xvYmFsLmRvY3VtZW50ID9cblx0XHRcdGZhY3RvcnkoIGdsb2JhbCwgdHJ1ZSApIDpcblx0XHRcdGZ1bmN0aW9uKCB3ICkge1xuXHRcdFx0XHRpZiAoICF3LmRvY3VtZW50ICkge1xuXHRcdFx0XHRcdHRocm93IG5ldyBFcnJvciggXCJqUXVlcnkgcmVxdWlyZXMgYSB3aW5kb3cgd2l0aCBhIGRvY3VtZW50XCIgKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gZmFjdG9yeSggdyApO1xuXHRcdFx0fTtcblx0fSBlbHNlIHtcblx0XHRmYWN0b3J5KCBnbG9iYWwgKTtcblx0fVxuXG4vLyBQYXNzIHRoaXMgaWYgd2luZG93IGlzIG5vdCBkZWZpbmVkIHlldFxufSApKCB0eXBlb2Ygd2luZG93ICE9PSBcInVuZGVmaW5lZFwiID8gd2luZG93IDogdGhpcywgZnVuY3Rpb24oIHdpbmRvdywgbm9HbG9iYWwgKSB7XG5cbi8vIEVkZ2UgPD0gMTIgLSAxMyssIEZpcmVmb3ggPD0xOCAtIDQ1KywgSUUgMTAgLSAxMSwgU2FmYXJpIDUuMSAtIDkrLCBpT1MgNiAtIDkuMVxuLy8gdGhyb3cgZXhjZXB0aW9ucyB3aGVuIG5vbi1zdHJpY3QgY29kZSAoZS5nLiwgQVNQLk5FVCA0LjUpIGFjY2Vzc2VzIHN0cmljdCBtb2RlXG4vLyBhcmd1bWVudHMuY2FsbGVlLmNhbGxlciAodHJhYy0xMzMzNSkuIEJ1dCBhcyBvZiBqUXVlcnkgMy4wICgyMDE2KSwgc3RyaWN0IG1vZGUgc2hvdWxkIGJlIGNvbW1vblxuLy8gZW5vdWdoIHRoYXQgYWxsIHN1Y2ggYXR0ZW1wdHMgYXJlIGd1YXJkZWQgaW4gYSB0cnkgYmxvY2suXG5cInVzZSBzdHJpY3RcIjtcblxudmFyIGFyciA9IFtdO1xuXG52YXIgZG9jdW1lbnQgPSB3aW5kb3cuZG9jdW1lbnQ7XG5cbnZhciBnZXRQcm90byA9IE9iamVjdC5nZXRQcm90b3R5cGVPZjtcblxudmFyIHNsaWNlID0gYXJyLnNsaWNlO1xuXG52YXIgY29uY2F0ID0gYXJyLmNvbmNhdDtcblxudmFyIHB1c2ggPSBhcnIucHVzaDtcblxudmFyIGluZGV4T2YgPSBhcnIuaW5kZXhPZjtcblxudmFyIGNsYXNzMnR5cGUgPSB7fTtcblxudmFyIHRvU3RyaW5nID0gY2xhc3MydHlwZS50b1N0cmluZztcblxudmFyIGhhc093biA9IGNsYXNzMnR5cGUuaGFzT3duUHJvcGVydHk7XG5cbnZhciBmblRvU3RyaW5nID0gaGFzT3duLnRvU3RyaW5nO1xuXG52YXIgT2JqZWN0RnVuY3Rpb25TdHJpbmcgPSBmblRvU3RyaW5nLmNhbGwoIE9iamVjdCApO1xuXG52YXIgc3VwcG9ydCA9IHt9O1xuXG52YXIgaXNGdW5jdGlvbiA9IGZ1bmN0aW9uIGlzRnVuY3Rpb24oIG9iaiApIHtcblxuICAgICAgLy8gU3VwcG9ydDogQ2hyb21lIDw9NTcsIEZpcmVmb3ggPD01MlxuICAgICAgLy8gSW4gc29tZSBicm93c2VycywgdHlwZW9mIHJldHVybnMgXCJmdW5jdGlvblwiIGZvciBIVE1MIDxvYmplY3Q+IGVsZW1lbnRzXG4gICAgICAvLyAoaS5lLiwgYHR5cGVvZiBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcIm9iamVjdFwiICkgPT09IFwiZnVuY3Rpb25cImApLlxuICAgICAgLy8gV2UgZG9uJ3Qgd2FudCB0byBjbGFzc2lmeSAqYW55KiBET00gbm9kZSBhcyBhIGZ1bmN0aW9uLlxuICAgICAgcmV0dXJuIHR5cGVvZiBvYmogPT09IFwiZnVuY3Rpb25cIiAmJiB0eXBlb2Ygb2JqLm5vZGVUeXBlICE9PSBcIm51bWJlclwiO1xuICB9O1xuXG5cbnZhciBpc1dpbmRvdyA9IGZ1bmN0aW9uIGlzV2luZG93KCBvYmogKSB7XG5cdFx0cmV0dXJuIG9iaiAhPSBudWxsICYmIG9iaiA9PT0gb2JqLndpbmRvdztcblx0fTtcblxuXG5cblxuXHR2YXIgcHJlc2VydmVkU2NyaXB0QXR0cmlidXRlcyA9IHtcblx0XHR0eXBlOiB0cnVlLFxuXHRcdHNyYzogdHJ1ZSxcblx0XHRub01vZHVsZTogdHJ1ZVxuXHR9O1xuXG5cdGZ1bmN0aW9uIERPTUV2YWwoIGNvZGUsIGRvYywgbm9kZSApIHtcblx0XHRkb2MgPSBkb2MgfHwgZG9jdW1lbnQ7XG5cblx0XHR2YXIgaSxcblx0XHRcdHNjcmlwdCA9IGRvYy5jcmVhdGVFbGVtZW50KCBcInNjcmlwdFwiICk7XG5cblx0XHRzY3JpcHQudGV4dCA9IGNvZGU7XG5cdFx0aWYgKCBub2RlICkge1xuXHRcdFx0Zm9yICggaSBpbiBwcmVzZXJ2ZWRTY3JpcHRBdHRyaWJ1dGVzICkge1xuXHRcdFx0XHRpZiAoIG5vZGVbIGkgXSApIHtcblx0XHRcdFx0XHRzY3JpcHRbIGkgXSA9IG5vZGVbIGkgXTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0XHRkb2MuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0ICkucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggc2NyaXB0ICk7XG5cdH1cblxuXG5mdW5jdGlvbiB0b1R5cGUoIG9iaiApIHtcblx0aWYgKCBvYmogPT0gbnVsbCApIHtcblx0XHRyZXR1cm4gb2JqICsgXCJcIjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seSAoZnVuY3Rpb25pc2ggUmVnRXhwKVxuXHRyZXR1cm4gdHlwZW9mIG9iaiA9PT0gXCJvYmplY3RcIiB8fCB0eXBlb2Ygb2JqID09PSBcImZ1bmN0aW9uXCIgP1xuXHRcdGNsYXNzMnR5cGVbIHRvU3RyaW5nLmNhbGwoIG9iaiApIF0gfHwgXCJvYmplY3RcIiA6XG5cdFx0dHlwZW9mIG9iajtcbn1cbi8qIGdsb2JhbCBTeW1ib2wgKi9cbi8vIERlZmluaW5nIHRoaXMgZ2xvYmFsIGluIC5lc2xpbnRyYy5qc29uIHdvdWxkIGNyZWF0ZSBhIGRhbmdlciBvZiB1c2luZyB0aGUgZ2xvYmFsXG4vLyB1bmd1YXJkZWQgaW4gYW5vdGhlciBwbGFjZSwgaXQgc2VlbXMgc2FmZXIgdG8gZGVmaW5lIGdsb2JhbCBvbmx5IGZvciB0aGlzIG1vZHVsZVxuXG5cblxudmFyXG5cdHZlcnNpb24gPSBcIjMuMy4xXCIsXG5cblx0Ly8gRGVmaW5lIGEgbG9jYWwgY29weSBvZiBqUXVlcnlcblx0alF1ZXJ5ID0gZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXG5cdFx0Ly8gVGhlIGpRdWVyeSBvYmplY3QgaXMgYWN0dWFsbHkganVzdCB0aGUgaW5pdCBjb25zdHJ1Y3RvciAnZW5oYW5jZWQnXG5cdFx0Ly8gTmVlZCBpbml0IGlmIGpRdWVyeSBpcyBjYWxsZWQgKGp1c3QgYWxsb3cgZXJyb3IgdG8gYmUgdGhyb3duIGlmIG5vdCBpbmNsdWRlZClcblx0XHRyZXR1cm4gbmV3IGpRdWVyeS5mbi5pbml0KCBzZWxlY3RvciwgY29udGV4dCApO1xuXHR9LFxuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seVxuXHQvLyBNYWtlIHN1cmUgd2UgdHJpbSBCT00gYW5kIE5CU1Bcblx0cnRyaW0gPSAvXltcXHNcXHVGRUZGXFx4QTBdK3xbXFxzXFx1RkVGRlxceEEwXSskL2c7XG5cbmpRdWVyeS5mbiA9IGpRdWVyeS5wcm90b3R5cGUgPSB7XG5cblx0Ly8gVGhlIGN1cnJlbnQgdmVyc2lvbiBvZiBqUXVlcnkgYmVpbmcgdXNlZFxuXHRqcXVlcnk6IHZlcnNpb24sXG5cblx0Y29uc3RydWN0b3I6IGpRdWVyeSxcblxuXHQvLyBUaGUgZGVmYXVsdCBsZW5ndGggb2YgYSBqUXVlcnkgb2JqZWN0IGlzIDBcblx0bGVuZ3RoOiAwLFxuXG5cdHRvQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdH0sXG5cblx0Ly8gR2V0IHRoZSBOdGggZWxlbWVudCBpbiB0aGUgbWF0Y2hlZCBlbGVtZW50IHNldCBPUlxuXHQvLyBHZXQgdGhlIHdob2xlIG1hdGNoZWQgZWxlbWVudCBzZXQgYXMgYSBjbGVhbiBhcnJheVxuXHRnZXQ6IGZ1bmN0aW9uKCBudW0gKSB7XG5cblx0XHQvLyBSZXR1cm4gYWxsIHRoZSBlbGVtZW50cyBpbiBhIGNsZWFuIGFycmF5XG5cdFx0aWYgKCBudW0gPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiBzbGljZS5jYWxsKCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIGp1c3QgdGhlIG9uZSBlbGVtZW50IGZyb20gdGhlIHNldFxuXHRcdHJldHVybiBudW0gPCAwID8gdGhpc1sgbnVtICsgdGhpcy5sZW5ndGggXSA6IHRoaXNbIG51bSBdO1xuXHR9LFxuXG5cdC8vIFRha2UgYW4gYXJyYXkgb2YgZWxlbWVudHMgYW5kIHB1c2ggaXQgb250byB0aGUgc3RhY2tcblx0Ly8gKHJldHVybmluZyB0aGUgbmV3IG1hdGNoZWQgZWxlbWVudCBzZXQpXG5cdHB1c2hTdGFjazogZnVuY3Rpb24oIGVsZW1zICkge1xuXG5cdFx0Ly8gQnVpbGQgYSBuZXcgalF1ZXJ5IG1hdGNoZWQgZWxlbWVudCBzZXRcblx0XHR2YXIgcmV0ID0galF1ZXJ5Lm1lcmdlKCB0aGlzLmNvbnN0cnVjdG9yKCksIGVsZW1zICk7XG5cblx0XHQvLyBBZGQgdGhlIG9sZCBvYmplY3Qgb250byB0aGUgc3RhY2sgKGFzIGEgcmVmZXJlbmNlKVxuXHRcdHJldC5wcmV2T2JqZWN0ID0gdGhpcztcblxuXHRcdC8vIFJldHVybiB0aGUgbmV3bHktZm9ybWVkIGVsZW1lbnQgc2V0XG5cdFx0cmV0dXJuIHJldDtcblx0fSxcblxuXHQvLyBFeGVjdXRlIGEgY2FsbGJhY2sgZm9yIGV2ZXJ5IGVsZW1lbnQgaW4gdGhlIG1hdGNoZWQgc2V0LlxuXHRlYWNoOiBmdW5jdGlvbiggY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5lYWNoKCB0aGlzLCBjYWxsYmFjayApO1xuXHR9LFxuXG5cdG1hcDogZnVuY3Rpb24oIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggalF1ZXJ5Lm1hcCggdGhpcywgZnVuY3Rpb24oIGVsZW0sIGkgKSB7XG5cdFx0XHRyZXR1cm4gY2FsbGJhY2suY2FsbCggZWxlbSwgaSwgZWxlbSApO1xuXHRcdH0gKSApO1xuXHR9LFxuXG5cdHNsaWNlOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHNsaWNlLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKSApO1xuXHR9LFxuXG5cdGZpcnN0OiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gdGhpcy5lcSggMCApO1xuXHR9LFxuXG5cdGxhc3Q6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLmVxKCAtMSApO1xuXHR9LFxuXG5cdGVxOiBmdW5jdGlvbiggaSApIHtcblx0XHR2YXIgbGVuID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRqID0gK2kgKyAoIGkgPCAwID8gbGVuIDogMCApO1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggaiA+PSAwICYmIGogPCBsZW4gPyBbIHRoaXNbIGogXSBdIDogW10gKTtcblx0fSxcblxuXHRlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLnByZXZPYmplY3QgfHwgdGhpcy5jb25zdHJ1Y3RvcigpO1xuXHR9LFxuXG5cdC8vIEZvciBpbnRlcm5hbCB1c2Ugb25seS5cblx0Ly8gQmVoYXZlcyBsaWtlIGFuIEFycmF5J3MgbWV0aG9kLCBub3QgbGlrZSBhIGpRdWVyeSBtZXRob2QuXG5cdHB1c2g6IHB1c2gsXG5cdHNvcnQ6IGFyci5zb3J0LFxuXHRzcGxpY2U6IGFyci5zcGxpY2Vcbn07XG5cbmpRdWVyeS5leHRlbmQgPSBqUXVlcnkuZm4uZXh0ZW5kID0gZnVuY3Rpb24oKSB7XG5cdHZhciBvcHRpb25zLCBuYW1lLCBzcmMsIGNvcHksIGNvcHlJc0FycmF5LCBjbG9uZSxcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIDAgXSB8fCB7fSxcblx0XHRpID0gMSxcblx0XHRsZW5ndGggPSBhcmd1bWVudHMubGVuZ3RoLFxuXHRcdGRlZXAgPSBmYWxzZTtcblxuXHQvLyBIYW5kbGUgYSBkZWVwIGNvcHkgc2l0dWF0aW9uXG5cdGlmICggdHlwZW9mIHRhcmdldCA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0ZGVlcCA9IHRhcmdldDtcblxuXHRcdC8vIFNraXAgdGhlIGJvb2xlYW4gYW5kIHRoZSB0YXJnZXRcblx0XHR0YXJnZXQgPSBhcmd1bWVudHNbIGkgXSB8fCB7fTtcblx0XHRpKys7XG5cdH1cblxuXHQvLyBIYW5kbGUgY2FzZSB3aGVuIHRhcmdldCBpcyBhIHN0cmluZyBvciBzb21ldGhpbmcgKHBvc3NpYmxlIGluIGRlZXAgY29weSlcblx0aWYgKCB0eXBlb2YgdGFyZ2V0ICE9PSBcIm9iamVjdFwiICYmICFpc0Z1bmN0aW9uKCB0YXJnZXQgKSApIHtcblx0XHR0YXJnZXQgPSB7fTtcblx0fVxuXG5cdC8vIEV4dGVuZCBqUXVlcnkgaXRzZWxmIGlmIG9ubHkgb25lIGFyZ3VtZW50IGlzIHBhc3NlZFxuXHRpZiAoIGkgPT09IGxlbmd0aCApIHtcblx0XHR0YXJnZXQgPSB0aGlzO1xuXHRcdGktLTtcblx0fVxuXG5cdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXG5cdFx0Ly8gT25seSBkZWFsIHdpdGggbm9uLW51bGwvdW5kZWZpbmVkIHZhbHVlc1xuXHRcdGlmICggKCBvcHRpb25zID0gYXJndW1lbnRzWyBpIF0gKSAhPSBudWxsICkge1xuXG5cdFx0XHQvLyBFeHRlbmQgdGhlIGJhc2Ugb2JqZWN0XG5cdFx0XHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0XHRcdHNyYyA9IHRhcmdldFsgbmFtZSBdO1xuXHRcdFx0XHRjb3B5ID0gb3B0aW9uc1sgbmFtZSBdO1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbmV2ZXItZW5kaW5nIGxvb3Bcblx0XHRcdFx0aWYgKCB0YXJnZXQgPT09IGNvcHkgKSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBSZWN1cnNlIGlmIHdlJ3JlIG1lcmdpbmcgcGxhaW4gb2JqZWN0cyBvciBhcnJheXNcblx0XHRcdFx0aWYgKCBkZWVwICYmIGNvcHkgJiYgKCBqUXVlcnkuaXNQbGFpbk9iamVjdCggY29weSApIHx8XG5cdFx0XHRcdFx0KCBjb3B5SXNBcnJheSA9IEFycmF5LmlzQXJyYXkoIGNvcHkgKSApICkgKSB7XG5cblx0XHRcdFx0XHRpZiAoIGNvcHlJc0FycmF5ICkge1xuXHRcdFx0XHRcdFx0Y29weUlzQXJyYXkgPSBmYWxzZTtcblx0XHRcdFx0XHRcdGNsb25lID0gc3JjICYmIEFycmF5LmlzQXJyYXkoIHNyYyApID8gc3JjIDogW107XG5cblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0Y2xvbmUgPSBzcmMgJiYgalF1ZXJ5LmlzUGxhaW5PYmplY3QoIHNyYyApID8gc3JjIDoge307XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gTmV2ZXIgbW92ZSBvcmlnaW5hbCBvYmplY3RzLCBjbG9uZSB0aGVtXG5cdFx0XHRcdFx0dGFyZ2V0WyBuYW1lIF0gPSBqUXVlcnkuZXh0ZW5kKCBkZWVwLCBjbG9uZSwgY29weSApO1xuXG5cdFx0XHRcdC8vIERvbid0IGJyaW5nIGluIHVuZGVmaW5lZCB2YWx1ZXNcblx0XHRcdFx0fSBlbHNlIGlmICggY29weSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRcdHRhcmdldFsgbmFtZSBdID0gY29weTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgbW9kaWZpZWQgb2JqZWN0XG5cdHJldHVybiB0YXJnZXQ7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gVW5pcXVlIGZvciBlYWNoIGNvcHkgb2YgalF1ZXJ5IG9uIHRoZSBwYWdlXG5cdGV4cGFuZG86IFwialF1ZXJ5XCIgKyAoIHZlcnNpb24gKyBNYXRoLnJhbmRvbSgpICkucmVwbGFjZSggL1xcRC9nLCBcIlwiICksXG5cblx0Ly8gQXNzdW1lIGpRdWVyeSBpcyByZWFkeSB3aXRob3V0IHRoZSByZWFkeSBtb2R1bGVcblx0aXNSZWFkeTogdHJ1ZSxcblxuXHRlcnJvcjogZnVuY3Rpb24oIG1zZyApIHtcblx0XHR0aHJvdyBuZXcgRXJyb3IoIG1zZyApO1xuXHR9LFxuXG5cdG5vb3A6IGZ1bmN0aW9uKCkge30sXG5cblx0aXNQbGFpbk9iamVjdDogZnVuY3Rpb24oIG9iaiApIHtcblx0XHR2YXIgcHJvdG8sIEN0b3I7XG5cblx0XHQvLyBEZXRlY3Qgb2J2aW91cyBuZWdhdGl2ZXNcblx0XHQvLyBVc2UgdG9TdHJpbmcgaW5zdGVhZCBvZiBqUXVlcnkudHlwZSB0byBjYXRjaCBob3N0IG9iamVjdHNcblx0XHRpZiAoICFvYmogfHwgdG9TdHJpbmcuY2FsbCggb2JqICkgIT09IFwiW29iamVjdCBPYmplY3RdXCIgKSB7XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fVxuXG5cdFx0cHJvdG8gPSBnZXRQcm90byggb2JqICk7XG5cblx0XHQvLyBPYmplY3RzIHdpdGggbm8gcHJvdG90eXBlIChlLmcuLCBgT2JqZWN0LmNyZWF0ZSggbnVsbCApYCkgYXJlIHBsYWluXG5cdFx0aWYgKCAhcHJvdG8gKSB7XG5cdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHR9XG5cblx0XHQvLyBPYmplY3RzIHdpdGggcHJvdG90eXBlIGFyZSBwbGFpbiBpZmYgdGhleSB3ZXJlIGNvbnN0cnVjdGVkIGJ5IGEgZ2xvYmFsIE9iamVjdCBmdW5jdGlvblxuXHRcdEN0b3IgPSBoYXNPd24uY2FsbCggcHJvdG8sIFwiY29uc3RydWN0b3JcIiApICYmIHByb3RvLmNvbnN0cnVjdG9yO1xuXHRcdHJldHVybiB0eXBlb2YgQ3RvciA9PT0gXCJmdW5jdGlvblwiICYmIGZuVG9TdHJpbmcuY2FsbCggQ3RvciApID09PSBPYmplY3RGdW5jdGlvblN0cmluZztcblx0fSxcblxuXHRpc0VtcHR5T2JqZWN0OiBmdW5jdGlvbiggb2JqICkge1xuXG5cdFx0LyogZXNsaW50LWRpc2FibGUgbm8tdW51c2VkLXZhcnMgKi9cblx0XHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2VzbGludC9lc2xpbnQvaXNzdWVzLzYxMjVcblx0XHR2YXIgbmFtZTtcblxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdHJ1ZTtcblx0fSxcblxuXHQvLyBFdmFsdWF0ZXMgYSBzY3JpcHQgaW4gYSBnbG9iYWwgY29udGV4dFxuXHRnbG9iYWxFdmFsOiBmdW5jdGlvbiggY29kZSApIHtcblx0XHRET01FdmFsKCBjb2RlICk7XG5cdH0sXG5cblx0ZWFjaDogZnVuY3Rpb24oIG9iaiwgY2FsbGJhY2sgKSB7XG5cdFx0dmFyIGxlbmd0aCwgaSA9IDA7XG5cblx0XHRpZiAoIGlzQXJyYXlMaWtlKCBvYmogKSApIHtcblx0XHRcdGxlbmd0aCA9IG9iai5sZW5ndGg7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjay5jYWxsKCBvYmpbIGkgXSwgaSwgb2JqWyBpIF0gKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9IGVsc2Uge1xuXHRcdFx0Zm9yICggaSBpbiBvYmogKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2suY2FsbCggb2JqWyBpIF0sIGksIG9ialsgaSBdICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG9iajtcblx0fSxcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4wIG9ubHlcblx0dHJpbTogZnVuY3Rpb24oIHRleHQgKSB7XG5cdFx0cmV0dXJuIHRleHQgPT0gbnVsbCA/XG5cdFx0XHRcIlwiIDpcblx0XHRcdCggdGV4dCArIFwiXCIgKS5yZXBsYWNlKCBydHJpbSwgXCJcIiApO1xuXHR9LFxuXG5cdC8vIHJlc3VsdHMgaXMgZm9yIGludGVybmFsIHVzYWdlIG9ubHlcblx0bWFrZUFycmF5OiBmdW5jdGlvbiggYXJyLCByZXN1bHRzICkge1xuXHRcdHZhciByZXQgPSByZXN1bHRzIHx8IFtdO1xuXG5cdFx0aWYgKCBhcnIgIT0gbnVsbCApIHtcblx0XHRcdGlmICggaXNBcnJheUxpa2UoIE9iamVjdCggYXJyICkgKSApIHtcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCByZXQsXG5cdFx0XHRcdFx0dHlwZW9mIGFyciA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0XHRcdFx0WyBhcnIgXSA6IGFyclxuXHRcdFx0XHQpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5jYWxsKCByZXQsIGFyciApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiByZXQ7XG5cdH0sXG5cblx0aW5BcnJheTogZnVuY3Rpb24oIGVsZW0sIGFyciwgaSApIHtcblx0XHRyZXR1cm4gYXJyID09IG51bGwgPyAtMSA6IGluZGV4T2YuY2FsbCggYXJyLCBlbGVtLCBpICk7XG5cdH0sXG5cblx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0bWVyZ2U6IGZ1bmN0aW9uKCBmaXJzdCwgc2Vjb25kICkge1xuXHRcdHZhciBsZW4gPSArc2Vjb25kLmxlbmd0aCxcblx0XHRcdGogPSAwLFxuXHRcdFx0aSA9IGZpcnN0Lmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaiA8IGxlbjsgaisrICkge1xuXHRcdFx0Zmlyc3RbIGkrKyBdID0gc2Vjb25kWyBqIF07XG5cdFx0fVxuXG5cdFx0Zmlyc3QubGVuZ3RoID0gaTtcblxuXHRcdHJldHVybiBmaXJzdDtcblx0fSxcblxuXHRncmVwOiBmdW5jdGlvbiggZWxlbXMsIGNhbGxiYWNrLCBpbnZlcnQgKSB7XG5cdFx0dmFyIGNhbGxiYWNrSW52ZXJzZSxcblx0XHRcdG1hdGNoZXMgPSBbXSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0bGVuZ3RoID0gZWxlbXMubGVuZ3RoLFxuXHRcdFx0Y2FsbGJhY2tFeHBlY3QgPSAhaW52ZXJ0O1xuXG5cdFx0Ly8gR28gdGhyb3VnaCB0aGUgYXJyYXksIG9ubHkgc2F2aW5nIHRoZSBpdGVtc1xuXHRcdC8vIHRoYXQgcGFzcyB0aGUgdmFsaWRhdG9yIGZ1bmN0aW9uXG5cdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRjYWxsYmFja0ludmVyc2UgPSAhY2FsbGJhY2soIGVsZW1zWyBpIF0sIGkgKTtcblx0XHRcdGlmICggY2FsbGJhY2tJbnZlcnNlICE9PSBjYWxsYmFja0V4cGVjdCApIHtcblx0XHRcdFx0bWF0Y2hlcy5wdXNoKCBlbGVtc1sgaSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIG1hdGNoZXM7XG5cdH0sXG5cblx0Ly8gYXJnIGlzIGZvciBpbnRlcm5hbCB1c2FnZSBvbmx5XG5cdG1hcDogZnVuY3Rpb24oIGVsZW1zLCBjYWxsYmFjaywgYXJnICkge1xuXHRcdHZhciBsZW5ndGgsIHZhbHVlLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRyZXQgPSBbXTtcblxuXHRcdC8vIEdvIHRocm91Z2ggdGhlIGFycmF5LCB0cmFuc2xhdGluZyBlYWNoIG9mIHRoZSBpdGVtcyB0byB0aGVpciBuZXcgdmFsdWVzXG5cdFx0aWYgKCBpc0FycmF5TGlrZSggZWxlbXMgKSApIHtcblx0XHRcdGxlbmd0aCA9IGVsZW1zLmxlbmd0aDtcblx0XHRcdGZvciAoIDsgaSA8IGxlbmd0aDsgaSsrICkge1xuXHRcdFx0XHR2YWx1ZSA9IGNhbGxiYWNrKCBlbGVtc1sgaSBdLCBpLCBhcmcgKTtcblxuXHRcdFx0XHRpZiAoIHZhbHVlICE9IG51bGwgKSB7XG5cdFx0XHRcdFx0cmV0LnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEdvIHRocm91Z2ggZXZlcnkga2V5IG9uIHRoZSBvYmplY3QsXG5cdFx0fSBlbHNlIHtcblx0XHRcdGZvciAoIGkgaW4gZWxlbXMgKSB7XG5cdFx0XHRcdHZhbHVlID0gY2FsbGJhY2soIGVsZW1zWyBpIF0sIGksIGFyZyApO1xuXG5cdFx0XHRcdGlmICggdmFsdWUgIT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXQucHVzaCggdmFsdWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIEZsYXR0ZW4gYW55IG5lc3RlZCBhcnJheXNcblx0XHRyZXR1cm4gY29uY2F0LmFwcGx5KCBbXSwgcmV0ICk7XG5cdH0sXG5cblx0Ly8gQSBnbG9iYWwgR1VJRCBjb3VudGVyIGZvciBvYmplY3RzXG5cdGd1aWQ6IDEsXG5cblx0Ly8galF1ZXJ5LnN1cHBvcnQgaXMgbm90IHVzZWQgaW4gQ29yZSBidXQgb3RoZXIgcHJvamVjdHMgYXR0YWNoIHRoZWlyXG5cdC8vIHByb3BlcnRpZXMgdG8gaXQgc28gaXQgbmVlZHMgdG8gZXhpc3QuXG5cdHN1cHBvcnQ6IHN1cHBvcnRcbn0gKTtcblxuaWYgKCB0eXBlb2YgU3ltYm9sID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cdGpRdWVyeS5mblsgU3ltYm9sLml0ZXJhdG9yIF0gPSBhcnJbIFN5bWJvbC5pdGVyYXRvciBdO1xufVxuXG4vLyBQb3B1bGF0ZSB0aGUgY2xhc3MydHlwZSBtYXBcbmpRdWVyeS5lYWNoKCBcIkJvb2xlYW4gTnVtYmVyIFN0cmluZyBGdW5jdGlvbiBBcnJheSBEYXRlIFJlZ0V4cCBPYmplY3QgRXJyb3IgU3ltYm9sXCIuc3BsaXQoIFwiIFwiICksXG5mdW5jdGlvbiggaSwgbmFtZSApIHtcblx0Y2xhc3MydHlwZVsgXCJbb2JqZWN0IFwiICsgbmFtZSArIFwiXVwiIF0gPSBuYW1lLnRvTG93ZXJDYXNlKCk7XG59ICk7XG5cbmZ1bmN0aW9uIGlzQXJyYXlMaWtlKCBvYmogKSB7XG5cblx0Ly8gU3VwcG9ydDogcmVhbCBpT1MgOC4yIG9ubHkgKG5vdCByZXByb2R1Y2libGUgaW4gc2ltdWxhdG9yKVxuXHQvLyBgaW5gIGNoZWNrIHVzZWQgdG8gcHJldmVudCBKSVQgZXJyb3IgKGdoLTIxNDUpXG5cdC8vIGhhc093biBpc24ndCB1c2VkIGhlcmUgZHVlIHRvIGZhbHNlIG5lZ2F0aXZlc1xuXHQvLyByZWdhcmRpbmcgTm9kZWxpc3QgbGVuZ3RoIGluIElFXG5cdHZhciBsZW5ndGggPSAhIW9iaiAmJiBcImxlbmd0aFwiIGluIG9iaiAmJiBvYmoubGVuZ3RoLFxuXHRcdHR5cGUgPSB0b1R5cGUoIG9iaiApO1xuXG5cdGlmICggaXNGdW5jdGlvbiggb2JqICkgfHwgaXNXaW5kb3coIG9iaiApICkge1xuXHRcdHJldHVybiBmYWxzZTtcblx0fVxuXG5cdHJldHVybiB0eXBlID09PSBcImFycmF5XCIgfHwgbGVuZ3RoID09PSAwIHx8XG5cdFx0dHlwZW9mIGxlbmd0aCA9PT0gXCJudW1iZXJcIiAmJiBsZW5ndGggPiAwICYmICggbGVuZ3RoIC0gMSApIGluIG9iajtcbn1cbnZhciBTaXp6bGUgPVxuLyohXG4gKiBTaXp6bGUgQ1NTIFNlbGVjdG9yIEVuZ2luZSB2Mi4zLjNcbiAqIGh0dHBzOi8vc2l6emxlanMuY29tL1xuICpcbiAqIENvcHlyaWdodCBqUXVlcnkgRm91bmRhdGlvbiBhbmQgb3RoZXIgY29udHJpYnV0b3JzXG4gKiBSZWxlYXNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2VcbiAqIGh0dHA6Ly9qcXVlcnkub3JnL2xpY2Vuc2VcbiAqXG4gKiBEYXRlOiAyMDE2LTA4LTA4XG4gKi9cbihmdW5jdGlvbiggd2luZG93ICkge1xuXG52YXIgaSxcblx0c3VwcG9ydCxcblx0RXhwcixcblx0Z2V0VGV4dCxcblx0aXNYTUwsXG5cdHRva2VuaXplLFxuXHRjb21waWxlLFxuXHRzZWxlY3QsXG5cdG91dGVybW9zdENvbnRleHQsXG5cdHNvcnRJbnB1dCxcblx0aGFzRHVwbGljYXRlLFxuXG5cdC8vIExvY2FsIGRvY3VtZW50IHZhcnNcblx0c2V0RG9jdW1lbnQsXG5cdGRvY3VtZW50LFxuXHRkb2NFbGVtLFxuXHRkb2N1bWVudElzSFRNTCxcblx0cmJ1Z2d5UVNBLFxuXHRyYnVnZ3lNYXRjaGVzLFxuXHRtYXRjaGVzLFxuXHRjb250YWlucyxcblxuXHQvLyBJbnN0YW5jZS1zcGVjaWZpYyBkYXRhXG5cdGV4cGFuZG8gPSBcInNpenpsZVwiICsgMSAqIG5ldyBEYXRlKCksXG5cdHByZWZlcnJlZERvYyA9IHdpbmRvdy5kb2N1bWVudCxcblx0ZGlycnVucyA9IDAsXG5cdGRvbmUgPSAwLFxuXHRjbGFzc0NhY2hlID0gY3JlYXRlQ2FjaGUoKSxcblx0dG9rZW5DYWNoZSA9IGNyZWF0ZUNhY2hlKCksXG5cdGNvbXBpbGVyQ2FjaGUgPSBjcmVhdGVDYWNoZSgpLFxuXHRzb3J0T3JkZXIgPSBmdW5jdGlvbiggYSwgYiApIHtcblx0XHRpZiAoIGEgPT09IGIgKSB7XG5cdFx0XHRoYXNEdXBsaWNhdGUgPSB0cnVlO1xuXHRcdH1cblx0XHRyZXR1cm4gMDtcblx0fSxcblxuXHQvLyBJbnN0YW5jZSBtZXRob2RzXG5cdGhhc093biA9ICh7fSkuaGFzT3duUHJvcGVydHksXG5cdGFyciA9IFtdLFxuXHRwb3AgPSBhcnIucG9wLFxuXHRwdXNoX25hdGl2ZSA9IGFyci5wdXNoLFxuXHRwdXNoID0gYXJyLnB1c2gsXG5cdHNsaWNlID0gYXJyLnNsaWNlLFxuXHQvLyBVc2UgYSBzdHJpcHBlZC1kb3duIGluZGV4T2YgYXMgaXQncyBmYXN0ZXIgdGhhbiBuYXRpdmVcblx0Ly8gaHR0cHM6Ly9qc3BlcmYuY29tL3Rob3ItaW5kZXhvZi12cy1mb3IvNVxuXHRpbmRleE9mID0gZnVuY3Rpb24oIGxpc3QsIGVsZW0gKSB7XG5cdFx0dmFyIGkgPSAwLFxuXHRcdFx0bGVuID0gbGlzdC5sZW5ndGg7XG5cdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRpZiAoIGxpc3RbaV0gPT09IGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBpO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gLTE7XG5cdH0sXG5cblx0Ym9vbGVhbnMgPSBcImNoZWNrZWR8c2VsZWN0ZWR8YXN5bmN8YXV0b2ZvY3VzfGF1dG9wbGF5fGNvbnRyb2xzfGRlZmVyfGRpc2FibGVkfGhpZGRlbnxpc21hcHxsb29wfG11bHRpcGxlfG9wZW58cmVhZG9ubHl8cmVxdWlyZWR8c2NvcGVkXCIsXG5cblx0Ly8gUmVndWxhciBleHByZXNzaW9uc1xuXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL2NzczMtc2VsZWN0b3JzLyN3aGl0ZXNwYWNlXG5cdHdoaXRlc3BhY2UgPSBcIltcXFxceDIwXFxcXHRcXFxcclxcXFxuXFxcXGZdXCIsXG5cblx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvQ1NTMjEvc3luZGF0YS5odG1sI3ZhbHVlLWRlZi1pZGVudGlmaWVyXG5cdGlkZW50aWZpZXIgPSBcIig/OlxcXFxcXFxcLnxbXFxcXHctXXxbXlxcMC1cXFxceGEwXSkrXCIsXG5cblx0Ly8gQXR0cmlidXRlIHNlbGVjdG9yczogaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNhdHRyaWJ1dGUtc2VsZWN0b3JzXG5cdGF0dHJpYnV0ZXMgPSBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFwiICsgaWRlbnRpZmllciArIFwiKSg/OlwiICsgd2hpdGVzcGFjZSArXG5cdFx0Ly8gT3BlcmF0b3IgKGNhcHR1cmUgMilcblx0XHRcIiooWypeJHwhfl0/PSlcIiArIHdoaXRlc3BhY2UgK1xuXHRcdC8vIFwiQXR0cmlidXRlIHZhbHVlcyBtdXN0IGJlIENTUyBpZGVudGlmaWVycyBbY2FwdHVyZSA1XSBvciBzdHJpbmdzIFtjYXB0dXJlIDMgb3IgY2FwdHVyZSA0XVwiXG5cdFx0XCIqKD86JygoPzpcXFxcXFxcXC58W15cXFxcXFxcXCddKSopJ3xcXFwiKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcXFxcIl0pKilcXFwifChcIiArIGlkZW50aWZpZXIgKyBcIikpfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFwiKlxcXFxdXCIsXG5cblx0cHNldWRvcyA9IFwiOihcIiArIGlkZW50aWZpZXIgKyBcIikoPzpcXFxcKChcIiArXG5cdFx0Ly8gVG8gcmVkdWNlIHRoZSBudW1iZXIgb2Ygc2VsZWN0b3JzIG5lZWRpbmcgdG9rZW5pemUgaW4gdGhlIHByZUZpbHRlciwgcHJlZmVyIGFyZ3VtZW50czpcblx0XHQvLyAxLiBxdW90ZWQgKGNhcHR1cmUgMzsgY2FwdHVyZSA0IG9yIGNhcHR1cmUgNSlcblx0XHRcIignKCg/OlxcXFxcXFxcLnxbXlxcXFxcXFxcJ10pKiknfFxcXCIoKD86XFxcXFxcXFwufFteXFxcXFxcXFxcXFwiXSkqKVxcXCIpfFwiICtcblx0XHQvLyAyLiBzaW1wbGUgKGNhcHR1cmUgNilcblx0XHRcIigoPzpcXFxcXFxcXC58W15cXFxcXFxcXCgpW1xcXFxdXXxcIiArIGF0dHJpYnV0ZXMgKyBcIikqKXxcIiArXG5cdFx0Ly8gMy4gYW55dGhpbmcgZWxzZSAoY2FwdHVyZSAyKVxuXHRcdFwiLipcIiArXG5cdFx0XCIpXFxcXCl8KVwiLFxuXG5cdC8vIExlYWRpbmcgYW5kIG5vbi1lc2NhcGVkIHRyYWlsaW5nIHdoaXRlc3BhY2UsIGNhcHR1cmluZyBzb21lIG5vbi13aGl0ZXNwYWNlIGNoYXJhY3RlcnMgcHJlY2VkaW5nIHRoZSBsYXR0ZXJcblx0cndoaXRlc3BhY2UgPSBuZXcgUmVnRXhwKCB3aGl0ZXNwYWNlICsgXCIrXCIsIFwiZ1wiICksXG5cdHJ0cmltID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIrfCgoPzpefFteXFxcXFxcXFxdKSg/OlxcXFxcXFxcLikqKVwiICsgd2hpdGVzcGFjZSArIFwiKyRcIiwgXCJnXCIgKSxcblxuXHRyY29tbWEgPSBuZXcgUmVnRXhwKCBcIl5cIiArIHdoaXRlc3BhY2UgKyBcIiosXCIgKyB3aGl0ZXNwYWNlICsgXCIqXCIgKSxcblx0cmNvbWJpbmF0b3JzID0gbmV3IFJlZ0V4cCggXCJeXCIgKyB3aGl0ZXNwYWNlICsgXCIqKFs+K35dfFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgd2hpdGVzcGFjZSArIFwiKlwiICksXG5cblx0cmF0dHJpYnV0ZVF1b3RlcyA9IG5ldyBSZWdFeHAoIFwiPVwiICsgd2hpdGVzcGFjZSArIFwiKihbXlxcXFxdJ1xcXCJdKj8pXCIgKyB3aGl0ZXNwYWNlICsgXCIqXFxcXF1cIiwgXCJnXCIgKSxcblxuXHRycHNldWRvID0gbmV3IFJlZ0V4cCggcHNldWRvcyApLFxuXHRyaWRlbnRpZmllciA9IG5ldyBSZWdFeHAoIFwiXlwiICsgaWRlbnRpZmllciArIFwiJFwiICksXG5cblx0bWF0Y2hFeHByID0ge1xuXHRcdFwiSURcIjogbmV3IFJlZ0V4cCggXCJeIyhcIiArIGlkZW50aWZpZXIgKyBcIilcIiApLFxuXHRcdFwiQ0xBU1NcIjogbmV3IFJlZ0V4cCggXCJeXFxcXC4oXCIgKyBpZGVudGlmaWVyICsgXCIpXCIgKSxcblx0XHRcIlRBR1wiOiBuZXcgUmVnRXhwKCBcIl4oXCIgKyBpZGVudGlmaWVyICsgXCJ8WypdKVwiICksXG5cdFx0XCJBVFRSXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgYXR0cmlidXRlcyApLFxuXHRcdFwiUFNFVURPXCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgcHNldWRvcyApLFxuXHRcdFwiQ0hJTERcIjogbmV3IFJlZ0V4cCggXCJeOihvbmx5fGZpcnN0fGxhc3R8bnRofG50aC1sYXN0KS0oY2hpbGR8b2YtdHlwZSkoPzpcXFxcKFwiICsgd2hpdGVzcGFjZSArXG5cdFx0XHRcIiooZXZlbnxvZGR8KChbKy1dfCkoXFxcXGQqKW58KVwiICsgd2hpdGVzcGFjZSArIFwiKig/OihbKy1dfClcIiArIHdoaXRlc3BhY2UgK1xuXHRcdFx0XCIqKFxcXFxkKyl8KSlcIiArIHdoaXRlc3BhY2UgKyBcIipcXFxcKXwpXCIsIFwiaVwiICksXG5cdFx0XCJib29sXCI6IG5ldyBSZWdFeHAoIFwiXig/OlwiICsgYm9vbGVhbnMgKyBcIikkXCIsIFwiaVwiICksXG5cdFx0Ly8gRm9yIHVzZSBpbiBsaWJyYXJpZXMgaW1wbGVtZW50aW5nIC5pcygpXG5cdFx0Ly8gV2UgdXNlIHRoaXMgZm9yIFBPUyBtYXRjaGluZyBpbiBgc2VsZWN0YFxuXHRcdFwibmVlZHNDb250ZXh0XCI6IG5ldyBSZWdFeHAoIFwiXlwiICsgd2hpdGVzcGFjZSArIFwiKls+K35dfDooZXZlbnxvZGR8ZXF8Z3R8bHR8bnRofGZpcnN0fGxhc3QpKD86XFxcXChcIiArXG5cdFx0XHR3aGl0ZXNwYWNlICsgXCIqKCg/Oi1cXFxcZCk/XFxcXGQqKVwiICsgd2hpdGVzcGFjZSArIFwiKlxcXFwpfCkoPz1bXi1dfCQpXCIsIFwiaVwiIClcblx0fSxcblxuXHRyaW5wdXRzID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8YnV0dG9uKSQvaSxcblx0cmhlYWRlciA9IC9eaFxcZCQvaSxcblxuXHRybmF0aXZlID0gL15bXntdK1xce1xccypcXFtuYXRpdmUgXFx3LyxcblxuXHQvLyBFYXNpbHktcGFyc2VhYmxlL3JldHJpZXZhYmxlIElEIG9yIFRBRyBvciBDTEFTUyBzZWxlY3RvcnNcblx0cnF1aWNrRXhwciA9IC9eKD86IyhbXFx3LV0rKXwoXFx3Kyl8XFwuKFtcXHctXSspKSQvLFxuXG5cdHJzaWJsaW5nID0gL1srfl0vLFxuXG5cdC8vIENTUyBlc2NhcGVzXG5cdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL0NTUzIxL3N5bmRhdGEuaHRtbCNlc2NhcGVkLWNoYXJhY3RlcnNcblx0cnVuZXNjYXBlID0gbmV3IFJlZ0V4cCggXCJcXFxcXFxcXChbXFxcXGRhLWZdezEsNn1cIiArIHdoaXRlc3BhY2UgKyBcIj98KFwiICsgd2hpdGVzcGFjZSArIFwiKXwuKVwiLCBcImlnXCIgKSxcblx0ZnVuZXNjYXBlID0gZnVuY3Rpb24oIF8sIGVzY2FwZWQsIGVzY2FwZWRXaGl0ZXNwYWNlICkge1xuXHRcdHZhciBoaWdoID0gXCIweFwiICsgZXNjYXBlZCAtIDB4MTAwMDA7XG5cdFx0Ly8gTmFOIG1lYW5zIG5vbi1jb2RlcG9pbnRcblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94PDI0XG5cdFx0Ly8gV29ya2Fyb3VuZCBlcnJvbmVvdXMgbnVtZXJpYyBpbnRlcnByZXRhdGlvbiBvZiArXCIweFwiXG5cdFx0cmV0dXJuIGhpZ2ggIT09IGhpZ2ggfHwgZXNjYXBlZFdoaXRlc3BhY2UgP1xuXHRcdFx0ZXNjYXBlZCA6XG5cdFx0XHRoaWdoIDwgMCA/XG5cdFx0XHRcdC8vIEJNUCBjb2RlcG9pbnRcblx0XHRcdFx0U3RyaW5nLmZyb21DaGFyQ29kZSggaGlnaCArIDB4MTAwMDAgKSA6XG5cdFx0XHRcdC8vIFN1cHBsZW1lbnRhbCBQbGFuZSBjb2RlcG9pbnQgKHN1cnJvZ2F0ZSBwYWlyKVxuXHRcdFx0XHRTdHJpbmcuZnJvbUNoYXJDb2RlKCBoaWdoID4+IDEwIHwgMHhEODAwLCBoaWdoICYgMHgzRkYgfCAweERDMDAgKTtcblx0fSxcblxuXHQvLyBDU1Mgc3RyaW5nL2lkZW50aWZpZXIgc2VyaWFsaXphdGlvblxuXHQvLyBodHRwczovL2RyYWZ0cy5jc3N3Zy5vcmcvY3Nzb20vI2NvbW1vbi1zZXJpYWxpemluZy1pZGlvbXNcblx0cmNzc2VzY2FwZSA9IC8oW1xcMC1cXHgxZlxceDdmXXxeLT9cXGQpfF4tJHxbXlxcMC1cXHgxZlxceDdmLVxcdUZGRkZcXHctXS9nLFxuXHRmY3NzZXNjYXBlID0gZnVuY3Rpb24oIGNoLCBhc0NvZGVQb2ludCApIHtcblx0XHRpZiAoIGFzQ29kZVBvaW50ICkge1xuXG5cdFx0XHQvLyBVKzAwMDAgTlVMTCBiZWNvbWVzIFUrRkZGRCBSRVBMQUNFTUVOVCBDSEFSQUNURVJcblx0XHRcdGlmICggY2ggPT09IFwiXFwwXCIgKSB7XG5cdFx0XHRcdHJldHVybiBcIlxcdUZGRkRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29udHJvbCBjaGFyYWN0ZXJzIGFuZCAoZGVwZW5kZW50IHVwb24gcG9zaXRpb24pIG51bWJlcnMgZ2V0IGVzY2FwZWQgYXMgY29kZSBwb2ludHNcblx0XHRcdHJldHVybiBjaC5zbGljZSggMCwgLTEgKSArIFwiXFxcXFwiICsgY2guY2hhckNvZGVBdCggY2gubGVuZ3RoIC0gMSApLnRvU3RyaW5nKCAxNiApICsgXCIgXCI7XG5cdFx0fVxuXG5cdFx0Ly8gT3RoZXIgcG90ZW50aWFsbHktc3BlY2lhbCBBU0NJSSBjaGFyYWN0ZXJzIGdldCBiYWNrc2xhc2gtZXNjYXBlZFxuXHRcdHJldHVybiBcIlxcXFxcIiArIGNoO1xuXHR9LFxuXG5cdC8vIFVzZWQgZm9yIGlmcmFtZXNcblx0Ly8gU2VlIHNldERvY3VtZW50KClcblx0Ly8gUmVtb3ZpbmcgdGhlIGZ1bmN0aW9uIHdyYXBwZXIgY2F1c2VzIGEgXCJQZXJtaXNzaW9uIERlbmllZFwiXG5cdC8vIGVycm9yIGluIElFXG5cdHVubG9hZEhhbmRsZXIgPSBmdW5jdGlvbigpIHtcblx0XHRzZXREb2N1bWVudCgpO1xuXHR9LFxuXG5cdGRpc2FibGVkQW5jZXN0b3IgPSBhZGRDb21iaW5hdG9yKFxuXHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IHRydWUgJiYgKFwiZm9ybVwiIGluIGVsZW0gfHwgXCJsYWJlbFwiIGluIGVsZW0pO1xuXHRcdH0sXG5cdFx0eyBkaXI6IFwicGFyZW50Tm9kZVwiLCBuZXh0OiBcImxlZ2VuZFwiIH1cblx0KTtcblxuLy8gT3B0aW1pemUgZm9yIHB1c2guYXBwbHkoIF8sIE5vZGVMaXN0IClcbnRyeSB7XG5cdHB1c2guYXBwbHkoXG5cdFx0KGFyciA9IHNsaWNlLmNhbGwoIHByZWZlcnJlZERvYy5jaGlsZE5vZGVzICkpLFxuXHRcdHByZWZlcnJlZERvYy5jaGlsZE5vZGVzXG5cdCk7XG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQ8NC4wXG5cdC8vIERldGVjdCBzaWxlbnRseSBmYWlsaW5nIHB1c2guYXBwbHlcblx0YXJyWyBwcmVmZXJyZWREb2MuY2hpbGROb2Rlcy5sZW5ndGggXS5ub2RlVHlwZTtcbn0gY2F0Y2ggKCBlICkge1xuXHRwdXNoID0geyBhcHBseTogYXJyLmxlbmd0aCA/XG5cblx0XHQvLyBMZXZlcmFnZSBzbGljZSBpZiBwb3NzaWJsZVxuXHRcdGZ1bmN0aW9uKCB0YXJnZXQsIGVscyApIHtcblx0XHRcdHB1c2hfbmF0aXZlLmFwcGx5KCB0YXJnZXQsIHNsaWNlLmNhbGwoZWxzKSApO1xuXHRcdH0gOlxuXG5cdFx0Ly8gU3VwcG9ydDogSUU8OVxuXHRcdC8vIE90aGVyd2lzZSBhcHBlbmQgZGlyZWN0bHlcblx0XHRmdW5jdGlvbiggdGFyZ2V0LCBlbHMgKSB7XG5cdFx0XHR2YXIgaiA9IHRhcmdldC5sZW5ndGgsXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0Ly8gQ2FuJ3QgdHJ1c3QgTm9kZUxpc3QubGVuZ3RoXG5cdFx0XHR3aGlsZSAoICh0YXJnZXRbaisrXSA9IGVsc1tpKytdKSApIHt9XG5cdFx0XHR0YXJnZXQubGVuZ3RoID0gaiAtIDE7XG5cdFx0fVxuXHR9O1xufVxuXG5mdW5jdGlvbiBTaXp6bGUoIHNlbGVjdG9yLCBjb250ZXh0LCByZXN1bHRzLCBzZWVkICkge1xuXHR2YXIgbSwgaSwgZWxlbSwgbmlkLCBtYXRjaCwgZ3JvdXBzLCBuZXdTZWxlY3Rvcixcblx0XHRuZXdDb250ZXh0ID0gY29udGV4dCAmJiBjb250ZXh0Lm93bmVyRG9jdW1lbnQsXG5cblx0XHQvLyBub2RlVHlwZSBkZWZhdWx0cyB0byA5LCBzaW5jZSBjb250ZXh0IGRlZmF1bHRzIHRvIGRvY3VtZW50XG5cdFx0bm9kZVR5cGUgPSBjb250ZXh0ID8gY29udGV4dC5ub2RlVHlwZSA6IDk7XG5cblx0cmVzdWx0cyA9IHJlc3VsdHMgfHwgW107XG5cblx0Ly8gUmV0dXJuIGVhcmx5IGZyb20gY2FsbHMgd2l0aCBpbnZhbGlkIHNlbGVjdG9yIG9yIGNvbnRleHRcblx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgfHwgIXNlbGVjdG9yIHx8XG5cdFx0bm9kZVR5cGUgIT09IDEgJiYgbm9kZVR5cGUgIT09IDkgJiYgbm9kZVR5cGUgIT09IDExICkge1xuXG5cdFx0cmV0dXJuIHJlc3VsdHM7XG5cdH1cblxuXHQvLyBUcnkgdG8gc2hvcnRjdXQgZmluZCBvcGVyYXRpb25zIChhcyBvcHBvc2VkIHRvIGZpbHRlcnMpIGluIEhUTUwgZG9jdW1lbnRzXG5cdGlmICggIXNlZWQgKSB7XG5cblx0XHRpZiAoICggY29udGV4dCA/IGNvbnRleHQub3duZXJEb2N1bWVudCB8fCBjb250ZXh0IDogcHJlZmVycmVkRG9jICkgIT09IGRvY3VtZW50ICkge1xuXHRcdFx0c2V0RG9jdW1lbnQoIGNvbnRleHQgKTtcblx0XHR9XG5cdFx0Y29udGV4dCA9IGNvbnRleHQgfHwgZG9jdW1lbnQ7XG5cblx0XHRpZiAoIGRvY3VtZW50SXNIVE1MICkge1xuXG5cdFx0XHQvLyBJZiB0aGUgc2VsZWN0b3IgaXMgc3VmZmljaWVudGx5IHNpbXBsZSwgdHJ5IHVzaW5nIGEgXCJnZXQqQnkqXCIgRE9NIG1ldGhvZFxuXHRcdFx0Ly8gKGV4Y2VwdGluZyBEb2N1bWVudEZyYWdtZW50IGNvbnRleHQsIHdoZXJlIHRoZSBtZXRob2RzIGRvbid0IGV4aXN0KVxuXHRcdFx0aWYgKCBub2RlVHlwZSAhPT0gMTEgJiYgKG1hdGNoID0gcnF1aWNrRXhwci5leGVjKCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHQvLyBJRCBzZWxlY3RvclxuXHRcdFx0XHRpZiAoIChtID0gbWF0Y2hbMV0pICkge1xuXG5cdFx0XHRcdFx0Ly8gRG9jdW1lbnQgY29udGV4dFxuXHRcdFx0XHRcdGlmICggbm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIChlbGVtID0gY29udGV4dC5nZXRFbGVtZW50QnlJZCggbSApKSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0XHQvLyBUT0RPOiBpZGVudGlmeSB2ZXJzaW9uc1xuXHRcdFx0XHRcdFx0XHQvLyBnZXRFbGVtZW50QnlJZCBjYW4gbWF0Y2ggZWxlbWVudHMgYnkgbmFtZSBpbnN0ZWFkIG9mIElEXG5cdFx0XHRcdFx0XHRcdGlmICggZWxlbS5pZCA9PT0gbSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBFbGVtZW50IGNvbnRleHRcblx0XHRcdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSwgT3BlcmEsIFdlYmtpdFxuXHRcdFx0XHRcdFx0Ly8gVE9ETzogaWRlbnRpZnkgdmVyc2lvbnNcblx0XHRcdFx0XHRcdC8vIGdldEVsZW1lbnRCeUlkIGNhbiBtYXRjaCBlbGVtZW50cyBieSBuYW1lIGluc3RlYWQgb2YgSURcblx0XHRcdFx0XHRcdGlmICggbmV3Q29udGV4dCAmJiAoZWxlbSA9IG5ld0NvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIG0gKSkgJiZcblx0XHRcdFx0XHRcdFx0Y29udGFpbnMoIGNvbnRleHQsIGVsZW0gKSAmJlxuXHRcdFx0XHRcdFx0XHRlbGVtLmlkID09PSBtICkge1xuXG5cdFx0XHRcdFx0XHRcdHJlc3VsdHMucHVzaCggZWxlbSApO1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHlwZSBzZWxlY3RvclxuXHRcdFx0XHR9IGVsc2UgaWYgKCBtYXRjaFsyXSApIHtcblx0XHRcdFx0XHRwdXNoLmFwcGx5KCByZXN1bHRzLCBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCBzZWxlY3RvciApICk7XG5cdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cblx0XHRcdFx0Ly8gQ2xhc3Mgc2VsZWN0b3Jcblx0XHRcdFx0fSBlbHNlIGlmICggKG0gPSBtYXRjaFszXSkgJiYgc3VwcG9ydC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICYmXG5cdFx0XHRcdFx0Y29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lICkge1xuXG5cdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgY29udGV4dC5nZXRFbGVtZW50c0J5Q2xhc3NOYW1lKCBtICkgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmVzdWx0cztcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBUYWtlIGFkdmFudGFnZSBvZiBxdWVyeVNlbGVjdG9yQWxsXG5cdFx0XHRpZiAoIHN1cHBvcnQucXNhICYmXG5cdFx0XHRcdCFjb21waWxlckNhY2hlWyBzZWxlY3RvciArIFwiIFwiIF0gJiZcblx0XHRcdFx0KCFyYnVnZ3lRU0EgfHwgIXJidWdneVFTQS50ZXN0KCBzZWxlY3RvciApKSApIHtcblxuXHRcdFx0XHRpZiAoIG5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSBjb250ZXh0O1xuXHRcdFx0XHRcdG5ld1NlbGVjdG9yID0gc2VsZWN0b3I7XG5cblx0XHRcdFx0Ly8gcVNBIGxvb2tzIG91dHNpZGUgRWxlbWVudCBjb250ZXh0LCB3aGljaCBpcyBub3Qgd2hhdCB3ZSB3YW50XG5cdFx0XHRcdC8vIFRoYW5rcyB0byBBbmRyZXcgRHVwb250IGZvciB0aGlzIHdvcmthcm91bmQgdGVjaG5pcXVlXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OFxuXHRcdFx0XHQvLyBFeGNsdWRlIG9iamVjdCBlbGVtZW50c1xuXHRcdFx0XHR9IGVsc2UgaWYgKCBjb250ZXh0Lm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgIT09IFwib2JqZWN0XCIgKSB7XG5cblx0XHRcdFx0XHQvLyBDYXB0dXJlIHRoZSBjb250ZXh0IElELCBzZXR0aW5nIGl0IGZpcnN0IGlmIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdGlmICggKG5pZCA9IGNvbnRleHQuZ2V0QXR0cmlidXRlKCBcImlkXCIgKSkgKSB7XG5cdFx0XHRcdFx0XHRuaWQgPSBuaWQucmVwbGFjZSggcmNzc2VzY2FwZSwgZmNzc2VzY2FwZSApO1xuXHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRjb250ZXh0LnNldEF0dHJpYnV0ZSggXCJpZFwiLCAobmlkID0gZXhwYW5kbykgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBQcmVmaXggZXZlcnkgc2VsZWN0b3IgaW4gdGhlIGxpc3Rcblx0XHRcdFx0XHRncm91cHMgPSB0b2tlbml6ZSggc2VsZWN0b3IgKTtcblx0XHRcdFx0XHRpID0gZ3JvdXBzLmxlbmd0aDtcblx0XHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRcdGdyb3Vwc1tpXSA9IFwiI1wiICsgbmlkICsgXCIgXCIgKyB0b1NlbGVjdG9yKCBncm91cHNbaV0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0bmV3U2VsZWN0b3IgPSBncm91cHMuam9pbiggXCIsXCIgKTtcblxuXHRcdFx0XHRcdC8vIEV4cGFuZCBjb250ZXh0IGZvciBzaWJsaW5nIHNlbGVjdG9yc1xuXHRcdFx0XHRcdG5ld0NvbnRleHQgPSByc2libGluZy50ZXN0KCBzZWxlY3RvciApICYmIHRlc3RDb250ZXh0KCBjb250ZXh0LnBhcmVudE5vZGUgKSB8fFxuXHRcdFx0XHRcdFx0Y29udGV4dDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmICggbmV3U2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRcdHB1c2guYXBwbHkoIHJlc3VsdHMsXG5cdFx0XHRcdFx0XHRcdG5ld0NvbnRleHQucXVlcnlTZWxlY3RvckFsbCggbmV3U2VsZWN0b3IgKVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXHRcdFx0XHRcdH0gY2F0Y2ggKCBxc2FFcnJvciApIHtcblx0XHRcdFx0XHR9IGZpbmFsbHkge1xuXHRcdFx0XHRcdFx0aWYgKCBuaWQgPT09IGV4cGFuZG8gKSB7XG5cdFx0XHRcdFx0XHRcdGNvbnRleHQucmVtb3ZlQXR0cmlidXRlKCBcImlkXCIgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBbGwgb3RoZXJzXG5cdHJldHVybiBzZWxlY3QoIHNlbGVjdG9yLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApO1xufVxuXG4vKipcbiAqIENyZWF0ZSBrZXktdmFsdWUgY2FjaGVzIG9mIGxpbWl0ZWQgc2l6ZVxuICogQHJldHVybnMge2Z1bmN0aW9uKHN0cmluZywgb2JqZWN0KX0gUmV0dXJucyB0aGUgT2JqZWN0IGRhdGEgYWZ0ZXIgc3RvcmluZyBpdCBvbiBpdHNlbGYgd2l0aFxuICpcdHByb3BlcnR5IG5hbWUgdGhlIChzcGFjZS1zdWZmaXhlZCkgc3RyaW5nIGFuZCAoaWYgdGhlIGNhY2hlIGlzIGxhcmdlciB0aGFuIEV4cHIuY2FjaGVMZW5ndGgpXG4gKlx0ZGVsZXRpbmcgdGhlIG9sZGVzdCBlbnRyeVxuICovXG5mdW5jdGlvbiBjcmVhdGVDYWNoZSgpIHtcblx0dmFyIGtleXMgPSBbXTtcblxuXHRmdW5jdGlvbiBjYWNoZSgga2V5LCB2YWx1ZSApIHtcblx0XHQvLyBVc2UgKGtleSArIFwiIFwiKSB0byBhdm9pZCBjb2xsaXNpb24gd2l0aCBuYXRpdmUgcHJvdG90eXBlIHByb3BlcnRpZXMgKHNlZSBJc3N1ZSAjMTU3KVxuXHRcdGlmICgga2V5cy5wdXNoKCBrZXkgKyBcIiBcIiApID4gRXhwci5jYWNoZUxlbmd0aCApIHtcblx0XHRcdC8vIE9ubHkga2VlcCB0aGUgbW9zdCByZWNlbnQgZW50cmllc1xuXHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlzLnNoaWZ0KCkgXTtcblx0XHR9XG5cdFx0cmV0dXJuIChjYWNoZVsga2V5ICsgXCIgXCIgXSA9IHZhbHVlKTtcblx0fVxuXHRyZXR1cm4gY2FjaGU7XG59XG5cbi8qKlxuICogTWFyayBhIGZ1bmN0aW9uIGZvciBzcGVjaWFsIHVzZSBieSBTaXp6bGVcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFRoZSBmdW5jdGlvbiB0byBtYXJrXG4gKi9cbmZ1bmN0aW9uIG1hcmtGdW5jdGlvbiggZm4gKSB7XG5cdGZuWyBleHBhbmRvIF0gPSB0cnVlO1xuXHRyZXR1cm4gZm47XG59XG5cbi8qKlxuICogU3VwcG9ydCB0ZXN0aW5nIHVzaW5nIGFuIGVsZW1lbnRcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuIFBhc3NlZCB0aGUgY3JlYXRlZCBlbGVtZW50IGFuZCByZXR1cm5zIGEgYm9vbGVhbiByZXN1bHRcbiAqL1xuZnVuY3Rpb24gYXNzZXJ0KCBmbiApIHtcblx0dmFyIGVsID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudChcImZpZWxkc2V0XCIpO1xuXG5cdHRyeSB7XG5cdFx0cmV0dXJuICEhZm4oIGVsICk7XG5cdH0gY2F0Y2ggKGUpIHtcblx0XHRyZXR1cm4gZmFsc2U7XG5cdH0gZmluYWxseSB7XG5cdFx0Ly8gUmVtb3ZlIGZyb20gaXRzIHBhcmVudCBieSBkZWZhdWx0XG5cdFx0aWYgKCBlbC5wYXJlbnROb2RlICkge1xuXHRcdFx0ZWwucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggZWwgKTtcblx0XHR9XG5cdFx0Ly8gcmVsZWFzZSBtZW1vcnkgaW4gSUVcblx0XHRlbCA9IG51bGw7XG5cdH1cbn1cblxuLyoqXG4gKiBBZGRzIHRoZSBzYW1lIGhhbmRsZXIgZm9yIGFsbCBvZiB0aGUgc3BlY2lmaWVkIGF0dHJzXG4gKiBAcGFyYW0ge1N0cmluZ30gYXR0cnMgUGlwZS1zZXBhcmF0ZWQgbGlzdCBvZiBhdHRyaWJ1dGVzXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBoYW5kbGVyIFRoZSBtZXRob2QgdGhhdCB3aWxsIGJlIGFwcGxpZWRcbiAqL1xuZnVuY3Rpb24gYWRkSGFuZGxlKCBhdHRycywgaGFuZGxlciApIHtcblx0dmFyIGFyciA9IGF0dHJzLnNwbGl0KFwifFwiKSxcblx0XHRpID0gYXJyLmxlbmd0aDtcblxuXHR3aGlsZSAoIGktLSApIHtcblx0XHRFeHByLmF0dHJIYW5kbGVbIGFycltpXSBdID0gaGFuZGxlcjtcblx0fVxufVxuXG4vKipcbiAqIENoZWNrcyBkb2N1bWVudCBvcmRlciBvZiB0d28gc2libGluZ3NcbiAqIEBwYXJhbSB7RWxlbWVudH0gYVxuICogQHBhcmFtIHtFbGVtZW50fSBiXG4gKiBAcmV0dXJucyB7TnVtYmVyfSBSZXR1cm5zIGxlc3MgdGhhbiAwIGlmIGEgcHJlY2VkZXMgYiwgZ3JlYXRlciB0aGFuIDAgaWYgYSBmb2xsb3dzIGJcbiAqL1xuZnVuY3Rpb24gc2libGluZ0NoZWNrKCBhLCBiICkge1xuXHR2YXIgY3VyID0gYiAmJiBhLFxuXHRcdGRpZmYgPSBjdXIgJiYgYS5ub2RlVHlwZSA9PT0gMSAmJiBiLm5vZGVUeXBlID09PSAxICYmXG5cdFx0XHRhLnNvdXJjZUluZGV4IC0gYi5zb3VyY2VJbmRleDtcblxuXHQvLyBVc2UgSUUgc291cmNlSW5kZXggaWYgYXZhaWxhYmxlIG9uIGJvdGggbm9kZXNcblx0aWYgKCBkaWZmICkge1xuXHRcdHJldHVybiBkaWZmO1xuXHR9XG5cblx0Ly8gQ2hlY2sgaWYgYiBmb2xsb3dzIGFcblx0aWYgKCBjdXIgKSB7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLm5leHRTaWJsaW5nKSApIHtcblx0XHRcdGlmICggY3VyID09PSBiICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGEgPyAxIDogLTE7XG59XG5cbi8qKlxuICogUmV0dXJucyBhIGZ1bmN0aW9uIHRvIHVzZSBpbiBwc2V1ZG9zIGZvciBpbnB1dCB0eXBlc1xuICogQHBhcmFtIHtTdHJpbmd9IHR5cGVcbiAqL1xuZnVuY3Rpb24gY3JlYXRlSW5wdXRQc2V1ZG8oIHR5cGUgKSB7XG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHR2YXIgbmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIGJ1dHRvbnNcbiAqIEBwYXJhbSB7U3RyaW5nfSB0eXBlXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZUJ1dHRvblBzZXVkbyggdHlwZSApIHtcblx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHZhciBuYW1lID0gZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpO1xuXHRcdHJldHVybiAobmFtZSA9PT0gXCJpbnB1dFwiIHx8IG5hbWUgPT09IFwiYnV0dG9uXCIpICYmIGVsZW0udHlwZSA9PT0gdHlwZTtcblx0fTtcbn1cblxuLyoqXG4gKiBSZXR1cm5zIGEgZnVuY3Rpb24gdG8gdXNlIGluIHBzZXVkb3MgZm9yIDplbmFibGVkLzpkaXNhYmxlZFxuICogQHBhcmFtIHtCb29sZWFufSBkaXNhYmxlZCB0cnVlIGZvciA6ZGlzYWJsZWQ7IGZhbHNlIGZvciA6ZW5hYmxlZFxuICovXG5mdW5jdGlvbiBjcmVhdGVEaXNhYmxlZFBzZXVkbyggZGlzYWJsZWQgKSB7XG5cblx0Ly8gS25vd24gOmRpc2FibGVkIGZhbHNlIHBvc2l0aXZlczogZmllbGRzZXRbZGlzYWJsZWRdID4gbGVnZW5kOm50aC1vZi10eXBlKG4rMikgOmNhbi1kaXNhYmxlXG5cdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE9ubHkgY2VydGFpbiBlbGVtZW50cyBjYW4gbWF0Y2ggOmVuYWJsZWQgb3IgOmRpc2FibGVkXG5cdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc2NyaXB0aW5nLmh0bWwjc2VsZWN0b3ItZW5hYmxlZFxuXHRcdC8vIGh0dHBzOi8vaHRtbC5zcGVjLndoYXR3Zy5vcmcvbXVsdGlwYWdlL3NjcmlwdGluZy5odG1sI3NlbGVjdG9yLWRpc2FibGVkXG5cdFx0aWYgKCBcImZvcm1cIiBpbiBlbGVtICkge1xuXG5cdFx0XHQvLyBDaGVjayBmb3IgaW5oZXJpdGVkIGRpc2FibGVkbmVzcyBvbiByZWxldmFudCBub24tZGlzYWJsZWQgZWxlbWVudHM6XG5cdFx0XHQvLyAqIGxpc3RlZCBmb3JtLWFzc29jaWF0ZWQgZWxlbWVudHMgaW4gYSBkaXNhYmxlZCBmaWVsZHNldFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NhdGVnb3J5LWxpc3RlZFxuXHRcdFx0Ly8gICBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnL211bHRpcGFnZS9mb3Jtcy5odG1sI2NvbmNlcHQtZmUtZGlzYWJsZWRcblx0XHRcdC8vICogb3B0aW9uIGVsZW1lbnRzIGluIGEgZGlzYWJsZWQgb3B0Z3JvdXBcblx0XHRcdC8vICAgaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2UvZm9ybXMuaHRtbCNjb25jZXB0LW9wdGlvbi1kaXNhYmxlZFxuXHRcdFx0Ly8gQWxsIHN1Y2ggZWxlbWVudHMgaGF2ZSBhIFwiZm9ybVwiIHByb3BlcnR5LlxuXHRcdFx0aWYgKCBlbGVtLnBhcmVudE5vZGUgJiYgZWxlbS5kaXNhYmxlZCA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0Ly8gT3B0aW9uIGVsZW1lbnRzIGRlZmVyIHRvIGEgcGFyZW50IG9wdGdyb3VwIGlmIHByZXNlbnRcblx0XHRcdFx0aWYgKCBcImxhYmVsXCIgaW4gZWxlbSApIHtcblx0XHRcdFx0XHRpZiAoIFwibGFiZWxcIiBpbiBlbGVtLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5wYXJlbnROb2RlLmRpc2FibGVkID09PSBkaXNhYmxlZDtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDYgLSAxMVxuXHRcdFx0XHQvLyBVc2UgdGhlIGlzRGlzYWJsZWQgc2hvcnRjdXQgcHJvcGVydHkgdG8gY2hlY2sgZm9yIGRpc2FibGVkIGZpZWxkc2V0IGFuY2VzdG9yc1xuXHRcdFx0XHRyZXR1cm4gZWxlbS5pc0Rpc2FibGVkID09PSBkaXNhYmxlZCB8fFxuXG5cdFx0XHRcdFx0Ly8gV2hlcmUgdGhlcmUgaXMgbm8gaXNEaXNhYmxlZCwgY2hlY2sgbWFudWFsbHlcblx0XHRcdFx0XHQvKiBqc2hpbnQgLVcwMTggKi9cblx0XHRcdFx0XHRlbGVtLmlzRGlzYWJsZWQgIT09ICFkaXNhYmxlZCAmJlxuXHRcdFx0XHRcdFx0ZGlzYWJsZWRBbmNlc3RvciggZWxlbSApID09PSBkaXNhYmxlZDtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXG5cdFx0Ly8gVHJ5IHRvIHdpbm5vdyBvdXQgZWxlbWVudHMgdGhhdCBjYW4ndCBiZSBkaXNhYmxlZCBiZWZvcmUgdHJ1c3RpbmcgdGhlIGRpc2FibGVkIHByb3BlcnR5LlxuXHRcdC8vIFNvbWUgdmljdGltcyBnZXQgY2F1Z2h0IGluIG91ciBuZXQgKGxhYmVsLCBsZWdlbmQsIG1lbnUsIHRyYWNrKSwgYnV0IGl0IHNob3VsZG4ndFxuXHRcdC8vIGV2ZW4gZXhpc3Qgb24gdGhlbSwgbGV0IGFsb25lIGhhdmUgYSBib29sZWFuIHZhbHVlLlxuXHRcdH0gZWxzZSBpZiAoIFwibGFiZWxcIiBpbiBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZGlzYWJsZWQgPT09IGRpc2FibGVkO1xuXHRcdH1cblxuXHRcdC8vIFJlbWFpbmluZyBlbGVtZW50cyBhcmUgbmVpdGhlciA6ZW5hYmxlZCBub3IgOmRpc2FibGVkXG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9O1xufVxuXG4vKipcbiAqIFJldHVybnMgYSBmdW5jdGlvbiB0byB1c2UgaW4gcHNldWRvcyBmb3IgcG9zaXRpb25hbHNcbiAqIEBwYXJhbSB7RnVuY3Rpb259IGZuXG4gKi9cbmZ1bmN0aW9uIGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oIGZuICkge1xuXHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBhcmd1bWVudCApIHtcblx0XHRhcmd1bWVudCA9ICthcmd1bWVudDtcblx0XHRyZXR1cm4gbWFya0Z1bmN0aW9uKGZ1bmN0aW9uKCBzZWVkLCBtYXRjaGVzICkge1xuXHRcdFx0dmFyIGosXG5cdFx0XHRcdG1hdGNoSW5kZXhlcyA9IGZuKCBbXSwgc2VlZC5sZW5ndGgsIGFyZ3VtZW50ICksXG5cdFx0XHRcdGkgPSBtYXRjaEluZGV4ZXMubGVuZ3RoO1xuXG5cdFx0XHQvLyBNYXRjaCBlbGVtZW50cyBmb3VuZCBhdCB0aGUgc3BlY2lmaWVkIGluZGV4ZXNcblx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRpZiAoIHNlZWRbIChqID0gbWF0Y2hJbmRleGVzW2ldKSBdICkge1xuXHRcdFx0XHRcdHNlZWRbal0gPSAhKG1hdGNoZXNbal0gPSBzZWVkW2pdKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0pO1xuXHR9KTtcbn1cblxuLyoqXG4gKiBDaGVja3MgYSBub2RlIGZvciB2YWxpZGl0eSBhcyBhIFNpenpsZSBjb250ZXh0XG4gKiBAcGFyYW0ge0VsZW1lbnR8T2JqZWN0PX0gY29udGV4dFxuICogQHJldHVybnMge0VsZW1lbnR8T2JqZWN0fEJvb2xlYW59IFRoZSBpbnB1dCBub2RlIGlmIGFjY2VwdGFibGUsIG90aGVyd2lzZSBhIGZhbHN5IHZhbHVlXG4gKi9cbmZ1bmN0aW9uIHRlc3RDb250ZXh0KCBjb250ZXh0ICkge1xuXHRyZXR1cm4gY29udGV4dCAmJiB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBjb250ZXh0O1xufVxuXG4vLyBFeHBvc2Ugc3VwcG9ydCB2YXJzIGZvciBjb252ZW5pZW5jZVxuc3VwcG9ydCA9IFNpenpsZS5zdXBwb3J0ID0ge307XG5cbi8qKlxuICogRGV0ZWN0cyBYTUwgbm9kZXNcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IGVsZW0gQW4gZWxlbWVudCBvciBhIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7Qm9vbGVhbn0gVHJ1ZSBpZmYgZWxlbSBpcyBhIG5vbi1IVE1MIFhNTCBub2RlXG4gKi9cbmlzWE1MID0gU2l6emxlLmlzWE1MID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdC8vIGRvY3VtZW50RWxlbWVudCBpcyB2ZXJpZmllZCBmb3IgY2FzZXMgd2hlcmUgaXQgZG9lc24ndCB5ZXQgZXhpc3Rcblx0Ly8gKHN1Y2ggYXMgbG9hZGluZyBpZnJhbWVzIGluIElFIC0gIzQ4MzMpXG5cdHZhciBkb2N1bWVudEVsZW1lbnQgPSBlbGVtICYmIChlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSkuZG9jdW1lbnRFbGVtZW50O1xuXHRyZXR1cm4gZG9jdW1lbnRFbGVtZW50ID8gZG9jdW1lbnRFbGVtZW50Lm5vZGVOYW1lICE9PSBcIkhUTUxcIiA6IGZhbHNlO1xufTtcblxuLyoqXG4gKiBTZXRzIGRvY3VtZW50LXJlbGF0ZWQgdmFyaWFibGVzIG9uY2UgYmFzZWQgb24gdGhlIGN1cnJlbnQgZG9jdW1lbnRcbiAqIEBwYXJhbSB7RWxlbWVudHxPYmplY3R9IFtkb2NdIEFuIGVsZW1lbnQgb3IgZG9jdW1lbnQgb2JqZWN0IHRvIHVzZSB0byBzZXQgdGhlIGRvY3VtZW50XG4gKiBAcmV0dXJucyB7T2JqZWN0fSBSZXR1cm5zIHRoZSBjdXJyZW50IGRvY3VtZW50XG4gKi9cbnNldERvY3VtZW50ID0gU2l6emxlLnNldERvY3VtZW50ID0gZnVuY3Rpb24oIG5vZGUgKSB7XG5cdHZhciBoYXNDb21wYXJlLCBzdWJXaW5kb3csXG5cdFx0ZG9jID0gbm9kZSA/IG5vZGUub3duZXJEb2N1bWVudCB8fCBub2RlIDogcHJlZmVycmVkRG9jO1xuXG5cdC8vIFJldHVybiBlYXJseSBpZiBkb2MgaXMgaW52YWxpZCBvciBhbHJlYWR5IHNlbGVjdGVkXG5cdGlmICggZG9jID09PSBkb2N1bWVudCB8fCBkb2Mubm9kZVR5cGUgIT09IDkgfHwgIWRvYy5kb2N1bWVudEVsZW1lbnQgKSB7XG5cdFx0cmV0dXJuIGRvY3VtZW50O1xuXHR9XG5cblx0Ly8gVXBkYXRlIGdsb2JhbCB2YXJpYWJsZXNcblx0ZG9jdW1lbnQgPSBkb2M7XG5cdGRvY0VsZW0gPSBkb2N1bWVudC5kb2N1bWVudEVsZW1lbnQ7XG5cdGRvY3VtZW50SXNIVE1MID0gIWlzWE1MKCBkb2N1bWVudCApO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDktMTEsIEVkZ2Vcblx0Ly8gQWNjZXNzaW5nIGlmcmFtZSBkb2N1bWVudHMgYWZ0ZXIgdW5sb2FkIHRocm93cyBcInBlcm1pc3Npb24gZGVuaWVkXCIgZXJyb3JzIChqUXVlcnkgIzEzOTM2KVxuXHRpZiAoIHByZWZlcnJlZERvYyAhPT0gZG9jdW1lbnQgJiZcblx0XHQoc3ViV2luZG93ID0gZG9jdW1lbnQuZGVmYXVsdFZpZXcpICYmIHN1YldpbmRvdy50b3AgIT09IHN1YldpbmRvdyApIHtcblxuXHRcdC8vIFN1cHBvcnQ6IElFIDExLCBFZGdlXG5cdFx0aWYgKCBzdWJXaW5kb3cuYWRkRXZlbnRMaXN0ZW5lciApIHtcblx0XHRcdHN1YldpbmRvdy5hZGRFdmVudExpc3RlbmVyKCBcInVubG9hZFwiLCB1bmxvYWRIYW5kbGVyLCBmYWxzZSApO1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDEwIG9ubHlcblx0XHR9IGVsc2UgaWYgKCBzdWJXaW5kb3cuYXR0YWNoRXZlbnQgKSB7XG5cdFx0XHRzdWJXaW5kb3cuYXR0YWNoRXZlbnQoIFwib251bmxvYWRcIiwgdW5sb2FkSGFuZGxlciApO1xuXHRcdH1cblx0fVxuXG5cdC8qIEF0dHJpYnV0ZXNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXG5cdC8vIFN1cHBvcnQ6IElFPDhcblx0Ly8gVmVyaWZ5IHRoYXQgZ2V0QXR0cmlidXRlIHJlYWxseSByZXR1cm5zIGF0dHJpYnV0ZXMgYW5kIG5vdCBwcm9wZXJ0aWVzXG5cdC8vIChleGNlcHRpbmcgSUU4IGJvb2xlYW5zKVxuXHRzdXBwb3J0LmF0dHJpYnV0ZXMgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmNsYXNzTmFtZSA9IFwiaVwiO1xuXHRcdHJldHVybiAhZWwuZ2V0QXR0cmlidXRlKFwiY2xhc3NOYW1lXCIpO1xuXHR9KTtcblxuXHQvKiBnZXRFbGVtZW50KHMpQnkqXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBDaGVjayBpZiBnZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikgcmV0dXJucyBvbmx5IGVsZW1lbnRzXG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgPSBhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdGVsLmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVDb21tZW50KFwiXCIpICk7XG5cdFx0cmV0dXJuICFlbC5nZXRFbGVtZW50c0J5VGFnTmFtZShcIipcIikubGVuZ3RoO1xuXHR9KTtcblxuXHQvLyBTdXBwb3J0OiBJRTw5XG5cdHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSA9IHJuYXRpdmUudGVzdCggZG9jdW1lbnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSApO1xuXG5cdC8vIFN1cHBvcnQ6IElFPDEwXG5cdC8vIENoZWNrIGlmIGdldEVsZW1lbnRCeUlkIHJldHVybnMgZWxlbWVudHMgYnkgbmFtZVxuXHQvLyBUaGUgYnJva2VuIGdldEVsZW1lbnRCeUlkIG1ldGhvZHMgZG9uJ3QgcGljayB1cCBwcm9ncmFtbWF0aWNhbGx5LXNldCBuYW1lcyxcblx0Ly8gc28gdXNlIGEgcm91bmRhYm91dCBnZXRFbGVtZW50c0J5TmFtZSB0ZXN0XG5cdHN1cHBvcnQuZ2V0QnlJZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pZCA9IGV4cGFuZG87XG5cdFx0cmV0dXJuICFkb2N1bWVudC5nZXRFbGVtZW50c0J5TmFtZSB8fCAhZG9jdW1lbnQuZ2V0RWxlbWVudHNCeU5hbWUoIGV4cGFuZG8gKS5sZW5ndGg7XG5cdH0pO1xuXG5cdC8vIElEIGZpbHRlciBhbmQgZmluZFxuXHRpZiAoIHN1cHBvcnQuZ2V0QnlJZCApIHtcblx0XHRFeHByLmZpbHRlcltcIklEXCJdID0gZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZShcImlkXCIpID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cdFx0RXhwci5maW5kW1wiSURcIl0gPSBmdW5jdGlvbiggaWQsIGNvbnRleHQgKSB7XG5cdFx0XHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRCeUlkICE9PSBcInVuZGVmaW5lZFwiICYmIGRvY3VtZW50SXNIVE1MICkge1xuXHRcdFx0XHR2YXIgZWxlbSA9IGNvbnRleHQuZ2V0RWxlbWVudEJ5SWQoIGlkICk7XG5cdFx0XHRcdHJldHVybiBlbGVtID8gWyBlbGVtIF0gOiBbXTtcblx0XHRcdH1cblx0XHR9O1xuXHR9IGVsc2Uge1xuXHRcdEV4cHIuZmlsdGVyW1wiSURcIl0gPSAgZnVuY3Rpb24oIGlkICkge1xuXHRcdFx0dmFyIGF0dHJJZCA9IGlkLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHZhciBub2RlID0gdHlwZW9mIGVsZW0uZ2V0QXR0cmlidXRlTm9kZSAhPT0gXCJ1bmRlZmluZWRcIiAmJlxuXHRcdFx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRyZXR1cm4gbm9kZSAmJiBub2RlLnZhbHVlID09PSBhdHRySWQ7XG5cdFx0XHR9O1xuXHRcdH07XG5cblx0XHQvLyBTdXBwb3J0OiBJRSA2IC0gNyBvbmx5XG5cdFx0Ly8gZ2V0RWxlbWVudEJ5SWQgaXMgbm90IHJlbGlhYmxlIGFzIGEgZmluZCBzaG9ydGN1dFxuXHRcdEV4cHIuZmluZFtcIklEXCJdID0gZnVuY3Rpb24oIGlkLCBjb250ZXh0ICkge1xuXHRcdFx0aWYgKCB0eXBlb2YgY29udGV4dC5nZXRFbGVtZW50QnlJZCAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdFx0dmFyIG5vZGUsIGksIGVsZW1zLFxuXHRcdFx0XHRcdGVsZW0gPSBjb250ZXh0LmdldEVsZW1lbnRCeUlkKCBpZCApO1xuXG5cdFx0XHRcdGlmICggZWxlbSApIHtcblxuXHRcdFx0XHRcdC8vIFZlcmlmeSB0aGUgaWQgYXR0cmlidXRlXG5cdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdGlmICggbm9kZSAmJiBub2RlLnZhbHVlID09PSBpZCApIHtcblx0XHRcdFx0XHRcdHJldHVybiBbIGVsZW0gXTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBGYWxsIGJhY2sgb24gZ2V0RWxlbWVudHNCeU5hbWVcblx0XHRcdFx0XHRlbGVtcyA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeU5hbWUoIGlkICk7XG5cdFx0XHRcdFx0aSA9IDA7XG5cdFx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1zW2krK10pICkge1xuXHRcdFx0XHRcdFx0bm9kZSA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShcImlkXCIpO1xuXHRcdFx0XHRcdFx0aWYgKCBub2RlICYmIG5vZGUudmFsdWUgPT09IGlkICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gWyBlbGVtIF07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIFtdO1xuXHRcdFx0fVxuXHRcdH07XG5cdH1cblxuXHQvLyBUYWdcblx0RXhwci5maW5kW1wiVEFHXCJdID0gc3VwcG9ydC5nZXRFbGVtZW50c0J5VGFnTmFtZSA/XG5cdFx0ZnVuY3Rpb24oIHRhZywgY29udGV4dCApIHtcblx0XHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lKCB0YWcgKTtcblxuXHRcdFx0Ly8gRG9jdW1lbnRGcmFnbWVudCBub2RlcyBkb24ndCBoYXZlIGdFQlROXG5cdFx0XHR9IGVsc2UgaWYgKCBzdXBwb3J0LnFzYSApIHtcblx0XHRcdFx0cmV0dXJuIGNvbnRleHQucXVlcnlTZWxlY3RvckFsbCggdGFnICk7XG5cdFx0XHR9XG5cdFx0fSA6XG5cblx0XHRmdW5jdGlvbiggdGFnLCBjb250ZXh0ICkge1xuXHRcdFx0dmFyIGVsZW0sXG5cdFx0XHRcdHRtcCA9IFtdLFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0Ly8gQnkgaGFwcHkgY29pbmNpZGVuY2UsIGEgKGJyb2tlbikgZ0VCVE4gYXBwZWFycyBvbiBEb2N1bWVudEZyYWdtZW50IG5vZGVzIHRvb1xuXHRcdFx0XHRyZXN1bHRzID0gY29udGV4dC5nZXRFbGVtZW50c0J5VGFnTmFtZSggdGFnICk7XG5cblx0XHRcdC8vIEZpbHRlciBvdXQgcG9zc2libGUgY29tbWVudHNcblx0XHRcdGlmICggdGFnID09PSBcIipcIiApIHtcblx0XHRcdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0XHRcdFx0dG1wLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdG1wO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0fTtcblxuXHQvLyBDbGFzc1xuXHRFeHByLmZpbmRbXCJDTEFTU1wiXSA9IHN1cHBvcnQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAmJiBmdW5jdGlvbiggY2xhc3NOYW1lLCBjb250ZXh0ICkge1xuXHRcdGlmICggdHlwZW9mIGNvbnRleHQuZ2V0RWxlbWVudHNCeUNsYXNzTmFtZSAhPT0gXCJ1bmRlZmluZWRcIiAmJiBkb2N1bWVudElzSFRNTCApIHtcblx0XHRcdHJldHVybiBjb250ZXh0LmdldEVsZW1lbnRzQnlDbGFzc05hbWUoIGNsYXNzTmFtZSApO1xuXHRcdH1cblx0fTtcblxuXHQvKiBRU0EvbWF0Y2hlc1NlbGVjdG9yXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBRU0EgYW5kIG1hdGNoZXNTZWxlY3RvciBzdXBwb3J0XG5cblx0Ly8gbWF0Y2hlc1NlbGVjdG9yKDphY3RpdmUpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChJRTkvT3BlcmEgMTEuNSlcblx0cmJ1Z2d5TWF0Y2hlcyA9IFtdO1xuXG5cdC8vIHFTYSg6Zm9jdXMpIHJlcG9ydHMgZmFsc2Ugd2hlbiB0cnVlIChDaHJvbWUgMjEpXG5cdC8vIFdlIGFsbG93IHRoaXMgYmVjYXVzZSBvZiBhIGJ1ZyBpbiBJRTgvOSB0aGF0IHRocm93cyBhbiBlcnJvclxuXHQvLyB3aGVuZXZlciBgZG9jdW1lbnQuYWN0aXZlRWxlbWVudGAgaXMgYWNjZXNzZWQgb24gYW4gaWZyYW1lXG5cdC8vIFNvLCB3ZSBhbGxvdyA6Zm9jdXMgdG8gcGFzcyB0aHJvdWdoIFFTQSBhbGwgdGhlIHRpbWUgdG8gYXZvaWQgdGhlIElFIGVycm9yXG5cdC8vIFNlZSBodHRwczovL2J1Z3MuanF1ZXJ5LmNvbS90aWNrZXQvMTMzNzhcblx0cmJ1Z2d5UVNBID0gW107XG5cblx0aWYgKCAoc3VwcG9ydC5xc2EgPSBybmF0aXZlLnRlc3QoIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwgKSkgKSB7XG5cdFx0Ly8gQnVpbGQgUVNBIHJlZ2V4XG5cdFx0Ly8gUmVnZXggc3RyYXRlZ3kgYWRvcHRlZCBmcm9tIERpZWdvIFBlcmluaVxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBTZWxlY3QgaXMgc2V0IHRvIGVtcHR5IHN0cmluZyBvbiBwdXJwb3NlXG5cdFx0XHQvLyBUaGlzIGlzIHRvIHRlc3QgSUUncyB0cmVhdG1lbnQgb2Ygbm90IGV4cGxpY2l0bHlcblx0XHRcdC8vIHNldHRpbmcgYSBib29sZWFuIGNvbnRlbnQgYXR0cmlidXRlLFxuXHRcdFx0Ly8gc2luY2UgaXRzIHByZXNlbmNlIHNob3VsZCBiZSBlbm91Z2hcblx0XHRcdC8vIGh0dHBzOi8vYnVncy5qcXVlcnkuY29tL3RpY2tldC8xMjM1OVxuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5pbm5lckhUTUwgPSBcIjxhIGlkPSdcIiArIGV4cGFuZG8gKyBcIic+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGlkPSdcIiArIGV4cGFuZG8gKyBcIi1cXHJcXFxcJyBtc2FsbG93Y2FwdHVyZT0nJz5cIiArXG5cdFx0XHRcdFwiPG9wdGlvbiBzZWxlY3RlZD0nJz48L29wdGlvbj48L3NlbGVjdD5cIjtcblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4LCBPcGVyYSAxMS0xMi4xNlxuXHRcdFx0Ly8gTm90aGluZyBzaG91bGQgYmUgc2VsZWN0ZWQgd2hlbiBlbXB0eSBzdHJpbmdzIGZvbGxvdyBePSBvciAkPSBvciAqPVxuXHRcdFx0Ly8gVGhlIHRlc3QgYXR0cmlidXRlIG11c3QgYmUgdW5rbm93biBpbiBPcGVyYSBidXQgXCJzYWZlXCIgZm9yIFdpblJUXG5cdFx0XHQvLyBodHRwczovL21zZG4ubWljcm9zb2Z0LmNvbS9lbi11cy9saWJyYXJ5L2llL2hoNDY1Mzg4LmFzcHgjYXR0cmlidXRlX3NlY3Rpb25cblx0XHRcdGlmICggZWwucXVlcnlTZWxlY3RvckFsbChcIlttc2FsbG93Y2FwdHVyZV49JyddXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goIFwiWypeJF09XCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86Jyd8XFxcIlxcXCIpXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogSUU4XG5cdFx0XHQvLyBCb29sZWFuIGF0dHJpYnV0ZXMgYW5kIFwidmFsdWVcIiBhcmUgbm90IHRyZWF0ZWQgY29ycmVjdGx5XG5cdFx0XHRpZiAoICFlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW3NlbGVjdGVkXVwiKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKCBcIlxcXFxbXCIgKyB3aGl0ZXNwYWNlICsgXCIqKD86dmFsdWV8XCIgKyBib29sZWFucyArIFwiKVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZTwyOSwgQW5kcm9pZDw0LjQsIFNhZmFyaTw3LjArLCBpT1M8Ny4wKywgUGhhbnRvbUpTPDEuOS44K1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbCggXCJbaWR+PVwiICsgZXhwYW5kbyArIFwiLV1cIiApLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCJ+PVwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gV2Via2l0L09wZXJhIC0gOmNoZWNrZWQgc2hvdWxkIHJldHVybiBzZWxlY3RlZCBvcHRpb24gZWxlbWVudHNcblx0XHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSLzIwMTEvUkVDLWNzczMtc2VsZWN0b3JzLTIwMTEwOTI5LyNjaGVja2VkXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCAhZWwucXVlcnlTZWxlY3RvckFsbChcIjpjaGVja2VkXCIpLmxlbmd0aCApIHtcblx0XHRcdFx0cmJ1Z2d5UVNBLnB1c2goXCI6Y2hlY2tlZFwiKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU3VwcG9ydDogU2FmYXJpIDgrLCBpT1MgOCtcblx0XHRcdC8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzY4NTFcblx0XHRcdC8vIEluLXBhZ2UgYHNlbGVjdG9yI2lkIHNpYmxpbmctY29tYmluYXRvciBzZWxlY3RvcmAgZmFpbHNcblx0XHRcdGlmICggIWVsLnF1ZXJ5U2VsZWN0b3JBbGwoIFwiYSNcIiArIGV4cGFuZG8gKyBcIisqXCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdHJidWdneVFTQS5wdXNoKFwiLiMuK1srfl1cIik7XG5cdFx0XHR9XG5cdFx0fSk7XG5cblx0XHRhc3NlcnQoZnVuY3Rpb24oIGVsICkge1xuXHRcdFx0ZWwuaW5uZXJIVE1MID0gXCI8YSBocmVmPScnIGRpc2FibGVkPSdkaXNhYmxlZCc+PC9hPlwiICtcblx0XHRcdFx0XCI8c2VsZWN0IGRpc2FibGVkPSdkaXNhYmxlZCc+PG9wdGlvbi8+PC9zZWxlY3Q+XCI7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IFdpbmRvd3MgOCBOYXRpdmUgQXBwc1xuXHRcdFx0Ly8gVGhlIHR5cGUgYW5kIG5hbWUgYXR0cmlidXRlcyBhcmUgcmVzdHJpY3RlZCBkdXJpbmcgLmlubmVySFRNTCBhc3NpZ25tZW50XG5cdFx0XHR2YXIgaW5wdXQgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KFwiaW5wdXRcIik7XG5cdFx0XHRpbnB1dC5zZXRBdHRyaWJ1dGUoIFwidHlwZVwiLCBcImhpZGRlblwiICk7XG5cdFx0XHRlbC5hcHBlbmRDaGlsZCggaW5wdXQgKS5zZXRBdHRyaWJ1dGUoIFwibmFtZVwiLCBcIkRcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRThcblx0XHRcdC8vIEVuZm9yY2UgY2FzZS1zZW5zaXRpdml0eSBvZiBuYW1lIGF0dHJpYnV0ZVxuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiW25hbWU9ZF1cIikubGVuZ3RoICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCJuYW1lXCIgKyB3aGl0ZXNwYWNlICsgXCIqWypeJHwhfl0/PVwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZGIDMuNSAtIDplbmFibGVkLzpkaXNhYmxlZCBhbmQgaGlkZGVuIGVsZW1lbnRzIChoaWRkZW4gZWxlbWVudHMgYXJlIHN0aWxsIGVuYWJsZWQpXG5cdFx0XHQvLyBJRTggdGhyb3dzIGVycm9yIGhlcmUgYW5kIHdpbGwgbm90IHNlZSBsYXRlciB0ZXN0c1xuXHRcdFx0aWYgKCBlbC5xdWVyeVNlbGVjdG9yQWxsKFwiOmVuYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFOS0xMStcblx0XHRcdC8vIElFJ3MgOmRpc2FibGVkIHNlbGVjdG9yIGRvZXMgbm90IHBpY2sgdXAgdGhlIGNoaWxkcmVuIG9mIGRpc2FibGVkIGZpZWxkc2V0c1xuXHRcdFx0ZG9jRWxlbS5hcHBlbmRDaGlsZCggZWwgKS5kaXNhYmxlZCA9IHRydWU7XG5cdFx0XHRpZiAoIGVsLnF1ZXJ5U2VsZWN0b3JBbGwoXCI6ZGlzYWJsZWRcIikubGVuZ3RoICE9PSAyICkge1xuXHRcdFx0XHRyYnVnZ3lRU0EucHVzaCggXCI6ZW5hYmxlZFwiLCBcIjpkaXNhYmxlZFwiICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9wZXJhIDEwLTExIGRvZXMgbm90IHRocm93IG9uIHBvc3QtY29tbWEgaW52YWxpZCBwc2V1ZG9zXG5cdFx0XHRlbC5xdWVyeVNlbGVjdG9yQWxsKFwiKiw6eFwiKTtcblx0XHRcdHJidWdneVFTQS5wdXNoKFwiLC4qOlwiKTtcblx0XHR9KTtcblx0fVxuXG5cdGlmICggKHN1cHBvcnQubWF0Y2hlc1NlbGVjdG9yID0gcm5hdGl2ZS50ZXN0KCAobWF0Y2hlcyA9IGRvY0VsZW0ubWF0Y2hlcyB8fFxuXHRcdGRvY0VsZW0ud2Via2l0TWF0Y2hlc1NlbGVjdG9yIHx8XG5cdFx0ZG9jRWxlbS5tb3pNYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm9NYXRjaGVzU2VsZWN0b3IgfHxcblx0XHRkb2NFbGVtLm1zTWF0Y2hlc1NlbGVjdG9yKSApKSApIHtcblxuXHRcdGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdFx0XHQvLyBDaGVjayB0byBzZWUgaWYgaXQncyBwb3NzaWJsZSB0byBkbyBtYXRjaGVzU2VsZWN0b3Jcblx0XHRcdC8vIG9uIGEgZGlzY29ubmVjdGVkIG5vZGUgKElFIDkpXG5cdFx0XHRzdXBwb3J0LmRpc2Nvbm5lY3RlZE1hdGNoID0gbWF0Y2hlcy5jYWxsKCBlbCwgXCIqXCIgKTtcblxuXHRcdFx0Ly8gVGhpcyBzaG91bGQgZmFpbCB3aXRoIGFuIGV4Y2VwdGlvblxuXHRcdFx0Ly8gR2Vja28gZG9lcyBub3QgZXJyb3IsIHJldHVybnMgZmFsc2UgaW5zdGVhZFxuXHRcdFx0bWF0Y2hlcy5jYWxsKCBlbCwgXCJbcyE9JyddOnhcIiApO1xuXHRcdFx0cmJ1Z2d5TWF0Y2hlcy5wdXNoKCBcIiE9XCIsIHBzZXVkb3MgKTtcblx0XHR9KTtcblx0fVxuXG5cdHJidWdneVFTQSA9IHJidWdneVFTQS5sZW5ndGggJiYgbmV3IFJlZ0V4cCggcmJ1Z2d5UVNBLmpvaW4oXCJ8XCIpICk7XG5cdHJidWdneU1hdGNoZXMgPSByYnVnZ3lNYXRjaGVzLmxlbmd0aCAmJiBuZXcgUmVnRXhwKCByYnVnZ3lNYXRjaGVzLmpvaW4oXCJ8XCIpICk7XG5cblx0LyogQ29udGFpbnNcblx0LS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLSAqL1xuXHRoYXNDb21wYXJlID0gcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uICk7XG5cblx0Ly8gRWxlbWVudCBjb250YWlucyBhbm90aGVyXG5cdC8vIFB1cnBvc2VmdWxseSBzZWxmLWV4Y2x1c2l2ZVxuXHQvLyBBcyBpbiwgYW4gZWxlbWVudCBkb2VzIG5vdCBjb250YWluIGl0c2VsZlxuXHRjb250YWlucyA9IGhhc0NvbXBhcmUgfHwgcm5hdGl2ZS50ZXN0KCBkb2NFbGVtLmNvbnRhaW5zICkgP1xuXHRcdGZ1bmN0aW9uKCBhLCBiICkge1xuXHRcdFx0dmFyIGFkb3duID0gYS5ub2RlVHlwZSA9PT0gOSA/IGEuZG9jdW1lbnRFbGVtZW50IDogYSxcblx0XHRcdFx0YnVwID0gYiAmJiBiLnBhcmVudE5vZGU7XG5cdFx0XHRyZXR1cm4gYSA9PT0gYnVwIHx8ICEhKCBidXAgJiYgYnVwLm5vZGVUeXBlID09PSAxICYmIChcblx0XHRcdFx0YWRvd24uY29udGFpbnMgP1xuXHRcdFx0XHRcdGFkb3duLmNvbnRhaW5zKCBidXAgKSA6XG5cdFx0XHRcdFx0YS5jb21wYXJlRG9jdW1lbnRQb3NpdGlvbiAmJiBhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBidXAgKSAmIDE2XG5cdFx0XHQpKTtcblx0XHR9IDpcblx0XHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHRcdGlmICggYiApIHtcblx0XHRcdFx0d2hpbGUgKCAoYiA9IGIucGFyZW50Tm9kZSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBiID09PSBhICkge1xuXHRcdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcblxuXHQvKiBTb3J0aW5nXG5cdC0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0gKi9cblxuXHQvLyBEb2N1bWVudCBvcmRlciBzb3J0aW5nXG5cdHNvcnRPcmRlciA9IGhhc0NvbXBhcmUgP1xuXHRmdW5jdGlvbiggYSwgYiApIHtcblxuXHRcdC8vIEZsYWcgZm9yIGR1cGxpY2F0ZSByZW1vdmFsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdC8vIFNvcnQgb24gbWV0aG9kIGV4aXN0ZW5jZSBpZiBvbmx5IG9uZSBpbnB1dCBoYXMgY29tcGFyZURvY3VtZW50UG9zaXRpb25cblx0XHR2YXIgY29tcGFyZSA9ICFhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uIC0gIWIuY29tcGFyZURvY3VtZW50UG9zaXRpb247XG5cdFx0aWYgKCBjb21wYXJlICkge1xuXHRcdFx0cmV0dXJuIGNvbXBhcmU7XG5cdFx0fVxuXG5cdFx0Ly8gQ2FsY3VsYXRlIHBvc2l0aW9uIGlmIGJvdGggaW5wdXRzIGJlbG9uZyB0byB0aGUgc2FtZSBkb2N1bWVudFxuXHRcdGNvbXBhcmUgPSAoIGEub3duZXJEb2N1bWVudCB8fCBhICkgPT09ICggYi5vd25lckRvY3VtZW50IHx8IGIgKSA/XG5cdFx0XHRhLmNvbXBhcmVEb2N1bWVudFBvc2l0aW9uKCBiICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugd2Uga25vdyB0aGV5IGFyZSBkaXNjb25uZWN0ZWRcblx0XHRcdDE7XG5cblx0XHQvLyBEaXNjb25uZWN0ZWQgbm9kZXNcblx0XHRpZiAoIGNvbXBhcmUgJiAxIHx8XG5cdFx0XHQoIXN1cHBvcnQuc29ydERldGFjaGVkICYmIGIuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGEgKSA9PT0gY29tcGFyZSkgKSB7XG5cblx0XHRcdC8vIENob29zZSB0aGUgZmlyc3QgZWxlbWVudCB0aGF0IGlzIHJlbGF0ZWQgdG8gb3VyIHByZWZlcnJlZCBkb2N1bWVudFxuXHRcdFx0aWYgKCBhID09PSBkb2N1bWVudCB8fCBhLm93bmVyRG9jdW1lbnQgPT09IHByZWZlcnJlZERvYyAmJiBjb250YWlucyhwcmVmZXJyZWREb2MsIGEpICkge1xuXHRcdFx0XHRyZXR1cm4gLTE7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGIgPT09IGRvY3VtZW50IHx8IGIub3duZXJEb2N1bWVudCA9PT0gcHJlZmVycmVkRG9jICYmIGNvbnRhaW5zKHByZWZlcnJlZERvYywgYikgKSB7XG5cdFx0XHRcdHJldHVybiAxO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBNYWludGFpbiBvcmlnaW5hbCBvcmRlclxuXHRcdFx0cmV0dXJuIHNvcnRJbnB1dCA/XG5cdFx0XHRcdCggaW5kZXhPZiggc29ydElucHV0LCBhICkgLSBpbmRleE9mKCBzb3J0SW5wdXQsIGIgKSApIDpcblx0XHRcdFx0MDtcblx0XHR9XG5cblx0XHRyZXR1cm4gY29tcGFyZSAmIDQgPyAtMSA6IDE7XG5cdH0gOlxuXHRmdW5jdGlvbiggYSwgYiApIHtcblx0XHQvLyBFeGl0IGVhcmx5IGlmIHRoZSBub2RlcyBhcmUgaWRlbnRpY2FsXG5cdFx0aWYgKCBhID09PSBiICkge1xuXHRcdFx0aGFzRHVwbGljYXRlID0gdHJ1ZTtcblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHZhciBjdXIsXG5cdFx0XHRpID0gMCxcblx0XHRcdGF1cCA9IGEucGFyZW50Tm9kZSxcblx0XHRcdGJ1cCA9IGIucGFyZW50Tm9kZSxcblx0XHRcdGFwID0gWyBhIF0sXG5cdFx0XHRicCA9IFsgYiBdO1xuXG5cdFx0Ly8gUGFyZW50bGVzcyBub2RlcyBhcmUgZWl0aGVyIGRvY3VtZW50cyBvciBkaXNjb25uZWN0ZWRcblx0XHRpZiAoICFhdXAgfHwgIWJ1cCApIHtcblx0XHRcdHJldHVybiBhID09PSBkb2N1bWVudCA/IC0xIDpcblx0XHRcdFx0YiA9PT0gZG9jdW1lbnQgPyAxIDpcblx0XHRcdFx0YXVwID8gLTEgOlxuXHRcdFx0XHRidXAgPyAxIDpcblx0XHRcdFx0c29ydElucHV0ID9cblx0XHRcdFx0KCBpbmRleE9mKCBzb3J0SW5wdXQsIGEgKSAtIGluZGV4T2YoIHNvcnRJbnB1dCwgYiApICkgOlxuXHRcdFx0XHQwO1xuXG5cdFx0Ly8gSWYgdGhlIG5vZGVzIGFyZSBzaWJsaW5ncywgd2UgY2FuIGRvIGEgcXVpY2sgY2hlY2tcblx0XHR9IGVsc2UgaWYgKCBhdXAgPT09IGJ1cCApIHtcblx0XHRcdHJldHVybiBzaWJsaW5nQ2hlY2soIGEsIGIgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2Ugd2UgbmVlZCBmdWxsIGxpc3RzIG9mIHRoZWlyIGFuY2VzdG9ycyBmb3IgY29tcGFyaXNvblxuXHRcdGN1ciA9IGE7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YXAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXHRcdGN1ciA9IGI7XG5cdFx0d2hpbGUgKCAoY3VyID0gY3VyLnBhcmVudE5vZGUpICkge1xuXHRcdFx0YnAudW5zaGlmdCggY3VyICk7XG5cdFx0fVxuXG5cdFx0Ly8gV2FsayBkb3duIHRoZSB0cmVlIGxvb2tpbmcgZm9yIGEgZGlzY3JlcGFuY3lcblx0XHR3aGlsZSAoIGFwW2ldID09PSBicFtpXSApIHtcblx0XHRcdGkrKztcblx0XHR9XG5cblx0XHRyZXR1cm4gaSA/XG5cdFx0XHQvLyBEbyBhIHNpYmxpbmcgY2hlY2sgaWYgdGhlIG5vZGVzIGhhdmUgYSBjb21tb24gYW5jZXN0b3Jcblx0XHRcdHNpYmxpbmdDaGVjayggYXBbaV0sIGJwW2ldICkgOlxuXG5cdFx0XHQvLyBPdGhlcndpc2Ugbm9kZXMgaW4gb3VyIGRvY3VtZW50IHNvcnQgZmlyc3Rcblx0XHRcdGFwW2ldID09PSBwcmVmZXJyZWREb2MgPyAtMSA6XG5cdFx0XHRicFtpXSA9PT0gcHJlZmVycmVkRG9jID8gMSA6XG5cdFx0XHQwO1xuXHR9O1xuXG5cdHJldHVybiBkb2N1bWVudDtcbn07XG5cblNpenpsZS5tYXRjaGVzID0gZnVuY3Rpb24oIGV4cHIsIGVsZW1lbnRzICkge1xuXHRyZXR1cm4gU2l6emxlKCBleHByLCBudWxsLCBudWxsLCBlbGVtZW50cyApO1xufTtcblxuU2l6emxlLm1hdGNoZXNTZWxlY3RvciA9IGZ1bmN0aW9uKCBlbGVtLCBleHByICkge1xuXHQvLyBTZXQgZG9jdW1lbnQgdmFycyBpZiBuZWVkZWRcblx0aWYgKCAoIGVsZW0ub3duZXJEb2N1bWVudCB8fCBlbGVtICkgIT09IGRvY3VtZW50ICkge1xuXHRcdHNldERvY3VtZW50KCBlbGVtICk7XG5cdH1cblxuXHQvLyBNYWtlIHN1cmUgdGhhdCBhdHRyaWJ1dGUgc2VsZWN0b3JzIGFyZSBxdW90ZWRcblx0ZXhwciA9IGV4cHIucmVwbGFjZSggcmF0dHJpYnV0ZVF1b3RlcywgXCI9JyQxJ11cIiApO1xuXG5cdGlmICggc3VwcG9ydC5tYXRjaGVzU2VsZWN0b3IgJiYgZG9jdW1lbnRJc0hUTUwgJiZcblx0XHQhY29tcGlsZXJDYWNoZVsgZXhwciArIFwiIFwiIF0gJiZcblx0XHQoICFyYnVnZ3lNYXRjaGVzIHx8ICFyYnVnZ3lNYXRjaGVzLnRlc3QoIGV4cHIgKSApICYmXG5cdFx0KCAhcmJ1Z2d5UVNBICAgICB8fCAhcmJ1Z2d5UVNBLnRlc3QoIGV4cHIgKSApICkge1xuXG5cdFx0dHJ5IHtcblx0XHRcdHZhciByZXQgPSBtYXRjaGVzLmNhbGwoIGVsZW0sIGV4cHIgKTtcblxuXHRcdFx0Ly8gSUUgOSdzIG1hdGNoZXNTZWxlY3RvciByZXR1cm5zIGZhbHNlIG9uIGRpc2Nvbm5lY3RlZCBub2Rlc1xuXHRcdFx0aWYgKCByZXQgfHwgc3VwcG9ydC5kaXNjb25uZWN0ZWRNYXRjaCB8fFxuXHRcdFx0XHRcdC8vIEFzIHdlbGwsIGRpc2Nvbm5lY3RlZCBub2RlcyBhcmUgc2FpZCB0byBiZSBpbiBhIGRvY3VtZW50XG5cdFx0XHRcdFx0Ly8gZnJhZ21lbnQgaW4gSUUgOVxuXHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQgJiYgZWxlbS5kb2N1bWVudC5ub2RlVHlwZSAhPT0gMTEgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cdFx0fSBjYXRjaCAoZSkge31cblx0fVxuXG5cdHJldHVybiBTaXp6bGUoIGV4cHIsIGRvY3VtZW50LCBudWxsLCBbIGVsZW0gXSApLmxlbmd0aCA+IDA7XG59O1xuXG5TaXp6bGUuY29udGFpbnMgPSBmdW5jdGlvbiggY29udGV4dCwgZWxlbSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggY29udGV4dCApO1xuXHR9XG5cdHJldHVybiBjb250YWlucyggY29udGV4dCwgZWxlbSApO1xufTtcblxuU2l6emxlLmF0dHIgPSBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0Ly8gU2V0IGRvY3VtZW50IHZhcnMgaWYgbmVlZGVkXG5cdGlmICggKCBlbGVtLm93bmVyRG9jdW1lbnQgfHwgZWxlbSApICE9PSBkb2N1bWVudCApIHtcblx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHR9XG5cblx0dmFyIGZuID0gRXhwci5hdHRySGFuZGxlWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSxcblx0XHQvLyBEb24ndCBnZXQgZm9vbGVkIGJ5IE9iamVjdC5wcm90b3R5cGUgcHJvcGVydGllcyAoalF1ZXJ5ICMxMzgwNylcblx0XHR2YWwgPSBmbiAmJiBoYXNPd24uY2FsbCggRXhwci5hdHRySGFuZGxlLCBuYW1lLnRvTG93ZXJDYXNlKCkgKSA/XG5cdFx0XHRmbiggZWxlbSwgbmFtZSwgIWRvY3VtZW50SXNIVE1MICkgOlxuXHRcdFx0dW5kZWZpbmVkO1xuXG5cdHJldHVybiB2YWwgIT09IHVuZGVmaW5lZCA/XG5cdFx0dmFsIDpcblx0XHRzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWRvY3VtZW50SXNIVE1MID9cblx0XHRcdGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lICkgOlxuXHRcdFx0KHZhbCA9IGVsZW0uZ2V0QXR0cmlidXRlTm9kZShuYW1lKSkgJiYgdmFsLnNwZWNpZmllZCA/XG5cdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG59O1xuXG5TaXp6bGUuZXNjYXBlID0gZnVuY3Rpb24oIHNlbCApIHtcblx0cmV0dXJuIChzZWwgKyBcIlwiKS5yZXBsYWNlKCByY3NzZXNjYXBlLCBmY3NzZXNjYXBlICk7XG59O1xuXG5TaXp6bGUuZXJyb3IgPSBmdW5jdGlvbiggbXNnICkge1xuXHR0aHJvdyBuZXcgRXJyb3IoIFwiU3ludGF4IGVycm9yLCB1bnJlY29nbml6ZWQgZXhwcmVzc2lvbjogXCIgKyBtc2cgKTtcbn07XG5cbi8qKlxuICogRG9jdW1lbnQgc29ydGluZyBhbmQgcmVtb3ZpbmcgZHVwbGljYXRlc1xuICogQHBhcmFtIHtBcnJheUxpa2V9IHJlc3VsdHNcbiAqL1xuU2l6emxlLnVuaXF1ZVNvcnQgPSBmdW5jdGlvbiggcmVzdWx0cyApIHtcblx0dmFyIGVsZW0sXG5cdFx0ZHVwbGljYXRlcyA9IFtdLFxuXHRcdGogPSAwLFxuXHRcdGkgPSAwO1xuXG5cdC8vIFVubGVzcyB3ZSAqa25vdyogd2UgY2FuIGRldGVjdCBkdXBsaWNhdGVzLCBhc3N1bWUgdGhlaXIgcHJlc2VuY2Vcblx0aGFzRHVwbGljYXRlID0gIXN1cHBvcnQuZGV0ZWN0RHVwbGljYXRlcztcblx0c29ydElucHV0ID0gIXN1cHBvcnQuc29ydFN0YWJsZSAmJiByZXN1bHRzLnNsaWNlKCAwICk7XG5cdHJlc3VsdHMuc29ydCggc29ydE9yZGVyICk7XG5cblx0aWYgKCBoYXNEdXBsaWNhdGUgKSB7XG5cdFx0d2hpbGUgKCAoZWxlbSA9IHJlc3VsdHNbaSsrXSkgKSB7XG5cdFx0XHRpZiAoIGVsZW0gPT09IHJlc3VsdHNbIGkgXSApIHtcblx0XHRcdFx0aiA9IGR1cGxpY2F0ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdH1cblx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdHJlc3VsdHMuc3BsaWNlKCBkdXBsaWNhdGVzWyBqIF0sIDEgKTtcblx0XHR9XG5cdH1cblxuXHQvLyBDbGVhciBpbnB1dCBhZnRlciBzb3J0aW5nIHRvIHJlbGVhc2Ugb2JqZWN0c1xuXHQvLyBTZWUgaHR0cHM6Ly9naXRodWIuY29tL2pxdWVyeS9zaXp6bGUvcHVsbC8yMjVcblx0c29ydElucHV0ID0gbnVsbDtcblxuXHRyZXR1cm4gcmVzdWx0cztcbn07XG5cbi8qKlxuICogVXRpbGl0eSBmdW5jdGlvbiBmb3IgcmV0cmlldmluZyB0aGUgdGV4dCB2YWx1ZSBvZiBhbiBhcnJheSBvZiBET00gbm9kZXNcbiAqIEBwYXJhbSB7QXJyYXl8RWxlbWVudH0gZWxlbVxuICovXG5nZXRUZXh0ID0gU2l6emxlLmdldFRleHQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0dmFyIG5vZGUsXG5cdFx0cmV0ID0gXCJcIixcblx0XHRpID0gMCxcblx0XHRub2RlVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0aWYgKCAhbm9kZVR5cGUgKSB7XG5cdFx0Ly8gSWYgbm8gbm9kZVR5cGUsIHRoaXMgaXMgZXhwZWN0ZWQgdG8gYmUgYW4gYXJyYXlcblx0XHR3aGlsZSAoIChub2RlID0gZWxlbVtpKytdKSApIHtcblx0XHRcdC8vIERvIG5vdCB0cmF2ZXJzZSBjb21tZW50IG5vZGVzXG5cdFx0XHRyZXQgKz0gZ2V0VGV4dCggbm9kZSApO1xuXHRcdH1cblx0fSBlbHNlIGlmICggbm9kZVR5cGUgPT09IDEgfHwgbm9kZVR5cGUgPT09IDkgfHwgbm9kZVR5cGUgPT09IDExICkge1xuXHRcdC8vIFVzZSB0ZXh0Q29udGVudCBmb3IgZWxlbWVudHNcblx0XHQvLyBpbm5lclRleHQgdXNhZ2UgcmVtb3ZlZCBmb3IgY29uc2lzdGVuY3kgb2YgbmV3IGxpbmVzIChqUXVlcnkgIzExMTUzKVxuXHRcdGlmICggdHlwZW9mIGVsZW0udGV4dENvbnRlbnQgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS50ZXh0Q29udGVudDtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Ly8gVHJhdmVyc2UgaXRzIGNoaWxkcmVuXG5cdFx0XHRmb3IgKCBlbGVtID0gZWxlbS5maXJzdENoaWxkOyBlbGVtOyBlbGVtID0gZWxlbS5uZXh0U2libGluZyApIHtcblx0XHRcdFx0cmV0ICs9IGdldFRleHQoIGVsZW0gKTtcblx0XHRcdH1cblx0XHR9XG5cdH0gZWxzZSBpZiAoIG5vZGVUeXBlID09PSAzIHx8IG5vZGVUeXBlID09PSA0ICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVWYWx1ZTtcblx0fVxuXHQvLyBEbyBub3QgaW5jbHVkZSBjb21tZW50IG9yIHByb2Nlc3NpbmcgaW5zdHJ1Y3Rpb24gbm9kZXNcblxuXHRyZXR1cm4gcmV0O1xufTtcblxuRXhwciA9IFNpenpsZS5zZWxlY3RvcnMgPSB7XG5cblx0Ly8gQ2FuIGJlIGFkanVzdGVkIGJ5IHRoZSB1c2VyXG5cdGNhY2hlTGVuZ3RoOiA1MCxcblxuXHRjcmVhdGVQc2V1ZG86IG1hcmtGdW5jdGlvbixcblxuXHRtYXRjaDogbWF0Y2hFeHByLFxuXG5cdGF0dHJIYW5kbGU6IHt9LFxuXG5cdGZpbmQ6IHt9LFxuXG5cdHJlbGF0aXZlOiB7XG5cdFx0XCI+XCI6IHsgZGlyOiBcInBhcmVudE5vZGVcIiwgZmlyc3Q6IHRydWUgfSxcblx0XHRcIiBcIjogeyBkaXI6IFwicGFyZW50Tm9kZVwiIH0sXG5cdFx0XCIrXCI6IHsgZGlyOiBcInByZXZpb3VzU2libGluZ1wiLCBmaXJzdDogdHJ1ZSB9LFxuXHRcdFwiflwiOiB7IGRpcjogXCJwcmV2aW91c1NpYmxpbmdcIiB9XG5cdH0sXG5cblx0cHJlRmlsdGVyOiB7XG5cdFx0XCJBVFRSXCI6IGZ1bmN0aW9uKCBtYXRjaCApIHtcblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0ucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0Ly8gTW92ZSB0aGUgZ2l2ZW4gdmFsdWUgdG8gbWF0Y2hbM10gd2hldGhlciBxdW90ZWQgb3IgdW5xdW90ZWRcblx0XHRcdG1hdGNoWzNdID0gKCBtYXRjaFszXSB8fCBtYXRjaFs0XSB8fCBtYXRjaFs1XSB8fCBcIlwiICkucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsyXSA9PT0gXCJ+PVwiICkge1xuXHRcdFx0XHRtYXRjaFszXSA9IFwiIFwiICsgbWF0Y2hbM10gKyBcIiBcIjtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCA0ICk7XG5cdFx0fSxcblxuXHRcdFwiQ0hJTERcIjogZnVuY3Rpb24oIG1hdGNoICkge1xuXHRcdFx0LyogbWF0Y2hlcyBmcm9tIG1hdGNoRXhwcltcIkNISUxEXCJdXG5cdFx0XHRcdDEgdHlwZSAob25seXxudGh8Li4uKVxuXHRcdFx0XHQyIHdoYXQgKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdDMgYXJndW1lbnQgKGV2ZW58b2RkfFxcZCp8XFxkKm4oWystXVxcZCspP3wuLi4pXG5cdFx0XHRcdDQgeG4tY29tcG9uZW50IG9mIHhuK3kgYXJndW1lbnQgKFsrLV0/XFxkKm58KVxuXHRcdFx0XHQ1IHNpZ24gb2YgeG4tY29tcG9uZW50XG5cdFx0XHRcdDYgeCBvZiB4bi1jb21wb25lbnRcblx0XHRcdFx0NyBzaWduIG9mIHktY29tcG9uZW50XG5cdFx0XHRcdDggeSBvZiB5LWNvbXBvbmVudFxuXHRcdFx0Ki9cblx0XHRcdG1hdGNoWzFdID0gbWF0Y2hbMV0udG9Mb3dlckNhc2UoKTtcblxuXHRcdFx0aWYgKCBtYXRjaFsxXS5zbGljZSggMCwgMyApID09PSBcIm50aFwiICkge1xuXHRcdFx0XHQvLyBudGgtKiByZXF1aXJlcyBhcmd1bWVudFxuXHRcdFx0XHRpZiAoICFtYXRjaFszXSApIHtcblx0XHRcdFx0XHRTaXp6bGUuZXJyb3IoIG1hdGNoWzBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBudW1lcmljIHggYW5kIHkgcGFyYW1ldGVycyBmb3IgRXhwci5maWx0ZXIuQ0hJTERcblx0XHRcdFx0Ly8gcmVtZW1iZXIgdGhhdCBmYWxzZS90cnVlIGNhc3QgcmVzcGVjdGl2ZWx5IHRvIDAvMVxuXHRcdFx0XHRtYXRjaFs0XSA9ICsoIG1hdGNoWzRdID8gbWF0Y2hbNV0gKyAobWF0Y2hbNl0gfHwgMSkgOiAyICogKCBtYXRjaFszXSA9PT0gXCJldmVuXCIgfHwgbWF0Y2hbM10gPT09IFwib2RkXCIgKSApO1xuXHRcdFx0XHRtYXRjaFs1XSA9ICsoICggbWF0Y2hbN10gKyBtYXRjaFs4XSApIHx8IG1hdGNoWzNdID09PSBcIm9kZFwiICk7XG5cblx0XHRcdC8vIG90aGVyIHR5cGVzIHByb2hpYml0IGFyZ3VtZW50c1xuXHRcdFx0fSBlbHNlIGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdFNpenpsZS5lcnJvciggbWF0Y2hbMF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmV0dXJuIG1hdGNoO1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggbWF0Y2ggKSB7XG5cdFx0XHR2YXIgZXhjZXNzLFxuXHRcdFx0XHR1bnF1b3RlZCA9ICFtYXRjaFs2XSAmJiBtYXRjaFsyXTtcblxuXHRcdFx0aWYgKCBtYXRjaEV4cHJbXCJDSElMRFwiXS50ZXN0KCBtYXRjaFswXSApICkge1xuXHRcdFx0XHRyZXR1cm4gbnVsbDtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQWNjZXB0IHF1b3RlZCBhcmd1bWVudHMgYXMtaXNcblx0XHRcdGlmICggbWF0Y2hbM10gKSB7XG5cdFx0XHRcdG1hdGNoWzJdID0gbWF0Y2hbNF0gfHwgbWF0Y2hbNV0gfHwgXCJcIjtcblxuXHRcdFx0Ly8gU3RyaXAgZXhjZXNzIGNoYXJhY3RlcnMgZnJvbSB1bnF1b3RlZCBhcmd1bWVudHNcblx0XHRcdH0gZWxzZSBpZiAoIHVucXVvdGVkICYmIHJwc2V1ZG8udGVzdCggdW5xdW90ZWQgKSAmJlxuXHRcdFx0XHQvLyBHZXQgZXhjZXNzIGZyb20gdG9rZW5pemUgKHJlY3Vyc2l2ZWx5KVxuXHRcdFx0XHQoZXhjZXNzID0gdG9rZW5pemUoIHVucXVvdGVkLCB0cnVlICkpICYmXG5cdFx0XHRcdC8vIGFkdmFuY2UgdG8gdGhlIG5leHQgY2xvc2luZyBwYXJlbnRoZXNpc1xuXHRcdFx0XHQoZXhjZXNzID0gdW5xdW90ZWQuaW5kZXhPZiggXCIpXCIsIHVucXVvdGVkLmxlbmd0aCAtIGV4Y2VzcyApIC0gdW5xdW90ZWQubGVuZ3RoKSApIHtcblxuXHRcdFx0XHQvLyBleGNlc3MgaXMgYSBuZWdhdGl2ZSBpbmRleFxuXHRcdFx0XHRtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwLCBleGNlc3MgKTtcblx0XHRcdFx0bWF0Y2hbMl0gPSB1bnF1b3RlZC5zbGljZSggMCwgZXhjZXNzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldHVybiBvbmx5IGNhcHR1cmVzIG5lZWRlZCBieSB0aGUgcHNldWRvIGZpbHRlciBtZXRob2QgKHR5cGUgYW5kIGFyZ3VtZW50KVxuXHRcdFx0cmV0dXJuIG1hdGNoLnNsaWNlKCAwLCAzICk7XG5cdFx0fVxuXHR9LFxuXG5cdGZpbHRlcjoge1xuXG5cdFx0XCJUQUdcIjogZnVuY3Rpb24oIG5vZGVOYW1lU2VsZWN0b3IgKSB7XG5cdFx0XHR2YXIgbm9kZU5hbWUgPSBub2RlTmFtZVNlbGVjdG9yLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICkudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiBub2RlTmFtZVNlbGVjdG9yID09PSBcIipcIiA/XG5cdFx0XHRcdGZ1bmN0aW9uKCkgeyByZXR1cm4gdHJ1ZTsgfSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lICYmIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbm9kZU5hbWU7XG5cdFx0XHRcdH07XG5cdFx0fSxcblxuXHRcdFwiQ0xBU1NcIjogZnVuY3Rpb24oIGNsYXNzTmFtZSApIHtcblx0XHRcdHZhciBwYXR0ZXJuID0gY2xhc3NDYWNoZVsgY2xhc3NOYW1lICsgXCIgXCIgXTtcblxuXHRcdFx0cmV0dXJuIHBhdHRlcm4gfHxcblx0XHRcdFx0KHBhdHRlcm4gPSBuZXcgUmVnRXhwKCBcIihefFwiICsgd2hpdGVzcGFjZSArIFwiKVwiICsgY2xhc3NOYW1lICsgXCIoXCIgKyB3aGl0ZXNwYWNlICsgXCJ8JClcIiApKSAmJlxuXHRcdFx0XHRjbGFzc0NhY2hlKCBjbGFzc05hbWUsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHRcdHJldHVybiBwYXR0ZXJuLnRlc3QoIHR5cGVvZiBlbGVtLmNsYXNzTmFtZSA9PT0gXCJzdHJpbmdcIiAmJiBlbGVtLmNsYXNzTmFtZSB8fCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgIT09IFwidW5kZWZpbmVkXCIgJiYgZWxlbS5nZXRBdHRyaWJ1dGUoXCJjbGFzc1wiKSB8fCBcIlwiICk7XG5cdFx0XHRcdH0pO1xuXHRcdH0sXG5cblx0XHRcIkFUVFJcIjogZnVuY3Rpb24oIG5hbWUsIG9wZXJhdG9yLCBjaGVjayApIHtcblx0XHRcdHJldHVybiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHJlc3VsdCA9IFNpenpsZS5hdHRyKCBlbGVtLCBuYW1lICk7XG5cblx0XHRcdFx0aWYgKCByZXN1bHQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRyZXR1cm4gb3BlcmF0b3IgPT09IFwiIT1cIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoICFvcGVyYXRvciApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJlc3VsdCArPSBcIlwiO1xuXG5cdFx0XHRcdHJldHVybiBvcGVyYXRvciA9PT0gXCI9XCIgPyByZXN1bHQgPT09IGNoZWNrIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIhPVwiID8gcmVzdWx0ICE9PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiXj1cIiA/IGNoZWNrICYmIHJlc3VsdC5pbmRleE9mKCBjaGVjayApID09PSAwIDpcblx0XHRcdFx0XHRvcGVyYXRvciA9PT0gXCIqPVwiID8gY2hlY2sgJiYgcmVzdWx0LmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwiJD1cIiA/IGNoZWNrICYmIHJlc3VsdC5zbGljZSggLWNoZWNrLmxlbmd0aCApID09PSBjaGVjayA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifj1cIiA/ICggXCIgXCIgKyByZXN1bHQucmVwbGFjZSggcndoaXRlc3BhY2UsIFwiIFwiICkgKyBcIiBcIiApLmluZGV4T2YoIGNoZWNrICkgPiAtMSA6XG5cdFx0XHRcdFx0b3BlcmF0b3IgPT09IFwifD1cIiA/IHJlc3VsdCA9PT0gY2hlY2sgfHwgcmVzdWx0LnNsaWNlKCAwLCBjaGVjay5sZW5ndGggKyAxICkgPT09IGNoZWNrICsgXCItXCIgOlxuXHRcdFx0XHRcdGZhbHNlO1xuXHRcdFx0fTtcblx0XHR9LFxuXG5cdFx0XCJDSElMRFwiOiBmdW5jdGlvbiggdHlwZSwgd2hhdCwgYXJndW1lbnQsIGZpcnN0LCBsYXN0ICkge1xuXHRcdFx0dmFyIHNpbXBsZSA9IHR5cGUuc2xpY2UoIDAsIDMgKSAhPT0gXCJudGhcIixcblx0XHRcdFx0Zm9yd2FyZCA9IHR5cGUuc2xpY2UoIC00ICkgIT09IFwibGFzdFwiLFxuXHRcdFx0XHRvZlR5cGUgPSB3aGF0ID09PSBcIm9mLXR5cGVcIjtcblxuXHRcdFx0cmV0dXJuIGZpcnN0ID09PSAxICYmIGxhc3QgPT09IDAgP1xuXG5cdFx0XHRcdC8vIFNob3J0Y3V0IGZvciA6bnRoLSoobilcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0cmV0dXJuICEhZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0XHR9IDpcblxuXHRcdFx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBjYWNoZSwgdW5pcXVlQ2FjaGUsIG91dGVyQ2FjaGUsIG5vZGUsIG5vZGVJbmRleCwgc3RhcnQsXG5cdFx0XHRcdFx0XHRkaXIgPSBzaW1wbGUgIT09IGZvcndhcmQgPyBcIm5leHRTaWJsaW5nXCIgOiBcInByZXZpb3VzU2libGluZ1wiLFxuXHRcdFx0XHRcdFx0cGFyZW50ID0gZWxlbS5wYXJlbnROb2RlLFxuXHRcdFx0XHRcdFx0bmFtZSA9IG9mVHlwZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCksXG5cdFx0XHRcdFx0XHR1c2VDYWNoZSA9ICF4bWwgJiYgIW9mVHlwZSxcblx0XHRcdFx0XHRcdGRpZmYgPSBmYWxzZTtcblxuXHRcdFx0XHRcdGlmICggcGFyZW50ICkge1xuXG5cdFx0XHRcdFx0XHQvLyA6KGZpcnN0fGxhc3R8b25seSktKGNoaWxkfG9mLXR5cGUpXG5cdFx0XHRcdFx0XHRpZiAoIHNpbXBsZSApIHtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCBkaXIgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bm9kZSA9IGVsZW07XG5cdFx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9IG5vZGVbIGRpciBdKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggb2ZUeXBlID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBuYW1lIDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0bm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdC8vIFJldmVyc2UgZGlyZWN0aW9uIGZvciA6b25seS0qIChpZiB3ZSBoYXZlbid0IHlldCBkb25lIHNvKVxuXHRcdFx0XHRcdFx0XHRcdHN0YXJ0ID0gZGlyID0gdHlwZSA9PT0gXCJvbmx5XCIgJiYgIXN0YXJ0ICYmIFwibmV4dFNpYmxpbmdcIjtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0c3RhcnQgPSBbIGZvcndhcmQgPyBwYXJlbnQuZmlyc3RDaGlsZCA6IHBhcmVudC5sYXN0Q2hpbGQgXTtcblxuXHRcdFx0XHRcdFx0Ly8gbm9uLXhtbCA6bnRoLWNoaWxkKC4uLikgc3RvcmVzIGNhY2hlIGRhdGEgb24gYHBhcmVudGBcblx0XHRcdFx0XHRcdGlmICggZm9yd2FyZCAmJiB1c2VDYWNoZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBTZWVrIGBlbGVtYCBmcm9tIGEgcHJldmlvdXNseS1jYWNoZWQgaW5kZXhcblxuXHRcdFx0XHRcdFx0XHQvLyAuLi5pbiBhIGd6aXAtZnJpZW5kbHkgd2F5XG5cdFx0XHRcdFx0XHRcdG5vZGUgPSBwYXJlbnQ7XG5cdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0Y2FjaGUgPSB1bmlxdWVDYWNoZVsgdHlwZSBdIHx8IFtdO1xuXHRcdFx0XHRcdFx0XHRub2RlSW5kZXggPSBjYWNoZVsgMCBdID09PSBkaXJydW5zICYmIGNhY2hlWyAxIF07XG5cdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXggJiYgY2FjaGVbIDIgXTtcblx0XHRcdFx0XHRcdFx0bm9kZSA9IG5vZGVJbmRleCAmJiBwYXJlbnQuY2hpbGROb2Rlc1sgbm9kZUluZGV4IF07XG5cblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAobm9kZSA9ICsrbm9kZUluZGV4ICYmIG5vZGUgJiYgbm9kZVsgZGlyIF0gfHxcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEZhbGxiYWNrIHRvIHNlZWtpbmcgYGVsZW1gIGZyb20gdGhlIHN0YXJ0XG5cdFx0XHRcdFx0XHRcdFx0KGRpZmYgPSBub2RlSW5kZXggPSAwKSB8fCBzdGFydC5wb3AoKSkgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBXaGVuIGZvdW5kLCBjYWNoZSBpbmRleGVzIG9uIGBwYXJlbnRgIGFuZCBicmVha1xuXHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZS5ub2RlVHlwZSA9PT0gMSAmJiArK2RpZmYgJiYgbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIG5vZGVJbmRleCwgZGlmZiBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdC8vIFVzZSBwcmV2aW91c2x5LWNhY2hlZCBlbGVtZW50IGluZGV4IGlmIGF2YWlsYWJsZVxuXHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdC8vIC4uLmluIGEgZ3ppcC1mcmllbmRseSB3YXlcblx0XHRcdFx0XHRcdFx0XHRub2RlID0gZWxlbTtcblx0XHRcdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gbm9kZVsgZXhwYW5kbyBdIHx8IChub2RlWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8OSBvbmx5XG5cdFx0XHRcdFx0XHRcdFx0Ly8gRGVmZW5kIGFnYWluc3QgY2xvbmVkIGF0dHJvcGVydGllcyAoalF1ZXJ5IGdoLTE3MDkpXG5cdFx0XHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gfHxcblx0XHRcdFx0XHRcdFx0XHRcdChvdXRlckNhY2hlWyBub2RlLnVuaXF1ZUlEIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdFx0XHRjYWNoZSA9IHVuaXF1ZUNhY2hlWyB0eXBlIF0gfHwgW107XG5cdFx0XHRcdFx0XHRcdFx0bm9kZUluZGV4ID0gY2FjaGVbIDAgXSA9PT0gZGlycnVucyAmJiBjYWNoZVsgMSBdO1xuXHRcdFx0XHRcdFx0XHRcdGRpZmYgPSBub2RlSW5kZXg7XG5cdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHQvLyB4bWwgOm50aC1jaGlsZCguLi4pXG5cdFx0XHRcdFx0XHRcdC8vIG9yIDpudGgtbGFzdC1jaGlsZCguLi4pIG9yIDpudGgoLWxhc3QpPy1vZi10eXBlKC4uLilcblx0XHRcdFx0XHRcdFx0aWYgKCBkaWZmID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRcdFx0XHQvLyBVc2UgdGhlIHNhbWUgbG9vcCBhcyBhYm92ZSB0byBzZWVrIGBlbGVtYCBmcm9tIHRoZSBzdGFydFxuXHRcdFx0XHRcdFx0XHRcdHdoaWxlICggKG5vZGUgPSArK25vZGVJbmRleCAmJiBub2RlICYmIG5vZGVbIGRpciBdIHx8XG5cdFx0XHRcdFx0XHRcdFx0XHQoZGlmZiA9IG5vZGVJbmRleCA9IDApIHx8IHN0YXJ0LnBvcCgpKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0aWYgKCAoIG9mVHlwZSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZU5hbWUudG9Mb3dlckNhc2UoKSA9PT0gbmFtZSA6XG5cdFx0XHRcdFx0XHRcdFx0XHRcdG5vZGUubm9kZVR5cGUgPT09IDEgKSAmJlxuXHRcdFx0XHRcdFx0XHRcdFx0XHQrK2RpZmYgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gQ2FjaGUgdGhlIGluZGV4IG9mIGVhY2ggZW5jb3VudGVyZWQgZWxlbWVudFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIHVzZUNhY2hlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG91dGVyQ2FjaGUgPSBub2RlWyBleHBhbmRvIF0gfHwgKG5vZGVbIGV4cGFuZG8gXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZlbmQgYWdhaW5zdCBjbG9uZWQgYXR0cm9wZXJ0aWVzIChqUXVlcnkgZ2gtMTcwOSlcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR1bmlxdWVDYWNoZSA9IG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSB8fFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0KG91dGVyQ2FjaGVbIG5vZGUudW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyB0eXBlIF0gPSBbIGRpcnJ1bnMsIGRpZmYgXTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggbm9kZSA9PT0gZWxlbSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBJbmNvcnBvcmF0ZSB0aGUgb2Zmc2V0LCB0aGVuIGNoZWNrIGFnYWluc3QgY3ljbGUgc2l6ZVxuXHRcdFx0XHRcdFx0ZGlmZiAtPSBsYXN0O1xuXHRcdFx0XHRcdFx0cmV0dXJuIGRpZmYgPT09IGZpcnN0IHx8ICggZGlmZiAlIGZpcnN0ID09PSAwICYmIGRpZmYgLyBmaXJzdCA+PSAwICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9O1xuXHRcdH0sXG5cblx0XHRcIlBTRVVET1wiOiBmdW5jdGlvbiggcHNldWRvLCBhcmd1bWVudCApIHtcblx0XHRcdC8vIHBzZXVkby1jbGFzcyBuYW1lcyBhcmUgY2FzZS1pbnNlbnNpdGl2ZVxuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvc2VsZWN0b3JzLyNwc2V1ZG8tY2xhc3Nlc1xuXHRcdFx0Ly8gUHJpb3JpdGl6ZSBieSBjYXNlIHNlbnNpdGl2aXR5IGluIGNhc2UgY3VzdG9tIHBzZXVkb3MgYXJlIGFkZGVkIHdpdGggdXBwZXJjYXNlIGxldHRlcnNcblx0XHRcdC8vIFJlbWVtYmVyIHRoYXQgc2V0RmlsdGVycyBpbmhlcml0cyBmcm9tIHBzZXVkb3Ncblx0XHRcdHZhciBhcmdzLFxuXHRcdFx0XHRmbiA9IEV4cHIucHNldWRvc1sgcHNldWRvIF0gfHwgRXhwci5zZXRGaWx0ZXJzWyBwc2V1ZG8udG9Mb3dlckNhc2UoKSBdIHx8XG5cdFx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIHBzZXVkbzogXCIgKyBwc2V1ZG8gKTtcblxuXHRcdFx0Ly8gVGhlIHVzZXIgbWF5IHVzZSBjcmVhdGVQc2V1ZG8gdG8gaW5kaWNhdGUgdGhhdFxuXHRcdFx0Ly8gYXJndW1lbnRzIGFyZSBuZWVkZWQgdG8gY3JlYXRlIHRoZSBmaWx0ZXIgZnVuY3Rpb25cblx0XHRcdC8vIGp1c3QgYXMgU2l6emxlIGRvZXNcblx0XHRcdGlmICggZm5bIGV4cGFuZG8gXSApIHtcblx0XHRcdFx0cmV0dXJuIGZuKCBhcmd1bWVudCApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBCdXQgbWFpbnRhaW4gc3VwcG9ydCBmb3Igb2xkIHNpZ25hdHVyZXNcblx0XHRcdGlmICggZm4ubGVuZ3RoID4gMSApIHtcblx0XHRcdFx0YXJncyA9IFsgcHNldWRvLCBwc2V1ZG8sIFwiXCIsIGFyZ3VtZW50IF07XG5cdFx0XHRcdHJldHVybiBFeHByLnNldEZpbHRlcnMuaGFzT3duUHJvcGVydHkoIHBzZXVkby50b0xvd2VyQ2FzZSgpICkgP1xuXHRcdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcyApIHtcblx0XHRcdFx0XHRcdHZhciBpZHgsXG5cdFx0XHRcdFx0XHRcdG1hdGNoZWQgPSBmbiggc2VlZCwgYXJndW1lbnQgKSxcblx0XHRcdFx0XHRcdFx0aSA9IG1hdGNoZWQubGVuZ3RoO1xuXHRcdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdFx0XHRcdGlkeCA9IGluZGV4T2YoIHNlZWQsIG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdFx0c2VlZFsgaWR4IF0gPSAhKCBtYXRjaGVzWyBpZHggXSA9IG1hdGNoZWRbaV0gKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9KSA6XG5cdFx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZm4oIGVsZW0sIDAsIGFyZ3MgKTtcblx0XHRcdFx0XHR9O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gZm47XG5cdFx0fVxuXHR9LFxuXG5cdHBzZXVkb3M6IHtcblx0XHQvLyBQb3RlbnRpYWxseSBjb21wbGV4IHBzZXVkb3Ncblx0XHRcIm5vdFwiOiBtYXJrRnVuY3Rpb24oZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdFx0Ly8gVHJpbSB0aGUgc2VsZWN0b3IgcGFzc2VkIHRvIGNvbXBpbGVcblx0XHRcdC8vIHRvIGF2b2lkIHRyZWF0aW5nIGxlYWRpbmcgYW5kIHRyYWlsaW5nXG5cdFx0XHQvLyBzcGFjZXMgYXMgY29tYmluYXRvcnNcblx0XHRcdHZhciBpbnB1dCA9IFtdLFxuXHRcdFx0XHRyZXN1bHRzID0gW10sXG5cdFx0XHRcdG1hdGNoZXIgPSBjb21waWxlKCBzZWxlY3Rvci5yZXBsYWNlKCBydHJpbSwgXCIkMVwiICkgKTtcblxuXHRcdFx0cmV0dXJuIG1hdGNoZXJbIGV4cGFuZG8gXSA/XG5cdFx0XHRcdG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgbWF0Y2hlcywgY29udGV4dCwgeG1sICkge1xuXHRcdFx0XHRcdHZhciBlbGVtLFxuXHRcdFx0XHRcdFx0dW5tYXRjaGVkID0gbWF0Y2hlciggc2VlZCwgbnVsbCwgeG1sLCBbXSApLFxuXHRcdFx0XHRcdFx0aSA9IHNlZWQubGVuZ3RoO1xuXG5cdFx0XHRcdFx0Ly8gTWF0Y2ggZWxlbWVudHMgdW5tYXRjaGVkIGJ5IGBtYXRjaGVyYFxuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRcdFx0XHRcdHNlZWRbaV0gPSAhKG1hdGNoZXNbaV0gPSBlbGVtKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0pIDpcblx0XHRcdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdFx0XHRpbnB1dFswXSA9IGVsZW07XG5cdFx0XHRcdFx0bWF0Y2hlciggaW5wdXQsIG51bGwsIHhtbCwgcmVzdWx0cyApO1xuXHRcdFx0XHRcdC8vIERvbid0IGtlZXAgdGhlIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRcdFx0aW5wdXRbMF0gPSBudWxsO1xuXHRcdFx0XHRcdHJldHVybiAhcmVzdWx0cy5wb3AoKTtcblx0XHRcdFx0fTtcblx0XHR9KSxcblxuXHRcdFwiaGFzXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiBTaXp6bGUoIHNlbGVjdG9yLCBlbGVtICkubGVuZ3RoID4gMDtcblx0XHRcdH07XG5cdFx0fSksXG5cblx0XHRcImNvbnRhaW5zXCI6IG1hcmtGdW5jdGlvbihmdW5jdGlvbiggdGV4dCApIHtcblx0XHRcdHRleHQgPSB0ZXh0LnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICk7XG5cdFx0XHRyZXR1cm4gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRcdHJldHVybiAoIGVsZW0udGV4dENvbnRlbnQgfHwgZWxlbS5pbm5lclRleHQgfHwgZ2V0VGV4dCggZWxlbSApICkuaW5kZXhPZiggdGV4dCApID4gLTE7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gXCJXaGV0aGVyIGFuIGVsZW1lbnQgaXMgcmVwcmVzZW50ZWQgYnkgYSA6bGFuZygpIHNlbGVjdG9yXG5cdFx0Ly8gaXMgYmFzZWQgc29sZWx5IG9uIHRoZSBlbGVtZW50J3MgbGFuZ3VhZ2UgdmFsdWVcblx0XHQvLyBiZWluZyBlcXVhbCB0byB0aGUgaWRlbnRpZmllciBDLFxuXHRcdC8vIG9yIGJlZ2lubmluZyB3aXRoIHRoZSBpZGVudGlmaWVyIEMgaW1tZWRpYXRlbHkgZm9sbG93ZWQgYnkgXCItXCIuXG5cdFx0Ly8gVGhlIG1hdGNoaW5nIG9mIEMgYWdhaW5zdCB0aGUgZWxlbWVudCdzIGxhbmd1YWdlIHZhbHVlIGlzIHBlcmZvcm1lZCBjYXNlLWluc2Vuc2l0aXZlbHkuXG5cdFx0Ly8gVGhlIGlkZW50aWZpZXIgQyBkb2VzIG5vdCBoYXZlIHRvIGJlIGEgdmFsaWQgbGFuZ3VhZ2UgbmFtZS5cIlxuXHRcdC8vIGh0dHA6Ly93d3cudzMub3JnL1RSL3NlbGVjdG9ycy8jbGFuZy1wc2V1ZG9cblx0XHRcImxhbmdcIjogbWFya0Z1bmN0aW9uKCBmdW5jdGlvbiggbGFuZyApIHtcblx0XHRcdC8vIGxhbmcgdmFsdWUgbXVzdCBiZSBhIHZhbGlkIGlkZW50aWZpZXJcblx0XHRcdGlmICggIXJpZGVudGlmaWVyLnRlc3QobGFuZyB8fCBcIlwiKSApIHtcblx0XHRcdFx0U2l6emxlLmVycm9yKCBcInVuc3VwcG9ydGVkIGxhbmc6IFwiICsgbGFuZyApO1xuXHRcdFx0fVxuXHRcdFx0bGFuZyA9IGxhbmcucmVwbGFjZSggcnVuZXNjYXBlLCBmdW5lc2NhcGUgKS50b0xvd2VyQ2FzZSgpO1xuXHRcdFx0cmV0dXJuIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0XHR2YXIgZWxlbUxhbmc7XG5cdFx0XHRcdGRvIHtcblx0XHRcdFx0XHRpZiAoIChlbGVtTGFuZyA9IGRvY3VtZW50SXNIVE1MID9cblx0XHRcdFx0XHRcdGVsZW0ubGFuZyA6XG5cdFx0XHRcdFx0XHRlbGVtLmdldEF0dHJpYnV0ZShcInhtbDpsYW5nXCIpIHx8IGVsZW0uZ2V0QXR0cmlidXRlKFwibGFuZ1wiKSkgKSB7XG5cblx0XHRcdFx0XHRcdGVsZW1MYW5nID0gZWxlbUxhbmcudG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0XHRcdHJldHVybiBlbGVtTGFuZyA9PT0gbGFuZyB8fCBlbGVtTGFuZy5pbmRleE9mKCBsYW5nICsgXCItXCIgKSA9PT0gMDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH0gd2hpbGUgKCAoZWxlbSA9IGVsZW0ucGFyZW50Tm9kZSkgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApO1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9O1xuXHRcdH0pLFxuXG5cdFx0Ly8gTWlzY2VsbGFuZW91c1xuXHRcdFwidGFyZ2V0XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIGhhc2ggPSB3aW5kb3cubG9jYXRpb24gJiYgd2luZG93LmxvY2F0aW9uLmhhc2g7XG5cdFx0XHRyZXR1cm4gaGFzaCAmJiBoYXNoLnNsaWNlKCAxICkgPT09IGVsZW0uaWQ7XG5cdFx0fSxcblxuXHRcdFwicm9vdFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBkb2NFbGVtO1xuXHRcdH0sXG5cblx0XHRcImZvY3VzXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGVsZW0gPT09IGRvY3VtZW50LmFjdGl2ZUVsZW1lbnQgJiYgKCFkb2N1bWVudC5oYXNGb2N1cyB8fCBkb2N1bWVudC5oYXNGb2N1cygpKSAmJiAhIShlbGVtLnR5cGUgfHwgZWxlbS5ocmVmIHx8IH5lbGVtLnRhYkluZGV4KTtcblx0XHR9LFxuXG5cdFx0Ly8gQm9vbGVhbiBwcm9wZXJ0aWVzXG5cdFx0XCJlbmFibGVkXCI6IGNyZWF0ZURpc2FibGVkUHNldWRvKCBmYWxzZSApLFxuXHRcdFwiZGlzYWJsZWRcIjogY3JlYXRlRGlzYWJsZWRQc2V1ZG8oIHRydWUgKSxcblxuXHRcdFwiY2hlY2tlZFwiOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdC8vIEluIENTUzMsIDpjaGVja2VkIHNob3VsZCByZXR1cm4gYm90aCBjaGVja2VkIGFuZCBzZWxlY3RlZCBlbGVtZW50c1xuXHRcdFx0Ly8gaHR0cDovL3d3dy53My5vcmcvVFIvMjAxMS9SRUMtY3NzMy1zZWxlY3RvcnMtMjAxMTA5MjkvI2NoZWNrZWRcblx0XHRcdHZhciBub2RlTmFtZSA9IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblx0XHRcdHJldHVybiAobm9kZU5hbWUgPT09IFwiaW5wdXRcIiAmJiAhIWVsZW0uY2hlY2tlZCkgfHwgKG5vZGVOYW1lID09PSBcIm9wdGlvblwiICYmICEhZWxlbS5zZWxlY3RlZCk7XG5cdFx0fSxcblxuXHRcdFwic2VsZWN0ZWRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBBY2Nlc3NpbmcgdGhpcyBwcm9wZXJ0eSBtYWtlcyBzZWxlY3RlZC1ieS1kZWZhdWx0XG5cdFx0XHQvLyBvcHRpb25zIGluIFNhZmFyaSB3b3JrIHByb3Blcmx5XG5cdFx0XHRpZiAoIGVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZWxlbS5wYXJlbnROb2RlLnNlbGVjdGVkSW5kZXg7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBlbGVtLnNlbGVjdGVkID09PSB0cnVlO1xuXHRcdH0sXG5cblx0XHQvLyBDb250ZW50c1xuXHRcdFwiZW1wdHlcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHQvLyBodHRwOi8vd3d3LnczLm9yZy9UUi9zZWxlY3RvcnMvI2VtcHR5LXBzZXVkb1xuXHRcdFx0Ly8gOmVtcHR5IGlzIG5lZ2F0ZWQgYnkgZWxlbWVudCAoMSkgb3IgY29udGVudCBub2RlcyAodGV4dDogMzsgY2RhdGE6IDQ7IGVudGl0eSByZWY6IDUpLFxuXHRcdFx0Ly8gICBidXQgbm90IGJ5IG90aGVycyAoY29tbWVudDogODsgcHJvY2Vzc2luZyBpbnN0cnVjdGlvbjogNzsgZXRjLilcblx0XHRcdC8vIG5vZGVUeXBlIDwgNiB3b3JrcyBiZWNhdXNlIGF0dHJpYnV0ZXMgKDIpIGRvIG5vdCBhcHBlYXIgYXMgY2hpbGRyZW5cblx0XHRcdGZvciAoIGVsZW0gPSBlbGVtLmZpcnN0Q2hpbGQ7IGVsZW07IGVsZW0gPSBlbGVtLm5leHRTaWJsaW5nICkge1xuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPCA2ICkge1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0fSxcblxuXHRcdFwicGFyZW50XCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICFFeHByLnBzZXVkb3NbXCJlbXB0eVwiXSggZWxlbSApO1xuXHRcdH0sXG5cblx0XHQvLyBFbGVtZW50L2lucHV0IHR5cGVzXG5cdFx0XCJoZWFkZXJcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmhlYWRlci50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiaW5wdXRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4gcmlucHV0cy50ZXN0KCBlbGVtLm5vZGVOYW1lICk7XG5cdFx0fSxcblxuXHRcdFwiYnV0dG9uXCI6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0dmFyIG5hbWUgPSBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCk7XG5cdFx0XHRyZXR1cm4gbmFtZSA9PT0gXCJpbnB1dFwiICYmIGVsZW0udHlwZSA9PT0gXCJidXR0b25cIiB8fCBuYW1lID09PSBcImJ1dHRvblwiO1xuXHRcdH0sXG5cblx0XHRcInRleHRcIjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgYXR0cjtcblx0XHRcdHJldHVybiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwiaW5wdXRcIiAmJlxuXHRcdFx0XHRlbGVtLnR5cGUgPT09IFwidGV4dFwiICYmXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogSUU8OFxuXHRcdFx0XHQvLyBOZXcgSFRNTDUgYXR0cmlidXRlIHZhbHVlcyAoZS5nLiwgXCJzZWFyY2hcIikgYXBwZWFyIHdpdGggZWxlbS50eXBlID09PSBcInRleHRcIlxuXHRcdFx0XHQoIChhdHRyID0gZWxlbS5nZXRBdHRyaWJ1dGUoXCJ0eXBlXCIpKSA9PSBudWxsIHx8IGF0dHIudG9Mb3dlckNhc2UoKSA9PT0gXCJ0ZXh0XCIgKTtcblx0XHR9LFxuXG5cdFx0Ly8gUG9zaXRpb24taW4tY29sbGVjdGlvblxuXHRcdFwiZmlyc3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbigpIHtcblx0XHRcdHJldHVybiBbIDAgXTtcblx0XHR9KSxcblxuXHRcdFwibGFzdFwiOiBjcmVhdGVQb3NpdGlvbmFsUHNldWRvKGZ1bmN0aW9uKCBtYXRjaEluZGV4ZXMsIGxlbmd0aCApIHtcblx0XHRcdHJldHVybiBbIGxlbmd0aCAtIDEgXTtcblx0XHR9KSxcblxuXHRcdFwiZXFcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0cmV0dXJuIFsgYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudCBdO1xuXHRcdH0pLFxuXG5cdFx0XCJldmVuXCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoICkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuZ3RoOyBpICs9IDIgKSB7XG5cdFx0XHRcdG1hdGNoSW5kZXhlcy5wdXNoKCBpICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gbWF0Y2hJbmRleGVzO1xuXHRcdH0pLFxuXG5cdFx0XCJvZGRcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGggKSB7XG5cdFx0XHR2YXIgaSA9IDE7XG5cdFx0XHRmb3IgKCA7IGkgPCBsZW5ndGg7IGkgKz0gMiApIHtcblx0XHRcdFx0bWF0Y2hJbmRleGVzLnB1c2goIGkgKTtcblx0XHRcdH1cblx0XHRcdHJldHVybiBtYXRjaEluZGV4ZXM7XG5cdFx0fSksXG5cblx0XHRcImx0XCI6IGNyZWF0ZVBvc2l0aW9uYWxQc2V1ZG8oZnVuY3Rpb24oIG1hdGNoSW5kZXhlcywgbGVuZ3RoLCBhcmd1bWVudCApIHtcblx0XHRcdHZhciBpID0gYXJndW1lbnQgPCAwID8gYXJndW1lbnQgKyBsZW5ndGggOiBhcmd1bWVudDtcblx0XHRcdGZvciAoIDsgLS1pID49IDA7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KSxcblxuXHRcdFwiZ3RcIjogY3JlYXRlUG9zaXRpb25hbFBzZXVkbyhmdW5jdGlvbiggbWF0Y2hJbmRleGVzLCBsZW5ndGgsIGFyZ3VtZW50ICkge1xuXHRcdFx0dmFyIGkgPSBhcmd1bWVudCA8IDAgPyBhcmd1bWVudCArIGxlbmd0aCA6IGFyZ3VtZW50O1xuXHRcdFx0Zm9yICggOyArK2kgPCBsZW5ndGg7ICkge1xuXHRcdFx0XHRtYXRjaEluZGV4ZXMucHVzaCggaSApO1xuXHRcdFx0fVxuXHRcdFx0cmV0dXJuIG1hdGNoSW5kZXhlcztcblx0XHR9KVxuXHR9XG59O1xuXG5FeHByLnBzZXVkb3NbXCJudGhcIl0gPSBFeHByLnBzZXVkb3NbXCJlcVwiXTtcblxuLy8gQWRkIGJ1dHRvbi9pbnB1dCB0eXBlIHBzZXVkb3NcbmZvciAoIGkgaW4geyByYWRpbzogdHJ1ZSwgY2hlY2tib3g6IHRydWUsIGZpbGU6IHRydWUsIHBhc3N3b3JkOiB0cnVlLCBpbWFnZTogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUlucHV0UHNldWRvKCBpICk7XG59XG5mb3IgKCBpIGluIHsgc3VibWl0OiB0cnVlLCByZXNldDogdHJ1ZSB9ICkge1xuXHRFeHByLnBzZXVkb3NbIGkgXSA9IGNyZWF0ZUJ1dHRvblBzZXVkbyggaSApO1xufVxuXG4vLyBFYXN5IEFQSSBmb3IgY3JlYXRpbmcgbmV3IHNldEZpbHRlcnNcbmZ1bmN0aW9uIHNldEZpbHRlcnMoKSB7fVxuc2V0RmlsdGVycy5wcm90b3R5cGUgPSBFeHByLmZpbHRlcnMgPSBFeHByLnBzZXVkb3M7XG5FeHByLnNldEZpbHRlcnMgPSBuZXcgc2V0RmlsdGVycygpO1xuXG50b2tlbml6ZSA9IFNpenpsZS50b2tlbml6ZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgcGFyc2VPbmx5ICkge1xuXHR2YXIgbWF0Y2hlZCwgbWF0Y2gsIHRva2VucywgdHlwZSxcblx0XHRzb0ZhciwgZ3JvdXBzLCBwcmVGaWx0ZXJzLFxuXHRcdGNhY2hlZCA9IHRva2VuQ2FjaGVbIHNlbGVjdG9yICsgXCIgXCIgXTtcblxuXHRpZiAoIGNhY2hlZCApIHtcblx0XHRyZXR1cm4gcGFyc2VPbmx5ID8gMCA6IGNhY2hlZC5zbGljZSggMCApO1xuXHR9XG5cblx0c29GYXIgPSBzZWxlY3Rvcjtcblx0Z3JvdXBzID0gW107XG5cdHByZUZpbHRlcnMgPSBFeHByLnByZUZpbHRlcjtcblxuXHR3aGlsZSAoIHNvRmFyICkge1xuXG5cdFx0Ly8gQ29tbWEgYW5kIGZpcnN0IHJ1blxuXHRcdGlmICggIW1hdGNoZWQgfHwgKG1hdGNoID0gcmNvbW1hLmV4ZWMoIHNvRmFyICkpICkge1xuXHRcdFx0aWYgKCBtYXRjaCApIHtcblx0XHRcdFx0Ly8gRG9uJ3QgY29uc3VtZSB0cmFpbGluZyBjb21tYXMgYXMgdmFsaWRcblx0XHRcdFx0c29GYXIgPSBzb0Zhci5zbGljZSggbWF0Y2hbMF0ubGVuZ3RoICkgfHwgc29GYXI7XG5cdFx0XHR9XG5cdFx0XHRncm91cHMucHVzaCggKHRva2VucyA9IFtdKSApO1xuXHRcdH1cblxuXHRcdG1hdGNoZWQgPSBmYWxzZTtcblxuXHRcdC8vIENvbWJpbmF0b3JzXG5cdFx0aWYgKCAobWF0Y2ggPSByY29tYmluYXRvcnMuZXhlYyggc29GYXIgKSkgKSB7XG5cdFx0XHRtYXRjaGVkID0gbWF0Y2guc2hpZnQoKTtcblx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0dmFsdWU6IG1hdGNoZWQsXG5cdFx0XHRcdC8vIENhc3QgZGVzY2VuZGFudCBjb21iaW5hdG9ycyB0byBzcGFjZVxuXHRcdFx0XHR0eXBlOiBtYXRjaFswXS5yZXBsYWNlKCBydHJpbSwgXCIgXCIgKVxuXHRcdFx0fSk7XG5cdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdH1cblxuXHRcdC8vIEZpbHRlcnNcblx0XHRmb3IgKCB0eXBlIGluIEV4cHIuZmlsdGVyICkge1xuXHRcdFx0aWYgKCAobWF0Y2ggPSBtYXRjaEV4cHJbIHR5cGUgXS5leGVjKCBzb0ZhciApKSAmJiAoIXByZUZpbHRlcnNbIHR5cGUgXSB8fFxuXHRcdFx0XHQobWF0Y2ggPSBwcmVGaWx0ZXJzWyB0eXBlIF0oIG1hdGNoICkpKSApIHtcblx0XHRcdFx0bWF0Y2hlZCA9IG1hdGNoLnNoaWZ0KCk7XG5cdFx0XHRcdHRva2Vucy5wdXNoKHtcblx0XHRcdFx0XHR2YWx1ZTogbWF0Y2hlZCxcblx0XHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRcdG1hdGNoZXM6IG1hdGNoXG5cdFx0XHRcdH0pO1xuXHRcdFx0XHRzb0ZhciA9IHNvRmFyLnNsaWNlKCBtYXRjaGVkLmxlbmd0aCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggIW1hdGNoZWQgKSB7XG5cdFx0XHRicmVhaztcblx0XHR9XG5cdH1cblxuXHQvLyBSZXR1cm4gdGhlIGxlbmd0aCBvZiB0aGUgaW52YWxpZCBleGNlc3Ncblx0Ly8gaWYgd2UncmUganVzdCBwYXJzaW5nXG5cdC8vIE90aGVyd2lzZSwgdGhyb3cgYW4gZXJyb3Igb3IgcmV0dXJuIHRva2Vuc1xuXHRyZXR1cm4gcGFyc2VPbmx5ID9cblx0XHRzb0Zhci5sZW5ndGggOlxuXHRcdHNvRmFyID9cblx0XHRcdFNpenpsZS5lcnJvciggc2VsZWN0b3IgKSA6XG5cdFx0XHQvLyBDYWNoZSB0aGUgdG9rZW5zXG5cdFx0XHR0b2tlbkNhY2hlKCBzZWxlY3RvciwgZ3JvdXBzICkuc2xpY2UoIDAgKTtcbn07XG5cbmZ1bmN0aW9uIHRvU2VsZWN0b3IoIHRva2VucyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IHRva2Vucy5sZW5ndGgsXG5cdFx0c2VsZWN0b3IgPSBcIlwiO1xuXHRmb3IgKCA7IGkgPCBsZW47IGkrKyApIHtcblx0XHRzZWxlY3RvciArPSB0b2tlbnNbaV0udmFsdWU7XG5cdH1cblx0cmV0dXJuIHNlbGVjdG9yO1xufVxuXG5mdW5jdGlvbiBhZGRDb21iaW5hdG9yKCBtYXRjaGVyLCBjb21iaW5hdG9yLCBiYXNlICkge1xuXHR2YXIgZGlyID0gY29tYmluYXRvci5kaXIsXG5cdFx0c2tpcCA9IGNvbWJpbmF0b3IubmV4dCxcblx0XHRrZXkgPSBza2lwIHx8IGRpcixcblx0XHRjaGVja05vbkVsZW1lbnRzID0gYmFzZSAmJiBrZXkgPT09IFwicGFyZW50Tm9kZVwiLFxuXHRcdGRvbmVOYW1lID0gZG9uZSsrO1xuXG5cdHJldHVybiBjb21iaW5hdG9yLmZpcnN0ID9cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGNsb3Nlc3QgYW5jZXN0b3IvcHJlY2VkaW5nIGVsZW1lbnRcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0d2hpbGUgKCAoZWxlbSA9IGVsZW1bIGRpciBdKSApIHtcblx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fSA6XG5cblx0XHQvLyBDaGVjayBhZ2FpbnN0IGFsbCBhbmNlc3Rvci9wcmVjZWRpbmcgZWxlbWVudHNcblx0XHRmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIG9sZENhY2hlLCB1bmlxdWVDYWNoZSwgb3V0ZXJDYWNoZSxcblx0XHRcdFx0bmV3Q2FjaGUgPSBbIGRpcnJ1bnMsIGRvbmVOYW1lIF07XG5cblx0XHRcdC8vIFdlIGNhbid0IHNldCBhcmJpdHJhcnkgZGF0YSBvbiBYTUwgbm9kZXMsIHNvIHRoZXkgZG9uJ3QgYmVuZWZpdCBmcm9tIGNvbWJpbmF0b3IgY2FjaGluZ1xuXHRcdFx0aWYgKCB4bWwgKSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZXIoIGVsZW0sIGNvbnRleHQsIHhtbCApICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHdoaWxlICggKGVsZW0gPSBlbGVtWyBkaXIgXSkgKSB7XG5cdFx0XHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGNoZWNrTm9uRWxlbWVudHMgKSB7XG5cdFx0XHRcdFx0XHRvdXRlckNhY2hlID0gZWxlbVsgZXhwYW5kbyBdIHx8IChlbGVtWyBleHBhbmRvIF0gPSB7fSk7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDw5IG9ubHlcblx0XHRcdFx0XHRcdC8vIERlZmVuZCBhZ2FpbnN0IGNsb25lZCBhdHRyb3BlcnRpZXMgKGpRdWVyeSBnaC0xNzA5KVxuXHRcdFx0XHRcdFx0dW5pcXVlQ2FjaGUgPSBvdXRlckNhY2hlWyBlbGVtLnVuaXF1ZUlEIF0gfHwgKG91dGVyQ2FjaGVbIGVsZW0udW5pcXVlSUQgXSA9IHt9KTtcblxuXHRcdFx0XHRcdFx0aWYgKCBza2lwICYmIHNraXAgPT09IGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0ZWxlbSA9IGVsZW1bIGRpciBdIHx8IGVsZW07XG5cdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCAob2xkQ2FjaGUgPSB1bmlxdWVDYWNoZVsga2V5IF0pICYmXG5cdFx0XHRcdFx0XHRcdG9sZENhY2hlWyAwIF0gPT09IGRpcnJ1bnMgJiYgb2xkQ2FjaGVbIDEgXSA9PT0gZG9uZU5hbWUgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQXNzaWduIHRvIG5ld0NhY2hlIHNvIHJlc3VsdHMgYmFjay1wcm9wYWdhdGUgdG8gcHJldmlvdXMgZWxlbWVudHNcblx0XHRcdFx0XHRcdFx0cmV0dXJuIChuZXdDYWNoZVsgMiBdID0gb2xkQ2FjaGVbIDIgXSk7XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXVzZSBuZXdjYWNoZSBzbyByZXN1bHRzIGJhY2stcHJvcGFnYXRlIHRvIHByZXZpb3VzIGVsZW1lbnRzXG5cdFx0XHRcdFx0XHRcdHVuaXF1ZUNhY2hlWyBrZXkgXSA9IG5ld0NhY2hlO1xuXG5cdFx0XHRcdFx0XHRcdC8vIEEgbWF0Y2ggbWVhbnMgd2UncmUgZG9uZTsgYSBmYWlsIG1lYW5zIHdlIGhhdmUgdG8ga2VlcCBjaGVja2luZ1xuXHRcdFx0XHRcdFx0XHRpZiAoIChuZXdDYWNoZVsgMiBdID0gbWF0Y2hlciggZWxlbSwgY29udGV4dCwgeG1sICkpICkge1xuXHRcdFx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0fTtcbn1cblxuZnVuY3Rpb24gZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICkge1xuXHRyZXR1cm4gbWF0Y2hlcnMubGVuZ3RoID4gMSA/XG5cdFx0ZnVuY3Rpb24oIGVsZW0sIGNvbnRleHQsIHhtbCApIHtcblx0XHRcdHZhciBpID0gbWF0Y2hlcnMubGVuZ3RoO1xuXHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRcdGlmICggIW1hdGNoZXJzW2ldKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiB0cnVlO1xuXHRcdH0gOlxuXHRcdG1hdGNoZXJzWzBdO1xufVxuXG5mdW5jdGlvbiBtdWx0aXBsZUNvbnRleHRzKCBzZWxlY3RvciwgY29udGV4dHMsIHJlc3VsdHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsZW4gPSBjb250ZXh0cy5sZW5ndGg7XG5cdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFNpenpsZSggc2VsZWN0b3IsIGNvbnRleHRzW2ldLCByZXN1bHRzICk7XG5cdH1cblx0cmV0dXJuIHJlc3VsdHM7XG59XG5cbmZ1bmN0aW9uIGNvbmRlbnNlKCB1bm1hdGNoZWQsIG1hcCwgZmlsdGVyLCBjb250ZXh0LCB4bWwgKSB7XG5cdHZhciBlbGVtLFxuXHRcdG5ld1VubWF0Y2hlZCA9IFtdLFxuXHRcdGkgPSAwLFxuXHRcdGxlbiA9IHVubWF0Y2hlZC5sZW5ndGgsXG5cdFx0bWFwcGVkID0gbWFwICE9IG51bGw7XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAoZWxlbSA9IHVubWF0Y2hlZFtpXSkgKSB7XG5cdFx0XHRpZiAoICFmaWx0ZXIgfHwgZmlsdGVyKCBlbGVtLCBjb250ZXh0LCB4bWwgKSApIHtcblx0XHRcdFx0bmV3VW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0aWYgKCBtYXBwZWQgKSB7XG5cdFx0XHRcdFx0bWFwLnB1c2goIGkgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdHJldHVybiBuZXdVbm1hdGNoZWQ7XG59XG5cbmZ1bmN0aW9uIHNldE1hdGNoZXIoIHByZUZpbHRlciwgc2VsZWN0b3IsIG1hdGNoZXIsIHBvc3RGaWx0ZXIsIHBvc3RGaW5kZXIsIHBvc3RTZWxlY3RvciApIHtcblx0aWYgKCBwb3N0RmlsdGVyICYmICFwb3N0RmlsdGVyWyBleHBhbmRvIF0gKSB7XG5cdFx0cG9zdEZpbHRlciA9IHNldE1hdGNoZXIoIHBvc3RGaWx0ZXIgKTtcblx0fVxuXHRpZiAoIHBvc3RGaW5kZXIgJiYgIXBvc3RGaW5kZXJbIGV4cGFuZG8gXSApIHtcblx0XHRwb3N0RmluZGVyID0gc2V0TWF0Y2hlciggcG9zdEZpbmRlciwgcG9zdFNlbGVjdG9yICk7XG5cdH1cblx0cmV0dXJuIG1hcmtGdW5jdGlvbihmdW5jdGlvbiggc2VlZCwgcmVzdWx0cywgY29udGV4dCwgeG1sICkge1xuXHRcdHZhciB0ZW1wLCBpLCBlbGVtLFxuXHRcdFx0cHJlTWFwID0gW10sXG5cdFx0XHRwb3N0TWFwID0gW10sXG5cdFx0XHRwcmVleGlzdGluZyA9IHJlc3VsdHMubGVuZ3RoLFxuXG5cdFx0XHQvLyBHZXQgaW5pdGlhbCBlbGVtZW50cyBmcm9tIHNlZWQgb3IgY29udGV4dFxuXHRcdFx0ZWxlbXMgPSBzZWVkIHx8IG11bHRpcGxlQ29udGV4dHMoIHNlbGVjdG9yIHx8IFwiKlwiLCBjb250ZXh0Lm5vZGVUeXBlID8gWyBjb250ZXh0IF0gOiBjb250ZXh0LCBbXSApLFxuXG5cdFx0XHQvLyBQcmVmaWx0ZXIgdG8gZ2V0IG1hdGNoZXIgaW5wdXQsIHByZXNlcnZpbmcgYSBtYXAgZm9yIHNlZWQtcmVzdWx0cyBzeW5jaHJvbml6YXRpb25cblx0XHRcdG1hdGNoZXJJbiA9IHByZUZpbHRlciAmJiAoIHNlZWQgfHwgIXNlbGVjdG9yICkgP1xuXHRcdFx0XHRjb25kZW5zZSggZWxlbXMsIHByZU1hcCwgcHJlRmlsdGVyLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdGVsZW1zLFxuXG5cdFx0XHRtYXRjaGVyT3V0ID0gbWF0Y2hlciA/XG5cdFx0XHRcdC8vIElmIHdlIGhhdmUgYSBwb3N0RmluZGVyLCBvciBmaWx0ZXJlZCBzZWVkLCBvciBub24tc2VlZCBwb3N0RmlsdGVyIG9yIHByZWV4aXN0aW5nIHJlc3VsdHMsXG5cdFx0XHRcdHBvc3RGaW5kZXIgfHwgKCBzZWVkID8gcHJlRmlsdGVyIDogcHJlZXhpc3RpbmcgfHwgcG9zdEZpbHRlciApID9cblxuXHRcdFx0XHRcdC8vIC4uLmludGVybWVkaWF0ZSBwcm9jZXNzaW5nIGlzIG5lY2Vzc2FyeVxuXHRcdFx0XHRcdFtdIDpcblxuXHRcdFx0XHRcdC8vIC4uLm90aGVyd2lzZSB1c2UgcmVzdWx0cyBkaXJlY3RseVxuXHRcdFx0XHRcdHJlc3VsdHMgOlxuXHRcdFx0XHRtYXRjaGVySW47XG5cblx0XHQvLyBGaW5kIHByaW1hcnkgbWF0Y2hlc1xuXHRcdGlmICggbWF0Y2hlciApIHtcblx0XHRcdG1hdGNoZXIoIG1hdGNoZXJJbiwgbWF0Y2hlck91dCwgY29udGV4dCwgeG1sICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcG9zdEZpbHRlclxuXHRcdGlmICggcG9zdEZpbHRlciApIHtcblx0XHRcdHRlbXAgPSBjb25kZW5zZSggbWF0Y2hlck91dCwgcG9zdE1hcCApO1xuXHRcdFx0cG9zdEZpbHRlciggdGVtcCwgW10sIGNvbnRleHQsIHhtbCApO1xuXG5cdFx0XHQvLyBVbi1tYXRjaCBmYWlsaW5nIGVsZW1lbnRzIGJ5IG1vdmluZyB0aGVtIGJhY2sgdG8gbWF0Y2hlckluXG5cdFx0XHRpID0gdGVtcC5sZW5ndGg7XG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0aWYgKCAoZWxlbSA9IHRlbXBbaV0pICkge1xuXHRcdFx0XHRcdG1hdGNoZXJPdXRbIHBvc3RNYXBbaV0gXSA9ICEobWF0Y2hlckluWyBwb3N0TWFwW2ldIF0gPSBlbGVtKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblxuXHRcdGlmICggc2VlZCApIHtcblx0XHRcdGlmICggcG9zdEZpbmRlciB8fCBwcmVGaWx0ZXIgKSB7XG5cdFx0XHRcdGlmICggcG9zdEZpbmRlciApIHtcblx0XHRcdFx0XHQvLyBHZXQgdGhlIGZpbmFsIG1hdGNoZXJPdXQgYnkgY29uZGVuc2luZyB0aGlzIGludGVybWVkaWF0ZSBpbnRvIHBvc3RGaW5kZXIgY29udGV4dHNcblx0XHRcdFx0XHR0ZW1wID0gW107XG5cdFx0XHRcdFx0aSA9IG1hdGNoZXJPdXQubGVuZ3RoO1xuXHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0aWYgKCAoZWxlbSA9IG1hdGNoZXJPdXRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHQvLyBSZXN0b3JlIG1hdGNoZXJJbiBzaW5jZSBlbGVtIGlzIG5vdCB5ZXQgYSBmaW5hbCBtYXRjaFxuXHRcdFx0XHRcdFx0XHR0ZW1wLnB1c2goIChtYXRjaGVySW5baV0gPSBlbGVtKSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHRwb3N0RmluZGVyKCBudWxsLCAobWF0Y2hlck91dCA9IFtdKSwgdGVtcCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBNb3ZlIG1hdGNoZWQgZWxlbWVudHMgZnJvbSBzZWVkIHRvIHJlc3VsdHMgdG8ga2VlcCB0aGVtIHN5bmNocm9uaXplZFxuXHRcdFx0XHRpID0gbWF0Y2hlck91dC5sZW5ndGg7XG5cdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdGlmICggKGVsZW0gPSBtYXRjaGVyT3V0W2ldKSAmJlxuXHRcdFx0XHRcdFx0KHRlbXAgPSBwb3N0RmluZGVyID8gaW5kZXhPZiggc2VlZCwgZWxlbSApIDogcHJlTWFwW2ldKSA+IC0xICkge1xuXG5cdFx0XHRcdFx0XHRzZWVkW3RlbXBdID0gIShyZXN1bHRzW3RlbXBdID0gZWxlbSk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHQvLyBBZGQgZWxlbWVudHMgdG8gcmVzdWx0cywgdGhyb3VnaCBwb3N0RmluZGVyIGlmIGRlZmluZWRcblx0XHR9IGVsc2Uge1xuXHRcdFx0bWF0Y2hlck91dCA9IGNvbmRlbnNlKFxuXHRcdFx0XHRtYXRjaGVyT3V0ID09PSByZXN1bHRzID9cblx0XHRcdFx0XHRtYXRjaGVyT3V0LnNwbGljZSggcHJlZXhpc3RpbmcsIG1hdGNoZXJPdXQubGVuZ3RoICkgOlxuXHRcdFx0XHRcdG1hdGNoZXJPdXRcblx0XHRcdCk7XG5cdFx0XHRpZiAoIHBvc3RGaW5kZXIgKSB7XG5cdFx0XHRcdHBvc3RGaW5kZXIoIG51bGwsIHJlc3VsdHMsIG1hdGNoZXJPdXQsIHhtbCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgbWF0Y2hlck91dCApO1xuXHRcdFx0fVxuXHRcdH1cblx0fSk7XG59XG5cbmZ1bmN0aW9uIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMgKSB7XG5cdHZhciBjaGVja0NvbnRleHQsIG1hdGNoZXIsIGosXG5cdFx0bGVuID0gdG9rZW5zLmxlbmd0aCxcblx0XHRsZWFkaW5nUmVsYXRpdmUgPSBFeHByLnJlbGF0aXZlWyB0b2tlbnNbMF0udHlwZSBdLFxuXHRcdGltcGxpY2l0UmVsYXRpdmUgPSBsZWFkaW5nUmVsYXRpdmUgfHwgRXhwci5yZWxhdGl2ZVtcIiBcIl0sXG5cdFx0aSA9IGxlYWRpbmdSZWxhdGl2ZSA/IDEgOiAwLFxuXG5cdFx0Ly8gVGhlIGZvdW5kYXRpb25hbCBtYXRjaGVyIGVuc3VyZXMgdGhhdCBlbGVtZW50cyBhcmUgcmVhY2hhYmxlIGZyb20gdG9wLWxldmVsIGNvbnRleHQocylcblx0XHRtYXRjaENvbnRleHQgPSBhZGRDb21iaW5hdG9yKCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtID09PSBjaGVja0NvbnRleHQ7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoQW55Q29udGV4dCA9IGFkZENvbWJpbmF0b3IoIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuIGluZGV4T2YoIGNoZWNrQ29udGV4dCwgZWxlbSApID4gLTE7XG5cdFx0fSwgaW1wbGljaXRSZWxhdGl2ZSwgdHJ1ZSApLFxuXHRcdG1hdGNoZXJzID0gWyBmdW5jdGlvbiggZWxlbSwgY29udGV4dCwgeG1sICkge1xuXHRcdFx0dmFyIHJldCA9ICggIWxlYWRpbmdSZWxhdGl2ZSAmJiAoIHhtbCB8fCBjb250ZXh0ICE9PSBvdXRlcm1vc3RDb250ZXh0ICkgKSB8fCAoXG5cdFx0XHRcdChjaGVja0NvbnRleHQgPSBjb250ZXh0KS5ub2RlVHlwZSA/XG5cdFx0XHRcdFx0bWF0Y2hDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSA6XG5cdFx0XHRcdFx0bWF0Y2hBbnlDb250ZXh0KCBlbGVtLCBjb250ZXh0LCB4bWwgKSApO1xuXHRcdFx0Ly8gQXZvaWQgaGFuZ2luZyBvbnRvIGVsZW1lbnQgKGlzc3VlICMyOTkpXG5cdFx0XHRjaGVja0NvbnRleHQgPSBudWxsO1xuXHRcdFx0cmV0dXJuIHJldDtcblx0XHR9IF07XG5cblx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0aWYgKCAobWF0Y2hlciA9IEV4cHIucmVsYXRpdmVbIHRva2Vuc1tpXS50eXBlIF0pICkge1xuXHRcdFx0bWF0Y2hlcnMgPSBbIGFkZENvbWJpbmF0b3IoZWxlbWVudE1hdGNoZXIoIG1hdGNoZXJzICksIG1hdGNoZXIpIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdG1hdGNoZXIgPSBFeHByLmZpbHRlclsgdG9rZW5zW2ldLnR5cGUgXS5hcHBseSggbnVsbCwgdG9rZW5zW2ldLm1hdGNoZXMgKTtcblxuXHRcdFx0Ly8gUmV0dXJuIHNwZWNpYWwgdXBvbiBzZWVpbmcgYSBwb3NpdGlvbmFsIG1hdGNoZXJcblx0XHRcdGlmICggbWF0Y2hlclsgZXhwYW5kbyBdICkge1xuXHRcdFx0XHQvLyBGaW5kIHRoZSBuZXh0IHJlbGF0aXZlIG9wZXJhdG9yIChpZiBhbnkpIGZvciBwcm9wZXIgaGFuZGxpbmdcblx0XHRcdFx0aiA9ICsraTtcblx0XHRcdFx0Zm9yICggOyBqIDwgbGVuOyBqKysgKSB7XG5cdFx0XHRcdFx0aWYgKCBFeHByLnJlbGF0aXZlWyB0b2tlbnNbal0udHlwZSBdICkge1xuXHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiBzZXRNYXRjaGVyKFxuXHRcdFx0XHRcdGkgPiAxICYmIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApLFxuXHRcdFx0XHRcdGkgPiAxICYmIHRvU2VsZWN0b3IoXG5cdFx0XHRcdFx0XHQvLyBJZiB0aGUgcHJlY2VkaW5nIHRva2VuIHdhcyBhIGRlc2NlbmRhbnQgY29tYmluYXRvciwgaW5zZXJ0IGFuIGltcGxpY2l0IGFueS1lbGVtZW50IGAqYFxuXHRcdFx0XHRcdFx0dG9rZW5zLnNsaWNlKCAwLCBpIC0gMSApLmNvbmNhdCh7IHZhbHVlOiB0b2tlbnNbIGkgLSAyIF0udHlwZSA9PT0gXCIgXCIgPyBcIipcIiA6IFwiXCIgfSlcblx0XHRcdFx0XHQpLnJlcGxhY2UoIHJ0cmltLCBcIiQxXCIgKSxcblx0XHRcdFx0XHRtYXRjaGVyLFxuXHRcdFx0XHRcdGkgPCBqICYmIG1hdGNoZXJGcm9tVG9rZW5zKCB0b2tlbnMuc2xpY2UoIGksIGogKSApLFxuXHRcdFx0XHRcdGogPCBsZW4gJiYgbWF0Y2hlckZyb21Ub2tlbnMoICh0b2tlbnMgPSB0b2tlbnMuc2xpY2UoIGogKSkgKSxcblx0XHRcdFx0XHRqIDwgbGVuICYmIHRvU2VsZWN0b3IoIHRva2VucyApXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVycy5wdXNoKCBtYXRjaGVyICk7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIGVsZW1lbnRNYXRjaGVyKCBtYXRjaGVycyApO1xufVxuXG5mdW5jdGlvbiBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSB7XG5cdHZhciBieVNldCA9IHNldE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0YnlFbGVtZW50ID0gZWxlbWVudE1hdGNoZXJzLmxlbmd0aCA+IDAsXG5cdFx0c3VwZXJNYXRjaGVyID0gZnVuY3Rpb24oIHNlZWQsIGNvbnRleHQsIHhtbCwgcmVzdWx0cywgb3V0ZXJtb3N0ICkge1xuXHRcdFx0dmFyIGVsZW0sIGosIG1hdGNoZXIsXG5cdFx0XHRcdG1hdGNoZWRDb3VudCA9IDAsXG5cdFx0XHRcdGkgPSBcIjBcIixcblx0XHRcdFx0dW5tYXRjaGVkID0gc2VlZCAmJiBbXSxcblx0XHRcdFx0c2V0TWF0Y2hlZCA9IFtdLFxuXHRcdFx0XHRjb250ZXh0QmFja3VwID0gb3V0ZXJtb3N0Q29udGV4dCxcblx0XHRcdFx0Ly8gV2UgbXVzdCBhbHdheXMgaGF2ZSBlaXRoZXIgc2VlZCBlbGVtZW50cyBvciBvdXRlcm1vc3QgY29udGV4dFxuXHRcdFx0XHRlbGVtcyA9IHNlZWQgfHwgYnlFbGVtZW50ICYmIEV4cHIuZmluZFtcIlRBR1wiXSggXCIqXCIsIG91dGVybW9zdCApLFxuXHRcdFx0XHQvLyBVc2UgaW50ZWdlciBkaXJydW5zIGlmZiB0aGlzIGlzIHRoZSBvdXRlcm1vc3QgbWF0Y2hlclxuXHRcdFx0XHRkaXJydW5zVW5pcXVlID0gKGRpcnJ1bnMgKz0gY29udGV4dEJhY2t1cCA9PSBudWxsID8gMSA6IE1hdGgucmFuZG9tKCkgfHwgMC4xKSxcblx0XHRcdFx0bGVuID0gZWxlbXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0b3V0ZXJtb3N0Q29udGV4dCA9IGNvbnRleHQgPT09IGRvY3VtZW50IHx8IGNvbnRleHQgfHwgb3V0ZXJtb3N0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgZWxlbWVudHMgcGFzc2luZyBlbGVtZW50TWF0Y2hlcnMgZGlyZWN0bHkgdG8gcmVzdWx0c1xuXHRcdFx0Ly8gU3VwcG9ydDogSUU8OSwgU2FmYXJpXG5cdFx0XHQvLyBUb2xlcmF0ZSBOb2RlTGlzdCBwcm9wZXJ0aWVzIChJRTogXCJsZW5ndGhcIjsgU2FmYXJpOiA8bnVtYmVyPikgbWF0Y2hpbmcgZWxlbWVudHMgYnkgaWRcblx0XHRcdGZvciAoIDsgaSAhPT0gbGVuICYmIChlbGVtID0gZWxlbXNbaV0pICE9IG51bGw7IGkrKyApIHtcblx0XHRcdFx0aWYgKCBieUVsZW1lbnQgJiYgZWxlbSApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHRpZiAoICFjb250ZXh0ICYmIGVsZW0ub3duZXJEb2N1bWVudCAhPT0gZG9jdW1lbnQgKSB7XG5cdFx0XHRcdFx0XHRzZXREb2N1bWVudCggZWxlbSApO1xuXHRcdFx0XHRcdFx0eG1sID0gIWRvY3VtZW50SXNIVE1MO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0XHR3aGlsZSAoIChtYXRjaGVyID0gZWxlbWVudE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdFx0aWYgKCBtYXRjaGVyKCBlbGVtLCBjb250ZXh0IHx8IGRvY3VtZW50LCB4bWwpICkge1xuXHRcdFx0XHRcdFx0XHRyZXN1bHRzLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggb3V0ZXJtb3N0ICkge1xuXHRcdFx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gVHJhY2sgdW5tYXRjaGVkIGVsZW1lbnRzIGZvciBzZXQgZmlsdGVyc1xuXHRcdFx0XHRpZiAoIGJ5U2V0ICkge1xuXHRcdFx0XHRcdC8vIFRoZXkgd2lsbCBoYXZlIGdvbmUgdGhyb3VnaCBhbGwgcG9zc2libGUgbWF0Y2hlcnNcblx0XHRcdFx0XHRpZiAoIChlbGVtID0gIW1hdGNoZXIgJiYgZWxlbSkgKSB7XG5cdFx0XHRcdFx0XHRtYXRjaGVkQ291bnQtLTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBMZW5ndGhlbiB0aGUgYXJyYXkgZm9yIGV2ZXJ5IGVsZW1lbnQsIG1hdGNoZWQgb3Igbm90XG5cdFx0XHRcdFx0aWYgKCBzZWVkICkge1xuXHRcdFx0XHRcdFx0dW5tYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gYGlgIGlzIG5vdyB0aGUgY291bnQgb2YgZWxlbWVudHMgdmlzaXRlZCBhYm92ZSwgYW5kIGFkZGluZyBpdCB0byBgbWF0Y2hlZENvdW50YFxuXHRcdFx0Ly8gbWFrZXMgdGhlIGxhdHRlciBub25uZWdhdGl2ZS5cblx0XHRcdG1hdGNoZWRDb3VudCArPSBpO1xuXG5cdFx0XHQvLyBBcHBseSBzZXQgZmlsdGVycyB0byB1bm1hdGNoZWQgZWxlbWVudHNcblx0XHRcdC8vIE5PVEU6IFRoaXMgY2FuIGJlIHNraXBwZWQgaWYgdGhlcmUgYXJlIG5vIHVubWF0Y2hlZCBlbGVtZW50cyAoaS5lLiwgYG1hdGNoZWRDb3VudGBcblx0XHRcdC8vIGVxdWFscyBgaWApLCB1bmxlc3Mgd2UgZGlkbid0IHZpc2l0IF9hbnlfIGVsZW1lbnRzIGluIHRoZSBhYm92ZSBsb29wIGJlY2F1c2Ugd2UgaGF2ZVxuXHRcdFx0Ly8gbm8gZWxlbWVudCBtYXRjaGVycyBhbmQgbm8gc2VlZC5cblx0XHRcdC8vIEluY3JlbWVudGluZyBhbiBpbml0aWFsbHktc3RyaW5nIFwiMFwiIGBpYCBhbGxvd3MgYGlgIHRvIHJlbWFpbiBhIHN0cmluZyBvbmx5IGluIHRoYXRcblx0XHRcdC8vIGNhc2UsIHdoaWNoIHdpbGwgcmVzdWx0IGluIGEgXCIwMFwiIGBtYXRjaGVkQ291bnRgIHRoYXQgZGlmZmVycyBmcm9tIGBpYCBidXQgaXMgYWxzb1xuXHRcdFx0Ly8gbnVtZXJpY2FsbHkgemVyby5cblx0XHRcdGlmICggYnlTZXQgJiYgaSAhPT0gbWF0Y2hlZENvdW50ICkge1xuXHRcdFx0XHRqID0gMDtcblx0XHRcdFx0d2hpbGUgKCAobWF0Y2hlciA9IHNldE1hdGNoZXJzW2orK10pICkge1xuXHRcdFx0XHRcdG1hdGNoZXIoIHVubWF0Y2hlZCwgc2V0TWF0Y2hlZCwgY29udGV4dCwgeG1sICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRpZiAoIHNlZWQgKSB7XG5cdFx0XHRcdFx0Ly8gUmVpbnRlZ3JhdGUgZWxlbWVudCBtYXRjaGVzIHRvIGVsaW1pbmF0ZSB0aGUgbmVlZCBmb3Igc29ydGluZ1xuXHRcdFx0XHRcdGlmICggbWF0Y2hlZENvdW50ID4gMCApIHtcblx0XHRcdFx0XHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoICEodW5tYXRjaGVkW2ldIHx8IHNldE1hdGNoZWRbaV0pICkge1xuXHRcdFx0XHRcdFx0XHRcdHNldE1hdGNoZWRbaV0gPSBwb3AuY2FsbCggcmVzdWx0cyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0Ly8gRGlzY2FyZCBpbmRleCBwbGFjZWhvbGRlciB2YWx1ZXMgdG8gZ2V0IG9ubHkgYWN0dWFsIG1hdGNoZXNcblx0XHRcdFx0XHRzZXRNYXRjaGVkID0gY29uZGVuc2UoIHNldE1hdGNoZWQgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEFkZCBtYXRjaGVzIHRvIHJlc3VsdHNcblx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2V0TWF0Y2hlZCApO1xuXG5cdFx0XHRcdC8vIFNlZWRsZXNzIHNldCBtYXRjaGVzIHN1Y2NlZWRpbmcgbXVsdGlwbGUgc3VjY2Vzc2Z1bCBtYXRjaGVycyBzdGlwdWxhdGUgc29ydGluZ1xuXHRcdFx0XHRpZiAoIG91dGVybW9zdCAmJiAhc2VlZCAmJiBzZXRNYXRjaGVkLmxlbmd0aCA+IDAgJiZcblx0XHRcdFx0XHQoIG1hdGNoZWRDb3VudCArIHNldE1hdGNoZXJzLmxlbmd0aCApID4gMSApIHtcblxuXHRcdFx0XHRcdFNpenpsZS51bmlxdWVTb3J0KCByZXN1bHRzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gT3ZlcnJpZGUgbWFuaXB1bGF0aW9uIG9mIGdsb2JhbHMgYnkgbmVzdGVkIG1hdGNoZXJzXG5cdFx0XHRpZiAoIG91dGVybW9zdCApIHtcblx0XHRcdFx0ZGlycnVucyA9IGRpcnJ1bnNVbmlxdWU7XG5cdFx0XHRcdG91dGVybW9zdENvbnRleHQgPSBjb250ZXh0QmFja3VwO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4gdW5tYXRjaGVkO1xuXHRcdH07XG5cblx0cmV0dXJuIGJ5U2V0ID9cblx0XHRtYXJrRnVuY3Rpb24oIHN1cGVyTWF0Y2hlciApIDpcblx0XHRzdXBlck1hdGNoZXI7XG59XG5cbmNvbXBpbGUgPSBTaXp6bGUuY29tcGlsZSA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgbWF0Y2ggLyogSW50ZXJuYWwgVXNlIE9ubHkgKi8gKSB7XG5cdHZhciBpLFxuXHRcdHNldE1hdGNoZXJzID0gW10sXG5cdFx0ZWxlbWVudE1hdGNoZXJzID0gW10sXG5cdFx0Y2FjaGVkID0gY29tcGlsZXJDYWNoZVsgc2VsZWN0b3IgKyBcIiBcIiBdO1xuXG5cdGlmICggIWNhY2hlZCApIHtcblx0XHQvLyBHZW5lcmF0ZSBhIGZ1bmN0aW9uIG9mIHJlY3Vyc2l2ZSBmdW5jdGlvbnMgdGhhdCBjYW4gYmUgdXNlZCB0byBjaGVjayBlYWNoIGVsZW1lbnRcblx0XHRpZiAoICFtYXRjaCApIHtcblx0XHRcdG1hdGNoID0gdG9rZW5pemUoIHNlbGVjdG9yICk7XG5cdFx0fVxuXHRcdGkgPSBtYXRjaC5sZW5ndGg7XG5cdFx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0XHRjYWNoZWQgPSBtYXRjaGVyRnJvbVRva2VucyggbWF0Y2hbaV0gKTtcblx0XHRcdGlmICggY2FjaGVkWyBleHBhbmRvIF0gKSB7XG5cdFx0XHRcdHNldE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZWxlbWVudE1hdGNoZXJzLnB1c2goIGNhY2hlZCApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhY2hlIHRoZSBjb21waWxlZCBmdW5jdGlvblxuXHRcdGNhY2hlZCA9IGNvbXBpbGVyQ2FjaGUoIHNlbGVjdG9yLCBtYXRjaGVyRnJvbUdyb3VwTWF0Y2hlcnMoIGVsZW1lbnRNYXRjaGVycywgc2V0TWF0Y2hlcnMgKSApO1xuXG5cdFx0Ly8gU2F2ZSBzZWxlY3RvciBhbmQgdG9rZW5pemF0aW9uXG5cdFx0Y2FjaGVkLnNlbGVjdG9yID0gc2VsZWN0b3I7XG5cdH1cblx0cmV0dXJuIGNhY2hlZDtcbn07XG5cbi8qKlxuICogQSBsb3ctbGV2ZWwgc2VsZWN0aW9uIGZ1bmN0aW9uIHRoYXQgd29ya3Mgd2l0aCBTaXp6bGUncyBjb21waWxlZFxuICogIHNlbGVjdG9yIGZ1bmN0aW9uc1xuICogQHBhcmFtIHtTdHJpbmd8RnVuY3Rpb259IHNlbGVjdG9yIEEgc2VsZWN0b3Igb3IgYSBwcmUtY29tcGlsZWRcbiAqICBzZWxlY3RvciBmdW5jdGlvbiBidWlsdCB3aXRoIFNpenpsZS5jb21waWxlXG4gKiBAcGFyYW0ge0VsZW1lbnR9IGNvbnRleHRcbiAqIEBwYXJhbSB7QXJyYXl9IFtyZXN1bHRzXVxuICogQHBhcmFtIHtBcnJheX0gW3NlZWRdIEEgc2V0IG9mIGVsZW1lbnRzIHRvIG1hdGNoIGFnYWluc3RcbiAqL1xuc2VsZWN0ID0gU2l6emxlLnNlbGVjdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcmVzdWx0cywgc2VlZCApIHtcblx0dmFyIGksIHRva2VucywgdG9rZW4sIHR5cGUsIGZpbmQsXG5cdFx0Y29tcGlsZWQgPSB0eXBlb2Ygc2VsZWN0b3IgPT09IFwiZnVuY3Rpb25cIiAmJiBzZWxlY3Rvcixcblx0XHRtYXRjaCA9ICFzZWVkICYmIHRva2VuaXplKCAoc2VsZWN0b3IgPSBjb21waWxlZC5zZWxlY3RvciB8fCBzZWxlY3RvcikgKTtcblxuXHRyZXN1bHRzID0gcmVzdWx0cyB8fCBbXTtcblxuXHQvLyBUcnkgdG8gbWluaW1pemUgb3BlcmF0aW9ucyBpZiB0aGVyZSBpcyBvbmx5IG9uZSBzZWxlY3RvciBpbiB0aGUgbGlzdCBhbmQgbm8gc2VlZFxuXHQvLyAodGhlIGxhdHRlciBvZiB3aGljaCBndWFyYW50ZWVzIHVzIGNvbnRleHQpXG5cdGlmICggbWF0Y2gubGVuZ3RoID09PSAxICkge1xuXG5cdFx0Ly8gUmVkdWNlIGNvbnRleHQgaWYgdGhlIGxlYWRpbmcgY29tcG91bmQgc2VsZWN0b3IgaXMgYW4gSURcblx0XHR0b2tlbnMgPSBtYXRjaFswXSA9IG1hdGNoWzBdLnNsaWNlKCAwICk7XG5cdFx0aWYgKCB0b2tlbnMubGVuZ3RoID4gMiAmJiAodG9rZW4gPSB0b2tlbnNbMF0pLnR5cGUgPT09IFwiSURcIiAmJlxuXHRcdFx0XHRjb250ZXh0Lm5vZGVUeXBlID09PSA5ICYmIGRvY3VtZW50SXNIVE1MICYmIEV4cHIucmVsYXRpdmVbIHRva2Vuc1sxXS50eXBlIF0gKSB7XG5cblx0XHRcdGNvbnRleHQgPSAoIEV4cHIuZmluZFtcIklEXCJdKCB0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UocnVuZXNjYXBlLCBmdW5lc2NhcGUpLCBjb250ZXh0ICkgfHwgW10gKVswXTtcblx0XHRcdGlmICggIWNvbnRleHQgKSB7XG5cdFx0XHRcdHJldHVybiByZXN1bHRzO1xuXG5cdFx0XHQvLyBQcmVjb21waWxlZCBtYXRjaGVycyB3aWxsIHN0aWxsIHZlcmlmeSBhbmNlc3RyeSwgc28gc3RlcCB1cCBhIGxldmVsXG5cdFx0XHR9IGVsc2UgaWYgKCBjb21waWxlZCApIHtcblx0XHRcdFx0Y29udGV4dCA9IGNvbnRleHQucGFyZW50Tm9kZTtcblx0XHRcdH1cblxuXHRcdFx0c2VsZWN0b3IgPSBzZWxlY3Rvci5zbGljZSggdG9rZW5zLnNoaWZ0KCkudmFsdWUubGVuZ3RoICk7XG5cdFx0fVxuXG5cdFx0Ly8gRmV0Y2ggYSBzZWVkIHNldCBmb3IgcmlnaHQtdG8tbGVmdCBtYXRjaGluZ1xuXHRcdGkgPSBtYXRjaEV4cHJbXCJuZWVkc0NvbnRleHRcIl0udGVzdCggc2VsZWN0b3IgKSA/IDAgOiB0b2tlbnMubGVuZ3RoO1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0dG9rZW4gPSB0b2tlbnNbaV07XG5cblx0XHRcdC8vIEFib3J0IGlmIHdlIGhpdCBhIGNvbWJpbmF0b3Jcblx0XHRcdGlmICggRXhwci5yZWxhdGl2ZVsgKHR5cGUgPSB0b2tlbi50eXBlKSBdICkge1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHRcdGlmICggKGZpbmQgPSBFeHByLmZpbmRbIHR5cGUgXSkgKSB7XG5cdFx0XHRcdC8vIFNlYXJjaCwgZXhwYW5kaW5nIGNvbnRleHQgZm9yIGxlYWRpbmcgc2libGluZyBjb21iaW5hdG9yc1xuXHRcdFx0XHRpZiAoIChzZWVkID0gZmluZChcblx0XHRcdFx0XHR0b2tlbi5tYXRjaGVzWzBdLnJlcGxhY2UoIHJ1bmVzY2FwZSwgZnVuZXNjYXBlICksXG5cdFx0XHRcdFx0cnNpYmxpbmcudGVzdCggdG9rZW5zWzBdLnR5cGUgKSAmJiB0ZXN0Q29udGV4dCggY29udGV4dC5wYXJlbnROb2RlICkgfHwgY29udGV4dFxuXHRcdFx0XHQpKSApIHtcblxuXHRcdFx0XHRcdC8vIElmIHNlZWQgaXMgZW1wdHkgb3Igbm8gdG9rZW5zIHJlbWFpbiwgd2UgY2FuIHJldHVybiBlYXJseVxuXHRcdFx0XHRcdHRva2Vucy5zcGxpY2UoIGksIDEgKTtcblx0XHRcdFx0XHRzZWxlY3RvciA9IHNlZWQubGVuZ3RoICYmIHRvU2VsZWN0b3IoIHRva2VucyApO1xuXHRcdFx0XHRcdGlmICggIXNlbGVjdG9yICkge1xuXHRcdFx0XHRcdFx0cHVzaC5hcHBseSggcmVzdWx0cywgc2VlZCApO1xuXHRcdFx0XHRcdFx0cmV0dXJuIHJlc3VsdHM7XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0YnJlYWs7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDb21waWxlIGFuZCBleGVjdXRlIGEgZmlsdGVyaW5nIGZ1bmN0aW9uIGlmIG9uZSBpcyBub3QgcHJvdmlkZWRcblx0Ly8gUHJvdmlkZSBgbWF0Y2hgIHRvIGF2b2lkIHJldG9rZW5pemF0aW9uIGlmIHdlIG1vZGlmaWVkIHRoZSBzZWxlY3RvciBhYm92ZVxuXHQoIGNvbXBpbGVkIHx8IGNvbXBpbGUoIHNlbGVjdG9yLCBtYXRjaCApICkoXG5cdFx0c2VlZCxcblx0XHRjb250ZXh0LFxuXHRcdCFkb2N1bWVudElzSFRNTCxcblx0XHRyZXN1bHRzLFxuXHRcdCFjb250ZXh0IHx8IHJzaWJsaW5nLnRlc3QoIHNlbGVjdG9yICkgJiYgdGVzdENvbnRleHQoIGNvbnRleHQucGFyZW50Tm9kZSApIHx8IGNvbnRleHRcblx0KTtcblx0cmV0dXJuIHJlc3VsdHM7XG59O1xuXG4vLyBPbmUtdGltZSBhc3NpZ25tZW50c1xuXG4vLyBTb3J0IHN0YWJpbGl0eVxuc3VwcG9ydC5zb3J0U3RhYmxlID0gZXhwYW5kby5zcGxpdChcIlwiKS5zb3J0KCBzb3J0T3JkZXIgKS5qb2luKFwiXCIpID09PSBleHBhbmRvO1xuXG4vLyBTdXBwb3J0OiBDaHJvbWUgMTQtMzUrXG4vLyBBbHdheXMgYXNzdW1lIGR1cGxpY2F0ZXMgaWYgdGhleSBhcmVuJ3QgcGFzc2VkIHRvIHRoZSBjb21wYXJpc29uIGZ1bmN0aW9uXG5zdXBwb3J0LmRldGVjdER1cGxpY2F0ZXMgPSAhIWhhc0R1cGxpY2F0ZTtcblxuLy8gSW5pdGlhbGl6ZSBhZ2FpbnN0IHRoZSBkZWZhdWx0IGRvY3VtZW50XG5zZXREb2N1bWVudCgpO1xuXG4vLyBTdXBwb3J0OiBXZWJraXQ8NTM3LjMyIC0gU2FmYXJpIDYuMC4zL0Nocm9tZSAyNSAoZml4ZWQgaW4gQ2hyb21lIDI3KVxuLy8gRGV0YWNoZWQgbm9kZXMgY29uZm91bmRpbmdseSBmb2xsb3cgKmVhY2ggb3RoZXIqXG5zdXBwb3J0LnNvcnREZXRhY2hlZCA9IGFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdC8vIFNob3VsZCByZXR1cm4gMSwgYnV0IHJldHVybnMgNCAoZm9sbG93aW5nKVxuXHRyZXR1cm4gZWwuY29tcGFyZURvY3VtZW50UG9zaXRpb24oIGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoXCJmaWVsZHNldFwiKSApICYgMTtcbn0pO1xuXG4vLyBTdXBwb3J0OiBJRTw4XG4vLyBQcmV2ZW50IGF0dHJpYnV0ZS9wcm9wZXJ0eSBcImludGVycG9sYXRpb25cIlxuLy8gaHR0cHM6Ly9tc2RuLm1pY3Jvc29mdC5jb20vZW4tdXMvbGlicmFyeS9tczUzNjQyOSUyOFZTLjg1JTI5LmFzcHhcbmlmICggIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGEgaHJlZj0nIyc+PC9hPlwiO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoXCJocmVmXCIpID09PSBcIiNcIiA7XG59KSApIHtcblx0YWRkSGFuZGxlKCBcInR5cGV8aHJlZnxoZWlnaHR8d2lkdGhcIiwgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdGlmICggIWlzWE1MICkge1xuXHRcdFx0cmV0dXJuIGVsZW0uZ2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lLnRvTG93ZXJDYXNlKCkgPT09IFwidHlwZVwiID8gMSA6IDIgKTtcblx0XHR9XG5cdH0pO1xufVxuXG4vLyBTdXBwb3J0OiBJRTw5XG4vLyBVc2UgZGVmYXVsdFZhbHVlIGluIHBsYWNlIG9mIGdldEF0dHJpYnV0ZShcInZhbHVlXCIpXG5pZiAoICFzdXBwb3J0LmF0dHJpYnV0ZXMgfHwgIWFzc2VydChmdW5jdGlvbiggZWwgKSB7XG5cdGVsLmlubmVySFRNTCA9IFwiPGlucHV0Lz5cIjtcblx0ZWwuZmlyc3RDaGlsZC5zZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiwgXCJcIiApO1xuXHRyZXR1cm4gZWwuZmlyc3RDaGlsZC5nZXRBdHRyaWJ1dGUoIFwidmFsdWVcIiApID09PSBcIlwiO1xufSkgKSB7XG5cdGFkZEhhbmRsZSggXCJ2YWx1ZVwiLCBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0aWYgKCAhaXNYTUwgJiYgZWxlbS5ub2RlTmFtZS50b0xvd2VyQ2FzZSgpID09PSBcImlucHV0XCIgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbS5kZWZhdWx0VmFsdWU7XG5cdFx0fVxuXHR9KTtcbn1cblxuLy8gU3VwcG9ydDogSUU8OVxuLy8gVXNlIGdldEF0dHJpYnV0ZU5vZGUgdG8gZmV0Y2ggYm9vbGVhbnMgd2hlbiBnZXRBdHRyaWJ1dGUgbGllc1xuaWYgKCAhYXNzZXJ0KGZ1bmN0aW9uKCBlbCApIHtcblx0cmV0dXJuIGVsLmdldEF0dHJpYnV0ZShcImRpc2FibGVkXCIpID09IG51bGw7XG59KSApIHtcblx0YWRkSGFuZGxlKCBib29sZWFucywgZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGlzWE1MICkge1xuXHRcdHZhciB2YWw7XG5cdFx0aWYgKCAhaXNYTUwgKSB7XG5cdFx0XHRyZXR1cm4gZWxlbVsgbmFtZSBdID09PSB0cnVlID8gbmFtZS50b0xvd2VyQ2FzZSgpIDpcblx0XHRcdFx0XHQodmFsID0gZWxlbS5nZXRBdHRyaWJ1dGVOb2RlKCBuYW1lICkpICYmIHZhbC5zcGVjaWZpZWQgP1xuXHRcdFx0XHRcdHZhbC52YWx1ZSA6XG5cdFx0XHRcdG51bGw7XG5cdFx0fVxuXHR9KTtcbn1cblxucmV0dXJuIFNpenpsZTtcblxufSkoIHdpbmRvdyApO1xuXG5cblxualF1ZXJ5LmZpbmQgPSBTaXp6bGU7XG5qUXVlcnkuZXhwciA9IFNpenpsZS5zZWxlY3RvcnM7XG5cbi8vIERlcHJlY2F0ZWRcbmpRdWVyeS5leHByWyBcIjpcIiBdID0galF1ZXJ5LmV4cHIucHNldWRvcztcbmpRdWVyeS51bmlxdWVTb3J0ID0galF1ZXJ5LnVuaXF1ZSA9IFNpenpsZS51bmlxdWVTb3J0O1xualF1ZXJ5LnRleHQgPSBTaXp6bGUuZ2V0VGV4dDtcbmpRdWVyeS5pc1hNTERvYyA9IFNpenpsZS5pc1hNTDtcbmpRdWVyeS5jb250YWlucyA9IFNpenpsZS5jb250YWlucztcbmpRdWVyeS5lc2NhcGVTZWxlY3RvciA9IFNpenpsZS5lc2NhcGU7XG5cblxuXG5cbnZhciBkaXIgPSBmdW5jdGlvbiggZWxlbSwgZGlyLCB1bnRpbCApIHtcblx0dmFyIG1hdGNoZWQgPSBbXSxcblx0XHR0cnVuY2F0ZSA9IHVudGlsICE9PSB1bmRlZmluZWQ7XG5cblx0d2hpbGUgKCAoIGVsZW0gPSBlbGVtWyBkaXIgXSApICYmIGVsZW0ubm9kZVR5cGUgIT09IDkgKSB7XG5cdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXHRcdFx0aWYgKCB0cnVuY2F0ZSAmJiBqUXVlcnkoIGVsZW0gKS5pcyggdW50aWwgKSApIHtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRtYXRjaGVkLnB1c2goIGVsZW0gKTtcblx0XHR9XG5cdH1cblx0cmV0dXJuIG1hdGNoZWQ7XG59O1xuXG5cbnZhciBzaWJsaW5ncyA9IGZ1bmN0aW9uKCBuLCBlbGVtICkge1xuXHR2YXIgbWF0Y2hlZCA9IFtdO1xuXG5cdGZvciAoIDsgbjsgbiA9IG4ubmV4dFNpYmxpbmcgKSB7XG5cdFx0aWYgKCBuLm5vZGVUeXBlID09PSAxICYmIG4gIT09IGVsZW0gKSB7XG5cdFx0XHRtYXRjaGVkLnB1c2goIG4gKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gbWF0Y2hlZDtcbn07XG5cblxudmFyIHJuZWVkc0NvbnRleHQgPSBqUXVlcnkuZXhwci5tYXRjaC5uZWVkc0NvbnRleHQ7XG5cblxuXG5mdW5jdGlvbiBub2RlTmFtZSggZWxlbSwgbmFtZSApIHtcblxuICByZXR1cm4gZWxlbS5ub2RlTmFtZSAmJiBlbGVtLm5vZGVOYW1lLnRvTG93ZXJDYXNlKCkgPT09IG5hbWUudG9Mb3dlckNhc2UoKTtcblxufTtcbnZhciByc2luZ2xlVGFnID0gKCAvXjwoW2Etel1bXlxcL1xcMD46XFx4MjBcXHRcXHJcXG5cXGZdKilbXFx4MjBcXHRcXHJcXG5cXGZdKlxcLz8+KD86PFxcL1xcMT58KSQvaSApO1xuXG5cblxuLy8gSW1wbGVtZW50IHRoZSBpZGVudGljYWwgZnVuY3Rpb25hbGl0eSBmb3IgZmlsdGVyIGFuZCBub3RcbmZ1bmN0aW9uIHdpbm5vdyggZWxlbWVudHMsIHF1YWxpZmllciwgbm90ICkge1xuXHRpZiAoIGlzRnVuY3Rpb24oIHF1YWxpZmllciApICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtLCBpICkge1xuXHRcdFx0cmV0dXJuICEhcXVhbGlmaWVyLmNhbGwoIGVsZW0sIGksIGVsZW0gKSAhPT0gbm90O1xuXHRcdH0gKTtcblx0fVxuXG5cdC8vIFNpbmdsZSBlbGVtZW50XG5cdGlmICggcXVhbGlmaWVyLm5vZGVUeXBlICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggZWxlbSA9PT0gcXVhbGlmaWVyICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBBcnJheWxpa2Ugb2YgZWxlbWVudHMgKGpRdWVyeSwgYXJndW1lbnRzLCBBcnJheSlcblx0aWYgKCB0eXBlb2YgcXVhbGlmaWVyICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBqUXVlcnkuZ3JlcCggZWxlbWVudHMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdFx0cmV0dXJuICggaW5kZXhPZi5jYWxsKCBxdWFsaWZpZXIsIGVsZW0gKSA+IC0xICkgIT09IG5vdDtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBGaWx0ZXJlZCBkaXJlY3RseSBmb3IgYm90aCBzaW1wbGUgYW5kIGNvbXBsZXggc2VsZWN0b3JzXG5cdHJldHVybiBqUXVlcnkuZmlsdGVyKCBxdWFsaWZpZXIsIGVsZW1lbnRzLCBub3QgKTtcbn1cblxualF1ZXJ5LmZpbHRlciA9IGZ1bmN0aW9uKCBleHByLCBlbGVtcywgbm90ICkge1xuXHR2YXIgZWxlbSA9IGVsZW1zWyAwIF07XG5cblx0aWYgKCBub3QgKSB7XG5cdFx0ZXhwciA9IFwiOm5vdChcIiArIGV4cHIgKyBcIilcIjtcblx0fVxuXG5cdGlmICggZWxlbXMubGVuZ3RoID09PSAxICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZWxlbSwgZXhwciApID8gWyBlbGVtIF0gOiBbXTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkuZmluZC5tYXRjaGVzKCBleHByLCBqUXVlcnkuZ3JlcCggZWxlbXMsIGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBlbGVtLm5vZGVUeXBlID09PSAxO1xuXHR9ICkgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmluZDogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBpLCByZXQsXG5cdFx0XHRsZW4gPSB0aGlzLmxlbmd0aCxcblx0XHRcdHNlbGYgPSB0aGlzO1xuXG5cdFx0aWYgKCB0eXBlb2Ygc2VsZWN0b3IgIT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIGpRdWVyeSggc2VsZWN0b3IgKS5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdGlmICggalF1ZXJ5LmNvbnRhaW5zKCBzZWxmWyBpIF0sIHRoaXMgKSApIHtcblx0XHRcdFx0XHRcdHJldHVybiB0cnVlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fSApICk7XG5cdFx0fVxuXG5cdFx0cmV0ID0gdGhpcy5wdXNoU3RhY2soIFtdICk7XG5cblx0XHRmb3IgKCBpID0gMDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0alF1ZXJ5LmZpbmQoIHNlbGVjdG9yLCBzZWxmWyBpIF0sIHJldCApO1xuXHRcdH1cblxuXHRcdHJldHVybiBsZW4gPiAxID8galF1ZXJ5LnVuaXF1ZVNvcnQoIHJldCApIDogcmV0O1xuXHR9LFxuXHRmaWx0ZXI6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIHdpbm5vdyggdGhpcywgc2VsZWN0b3IgfHwgW10sIGZhbHNlICkgKTtcblx0fSxcblx0bm90OiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCB3aW5ub3coIHRoaXMsIHNlbGVjdG9yIHx8IFtdLCB0cnVlICkgKTtcblx0fSxcblx0aXM6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gISF3aW5ub3coXG5cdFx0XHR0aGlzLFxuXG5cdFx0XHQvLyBJZiB0aGlzIGlzIGEgcG9zaXRpb25hbC9yZWxhdGl2ZSBzZWxlY3RvciwgY2hlY2sgbWVtYmVyc2hpcCBpbiB0aGUgcmV0dXJuZWQgc2V0XG5cdFx0XHQvLyBzbyAkKFwicDpmaXJzdFwiKS5pcyhcInA6bGFzdFwiKSB3b24ndCByZXR1cm4gdHJ1ZSBmb3IgYSBkb2Mgd2l0aCB0d28gXCJwXCIuXG5cdFx0XHR0eXBlb2Ygc2VsZWN0b3IgPT09IFwic3RyaW5nXCIgJiYgcm5lZWRzQ29udGV4dC50ZXN0KCBzZWxlY3RvciApID9cblx0XHRcdFx0alF1ZXJ5KCBzZWxlY3RvciApIDpcblx0XHRcdFx0c2VsZWN0b3IgfHwgW10sXG5cdFx0XHRmYWxzZVxuXHRcdCkubGVuZ3RoO1xuXHR9XG59ICk7XG5cblxuLy8gSW5pdGlhbGl6ZSBhIGpRdWVyeSBvYmplY3RcblxuXG4vLyBBIGNlbnRyYWwgcmVmZXJlbmNlIHRvIHRoZSByb290IGpRdWVyeShkb2N1bWVudClcbnZhciByb290alF1ZXJ5LFxuXG5cdC8vIEEgc2ltcGxlIHdheSB0byBjaGVjayBmb3IgSFRNTCBzdHJpbmdzXG5cdC8vIFByaW9yaXRpemUgI2lkIG92ZXIgPHRhZz4gdG8gYXZvaWQgWFNTIHZpYSBsb2NhdGlvbi5oYXNoICgjOTUyMSlcblx0Ly8gU3RyaWN0IEhUTUwgcmVjb2duaXRpb24gKCMxMTI5MDogbXVzdCBzdGFydCB3aXRoIDwpXG5cdC8vIFNob3J0Y3V0IHNpbXBsZSAjaWQgY2FzZSBmb3Igc3BlZWRcblx0cnF1aWNrRXhwciA9IC9eKD86XFxzKig8W1xcd1xcV10rPilbXj5dKnwjKFtcXHctXSspKSQvLFxuXG5cdGluaXQgPSBqUXVlcnkuZm4uaW5pdCA9IGZ1bmN0aW9uKCBzZWxlY3RvciwgY29udGV4dCwgcm9vdCApIHtcblx0XHR2YXIgbWF0Y2gsIGVsZW07XG5cblx0XHQvLyBIQU5ETEU6ICQoXCJcIiksICQobnVsbCksICQodW5kZWZpbmVkKSwgJChmYWxzZSlcblx0XHRpZiAoICFzZWxlY3RvciApIHtcblx0XHRcdHJldHVybiB0aGlzO1xuXHRcdH1cblxuXHRcdC8vIE1ldGhvZCBpbml0KCkgYWNjZXB0cyBhbiBhbHRlcm5hdGUgcm9vdGpRdWVyeVxuXHRcdC8vIHNvIG1pZ3JhdGUgY2FuIHN1cHBvcnQgalF1ZXJ5LnN1YiAoZ2gtMjEwMSlcblx0XHRyb290ID0gcm9vdCB8fCByb290alF1ZXJ5O1xuXG5cdFx0Ly8gSGFuZGxlIEhUTUwgc3RyaW5nc1xuXHRcdGlmICggdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0aWYgKCBzZWxlY3RvclsgMCBdID09PSBcIjxcIiAmJlxuXHRcdFx0XHRzZWxlY3Rvclsgc2VsZWN0b3IubGVuZ3RoIC0gMSBdID09PSBcIj5cIiAmJlxuXHRcdFx0XHRzZWxlY3Rvci5sZW5ndGggPj0gMyApIHtcblxuXHRcdFx0XHQvLyBBc3N1bWUgdGhhdCBzdHJpbmdzIHRoYXQgc3RhcnQgYW5kIGVuZCB3aXRoIDw+IGFyZSBIVE1MIGFuZCBza2lwIHRoZSByZWdleCBjaGVja1xuXHRcdFx0XHRtYXRjaCA9IFsgbnVsbCwgc2VsZWN0b3IsIG51bGwgXTtcblxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0bWF0Y2ggPSBycXVpY2tFeHByLmV4ZWMoIHNlbGVjdG9yICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1hdGNoIGh0bWwgb3IgbWFrZSBzdXJlIG5vIGNvbnRleHQgaXMgc3BlY2lmaWVkIGZvciAjaWRcblx0XHRcdGlmICggbWF0Y2ggJiYgKCBtYXRjaFsgMSBdIHx8ICFjb250ZXh0ICkgKSB7XG5cblx0XHRcdFx0Ly8gSEFORExFOiAkKGh0bWwpIC0+ICQoYXJyYXkpXG5cdFx0XHRcdGlmICggbWF0Y2hbIDEgXSApIHtcblx0XHRcdFx0XHRjb250ZXh0ID0gY29udGV4dCBpbnN0YW5jZW9mIGpRdWVyeSA/IGNvbnRleHRbIDAgXSA6IGNvbnRleHQ7XG5cblx0XHRcdFx0XHQvLyBPcHRpb24gdG8gcnVuIHNjcmlwdHMgaXMgdHJ1ZSBmb3IgYmFjay1jb21wYXRcblx0XHRcdFx0XHQvLyBJbnRlbnRpb25hbGx5IGxldCB0aGUgZXJyb3IgYmUgdGhyb3duIGlmIHBhcnNlSFRNTCBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRcdGpRdWVyeS5tZXJnZSggdGhpcywgalF1ZXJ5LnBhcnNlSFRNTChcblx0XHRcdFx0XHRcdG1hdGNoWyAxIF0sXG5cdFx0XHRcdFx0XHRjb250ZXh0ICYmIGNvbnRleHQubm9kZVR5cGUgPyBjb250ZXh0Lm93bmVyRG9jdW1lbnQgfHwgY29udGV4dCA6IGRvY3VtZW50LFxuXHRcdFx0XHRcdFx0dHJ1ZVxuXHRcdFx0XHRcdCkgKTtcblxuXHRcdFx0XHRcdC8vIEhBTkRMRTogJChodG1sLCBwcm9wcylcblx0XHRcdFx0XHRpZiAoIHJzaW5nbGVUYWcudGVzdCggbWF0Y2hbIDEgXSApICYmIGpRdWVyeS5pc1BsYWluT2JqZWN0KCBjb250ZXh0ICkgKSB7XG5cdFx0XHRcdFx0XHRmb3IgKCBtYXRjaCBpbiBjb250ZXh0ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIFByb3BlcnRpZXMgb2YgY29udGV4dCBhcmUgY2FsbGVkIGFzIG1ldGhvZHMgaWYgcG9zc2libGVcblx0XHRcdFx0XHRcdFx0aWYgKCBpc0Z1bmN0aW9uKCB0aGlzWyBtYXRjaCBdICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0dGhpc1sgbWF0Y2ggXSggY29udGV4dFsgbWF0Y2ggXSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBvdGhlcndpc2Ugc2V0IGFzIGF0dHJpYnV0ZXNcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHR0aGlzLmF0dHIoIG1hdGNoLCBjb250ZXh0WyBtYXRjaCBdICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblxuXHRcdFx0XHQvLyBIQU5ETEU6ICQoI2lkKVxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGVsZW0gPSBkb2N1bWVudC5nZXRFbGVtZW50QnlJZCggbWF0Y2hbIDIgXSApO1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtICkge1xuXG5cdFx0XHRcdFx0XHQvLyBJbmplY3QgdGhlIGVsZW1lbnQgZGlyZWN0bHkgaW50byB0aGUgalF1ZXJ5IG9iamVjdFxuXHRcdFx0XHRcdFx0dGhpc1sgMCBdID0gZWxlbTtcblx0XHRcdFx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH1cblxuXHRcdFx0Ly8gSEFORExFOiAkKGV4cHIsICQoLi4uKSlcblx0XHRcdH0gZWxzZSBpZiAoICFjb250ZXh0IHx8IGNvbnRleHQuanF1ZXJ5ICkge1xuXHRcdFx0XHRyZXR1cm4gKCBjb250ZXh0IHx8IHJvb3QgKS5maW5kKCBzZWxlY3RvciApO1xuXG5cdFx0XHQvLyBIQU5ETEU6ICQoZXhwciwgY29udGV4dClcblx0XHRcdC8vICh3aGljaCBpcyBqdXN0IGVxdWl2YWxlbnQgdG86ICQoY29udGV4dCkuZmluZChleHByKVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0cmV0dXJuIHRoaXMuY29uc3RydWN0b3IoIGNvbnRleHQgKS5maW5kKCBzZWxlY3RvciApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSEFORExFOiAkKERPTUVsZW1lbnQpXG5cdFx0fSBlbHNlIGlmICggc2VsZWN0b3Iubm9kZVR5cGUgKSB7XG5cdFx0XHR0aGlzWyAwIF0gPSBzZWxlY3Rvcjtcblx0XHRcdHRoaXMubGVuZ3RoID0gMTtcblx0XHRcdHJldHVybiB0aGlzO1xuXG5cdFx0Ly8gSEFORExFOiAkKGZ1bmN0aW9uKVxuXHRcdC8vIFNob3J0Y3V0IGZvciBkb2N1bWVudCByZWFkeVxuXHRcdH0gZWxzZSBpZiAoIGlzRnVuY3Rpb24oIHNlbGVjdG9yICkgKSB7XG5cdFx0XHRyZXR1cm4gcm9vdC5yZWFkeSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0cm9vdC5yZWFkeSggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gRXhlY3V0ZSBpbW1lZGlhdGVseSBpZiByZWFkeSBpcyBub3QgcHJlc2VudFxuXHRcdFx0XHRzZWxlY3RvciggalF1ZXJ5ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGpRdWVyeS5tYWtlQXJyYXkoIHNlbGVjdG9yLCB0aGlzICk7XG5cdH07XG5cbi8vIEdpdmUgdGhlIGluaXQgZnVuY3Rpb24gdGhlIGpRdWVyeSBwcm90b3R5cGUgZm9yIGxhdGVyIGluc3RhbnRpYXRpb25cbmluaXQucHJvdG90eXBlID0galF1ZXJ5LmZuO1xuXG4vLyBJbml0aWFsaXplIGNlbnRyYWwgcmVmZXJlbmNlXG5yb290alF1ZXJ5ID0galF1ZXJ5KCBkb2N1bWVudCApO1xuXG5cbnZhciBycGFyZW50c3ByZXYgPSAvXig/OnBhcmVudHN8cHJldig/OlVudGlsfEFsbCkpLyxcblxuXHQvLyBNZXRob2RzIGd1YXJhbnRlZWQgdG8gcHJvZHVjZSBhIHVuaXF1ZSBzZXQgd2hlbiBzdGFydGluZyBmcm9tIGEgdW5pcXVlIHNldFxuXHRndWFyYW50ZWVkVW5pcXVlID0ge1xuXHRcdGNoaWxkcmVuOiB0cnVlLFxuXHRcdGNvbnRlbnRzOiB0cnVlLFxuXHRcdG5leHQ6IHRydWUsXG5cdFx0cHJldjogdHJ1ZVxuXHR9O1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGhhczogZnVuY3Rpb24oIHRhcmdldCApIHtcblx0XHR2YXIgdGFyZ2V0cyA9IGpRdWVyeSggdGFyZ2V0LCB0aGlzICksXG5cdFx0XHRsID0gdGFyZ2V0cy5sZW5ndGg7XG5cblx0XHRyZXR1cm4gdGhpcy5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGkgPSAwO1xuXHRcdFx0Zm9yICggOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRpZiAoIGpRdWVyeS5jb250YWlucyggdGhpcywgdGFyZ2V0c1sgaSBdICkgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHRydWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Y2xvc2VzdDogZnVuY3Rpb24oIHNlbGVjdG9ycywgY29udGV4dCApIHtcblx0XHR2YXIgY3VyLFxuXHRcdFx0aSA9IDAsXG5cdFx0XHRsID0gdGhpcy5sZW5ndGgsXG5cdFx0XHRtYXRjaGVkID0gW10sXG5cdFx0XHR0YXJnZXRzID0gdHlwZW9mIHNlbGVjdG9ycyAhPT0gXCJzdHJpbmdcIiAmJiBqUXVlcnkoIHNlbGVjdG9ycyApO1xuXG5cdFx0Ly8gUG9zaXRpb25hbCBzZWxlY3RvcnMgbmV2ZXIgbWF0Y2gsIHNpbmNlIHRoZXJlJ3Mgbm8gX3NlbGVjdGlvbl8gY29udGV4dFxuXHRcdGlmICggIXJuZWVkc0NvbnRleHQudGVzdCggc2VsZWN0b3JzICkgKSB7XG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdGZvciAoIGN1ciA9IHRoaXNbIGkgXTsgY3VyICYmIGN1ciAhPT0gY29udGV4dDsgY3VyID0gY3VyLnBhcmVudE5vZGUgKSB7XG5cblx0XHRcdFx0XHQvLyBBbHdheXMgc2tpcCBkb2N1bWVudCBmcmFnbWVudHNcblx0XHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA8IDExICYmICggdGFyZ2V0cyA/XG5cdFx0XHRcdFx0XHR0YXJnZXRzLmluZGV4KCBjdXIgKSA+IC0xIDpcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgcGFzcyBub24tZWxlbWVudHMgdG8gU2l6emxlXG5cdFx0XHRcdFx0XHRjdXIubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQubWF0Y2hlc1NlbGVjdG9yKCBjdXIsIHNlbGVjdG9ycyApICkgKSB7XG5cblx0XHRcdFx0XHRcdG1hdGNoZWQucHVzaCggY3VyICk7XG5cdFx0XHRcdFx0XHRicmVhaztcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5wdXNoU3RhY2soIG1hdGNoZWQubGVuZ3RoID4gMSA/IGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICkgOiBtYXRjaGVkICk7XG5cdH0sXG5cblx0Ly8gRGV0ZXJtaW5lIHRoZSBwb3NpdGlvbiBvZiBhbiBlbGVtZW50IHdpdGhpbiB0aGUgc2V0XG5cdGluZGV4OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdC8vIE5vIGFyZ3VtZW50LCByZXR1cm4gaW5kZXggaW4gcGFyZW50XG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybiAoIHRoaXNbIDAgXSAmJiB0aGlzWyAwIF0ucGFyZW50Tm9kZSApID8gdGhpcy5maXJzdCgpLnByZXZBbGwoKS5sZW5ndGggOiAtMTtcblx0XHR9XG5cblx0XHQvLyBJbmRleCBpbiBzZWxlY3RvclxuXHRcdGlmICggdHlwZW9mIGVsZW0gPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHRyZXR1cm4gaW5kZXhPZi5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdGhpc1sgMCBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gTG9jYXRlIHRoZSBwb3NpdGlvbiBvZiB0aGUgZGVzaXJlZCBlbGVtZW50XG5cdFx0cmV0dXJuIGluZGV4T2YuY2FsbCggdGhpcyxcblxuXHRcdFx0Ly8gSWYgaXQgcmVjZWl2ZXMgYSBqUXVlcnkgb2JqZWN0LCB0aGUgZmlyc3QgZWxlbWVudCBpcyB1c2VkXG5cdFx0XHRlbGVtLmpxdWVyeSA/IGVsZW1bIDAgXSA6IGVsZW1cblx0XHQpO1xuXHR9LFxuXG5cdGFkZDogZnVuY3Rpb24oIHNlbGVjdG9yLCBjb250ZXh0ICkge1xuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayhcblx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KFxuXHRcdFx0XHRqUXVlcnkubWVyZ2UoIHRoaXMuZ2V0KCksIGpRdWVyeSggc2VsZWN0b3IsIGNvbnRleHQgKSApXG5cdFx0XHQpXG5cdFx0KTtcblx0fSxcblxuXHRhZGRCYWNrOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHRoaXMuYWRkKCBzZWxlY3RvciA9PSBudWxsID9cblx0XHRcdHRoaXMucHJldk9iamVjdCA6IHRoaXMucHJldk9iamVjdC5maWx0ZXIoIHNlbGVjdG9yIClcblx0XHQpO1xuXHR9XG59ICk7XG5cbmZ1bmN0aW9uIHNpYmxpbmcoIGN1ciwgZGlyICkge1xuXHR3aGlsZSAoICggY3VyID0gY3VyWyBkaXIgXSApICYmIGN1ci5ub2RlVHlwZSAhPT0gMSApIHt9XG5cdHJldHVybiBjdXI7XG59XG5cbmpRdWVyeS5lYWNoKCB7XG5cdHBhcmVudDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0dmFyIHBhcmVudCA9IGVsZW0ucGFyZW50Tm9kZTtcblx0XHRyZXR1cm4gcGFyZW50ICYmIHBhcmVudC5ub2RlVHlwZSAhPT0gMTEgPyBwYXJlbnQgOiBudWxsO1xuXHR9LFxuXHRwYXJlbnRzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiApO1xuXHR9LFxuXHRwYXJlbnRzVW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcInBhcmVudE5vZGVcIiwgdW50aWwgKTtcblx0fSxcblx0bmV4dDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmcoIGVsZW0sIFwibmV4dFNpYmxpbmdcIiApO1xuXHR9LFxuXHRwcmV2OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZyggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0QWxsOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIgKTtcblx0fSxcblx0cHJldkFsbDogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIGRpciggZWxlbSwgXCJwcmV2aW91c1NpYmxpbmdcIiApO1xuXHR9LFxuXHRuZXh0VW50aWw6IGZ1bmN0aW9uKCBlbGVtLCBpLCB1bnRpbCApIHtcblx0XHRyZXR1cm4gZGlyKCBlbGVtLCBcIm5leHRTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHByZXZVbnRpbDogZnVuY3Rpb24oIGVsZW0sIGksIHVudGlsICkge1xuXHRcdHJldHVybiBkaXIoIGVsZW0sIFwicHJldmlvdXNTaWJsaW5nXCIsIHVudGlsICk7XG5cdH0sXG5cdHNpYmxpbmdzOiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRyZXR1cm4gc2libGluZ3MoICggZWxlbS5wYXJlbnROb2RlIHx8IHt9ICkuZmlyc3RDaGlsZCwgZWxlbSApO1xuXHR9LFxuXHRjaGlsZHJlbjogZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0cmV0dXJuIHNpYmxpbmdzKCBlbGVtLmZpcnN0Q2hpbGQgKTtcblx0fSxcblx0Y29udGVudHM6IGZ1bmN0aW9uKCBlbGVtICkge1xuICAgICAgICBpZiAoIG5vZGVOYW1lKCBlbGVtLCBcImlmcmFtZVwiICkgKSB7XG4gICAgICAgICAgICByZXR1cm4gZWxlbS5jb250ZW50RG9jdW1lbnQ7XG4gICAgICAgIH1cblxuICAgICAgICAvLyBTdXBwb3J0OiBJRSA5IC0gMTEgb25seSwgaU9TIDcgb25seSwgQW5kcm9pZCBCcm93c2VyIDw9NC4zIG9ubHlcbiAgICAgICAgLy8gVHJlYXQgdGhlIHRlbXBsYXRlIGVsZW1lbnQgYXMgYSByZWd1bGFyIG9uZSBpbiBicm93c2VycyB0aGF0XG4gICAgICAgIC8vIGRvbid0IHN1cHBvcnQgaXQuXG4gICAgICAgIGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGVtcGxhdGVcIiApICkge1xuICAgICAgICAgICAgZWxlbSA9IGVsZW0uY29udGVudCB8fCBlbGVtO1xuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIGpRdWVyeS5tZXJnZSggW10sIGVsZW0uY2hpbGROb2RlcyApO1xuXHR9XG59LCBmdW5jdGlvbiggbmFtZSwgZm4gKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHVudGlsLCBzZWxlY3RvciApIHtcblx0XHR2YXIgbWF0Y2hlZCA9IGpRdWVyeS5tYXAoIHRoaXMsIGZuLCB1bnRpbCApO1xuXG5cdFx0aWYgKCBuYW1lLnNsaWNlKCAtNSApICE9PSBcIlVudGlsXCIgKSB7XG5cdFx0XHRzZWxlY3RvciA9IHVudGlsO1xuXHRcdH1cblxuXHRcdGlmICggc2VsZWN0b3IgJiYgdHlwZW9mIHNlbGVjdG9yID09PSBcInN0cmluZ1wiICkge1xuXHRcdFx0bWF0Y2hlZCA9IGpRdWVyeS5maWx0ZXIoIHNlbGVjdG9yLCBtYXRjaGVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB0aGlzLmxlbmd0aCA+IDEgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBkdXBsaWNhdGVzXG5cdFx0XHRpZiAoICFndWFyYW50ZWVkVW5pcXVlWyBuYW1lIF0gKSB7XG5cdFx0XHRcdGpRdWVyeS51bmlxdWVTb3J0KCBtYXRjaGVkICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJldmVyc2Ugb3JkZXIgZm9yIHBhcmVudHMqIGFuZCBwcmV2LWRlcml2YXRpdmVzXG5cdFx0XHRpZiAoIHJwYXJlbnRzcHJldi50ZXN0KCBuYW1lICkgKSB7XG5cdFx0XHRcdG1hdGNoZWQucmV2ZXJzZSgpO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLnB1c2hTdGFjayggbWF0Y2hlZCApO1xuXHR9O1xufSApO1xudmFyIHJub3RodG1sd2hpdGUgPSAoIC9bXlxceDIwXFx0XFxyXFxuXFxmXSsvZyApO1xuXG5cblxuLy8gQ29udmVydCBTdHJpbmctZm9ybWF0dGVkIG9wdGlvbnMgaW50byBPYmplY3QtZm9ybWF0dGVkIG9uZXNcbmZ1bmN0aW9uIGNyZWF0ZU9wdGlvbnMoIG9wdGlvbnMgKSB7XG5cdHZhciBvYmplY3QgPSB7fTtcblx0alF1ZXJ5LmVhY2goIG9wdGlvbnMubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXSwgZnVuY3Rpb24oIF8sIGZsYWcgKSB7XG5cdFx0b2JqZWN0WyBmbGFnIF0gPSB0cnVlO1xuXHR9ICk7XG5cdHJldHVybiBvYmplY3Q7XG59XG5cbi8qXG4gKiBDcmVhdGUgYSBjYWxsYmFjayBsaXN0IHVzaW5nIHRoZSBmb2xsb3dpbmcgcGFyYW1ldGVyczpcbiAqXG4gKlx0b3B0aW9uczogYW4gb3B0aW9uYWwgbGlzdCBvZiBzcGFjZS1zZXBhcmF0ZWQgb3B0aW9ucyB0aGF0IHdpbGwgY2hhbmdlIGhvd1xuICpcdFx0XHR0aGUgY2FsbGJhY2sgbGlzdCBiZWhhdmVzIG9yIGEgbW9yZSB0cmFkaXRpb25hbCBvcHRpb24gb2JqZWN0XG4gKlxuICogQnkgZGVmYXVsdCBhIGNhbGxiYWNrIGxpc3Qgd2lsbCBhY3QgbGlrZSBhbiBldmVudCBjYWxsYmFjayBsaXN0IGFuZCBjYW4gYmVcbiAqIFwiZmlyZWRcIiBtdWx0aXBsZSB0aW1lcy5cbiAqXG4gKiBQb3NzaWJsZSBvcHRpb25zOlxuICpcbiAqXHRvbmNlOlx0XHRcdHdpbGwgZW5zdXJlIHRoZSBjYWxsYmFjayBsaXN0IGNhbiBvbmx5IGJlIGZpcmVkIG9uY2UgKGxpa2UgYSBEZWZlcnJlZClcbiAqXG4gKlx0bWVtb3J5Olx0XHRcdHdpbGwga2VlcCB0cmFjayBvZiBwcmV2aW91cyB2YWx1ZXMgYW5kIHdpbGwgY2FsbCBhbnkgY2FsbGJhY2sgYWRkZWRcbiAqXHRcdFx0XHRcdGFmdGVyIHRoZSBsaXN0IGhhcyBiZWVuIGZpcmVkIHJpZ2h0IGF3YXkgd2l0aCB0aGUgbGF0ZXN0IFwibWVtb3JpemVkXCJcbiAqXHRcdFx0XHRcdHZhbHVlcyAobGlrZSBhIERlZmVycmVkKVxuICpcbiAqXHR1bmlxdWU6XHRcdFx0d2lsbCBlbnN1cmUgYSBjYWxsYmFjayBjYW4gb25seSBiZSBhZGRlZCBvbmNlIChubyBkdXBsaWNhdGUgaW4gdGhlIGxpc3QpXG4gKlxuICpcdHN0b3BPbkZhbHNlOlx0aW50ZXJydXB0IGNhbGxpbmdzIHdoZW4gYSBjYWxsYmFjayByZXR1cm5zIGZhbHNlXG4gKlxuICovXG5qUXVlcnkuQ2FsbGJhY2tzID0gZnVuY3Rpb24oIG9wdGlvbnMgKSB7XG5cblx0Ly8gQ29udmVydCBvcHRpb25zIGZyb20gU3RyaW5nLWZvcm1hdHRlZCB0byBPYmplY3QtZm9ybWF0dGVkIGlmIG5lZWRlZFxuXHQvLyAod2UgY2hlY2sgaW4gY2FjaGUgZmlyc3QpXG5cdG9wdGlvbnMgPSB0eXBlb2Ygb3B0aW9ucyA9PT0gXCJzdHJpbmdcIiA/XG5cdFx0Y3JlYXRlT3B0aW9ucyggb3B0aW9ucyApIDpcblx0XHRqUXVlcnkuZXh0ZW5kKCB7fSwgb3B0aW9ucyApO1xuXG5cdHZhciAvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCBpcyBjdXJyZW50bHkgZmlyaW5nXG5cdFx0ZmlyaW5nLFxuXG5cdFx0Ly8gTGFzdCBmaXJlIHZhbHVlIGZvciBub24tZm9yZ2V0dGFibGUgbGlzdHNcblx0XHRtZW1vcnksXG5cblx0XHQvLyBGbGFnIHRvIGtub3cgaWYgbGlzdCB3YXMgYWxyZWFkeSBmaXJlZFxuXHRcdGZpcmVkLFxuXG5cdFx0Ly8gRmxhZyB0byBwcmV2ZW50IGZpcmluZ1xuXHRcdGxvY2tlZCxcblxuXHRcdC8vIEFjdHVhbCBjYWxsYmFjayBsaXN0XG5cdFx0bGlzdCA9IFtdLFxuXG5cdFx0Ly8gUXVldWUgb2YgZXhlY3V0aW9uIGRhdGEgZm9yIHJlcGVhdGFibGUgbGlzdHNcblx0XHRxdWV1ZSA9IFtdLFxuXG5cdFx0Ly8gSW5kZXggb2YgY3VycmVudGx5IGZpcmluZyBjYWxsYmFjayAobW9kaWZpZWQgYnkgYWRkL3JlbW92ZSBhcyBuZWVkZWQpXG5cdFx0ZmlyaW5nSW5kZXggPSAtMSxcblxuXHRcdC8vIEZpcmUgY2FsbGJhY2tzXG5cdFx0ZmlyZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHQvLyBFbmZvcmNlIHNpbmdsZS1maXJpbmdcblx0XHRcdGxvY2tlZCA9IGxvY2tlZCB8fCBvcHRpb25zLm9uY2U7XG5cblx0XHRcdC8vIEV4ZWN1dGUgY2FsbGJhY2tzIGZvciBhbGwgcGVuZGluZyBleGVjdXRpb25zLFxuXHRcdFx0Ly8gcmVzcGVjdGluZyBmaXJpbmdJbmRleCBvdmVycmlkZXMgYW5kIHJ1bnRpbWUgY2hhbmdlc1xuXHRcdFx0ZmlyZWQgPSBmaXJpbmcgPSB0cnVlO1xuXHRcdFx0Zm9yICggOyBxdWV1ZS5sZW5ndGg7IGZpcmluZ0luZGV4ID0gLTEgKSB7XG5cdFx0XHRcdG1lbW9yeSA9IHF1ZXVlLnNoaWZ0KCk7XG5cdFx0XHRcdHdoaWxlICggKytmaXJpbmdJbmRleCA8IGxpc3QubGVuZ3RoICkge1xuXG5cdFx0XHRcdFx0Ly8gUnVuIGNhbGxiYWNrIGFuZCBjaGVjayBmb3IgZWFybHkgdGVybWluYXRpb25cblx0XHRcdFx0XHRpZiAoIGxpc3RbIGZpcmluZ0luZGV4IF0uYXBwbHkoIG1lbW9yeVsgMCBdLCBtZW1vcnlbIDEgXSApID09PSBmYWxzZSAmJlxuXHRcdFx0XHRcdFx0b3B0aW9ucy5zdG9wT25GYWxzZSApIHtcblxuXHRcdFx0XHRcdFx0Ly8gSnVtcCB0byBlbmQgYW5kIGZvcmdldCB0aGUgZGF0YSBzbyAuYWRkIGRvZXNuJ3QgcmUtZmlyZVxuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aDtcblx0XHRcdFx0XHRcdG1lbW9yeSA9IGZhbHNlO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBGb3JnZXQgdGhlIGRhdGEgaWYgd2UncmUgZG9uZSB3aXRoIGl0XG5cdFx0XHRpZiAoICFvcHRpb25zLm1lbW9yeSApIHtcblx0XHRcdFx0bWVtb3J5ID0gZmFsc2U7XG5cdFx0XHR9XG5cblx0XHRcdGZpcmluZyA9IGZhbHNlO1xuXG5cdFx0XHQvLyBDbGVhbiB1cCBpZiB3ZSdyZSBkb25lIGZpcmluZyBmb3IgZ29vZFxuXHRcdFx0aWYgKCBsb2NrZWQgKSB7XG5cblx0XHRcdFx0Ly8gS2VlcCBhbiBlbXB0eSBsaXN0IGlmIHdlIGhhdmUgZGF0YSBmb3IgZnV0dXJlIGFkZCBjYWxsc1xuXHRcdFx0XHRpZiAoIG1lbW9yeSApIHtcblx0XHRcdFx0XHRsaXN0ID0gW107XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCB0aGlzIG9iamVjdCBpcyBzcGVudFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGxpc3QgPSBcIlwiO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdC8vIEFjdHVhbCBDYWxsYmFja3Mgb2JqZWN0XG5cdFx0c2VsZiA9IHtcblxuXHRcdFx0Ly8gQWRkIGEgY2FsbGJhY2sgb3IgYSBjb2xsZWN0aW9uIG9mIGNhbGxiYWNrcyB0byB0aGUgbGlzdFxuXHRcdFx0YWRkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXG5cdFx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBtZW1vcnkgZnJvbSBhIHBhc3QgcnVuLCB3ZSBzaG91bGQgZmlyZSBhZnRlciBhZGRpbmdcblx0XHRcdFx0XHRpZiAoIG1lbW9yeSAmJiAhZmlyaW5nICkge1xuXHRcdFx0XHRcdFx0ZmlyaW5nSW5kZXggPSBsaXN0Lmxlbmd0aCAtIDE7XG5cdFx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBtZW1vcnkgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQoIGZ1bmN0aW9uIGFkZCggYXJncyApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCBhcmdzLCBmdW5jdGlvbiggXywgYXJnICkge1xuXHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIGFyZyApICkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggIW9wdGlvbnMudW5pcXVlIHx8ICFzZWxmLmhhcyggYXJnICkgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRsaXN0LnB1c2goIGFyZyApO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSBlbHNlIGlmICggYXJnICYmIGFyZy5sZW5ndGggJiYgdG9UeXBlKCBhcmcgKSAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIEluc3BlY3QgcmVjdXJzaXZlbHlcblx0XHRcdFx0XHRcdFx0XHRhZGQoIGFyZyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0fSApKCBhcmd1bWVudHMgKTtcblxuXHRcdFx0XHRcdGlmICggbWVtb3J5ICYmICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gUmVtb3ZlIGEgY2FsbGJhY2sgZnJvbSB0aGUgbGlzdFxuXHRcdFx0cmVtb3ZlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0alF1ZXJ5LmVhY2goIGFyZ3VtZW50cywgZnVuY3Rpb24oIF8sIGFyZyApIHtcblx0XHRcdFx0XHR2YXIgaW5kZXg7XG5cdFx0XHRcdFx0d2hpbGUgKCAoIGluZGV4ID0galF1ZXJ5LmluQXJyYXkoIGFyZywgbGlzdCwgaW5kZXggKSApID4gLTEgKSB7XG5cdFx0XHRcdFx0XHRsaXN0LnNwbGljZSggaW5kZXgsIDEgKTtcblxuXHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGZpcmluZyBpbmRleGVzXG5cdFx0XHRcdFx0XHRpZiAoIGluZGV4IDw9IGZpcmluZ0luZGV4ICkge1xuXHRcdFx0XHRcdFx0XHRmaXJpbmdJbmRleC0tO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSApO1xuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIENoZWNrIGlmIGEgZ2l2ZW4gY2FsbGJhY2sgaXMgaW4gdGhlIGxpc3QuXG5cdFx0XHQvLyBJZiBubyBhcmd1bWVudCBpcyBnaXZlbiwgcmV0dXJuIHdoZXRoZXIgb3Igbm90IGxpc3QgaGFzIGNhbGxiYWNrcyBhdHRhY2hlZC5cblx0XHRcdGhhczogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRyZXR1cm4gZm4gP1xuXHRcdFx0XHRcdGpRdWVyeS5pbkFycmF5KCBmbiwgbGlzdCApID4gLTEgOlxuXHRcdFx0XHRcdGxpc3QubGVuZ3RoID4gMDtcblx0XHRcdH0sXG5cblx0XHRcdC8vIFJlbW92ZSBhbGwgY2FsbGJhY2tzIGZyb20gdGhlIGxpc3Rcblx0XHRcdGVtcHR5OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBsaXN0ICkge1xuXHRcdFx0XHRcdGxpc3QgPSBbXTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cblx0XHRcdC8vIERpc2FibGUgLmZpcmUgYW5kIC5hZGRcblx0XHRcdC8vIEFib3J0IGFueSBjdXJyZW50L3BlbmRpbmcgZXhlY3V0aW9uc1xuXHRcdFx0Ly8gQ2xlYXIgYWxsIGNhbGxiYWNrcyBhbmQgdmFsdWVzXG5cdFx0XHRkaXNhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0bG9ja2VkID0gcXVldWUgPSBbXTtcblx0XHRcdFx0bGlzdCA9IG1lbW9yeSA9IFwiXCI7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblx0XHRcdGRpc2FibGVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICFsaXN0O1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRGlzYWJsZSAuZmlyZVxuXHRcdFx0Ly8gQWxzbyBkaXNhYmxlIC5hZGQgdW5sZXNzIHdlIGhhdmUgbWVtb3J5IChzaW5jZSBpdCB3b3VsZCBoYXZlIG5vIGVmZmVjdClcblx0XHRcdC8vIEFib3J0IGFueSBwZW5kaW5nIGV4ZWN1dGlvbnNcblx0XHRcdGxvY2s6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRsb2NrZWQgPSBxdWV1ZSA9IFtdO1xuXHRcdFx0XHRpZiAoICFtZW1vcnkgJiYgIWZpcmluZyApIHtcblx0XHRcdFx0XHRsaXN0ID0gbWVtb3J5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH0sXG5cdFx0XHRsb2NrZWQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRyZXR1cm4gISFsb2NrZWQ7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBDYWxsIGFsbCBjYWxsYmFja3Mgd2l0aCB0aGUgZ2l2ZW4gY29udGV4dCBhbmQgYXJndW1lbnRzXG5cdFx0XHRmaXJlV2l0aDogZnVuY3Rpb24oIGNvbnRleHQsIGFyZ3MgKSB7XG5cdFx0XHRcdGlmICggIWxvY2tlZCApIHtcblx0XHRcdFx0XHRhcmdzID0gYXJncyB8fCBbXTtcblx0XHRcdFx0XHRhcmdzID0gWyBjb250ZXh0LCBhcmdzLnNsaWNlID8gYXJncy5zbGljZSgpIDogYXJncyBdO1xuXHRcdFx0XHRcdHF1ZXVlLnB1c2goIGFyZ3MgKTtcblx0XHRcdFx0XHRpZiAoICFmaXJpbmcgKSB7XG5cdFx0XHRcdFx0XHRmaXJlKCk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fSxcblxuXHRcdFx0Ly8gQ2FsbCBhbGwgdGhlIGNhbGxiYWNrcyB3aXRoIHRoZSBnaXZlbiBhcmd1bWVudHNcblx0XHRcdGZpcmU6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRzZWxmLmZpcmVXaXRoKCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHR9LFxuXG5cdFx0XHQvLyBUbyBrbm93IGlmIHRoZSBjYWxsYmFja3MgaGF2ZSBhbHJlYWR5IGJlZW4gY2FsbGVkIGF0IGxlYXN0IG9uY2Vcblx0XHRcdGZpcmVkOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0cmV0dXJuICEhZmlyZWQ7XG5cdFx0XHR9XG5cdFx0fTtcblxuXHRyZXR1cm4gc2VsZjtcbn07XG5cblxuZnVuY3Rpb24gSWRlbnRpdHkoIHYgKSB7XG5cdHJldHVybiB2O1xufVxuZnVuY3Rpb24gVGhyb3dlciggZXggKSB7XG5cdHRocm93IGV4O1xufVxuXG5mdW5jdGlvbiBhZG9wdFZhbHVlKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0LCBub1ZhbHVlICkge1xuXHR2YXIgbWV0aG9kO1xuXG5cdHRyeSB7XG5cblx0XHQvLyBDaGVjayBmb3IgcHJvbWlzZSBhc3BlY3QgZmlyc3QgdG8gcHJpdmlsZWdlIHN5bmNocm9ub3VzIGJlaGF2aW9yXG5cdFx0aWYgKCB2YWx1ZSAmJiBpc0Z1bmN0aW9uKCAoIG1ldGhvZCA9IHZhbHVlLnByb21pc2UgKSApICkge1xuXHRcdFx0bWV0aG9kLmNhbGwoIHZhbHVlICkuZG9uZSggcmVzb2x2ZSApLmZhaWwoIHJlamVjdCApO1xuXG5cdFx0Ly8gT3RoZXIgdGhlbmFibGVzXG5cdFx0fSBlbHNlIGlmICggdmFsdWUgJiYgaXNGdW5jdGlvbiggKCBtZXRob2QgPSB2YWx1ZS50aGVuICkgKSApIHtcblx0XHRcdG1ldGhvZC5jYWxsKCB2YWx1ZSwgcmVzb2x2ZSwgcmVqZWN0ICk7XG5cblx0XHQvLyBPdGhlciBub24tdGhlbmFibGVzXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gQ29udHJvbCBgcmVzb2x2ZWAgYXJndW1lbnRzIGJ5IGxldHRpbmcgQXJyYXkjc2xpY2UgY2FzdCBib29sZWFuIGBub1ZhbHVlYCB0byBpbnRlZ2VyOlxuXHRcdFx0Ly8gKiBmYWxzZTogWyB2YWx1ZSBdLnNsaWNlKCAwICkgPT4gcmVzb2x2ZSggdmFsdWUgKVxuXHRcdFx0Ly8gKiB0cnVlOiBbIHZhbHVlIF0uc2xpY2UoIDEgKSA9PiByZXNvbHZlKClcblx0XHRcdHJlc29sdmUuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdLnNsaWNlKCBub1ZhbHVlICkgKTtcblx0XHR9XG5cblx0Ly8gRm9yIFByb21pc2VzL0ErLCBjb252ZXJ0IGV4Y2VwdGlvbnMgaW50byByZWplY3Rpb25zXG5cdC8vIFNpbmNlIGpRdWVyeS53aGVuIGRvZXNuJ3QgdW53cmFwIHRoZW5hYmxlcywgd2UgY2FuIHNraXAgdGhlIGV4dHJhIGNoZWNrcyBhcHBlYXJpbmcgaW5cblx0Ly8gRGVmZXJyZWQjdGhlbiB0byBjb25kaXRpb25hbGx5IHN1cHByZXNzIHJlamVjdGlvbi5cblx0fSBjYXRjaCAoIHZhbHVlICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgb25seVxuXHRcdC8vIFN0cmljdCBtb2RlIGZ1bmN0aW9ucyBpbnZva2VkIHdpdGhvdXQgLmNhbGwvLmFwcGx5IGdldCBnbG9iYWwtb2JqZWN0IGNvbnRleHRcblx0XHRyZWplY3QuYXBwbHkoIHVuZGVmaW5lZCwgWyB2YWx1ZSBdICk7XG5cdH1cbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdERlZmVycmVkOiBmdW5jdGlvbiggZnVuYyApIHtcblx0XHR2YXIgdHVwbGVzID0gW1xuXG5cdFx0XHRcdC8vIGFjdGlvbiwgYWRkIGxpc3RlbmVyLCBjYWxsYmFja3MsXG5cdFx0XHRcdC8vIC4uLiAudGhlbiBoYW5kbGVycywgYXJndW1lbnQgaW5kZXgsIFtmaW5hbCBzdGF0ZV1cblx0XHRcdFx0WyBcIm5vdGlmeVwiLCBcInByb2dyZXNzXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwibWVtb3J5XCIgKSxcblx0XHRcdFx0XHRqUXVlcnkuQ2FsbGJhY2tzKCBcIm1lbW9yeVwiICksIDIgXSxcblx0XHRcdFx0WyBcInJlc29sdmVcIiwgXCJkb25lXCIsIGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLFxuXHRcdFx0XHRcdGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLCAwLCBcInJlc29sdmVkXCIgXSxcblx0XHRcdFx0WyBcInJlamVjdFwiLCBcImZhaWxcIiwgalF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cdFx0XHRcdFx0alF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksIDEsIFwicmVqZWN0ZWRcIiBdXG5cdFx0XHRdLFxuXHRcdFx0c3RhdGUgPSBcInBlbmRpbmdcIixcblx0XHRcdHByb21pc2UgPSB7XG5cdFx0XHRcdHN0YXRlOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gc3RhdGU7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdGFsd2F5czogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0ZGVmZXJyZWQuZG9uZSggYXJndW1lbnRzICkuZmFpbCggYXJndW1lbnRzICk7XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cdFx0XHRcdFwiY2F0Y2hcIjogZnVuY3Rpb24oIGZuICkge1xuXHRcdFx0XHRcdHJldHVybiBwcm9taXNlLnRoZW4oIG51bGwsIGZuICk7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gS2VlcCBwaXBlIGZvciBiYWNrLWNvbXBhdFxuXHRcdFx0XHRwaXBlOiBmdW5jdGlvbiggLyogZm5Eb25lLCBmbkZhaWwsIGZuUHJvZ3Jlc3MgKi8gKSB7XG5cdFx0XHRcdFx0dmFyIGZucyA9IGFyZ3VtZW50cztcblxuXHRcdFx0XHRcdHJldHVybiBqUXVlcnkuRGVmZXJyZWQoIGZ1bmN0aW9uKCBuZXdEZWZlciApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5lYWNoKCB0dXBsZXMsIGZ1bmN0aW9uKCBpLCB0dXBsZSApIHtcblxuXHRcdFx0XHRcdFx0XHQvLyBNYXAgdHVwbGVzIChwcm9ncmVzcywgZG9uZSwgZmFpbCkgdG8gYXJndW1lbnRzIChkb25lLCBmYWlsLCBwcm9ncmVzcylcblx0XHRcdFx0XHRcdFx0dmFyIGZuID0gaXNGdW5jdGlvbiggZm5zWyB0dXBsZVsgNCBdIF0gKSAmJiBmbnNbIHR1cGxlWyA0IF0gXTtcblxuXHRcdFx0XHRcdFx0XHQvLyBkZWZlcnJlZC5wcm9ncmVzcyhmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5ub3RpZnkgfSlcblx0XHRcdFx0XHRcdFx0Ly8gZGVmZXJyZWQuZG9uZShmdW5jdGlvbigpIHsgYmluZCB0byBuZXdEZWZlciBvciBuZXdEZWZlci5yZXNvbHZlIH0pXG5cdFx0XHRcdFx0XHRcdC8vIGRlZmVycmVkLmZhaWwoZnVuY3Rpb24oKSB7IGJpbmQgdG8gbmV3RGVmZXIgb3IgbmV3RGVmZXIucmVqZWN0IH0pXG5cdFx0XHRcdFx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMSBdIF0oIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCA9IGZuICYmIGZuLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHJldHVybmVkICYmIGlzRnVuY3Rpb24oIHJldHVybmVkLnByb21pc2UgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnByb21pc2UoKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQucHJvZ3Jlc3MoIG5ld0RlZmVyLm5vdGlmeSApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdC5kb25lKCBuZXdEZWZlci5yZXNvbHZlIClcblx0XHRcdFx0XHRcdFx0XHRcdFx0LmZhaWwoIG5ld0RlZmVyLnJlamVjdCApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRuZXdEZWZlclsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHRoaXMsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGZuID8gWyByZXR1cm5lZCBdIDogYXJndW1lbnRzXG5cdFx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0fSApO1xuXHRcdFx0XHRcdFx0Zm5zID0gbnVsbDtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXHRcdFx0XHR0aGVuOiBmdW5jdGlvbiggb25GdWxmaWxsZWQsIG9uUmVqZWN0ZWQsIG9uUHJvZ3Jlc3MgKSB7XG5cdFx0XHRcdFx0dmFyIG1heERlcHRoID0gMDtcblx0XHRcdFx0XHRmdW5jdGlvbiByZXNvbHZlKCBkZXB0aCwgZGVmZXJyZWQsIGhhbmRsZXIsIHNwZWNpYWwgKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRcdHZhciB0aGF0ID0gdGhpcyxcblx0XHRcdFx0XHRcdFx0XHRhcmdzID0gYXJndW1lbnRzLFxuXHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3cgPSBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0XHRcdHZhciByZXR1cm5lZCwgdGhlbjtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMy4zLjNcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU5XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBJZ25vcmUgZG91YmxlLXJlc29sdXRpb24gYXR0ZW1wdHNcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggPCBtYXhEZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCA9IGhhbmRsZXIuYXBwbHkoIHRoYXQsIGFyZ3MgKTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuMVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gaHR0cHM6Ly9wcm9taXNlc2FwbHVzLmNvbS8jcG9pbnQtNDhcblx0XHRcdFx0XHRcdFx0XHRcdGlmICggcmV0dXJuZWQgPT09IGRlZmVycmVkLnByb21pc2UoKSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0dGhyb3cgbmV3IFR5cGVFcnJvciggXCJUaGVuYWJsZSBzZWxmLXJlc29sdXRpb25cIiApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBQcm9taXNlcy9BKyBzZWN0aW9ucyAyLjMuMy4xLCAzLjVcblx0XHRcdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU0XG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC03NVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gUmV0cmlldmUgYHRoZW5gIG9ubHkgb25jZVxuXHRcdFx0XHRcdFx0XHRcdFx0dGhlbiA9IHJldHVybmVkICYmXG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gU3VwcG9ydDogUHJvbWlzZXMvQSsgc2VjdGlvbiAyLjMuNFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02NFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IGNoZWNrIG9iamVjdHMgYW5kIGZ1bmN0aW9ucyBmb3IgdGhlbmFiaWxpdHlcblx0XHRcdFx0XHRcdFx0XHRcdFx0KCB0eXBlb2YgcmV0dXJuZWQgPT09IFwib2JqZWN0XCIgfHxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0eXBlb2YgcmV0dXJuZWQgPT09IFwiZnVuY3Rpb25cIiApICYmXG5cdFx0XHRcdFx0XHRcdFx0XHRcdHJldHVybmVkLnRoZW47XG5cblx0XHRcdFx0XHRcdFx0XHRcdC8vIEhhbmRsZSBhIHJldHVybmVkIHRoZW5hYmxlXG5cdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHRoZW4gKSApIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBTcGVjaWFsIHByb2Nlc3NvcnMgKG5vdGlmeSkganVzdCB3YWl0IGZvciByZXNvbHV0aW9uXG5cdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggc3BlY2lhbCApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGVuLmNhbGwoXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXR1cm5lZCxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgVGhyb3dlciwgc3BlY2lhbCApXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBOb3JtYWwgcHJvY2Vzc29ycyAocmVzb2x2ZSkgYWxzbyBob29rIGludG8gcHJvZ3Jlc3Ncblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIC4uLmFuZCBkaXNyZWdhcmQgb2xkZXIgcmVzb2x1dGlvbiB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRtYXhEZXB0aCsrO1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhlbi5jYWxsKFxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0cmV0dXJuZWQsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIElkZW50aXR5LCBzcGVjaWFsICksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRyZXNvbHZlKCBtYXhEZXB0aCwgZGVmZXJyZWQsIFRocm93ZXIsIHNwZWNpYWwgKSxcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHJlc29sdmUoIG1heERlcHRoLCBkZWZlcnJlZCwgSWRlbnRpdHksXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGggKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdCk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSGFuZGxlIGFsbCBvdGhlciByZXR1cm5lZCB2YWx1ZXNcblx0XHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0Ly8gT25seSBzdWJzdGl0dXRlIGhhbmRsZXJzIHBhc3Mgb24gY29udGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0aWYgKCBoYW5kbGVyICE9PSBJZGVudGl0eSApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHR0aGF0ID0gdW5kZWZpbmVkO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGFyZ3MgPSBbIHJldHVybmVkIF07XG5cdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBQcm9jZXNzIHRoZSB2YWx1ZShzKVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBEZWZhdWx0IHByb2Nlc3MgaXMgcmVzb2x2ZVxuXHRcdFx0XHRcdFx0XHRcdFx0XHQoIHNwZWNpYWwgfHwgZGVmZXJyZWQucmVzb2x2ZVdpdGggKSggdGhhdCwgYXJncyApO1xuXHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IG5vcm1hbCBwcm9jZXNzb3JzIChyZXNvbHZlKSBjYXRjaCBhbmQgcmVqZWN0IGV4Y2VwdGlvbnNcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzID0gc3BlY2lhbCA/XG5cdFx0XHRcdFx0XHRcdFx0XHRtaWdodFRocm93IDpcblx0XHRcdFx0XHRcdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR0cnkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdG1pZ2h0VGhyb3coKTtcblx0XHRcdFx0XHRcdFx0XHRcdFx0fSBjYXRjaCAoIGUgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5leGNlcHRpb25Ib29rICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2soIGUsXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdHByb2Nlc3Muc3RhY2tUcmFjZSApO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy40LjFcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBodHRwczovL3Byb21pc2VzYXBsdXMuY29tLyNwb2ludC02MVxuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdC8vIElnbm9yZSBwb3N0LXJlc29sdXRpb24gZXhjZXB0aW9uc1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggZGVwdGggKyAxID49IG1heERlcHRoICkge1xuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBPbmx5IHN1YnN0aXR1dGUgaGFuZGxlcnMgcGFzcyBvbiBjb250ZXh0XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBhbmQgbXVsdGlwbGUgdmFsdWVzIChub24tc3BlYyBiZWhhdmlvcilcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdGlmICggaGFuZGxlciAhPT0gVGhyb3dlciApIHtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0dGhhdCA9IHVuZGVmaW5lZDtcblx0XHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0YXJncyA9IFsgZSBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0XHRkZWZlcnJlZC5yZWplY3RXaXRoKCB0aGF0LCBhcmdzICk7XG5cdFx0XHRcdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdFx0XHR9O1xuXG5cdFx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFByb21pc2VzL0ErIHNlY3Rpb24gMi4zLjMuMy4xXG5cdFx0XHRcdFx0XHRcdC8vIGh0dHBzOi8vcHJvbWlzZXNhcGx1cy5jb20vI3BvaW50LTU3XG5cdFx0XHRcdFx0XHRcdC8vIFJlLXJlc29sdmUgcHJvbWlzZXMgaW1tZWRpYXRlbHkgdG8gZG9kZ2UgZmFsc2UgcmVqZWN0aW9uIGZyb21cblx0XHRcdFx0XHRcdFx0Ly8gc3Vic2VxdWVudCBlcnJvcnNcblx0XHRcdFx0XHRcdFx0aWYgKCBkZXB0aCApIHtcblx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzKCk7XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBDYWxsIGFuIG9wdGlvbmFsIGhvb2sgdG8gcmVjb3JkIHRoZSBzdGFjaywgaW4gY2FzZSBvZiBleGNlcHRpb25cblx0XHRcdFx0XHRcdFx0XHQvLyBzaW5jZSBpdCdzIG90aGVyd2lzZSBsb3N0IHdoZW4gZXhlY3V0aW9uIGdvZXMgYXN5bmNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGpRdWVyeS5EZWZlcnJlZC5nZXRTdGFja0hvb2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRwcm9jZXNzLnN0YWNrVHJhY2UgPSBqUXVlcnkuRGVmZXJyZWQuZ2V0U3RhY2tIb29rKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdHdpbmRvdy5zZXRUaW1lb3V0KCBwcm9jZXNzICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0cmV0dXJuIGpRdWVyeS5EZWZlcnJlZCggZnVuY3Rpb24oIG5ld0RlZmVyICkge1xuXG5cdFx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUHJvZ3Jlc3MgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblByb2dyZXNzIDpcblx0XHRcdFx0XHRcdFx0XHRcdElkZW50aXR5LFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLm5vdGlmeVdpdGhcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblxuXHRcdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmFkZCggLi4uIClcblx0XHRcdFx0XHRcdHR1cGxlc1sgMSBdWyAzIF0uYWRkKFxuXHRcdFx0XHRcdFx0XHRyZXNvbHZlKFxuXHRcdFx0XHRcdFx0XHRcdDAsXG5cdFx0XHRcdFx0XHRcdFx0bmV3RGVmZXIsXG5cdFx0XHRcdFx0XHRcdFx0aXNGdW5jdGlvbiggb25GdWxmaWxsZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvbkZ1bGZpbGxlZCA6XG5cdFx0XHRcdFx0XHRcdFx0XHRJZGVudGl0eVxuXHRcdFx0XHRcdFx0XHQpXG5cdFx0XHRcdFx0XHQpO1xuXG5cdFx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5hZGQoIC4uLiApXG5cdFx0XHRcdFx0XHR0dXBsZXNbIDIgXVsgMyBdLmFkZChcblx0XHRcdFx0XHRcdFx0cmVzb2x2ZShcblx0XHRcdFx0XHRcdFx0XHQwLFxuXHRcdFx0XHRcdFx0XHRcdG5ld0RlZmVyLFxuXHRcdFx0XHRcdFx0XHRcdGlzRnVuY3Rpb24oIG9uUmVqZWN0ZWQgKSA/XG5cdFx0XHRcdFx0XHRcdFx0XHRvblJlamVjdGVkIDpcblx0XHRcdFx0XHRcdFx0XHRcdFRocm93ZXJcblx0XHRcdFx0XHRcdFx0KVxuXHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHR9ICkucHJvbWlzZSgpO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIEdldCBhIHByb21pc2UgZm9yIHRoaXMgZGVmZXJyZWRcblx0XHRcdFx0Ly8gSWYgb2JqIGlzIHByb3ZpZGVkLCB0aGUgcHJvbWlzZSBhc3BlY3QgaXMgYWRkZWQgdG8gdGhlIG9iamVjdFxuXHRcdFx0XHRwcm9taXNlOiBmdW5jdGlvbiggb2JqICkge1xuXHRcdFx0XHRcdHJldHVybiBvYmogIT0gbnVsbCA/IGpRdWVyeS5leHRlbmQoIG9iaiwgcHJvbWlzZSApIDogcHJvbWlzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlZmVycmVkID0ge307XG5cblx0XHQvLyBBZGQgbGlzdC1zcGVjaWZpYyBtZXRob2RzXG5cdFx0alF1ZXJ5LmVhY2goIHR1cGxlcywgZnVuY3Rpb24oIGksIHR1cGxlICkge1xuXHRcdFx0dmFyIGxpc3QgPSB0dXBsZVsgMiBdLFxuXHRcdFx0XHRzdGF0ZVN0cmluZyA9IHR1cGxlWyA1IF07XG5cblx0XHRcdC8vIHByb21pc2UucHJvZ3Jlc3MgPSBsaXN0LmFkZFxuXHRcdFx0Ly8gcHJvbWlzZS5kb25lID0gbGlzdC5hZGRcblx0XHRcdC8vIHByb21pc2UuZmFpbCA9IGxpc3QuYWRkXG5cdFx0XHRwcm9taXNlWyB0dXBsZVsgMSBdIF0gPSBsaXN0LmFkZDtcblxuXHRcdFx0Ly8gSGFuZGxlIHN0YXRlXG5cdFx0XHRpZiAoIHN0YXRlU3RyaW5nICkge1xuXHRcdFx0XHRsaXN0LmFkZChcblx0XHRcdFx0XHRmdW5jdGlvbigpIHtcblxuXHRcdFx0XHRcdFx0Ly8gc3RhdGUgPSBcInJlc29sdmVkXCIgKGkuZS4sIGZ1bGZpbGxlZClcblx0XHRcdFx0XHRcdC8vIHN0YXRlID0gXCJyZWplY3RlZFwiXG5cdFx0XHRcdFx0XHRzdGF0ZSA9IHN0YXRlU3RyaW5nO1xuXHRcdFx0XHRcdH0sXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdC8vIGZ1bGZpbGxlZF9jYWxsYmFja3MuZGlzYWJsZVxuXHRcdFx0XHRcdHR1cGxlc1sgMyAtIGkgXVsgMiBdLmRpc2FibGUsXG5cblx0XHRcdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5kaXNhYmxlXG5cdFx0XHRcdFx0Ly8gZnVsZmlsbGVkX2hhbmRsZXJzLmRpc2FibGVcblx0XHRcdFx0XHR0dXBsZXNbIDMgLSBpIF1bIDMgXS5kaXNhYmxlLFxuXG5cdFx0XHRcdFx0Ly8gcHJvZ3Jlc3NfY2FsbGJhY2tzLmxvY2tcblx0XHRcdFx0XHR0dXBsZXNbIDAgXVsgMiBdLmxvY2ssXG5cblx0XHRcdFx0XHQvLyBwcm9ncmVzc19oYW5kbGVycy5sb2NrXG5cdFx0XHRcdFx0dHVwbGVzWyAwIF1bIDMgXS5sb2NrXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIHByb2dyZXNzX2hhbmRsZXJzLmZpcmVcblx0XHRcdC8vIGZ1bGZpbGxlZF9oYW5kbGVycy5maXJlXG5cdFx0XHQvLyByZWplY3RlZF9oYW5kbGVycy5maXJlXG5cdFx0XHRsaXN0LmFkZCggdHVwbGVbIDMgXS5maXJlICk7XG5cblx0XHRcdC8vIGRlZmVycmVkLm5vdGlmeSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5ub3RpZnlXaXRoKC4uLikgfVxuXHRcdFx0Ly8gZGVmZXJyZWQucmVzb2x2ZSA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZXNvbHZlV2l0aCguLi4pIH1cblx0XHRcdC8vIGRlZmVycmVkLnJlamVjdCA9IGZ1bmN0aW9uKCkgeyBkZWZlcnJlZC5yZWplY3RXaXRoKC4uLikgfVxuXHRcdFx0ZGVmZXJyZWRbIHR1cGxlWyAwIF0gXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRkZWZlcnJlZFsgdHVwbGVbIDAgXSArIFwiV2l0aFwiIF0oIHRoaXMgPT09IGRlZmVycmVkID8gdW5kZWZpbmVkIDogdGhpcywgYXJndW1lbnRzICk7XG5cdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0fTtcblxuXHRcdFx0Ly8gZGVmZXJyZWQubm90aWZ5V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdC8vIGRlZmVycmVkLnJlc29sdmVXaXRoID0gbGlzdC5maXJlV2l0aFxuXHRcdFx0Ly8gZGVmZXJyZWQucmVqZWN0V2l0aCA9IGxpc3QuZmlyZVdpdGhcblx0XHRcdGRlZmVycmVkWyB0dXBsZVsgMCBdICsgXCJXaXRoXCIgXSA9IGxpc3QuZmlyZVdpdGg7XG5cdFx0fSApO1xuXG5cdFx0Ly8gTWFrZSB0aGUgZGVmZXJyZWQgYSBwcm9taXNlXG5cdFx0cHJvbWlzZS5wcm9taXNlKCBkZWZlcnJlZCApO1xuXG5cdFx0Ly8gQ2FsbCBnaXZlbiBmdW5jIGlmIGFueVxuXHRcdGlmICggZnVuYyApIHtcblx0XHRcdGZ1bmMuY2FsbCggZGVmZXJyZWQsIGRlZmVycmVkICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsIGRvbmUhXG5cdFx0cmV0dXJuIGRlZmVycmVkO1xuXHR9LFxuXG5cdC8vIERlZmVycmVkIGhlbHBlclxuXHR3aGVuOiBmdW5jdGlvbiggc2luZ2xlVmFsdWUgKSB7XG5cdFx0dmFyXG5cblx0XHRcdC8vIGNvdW50IG9mIHVuY29tcGxldGVkIHN1Ym9yZGluYXRlc1xuXHRcdFx0cmVtYWluaW5nID0gYXJndW1lbnRzLmxlbmd0aCxcblxuXHRcdFx0Ly8gY291bnQgb2YgdW5wcm9jZXNzZWQgYXJndW1lbnRzXG5cdFx0XHRpID0gcmVtYWluaW5nLFxuXG5cdFx0XHQvLyBzdWJvcmRpbmF0ZSBmdWxmaWxsbWVudCBkYXRhXG5cdFx0XHRyZXNvbHZlQ29udGV4dHMgPSBBcnJheSggaSApLFxuXHRcdFx0cmVzb2x2ZVZhbHVlcyA9IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApLFxuXG5cdFx0XHQvLyB0aGUgbWFzdGVyIERlZmVycmVkXG5cdFx0XHRtYXN0ZXIgPSBqUXVlcnkuRGVmZXJyZWQoKSxcblxuXHRcdFx0Ly8gc3Vib3JkaW5hdGUgY2FsbGJhY2sgZmFjdG9yeVxuXHRcdFx0dXBkYXRlRnVuYyA9IGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0XHRyZXR1cm4gZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0XHRcdHJlc29sdmVDb250ZXh0c1sgaSBdID0gdGhpcztcblx0XHRcdFx0XHRyZXNvbHZlVmFsdWVzWyBpIF0gPSBhcmd1bWVudHMubGVuZ3RoID4gMSA/IHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApIDogdmFsdWU7XG5cdFx0XHRcdFx0aWYgKCAhKCAtLXJlbWFpbmluZyApICkge1xuXHRcdFx0XHRcdFx0bWFzdGVyLnJlc29sdmVXaXRoKCByZXNvbHZlQ29udGV4dHMsIHJlc29sdmVWYWx1ZXMgKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH07XG5cdFx0XHR9O1xuXG5cdFx0Ly8gU2luZ2xlLSBhbmQgZW1wdHkgYXJndW1lbnRzIGFyZSBhZG9wdGVkIGxpa2UgUHJvbWlzZS5yZXNvbHZlXG5cdFx0aWYgKCByZW1haW5pbmcgPD0gMSApIHtcblx0XHRcdGFkb3B0VmFsdWUoIHNpbmdsZVZhbHVlLCBtYXN0ZXIuZG9uZSggdXBkYXRlRnVuYyggaSApICkucmVzb2x2ZSwgbWFzdGVyLnJlamVjdCxcblx0XHRcdFx0IXJlbWFpbmluZyApO1xuXG5cdFx0XHQvLyBVc2UgLnRoZW4oKSB0byB1bndyYXAgc2Vjb25kYXJ5IHRoZW5hYmxlcyAoY2YuIGdoLTMwMDApXG5cdFx0XHRpZiAoIG1hc3Rlci5zdGF0ZSgpID09PSBcInBlbmRpbmdcIiB8fFxuXHRcdFx0XHRpc0Z1bmN0aW9uKCByZXNvbHZlVmFsdWVzWyBpIF0gJiYgcmVzb2x2ZVZhbHVlc1sgaSBdLnRoZW4gKSApIHtcblxuXHRcdFx0XHRyZXR1cm4gbWFzdGVyLnRoZW4oKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBNdWx0aXBsZSBhcmd1bWVudHMgYXJlIGFnZ3JlZ2F0ZWQgbGlrZSBQcm9taXNlLmFsbCBhcnJheSBlbGVtZW50c1xuXHRcdHdoaWxlICggaS0tICkge1xuXHRcdFx0YWRvcHRWYWx1ZSggcmVzb2x2ZVZhbHVlc1sgaSBdLCB1cGRhdGVGdW5jKCBpICksIG1hc3Rlci5yZWplY3QgKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gbWFzdGVyLnByb21pc2UoKTtcblx0fVxufSApO1xuXG5cbi8vIFRoZXNlIHVzdWFsbHkgaW5kaWNhdGUgYSBwcm9ncmFtbWVyIG1pc3Rha2UgZHVyaW5nIGRldmVsb3BtZW50LFxuLy8gd2FybiBhYm91dCB0aGVtIEFTQVAgcmF0aGVyIHRoYW4gc3dhbGxvd2luZyB0aGVtIGJ5IGRlZmF1bHQuXG52YXIgcmVycm9yTmFtZXMgPSAvXihFdmFsfEludGVybmFsfFJhbmdlfFJlZmVyZW5jZXxTeW50YXh8VHlwZXxVUkkpRXJyb3IkLztcblxualF1ZXJ5LkRlZmVycmVkLmV4Y2VwdGlvbkhvb2sgPSBmdW5jdGlvbiggZXJyb3IsIHN0YWNrICkge1xuXG5cdC8vIFN1cHBvcnQ6IElFIDggLSA5IG9ubHlcblx0Ly8gQ29uc29sZSBleGlzdHMgd2hlbiBkZXYgdG9vbHMgYXJlIG9wZW4sIHdoaWNoIGNhbiBoYXBwZW4gYXQgYW55IHRpbWVcblx0aWYgKCB3aW5kb3cuY29uc29sZSAmJiB3aW5kb3cuY29uc29sZS53YXJuICYmIGVycm9yICYmIHJlcnJvck5hbWVzLnRlc3QoIGVycm9yLm5hbWUgKSApIHtcblx0XHR3aW5kb3cuY29uc29sZS53YXJuKCBcImpRdWVyeS5EZWZlcnJlZCBleGNlcHRpb246IFwiICsgZXJyb3IubWVzc2FnZSwgZXJyb3Iuc3RhY2ssIHN0YWNrICk7XG5cdH1cbn07XG5cblxuXG5cbmpRdWVyeS5yZWFkeUV4Y2VwdGlvbiA9IGZ1bmN0aW9uKCBlcnJvciApIHtcblx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdHRocm93IGVycm9yO1xuXHR9ICk7XG59O1xuXG5cblxuXG4vLyBUaGUgZGVmZXJyZWQgdXNlZCBvbiBET00gcmVhZHlcbnZhciByZWFkeUxpc3QgPSBqUXVlcnkuRGVmZXJyZWQoKTtcblxualF1ZXJ5LmZuLnJlYWR5ID0gZnVuY3Rpb24oIGZuICkge1xuXG5cdHJlYWR5TGlzdFxuXHRcdC50aGVuKCBmbiApXG5cblx0XHQvLyBXcmFwIGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiBpbiBhIGZ1bmN0aW9uIHNvIHRoYXQgdGhlIGxvb2t1cFxuXHRcdC8vIGhhcHBlbnMgYXQgdGhlIHRpbWUgb2YgZXJyb3IgaGFuZGxpbmcgaW5zdGVhZCBvZiBjYWxsYmFja1xuXHRcdC8vIHJlZ2lzdHJhdGlvbi5cblx0XHQuY2F0Y2goIGZ1bmN0aW9uKCBlcnJvciApIHtcblx0XHRcdGpRdWVyeS5yZWFkeUV4Y2VwdGlvbiggZXJyb3IgKTtcblx0XHR9ICk7XG5cblx0cmV0dXJuIHRoaXM7XG59O1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gSXMgdGhlIERPTSByZWFkeSB0byBiZSB1c2VkPyBTZXQgdG8gdHJ1ZSBvbmNlIGl0IG9jY3Vycy5cblx0aXNSZWFkeTogZmFsc2UsXG5cblx0Ly8gQSBjb3VudGVyIHRvIHRyYWNrIGhvdyBtYW55IGl0ZW1zIHRvIHdhaXQgZm9yIGJlZm9yZVxuXHQvLyB0aGUgcmVhZHkgZXZlbnQgZmlyZXMuIFNlZSAjNjc4MVxuXHRyZWFkeVdhaXQ6IDEsXG5cblx0Ly8gSGFuZGxlIHdoZW4gdGhlIERPTSBpcyByZWFkeVxuXHRyZWFkeTogZnVuY3Rpb24oIHdhaXQgKSB7XG5cblx0XHQvLyBBYm9ydCBpZiB0aGVyZSBhcmUgcGVuZGluZyBob2xkcyBvciB3ZSdyZSBhbHJlYWR5IHJlYWR5XG5cdFx0aWYgKCB3YWl0ID09PSB0cnVlID8gLS1qUXVlcnkucmVhZHlXYWl0IDogalF1ZXJ5LmlzUmVhZHkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gUmVtZW1iZXIgdGhhdCB0aGUgRE9NIGlzIHJlYWR5XG5cdFx0alF1ZXJ5LmlzUmVhZHkgPSB0cnVlO1xuXG5cdFx0Ly8gSWYgYSBub3JtYWwgRE9NIFJlYWR5IGV2ZW50IGZpcmVkLCBkZWNyZW1lbnQsIGFuZCB3YWl0IGlmIG5lZWQgYmVcblx0XHRpZiAoIHdhaXQgIT09IHRydWUgJiYgLS1qUXVlcnkucmVhZHlXYWl0ID4gMCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBJZiB0aGVyZSBhcmUgZnVuY3Rpb25zIGJvdW5kLCB0byBleGVjdXRlXG5cdFx0cmVhZHlMaXN0LnJlc29sdmVXaXRoKCBkb2N1bWVudCwgWyBqUXVlcnkgXSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5yZWFkeS50aGVuID0gcmVhZHlMaXN0LnRoZW47XG5cbi8vIFRoZSByZWFkeSBldmVudCBoYW5kbGVyIGFuZCBzZWxmIGNsZWFudXAgbWV0aG9kXG5mdW5jdGlvbiBjb21wbGV0ZWQoKSB7XG5cdGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblx0d2luZG93LnJlbW92ZUV2ZW50TGlzdGVuZXIoIFwibG9hZFwiLCBjb21wbGV0ZWQgKTtcblx0alF1ZXJ5LnJlYWR5KCk7XG59XG5cbi8vIENhdGNoIGNhc2VzIHdoZXJlICQoZG9jdW1lbnQpLnJlYWR5KCkgaXMgY2FsbGVkXG4vLyBhZnRlciB0aGUgYnJvd3NlciBldmVudCBoYXMgYWxyZWFkeSBvY2N1cnJlZC5cbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDEwIG9ubHlcbi8vIE9sZGVyIElFIHNvbWV0aW1lcyBzaWduYWxzIFwiaW50ZXJhY3RpdmVcIiB0b28gc29vblxuaWYgKCBkb2N1bWVudC5yZWFkeVN0YXRlID09PSBcImNvbXBsZXRlXCIgfHxcblx0KCBkb2N1bWVudC5yZWFkeVN0YXRlICE9PSBcImxvYWRpbmdcIiAmJiAhZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50LmRvU2Nyb2xsICkgKSB7XG5cblx0Ly8gSGFuZGxlIGl0IGFzeW5jaHJvbm91c2x5IHRvIGFsbG93IHNjcmlwdHMgdGhlIG9wcG9ydHVuaXR5IHRvIGRlbGF5IHJlYWR5XG5cdHdpbmRvdy5zZXRUaW1lb3V0KCBqUXVlcnkucmVhZHkgKTtcblxufSBlbHNlIHtcblxuXHQvLyBVc2UgdGhlIGhhbmR5IGV2ZW50IGNhbGxiYWNrXG5cdGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoIFwiRE9NQ29udGVudExvYWRlZFwiLCBjb21wbGV0ZWQgKTtcblxuXHQvLyBBIGZhbGxiYWNrIHRvIHdpbmRvdy5vbmxvYWQsIHRoYXQgd2lsbCBhbHdheXMgd29ya1xuXHR3aW5kb3cuYWRkRXZlbnRMaXN0ZW5lciggXCJsb2FkXCIsIGNvbXBsZXRlZCApO1xufVxuXG5cblxuXG4vLyBNdWx0aWZ1bmN0aW9uYWwgbWV0aG9kIHRvIGdldCBhbmQgc2V0IHZhbHVlcyBvZiBhIGNvbGxlY3Rpb25cbi8vIFRoZSB2YWx1ZS9zIGNhbiBvcHRpb25hbGx5IGJlIGV4ZWN1dGVkIGlmIGl0J3MgYSBmdW5jdGlvblxudmFyIGFjY2VzcyA9IGZ1bmN0aW9uKCBlbGVtcywgZm4sIGtleSwgdmFsdWUsIGNoYWluYWJsZSwgZW1wdHlHZXQsIHJhdyApIHtcblx0dmFyIGkgPSAwLFxuXHRcdGxlbiA9IGVsZW1zLmxlbmd0aCxcblx0XHRidWxrID0ga2V5ID09IG51bGw7XG5cblx0Ly8gU2V0cyBtYW55IHZhbHVlc1xuXHRpZiAoIHRvVHlwZSgga2V5ICkgPT09IFwib2JqZWN0XCIgKSB7XG5cdFx0Y2hhaW5hYmxlID0gdHJ1ZTtcblx0XHRmb3IgKCBpIGluIGtleSApIHtcblx0XHRcdGFjY2VzcyggZWxlbXMsIGZuLCBpLCBrZXlbIGkgXSwgdHJ1ZSwgZW1wdHlHZXQsIHJhdyApO1xuXHRcdH1cblxuXHQvLyBTZXRzIG9uZSB2YWx1ZVxuXHR9IGVsc2UgaWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdGNoYWluYWJsZSA9IHRydWU7XG5cblx0XHRpZiAoICFpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmF3ID0gdHJ1ZTtcblx0XHR9XG5cblx0XHRpZiAoIGJ1bGsgKSB7XG5cblx0XHRcdC8vIEJ1bGsgb3BlcmF0aW9ucyBydW4gYWdhaW5zdCB0aGUgZW50aXJlIHNldFxuXHRcdFx0aWYgKCByYXcgKSB7XG5cdFx0XHRcdGZuLmNhbGwoIGVsZW1zLCB2YWx1ZSApO1xuXHRcdFx0XHRmbiA9IG51bGw7XG5cblx0XHRcdC8vIC4uLmV4Y2VwdCB3aGVuIGV4ZWN1dGluZyBmdW5jdGlvbiB2YWx1ZXNcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGJ1bGsgPSBmbjtcblx0XHRcdFx0Zm4gPSBmdW5jdGlvbiggZWxlbSwga2V5LCB2YWx1ZSApIHtcblx0XHRcdFx0XHRyZXR1cm4gYnVsay5jYWxsKCBqUXVlcnkoIGVsZW0gKSwgdmFsdWUgKTtcblx0XHRcdFx0fTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXHRcdFx0Zm9yICggOyBpIDwgbGVuOyBpKysgKSB7XG5cdFx0XHRcdGZuKFxuXHRcdFx0XHRcdGVsZW1zWyBpIF0sIGtleSwgcmF3ID9cblx0XHRcdFx0XHR2YWx1ZSA6XG5cdFx0XHRcdFx0dmFsdWUuY2FsbCggZWxlbXNbIGkgXSwgaSwgZm4oIGVsZW1zWyBpIF0sIGtleSApIClcblx0XHRcdFx0KTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRpZiAoIGNoYWluYWJsZSApIHtcblx0XHRyZXR1cm4gZWxlbXM7XG5cdH1cblxuXHQvLyBHZXRzXG5cdGlmICggYnVsayApIHtcblx0XHRyZXR1cm4gZm4uY2FsbCggZWxlbXMgKTtcblx0fVxuXG5cdHJldHVybiBsZW4gPyBmbiggZWxlbXNbIDAgXSwga2V5ICkgOiBlbXB0eUdldDtcbn07XG5cblxuLy8gTWF0Y2hlcyBkYXNoZWQgc3RyaW5nIGZvciBjYW1lbGl6aW5nXG52YXIgcm1zUHJlZml4ID0gL14tbXMtLyxcblx0cmRhc2hBbHBoYSA9IC8tKFthLXpdKS9nO1xuXG4vLyBVc2VkIGJ5IGNhbWVsQ2FzZSBhcyBjYWxsYmFjayB0byByZXBsYWNlKClcbmZ1bmN0aW9uIGZjYW1lbENhc2UoIGFsbCwgbGV0dGVyICkge1xuXHRyZXR1cm4gbGV0dGVyLnRvVXBwZXJDYXNlKCk7XG59XG5cbi8vIENvbnZlcnQgZGFzaGVkIHRvIGNhbWVsQ2FzZTsgdXNlZCBieSB0aGUgY3NzIGFuZCBkYXRhIG1vZHVsZXNcbi8vIFN1cHBvcnQ6IElFIDw9OSAtIDExLCBFZGdlIDEyIC0gMTVcbi8vIE1pY3Jvc29mdCBmb3Jnb3QgdG8gaHVtcCB0aGVpciB2ZW5kb3IgcHJlZml4ICgjOTU3MilcbmZ1bmN0aW9uIGNhbWVsQ2FzZSggc3RyaW5nICkge1xuXHRyZXR1cm4gc3RyaW5nLnJlcGxhY2UoIHJtc1ByZWZpeCwgXCJtcy1cIiApLnJlcGxhY2UoIHJkYXNoQWxwaGEsIGZjYW1lbENhc2UgKTtcbn1cbnZhciBhY2NlcHREYXRhID0gZnVuY3Rpb24oIG93bmVyICkge1xuXG5cdC8vIEFjY2VwdHMgb25seTpcblx0Ly8gIC0gTm9kZVxuXHQvLyAgICAtIE5vZGUuRUxFTUVOVF9OT0RFXG5cdC8vICAgIC0gTm9kZS5ET0NVTUVOVF9OT0RFXG5cdC8vICAtIE9iamVjdFxuXHQvLyAgICAtIEFueVxuXHRyZXR1cm4gb3duZXIubm9kZVR5cGUgPT09IDEgfHwgb3duZXIubm9kZVR5cGUgPT09IDkgfHwgISggK293bmVyLm5vZGVUeXBlICk7XG59O1xuXG5cblxuXG5mdW5jdGlvbiBEYXRhKCkge1xuXHR0aGlzLmV4cGFuZG8gPSBqUXVlcnkuZXhwYW5kbyArIERhdGEudWlkKys7XG59XG5cbkRhdGEudWlkID0gMTtcblxuRGF0YS5wcm90b3R5cGUgPSB7XG5cblx0Y2FjaGU6IGZ1bmN0aW9uKCBvd25lciApIHtcblxuXHRcdC8vIENoZWNrIGlmIHRoZSBvd25lciBvYmplY3QgYWxyZWFkeSBoYXMgYSBjYWNoZVxuXHRcdHZhciB2YWx1ZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdC8vIElmIG5vdCwgY3JlYXRlIG9uZVxuXHRcdGlmICggIXZhbHVlICkge1xuXHRcdFx0dmFsdWUgPSB7fTtcblxuXHRcdFx0Ly8gV2UgY2FuIGFjY2VwdCBkYXRhIGZvciBub24tZWxlbWVudCBub2RlcyBpbiBtb2Rlcm4gYnJvd3NlcnMsXG5cdFx0XHQvLyBidXQgd2Ugc2hvdWxkIG5vdCwgc2VlICM4MzM1LlxuXHRcdFx0Ly8gQWx3YXlzIHJldHVybiBhbiBlbXB0eSBvYmplY3QuXG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIG93bmVyICkgKSB7XG5cblx0XHRcdFx0Ly8gSWYgaXQgaXMgYSBub2RlIHVubGlrZWx5IHRvIGJlIHN0cmluZ2lmeS1lZCBvciBsb29wZWQgb3ZlclxuXHRcdFx0XHQvLyB1c2UgcGxhaW4gYXNzaWdubWVudFxuXHRcdFx0XHRpZiAoIG93bmVyLm5vZGVUeXBlICkge1xuXHRcdFx0XHRcdG93bmVyWyB0aGlzLmV4cGFuZG8gXSA9IHZhbHVlO1xuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBzZWN1cmUgaXQgaW4gYSBub24tZW51bWVyYWJsZSBwcm9wZXJ0eVxuXHRcdFx0XHQvLyBjb25maWd1cmFibGUgbXVzdCBiZSB0cnVlIHRvIGFsbG93IHRoZSBwcm9wZXJ0eSB0byBiZVxuXHRcdFx0XHQvLyBkZWxldGVkIHdoZW4gZGF0YSBpcyByZW1vdmVkXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCBvd25lciwgdGhpcy5leHBhbmRvLCB7XG5cdFx0XHRcdFx0XHR2YWx1ZTogdmFsdWUsXG5cdFx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWVcblx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gdmFsdWU7XG5cdH0sXG5cdHNldDogZnVuY3Rpb24oIG93bmVyLCBkYXRhLCB2YWx1ZSApIHtcblx0XHR2YXIgcHJvcCxcblx0XHRcdGNhY2hlID0gdGhpcy5jYWNoZSggb3duZXIgKTtcblxuXHRcdC8vIEhhbmRsZTogWyBvd25lciwga2V5LCB2YWx1ZSBdIGFyZ3Ncblx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0aWYgKCB0eXBlb2YgZGF0YSA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIGRhdGEgKSBdID0gdmFsdWU7XG5cblx0XHQvLyBIYW5kbGU6IFsgb3duZXIsIHsgcHJvcGVydGllcyB9IF0gYXJnc1xuXHRcdH0gZWxzZSB7XG5cblx0XHRcdC8vIENvcHkgdGhlIHByb3BlcnRpZXMgb25lLWJ5LW9uZSB0byB0aGUgY2FjaGUgb2JqZWN0XG5cdFx0XHRmb3IgKCBwcm9wIGluIGRhdGEgKSB7XG5cdFx0XHRcdGNhY2hlWyBjYW1lbENhc2UoIHByb3AgKSBdID0gZGF0YVsgcHJvcCBdO1xuXHRcdFx0fVxuXHRcdH1cblx0XHRyZXR1cm4gY2FjaGU7XG5cdH0sXG5cdGdldDogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0cmV0dXJuIGtleSA9PT0gdW5kZWZpbmVkID9cblx0XHRcdHRoaXMuY2FjaGUoIG93bmVyICkgOlxuXG5cdFx0XHQvLyBBbHdheXMgdXNlIGNhbWVsQ2FzZSBrZXkgKGdoLTIyNTcpXG5cdFx0XHRvd25lclsgdGhpcy5leHBhbmRvIF0gJiYgb3duZXJbIHRoaXMuZXhwYW5kbyBdWyBjYW1lbENhc2UoIGtleSApIF07XG5cdH0sXG5cdGFjY2VzczogZnVuY3Rpb24oIG93bmVyLCBrZXksIHZhbHVlICkge1xuXG5cdFx0Ly8gSW4gY2FzZXMgd2hlcmUgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBObyBrZXkgd2FzIHNwZWNpZmllZFxuXHRcdC8vICAgMi4gQSBzdHJpbmcga2V5IHdhcyBzcGVjaWZpZWQsIGJ1dCBubyB2YWx1ZSBwcm92aWRlZFxuXHRcdC8vXG5cdFx0Ly8gVGFrZSB0aGUgXCJyZWFkXCIgcGF0aCBhbmQgYWxsb3cgdGhlIGdldCBtZXRob2QgdG8gZGV0ZXJtaW5lXG5cdFx0Ly8gd2hpY2ggdmFsdWUgdG8gcmV0dXJuLCByZXNwZWN0aXZlbHkgZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBUaGUgZW50aXJlIGNhY2hlIG9iamVjdFxuXHRcdC8vICAgMi4gVGhlIGRhdGEgc3RvcmVkIGF0IHRoZSBrZXlcblx0XHQvL1xuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHxcblx0XHRcdFx0KCAoIGtleSAmJiB0eXBlb2Yga2V5ID09PSBcInN0cmluZ1wiICkgJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApICkge1xuXG5cdFx0XHRyZXR1cm4gdGhpcy5nZXQoIG93bmVyLCBrZXkgKTtcblx0XHR9XG5cblx0XHQvLyBXaGVuIHRoZSBrZXkgaXMgbm90IGEgc3RyaW5nLCBvciBib3RoIGEga2V5IGFuZCB2YWx1ZVxuXHRcdC8vIGFyZSBzcGVjaWZpZWQsIHNldCBvciBleHRlbmQgKGV4aXN0aW5nIG9iamVjdHMpIHdpdGggZWl0aGVyOlxuXHRcdC8vXG5cdFx0Ly8gICAxLiBBbiBvYmplY3Qgb2YgcHJvcGVydGllc1xuXHRcdC8vICAgMi4gQSBrZXkgYW5kIHZhbHVlXG5cdFx0Ly9cblx0XHR0aGlzLnNldCggb3duZXIsIGtleSwgdmFsdWUgKTtcblxuXHRcdC8vIFNpbmNlIHRoZSBcInNldFwiIHBhdGggY2FuIGhhdmUgdHdvIHBvc3NpYmxlIGVudHJ5IHBvaW50c1xuXHRcdC8vIHJldHVybiB0aGUgZXhwZWN0ZWQgZGF0YSBiYXNlZCBvbiB3aGljaCBwYXRoIHdhcyB0YWtlblsqXVxuXHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID8gdmFsdWUgOiBrZXk7XG5cdH0sXG5cdHJlbW92ZTogZnVuY3Rpb24oIG93bmVyLCBrZXkgKSB7XG5cdFx0dmFyIGksXG5cdFx0XHRjYWNoZSA9IG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblxuXHRcdGlmICggY2FjaGUgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIGtleSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHQvLyBTdXBwb3J0IGFycmF5IG9yIHNwYWNlIHNlcGFyYXRlZCBzdHJpbmcgb2Yga2V5c1xuXHRcdFx0aWYgKCBBcnJheS5pc0FycmF5KCBrZXkgKSApIHtcblxuXHRcdFx0XHQvLyBJZiBrZXkgaXMgYW4gYXJyYXkgb2Yga2V5cy4uLlxuXHRcdFx0XHQvLyBXZSBhbHdheXMgc2V0IGNhbWVsQ2FzZSBrZXlzLCBzbyByZW1vdmUgdGhhdC5cblx0XHRcdFx0a2V5ID0ga2V5Lm1hcCggY2FtZWxDYXNlICk7XG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRrZXkgPSBjYW1lbENhc2UoIGtleSApO1xuXG5cdFx0XHRcdC8vIElmIGEga2V5IHdpdGggdGhlIHNwYWNlcyBleGlzdHMsIHVzZSBpdC5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlLCBjcmVhdGUgYW4gYXJyYXkgYnkgbWF0Y2hpbmcgbm9uLXdoaXRlc3BhY2Vcblx0XHRcdFx0a2V5ID0ga2V5IGluIGNhY2hlID9cblx0XHRcdFx0XHRbIGtleSBdIDpcblx0XHRcdFx0XHQoIGtleS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdICk7XG5cdFx0XHR9XG5cblx0XHRcdGkgPSBrZXkubGVuZ3RoO1xuXG5cdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0ZGVsZXRlIGNhY2hlWyBrZXlbIGkgXSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSB0aGUgZXhwYW5kbyBpZiB0aGVyZSdzIG5vIG1vcmUgZGF0YVxuXHRcdGlmICgga2V5ID09PSB1bmRlZmluZWQgfHwgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIGNhY2hlICkgKSB7XG5cblx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDVcblx0XHRcdC8vIFdlYmtpdCAmIEJsaW5rIHBlcmZvcm1hbmNlIHN1ZmZlcnMgd2hlbiBkZWxldGluZyBwcm9wZXJ0aWVzXG5cdFx0XHQvLyBmcm9tIERPTSBub2Rlcywgc28gc2V0IHRvIHVuZGVmaW5lZCBpbnN0ZWFkXG5cdFx0XHQvLyBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD0zNzg2MDcgKGJ1ZyByZXN0cmljdGVkKVxuXHRcdFx0aWYgKCBvd25lci5ub2RlVHlwZSApIHtcblx0XHRcdFx0b3duZXJbIHRoaXMuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGVsZXRlIG93bmVyWyB0aGlzLmV4cGFuZG8gXTtcblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBvd25lciApIHtcblx0XHR2YXIgY2FjaGUgPSBvd25lclsgdGhpcy5leHBhbmRvIF07XG5cdFx0cmV0dXJuIGNhY2hlICE9PSB1bmRlZmluZWQgJiYgIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBjYWNoZSApO1xuXHR9XG59O1xudmFyIGRhdGFQcml2ID0gbmV3IERhdGEoKTtcblxudmFyIGRhdGFVc2VyID0gbmV3IERhdGEoKTtcblxuXG5cbi8vXHRJbXBsZW1lbnRhdGlvbiBTdW1tYXJ5XG4vL1xuLy9cdDEuIEVuZm9yY2UgQVBJIHN1cmZhY2UgYW5kIHNlbWFudGljIGNvbXBhdGliaWxpdHkgd2l0aCAxLjkueCBicmFuY2hcbi8vXHQyLiBJbXByb3ZlIHRoZSBtb2R1bGUncyBtYWludGFpbmFiaWxpdHkgYnkgcmVkdWNpbmcgdGhlIHN0b3JhZ2Vcbi8vXHRcdHBhdGhzIHRvIGEgc2luZ2xlIG1lY2hhbmlzbS5cbi8vXHQzLiBVc2UgdGhlIHNhbWUgc2luZ2xlIG1lY2hhbmlzbSB0byBzdXBwb3J0IFwicHJpdmF0ZVwiIGFuZCBcInVzZXJcIiBkYXRhLlxuLy9cdDQuIF9OZXZlcl8gZXhwb3NlIFwicHJpdmF0ZVwiIGRhdGEgdG8gdXNlciBjb2RlIChUT0RPOiBEcm9wIF9kYXRhLCBfcmVtb3ZlRGF0YSlcbi8vXHQ1LiBBdm9pZCBleHBvc2luZyBpbXBsZW1lbnRhdGlvbiBkZXRhaWxzIG9uIHVzZXIgb2JqZWN0cyAoZWcuIGV4cGFuZG8gcHJvcGVydGllcylcbi8vXHQ2LiBQcm92aWRlIGEgY2xlYXIgcGF0aCBmb3IgaW1wbGVtZW50YXRpb24gdXBncmFkZSB0byBXZWFrTWFwIGluIDIwMTRcblxudmFyIHJicmFjZSA9IC9eKD86XFx7W1xcd1xcV10qXFx9fFxcW1tcXHdcXFddKlxcXSkkLyxcblx0cm11bHRpRGFzaCA9IC9bQS1aXS9nO1xuXG5mdW5jdGlvbiBnZXREYXRhKCBkYXRhICkge1xuXHRpZiAoIGRhdGEgPT09IFwidHJ1ZVwiICkge1xuXHRcdHJldHVybiB0cnVlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcImZhbHNlXCIgKSB7XG5cdFx0cmV0dXJuIGZhbHNlO1xuXHR9XG5cblx0aWYgKCBkYXRhID09PSBcIm51bGxcIiApIHtcblx0XHRyZXR1cm4gbnVsbDtcblx0fVxuXG5cdC8vIE9ubHkgY29udmVydCB0byBhIG51bWJlciBpZiBpdCBkb2Vzbid0IGNoYW5nZSB0aGUgc3RyaW5nXG5cdGlmICggZGF0YSA9PT0gK2RhdGEgKyBcIlwiICkge1xuXHRcdHJldHVybiArZGF0YTtcblx0fVxuXG5cdGlmICggcmJyYWNlLnRlc3QoIGRhdGEgKSApIHtcblx0XHRyZXR1cm4gSlNPTi5wYXJzZSggZGF0YSApO1xuXHR9XG5cblx0cmV0dXJuIGRhdGE7XG59XG5cbmZ1bmN0aW9uIGRhdGFBdHRyKCBlbGVtLCBrZXksIGRhdGEgKSB7XG5cdHZhciBuYW1lO1xuXG5cdC8vIElmIG5vdGhpbmcgd2FzIGZvdW5kIGludGVybmFsbHksIHRyeSB0byBmZXRjaCBhbnlcblx0Ly8gZGF0YSBmcm9tIHRoZSBIVE1MNSBkYXRhLSogYXR0cmlidXRlXG5cdGlmICggZGF0YSA9PT0gdW5kZWZpbmVkICYmIGVsZW0ubm9kZVR5cGUgPT09IDEgKSB7XG5cdFx0bmFtZSA9IFwiZGF0YS1cIiArIGtleS5yZXBsYWNlKCBybXVsdGlEYXNoLCBcIi0kJlwiICkudG9Mb3dlckNhc2UoKTtcblx0XHRkYXRhID0gZWxlbS5nZXRBdHRyaWJ1dGUoIG5hbWUgKTtcblxuXHRcdGlmICggdHlwZW9mIGRhdGEgPT09IFwic3RyaW5nXCIgKSB7XG5cdFx0XHR0cnkge1xuXHRcdFx0XHRkYXRhID0gZ2V0RGF0YSggZGF0YSApO1xuXHRcdFx0fSBjYXRjaCAoIGUgKSB7fVxuXG5cdFx0XHQvLyBNYWtlIHN1cmUgd2Ugc2V0IHRoZSBkYXRhIHNvIGl0IGlzbid0IGNoYW5nZWQgbGF0ZXJcblx0XHRcdGRhdGFVc2VyLnNldCggZWxlbSwga2V5LCBkYXRhICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdHJldHVybiBkYXRhO1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGhhc0RhdGE6IGZ1bmN0aW9uKCBlbGVtICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5oYXNEYXRhKCBlbGVtICkgfHwgZGF0YVByaXYuaGFzRGF0YSggZWxlbSApO1xuXHR9LFxuXG5cdGRhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhVXNlci5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRyZW1vdmVEYXRhOiBmdW5jdGlvbiggZWxlbSwgbmFtZSApIHtcblx0XHRkYXRhVXNlci5yZW1vdmUoIGVsZW0sIG5hbWUgKTtcblx0fSxcblxuXHQvLyBUT0RPOiBOb3cgdGhhdCBhbGwgY2FsbHMgdG8gX2RhdGEgYW5kIF9yZW1vdmVEYXRhIGhhdmUgYmVlbiByZXBsYWNlZFxuXHQvLyB3aXRoIGRpcmVjdCBjYWxscyB0byBkYXRhUHJpdiBtZXRob2RzLCB0aGVzZSBjYW4gYmUgZGVwcmVjYXRlZC5cblx0X2RhdGE6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCBkYXRhICkge1xuXHRcdHJldHVybiBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIG5hbWUsIGRhdGEgKTtcblx0fSxcblxuXHRfcmVtb3ZlRGF0YTogZnVuY3Rpb24oIGVsZW0sIG5hbWUgKSB7XG5cdFx0ZGF0YVByaXYucmVtb3ZlKCBlbGVtLCBuYW1lICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRkYXRhOiBmdW5jdGlvbigga2V5LCB2YWx1ZSApIHtcblx0XHR2YXIgaSwgbmFtZSwgZGF0YSxcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF0sXG5cdFx0XHRhdHRycyA9IGVsZW0gJiYgZWxlbS5hdHRyaWJ1dGVzO1xuXG5cdFx0Ly8gR2V0cyBhbGwgdmFsdWVzXG5cdFx0aWYgKCBrZXkgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggdGhpcy5sZW5ndGggKSB7XG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0gKTtcblxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgIWRhdGFQcml2LmdldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiApICkge1xuXHRcdFx0XHRcdGkgPSBhdHRycy5sZW5ndGg7XG5cdFx0XHRcdFx0d2hpbGUgKCBpLS0gKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDExIG9ubHlcblx0XHRcdFx0XHRcdC8vIFRoZSBhdHRycyBlbGVtZW50cyBjYW4gYmUgbnVsbCAoIzE0ODk0KVxuXHRcdFx0XHRcdFx0aWYgKCBhdHRyc1sgaSBdICkge1xuXHRcdFx0XHRcdFx0XHRuYW1lID0gYXR0cnNbIGkgXS5uYW1lO1xuXHRcdFx0XHRcdFx0XHRpZiAoIG5hbWUuaW5kZXhPZiggXCJkYXRhLVwiICkgPT09IDAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0bmFtZSA9IGNhbWVsQ2FzZSggbmFtZS5zbGljZSggNSApICk7XG5cdFx0XHRcdFx0XHRcdFx0ZGF0YUF0dHIoIGVsZW0sIG5hbWUsIGRhdGFbIG5hbWUgXSApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRhdGFQcml2LnNldCggZWxlbSwgXCJoYXNEYXRhQXR0cnNcIiwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBkYXRhO1xuXHRcdH1cblxuXHRcdC8vIFNldHMgbXVsdGlwbGUgdmFsdWVzXG5cdFx0aWYgKCB0eXBlb2Yga2V5ID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFVc2VyLnNldCggdGhpcywga2V5ICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGFjY2VzcyggdGhpcywgZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGRhdGE7XG5cblx0XHRcdC8vIFRoZSBjYWxsaW5nIGpRdWVyeSBvYmplY3QgKGVsZW1lbnQgbWF0Y2hlcykgaXMgbm90IGVtcHR5XG5cdFx0XHQvLyAoYW5kIHRoZXJlZm9yZSBoYXMgYW4gZWxlbWVudCBhcHBlYXJzIGF0IHRoaXNbIDAgXSkgYW5kIHRoZVxuXHRcdFx0Ly8gYHZhbHVlYCBwYXJhbWV0ZXIgd2FzIG5vdCB1bmRlZmluZWQuIEFuIGVtcHR5IGpRdWVyeSBvYmplY3Rcblx0XHRcdC8vIHdpbGwgcmVzdWx0IGluIGB1bmRlZmluZWRgIGZvciBlbGVtID0gdGhpc1sgMCBdIHdoaWNoIHdpbGxcblx0XHRcdC8vIHRocm93IGFuIGV4Y2VwdGlvbiBpZiBhbiBhdHRlbXB0IHRvIHJlYWQgYSBkYXRhIGNhY2hlIGlzIG1hZGUuXG5cdFx0XHRpZiAoIGVsZW0gJiYgdmFsdWUgPT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHQvLyBBdHRlbXB0IHRvIGdldCBkYXRhIGZyb20gdGhlIGNhY2hlXG5cdFx0XHRcdC8vIFRoZSBrZXkgd2lsbCBhbHdheXMgYmUgY2FtZWxDYXNlZCBpbiBEYXRhXG5cdFx0XHRcdGRhdGEgPSBkYXRhVXNlci5nZXQoIGVsZW0sIGtleSApO1xuXHRcdFx0XHRpZiAoIGRhdGEgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gZGF0YTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEF0dGVtcHQgdG8gXCJkaXNjb3ZlclwiIHRoZSBkYXRhIGluXG5cdFx0XHRcdC8vIEhUTUw1IGN1c3RvbSBkYXRhLSogYXR0cnNcblx0XHRcdFx0ZGF0YSA9IGRhdGFBdHRyKCBlbGVtLCBrZXkgKTtcblx0XHRcdFx0aWYgKCBkYXRhICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIGRhdGE7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBXZSB0cmllZCByZWFsbHkgaGFyZCwgYnV0IHRoZSBkYXRhIGRvZXNuJ3QgZXhpc3QuXG5cdFx0XHRcdHJldHVybjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gU2V0IHRoZSBkYXRhLi4uXG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIFdlIGFsd2F5cyBzdG9yZSB0aGUgY2FtZWxDYXNlZCBrZXlcblx0XHRcdFx0ZGF0YVVzZXIuc2V0KCB0aGlzLCBrZXksIHZhbHVlICk7XG5cdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxLCBudWxsLCB0cnVlICk7XG5cdH0sXG5cblx0cmVtb3ZlRGF0YTogZnVuY3Rpb24oIGtleSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRhdGFVc2VyLnJlbW92ZSggdGhpcywga2V5ICk7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUsIGRhdGEgKSB7XG5cdFx0dmFyIHF1ZXVlO1xuXG5cdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0dHlwZSA9ICggdHlwZSB8fCBcImZ4XCIgKSArIFwicXVldWVcIjtcblx0XHRcdHF1ZXVlID0gZGF0YVByaXYuZ2V0KCBlbGVtLCB0eXBlICk7XG5cblx0XHRcdC8vIFNwZWVkIHVwIGRlcXVldWUgYnkgZ2V0dGluZyBvdXQgcXVpY2tseSBpZiB0aGlzIGlzIGp1c3QgYSBsb29rdXBcblx0XHRcdGlmICggZGF0YSApIHtcblx0XHRcdFx0aWYgKCAhcXVldWUgfHwgQXJyYXkuaXNBcnJheSggZGF0YSApICkge1xuXHRcdFx0XHRcdHF1ZXVlID0gZGF0YVByaXYuYWNjZXNzKCBlbGVtLCB0eXBlLCBqUXVlcnkubWFrZUFycmF5KCBkYXRhICkgKTtcblx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRxdWV1ZS5wdXNoKCBkYXRhICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdHJldHVybiBxdWV1ZSB8fCBbXTtcblx0XHR9XG5cdH0sXG5cblx0ZGVxdWV1ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dHlwZSA9IHR5cGUgfHwgXCJmeFwiO1xuXG5cdFx0dmFyIHF1ZXVlID0galF1ZXJ5LnF1ZXVlKCBlbGVtLCB0eXBlICksXG5cdFx0XHRzdGFydExlbmd0aCA9IHF1ZXVlLmxlbmd0aCxcblx0XHRcdGZuID0gcXVldWUuc2hpZnQoKSxcblx0XHRcdGhvb2tzID0galF1ZXJ5Ll9xdWV1ZUhvb2tzKCBlbGVtLCB0eXBlICksXG5cdFx0XHRuZXh0ID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGpRdWVyeS5kZXF1ZXVlKCBlbGVtLCB0eXBlICk7XG5cdFx0XHR9O1xuXG5cdFx0Ly8gSWYgdGhlIGZ4IHF1ZXVlIGlzIGRlcXVldWVkLCBhbHdheXMgcmVtb3ZlIHRoZSBwcm9ncmVzcyBzZW50aW5lbFxuXHRcdGlmICggZm4gPT09IFwiaW5wcm9ncmVzc1wiICkge1xuXHRcdFx0Zm4gPSBxdWV1ZS5zaGlmdCgpO1xuXHRcdFx0c3RhcnRMZW5ndGgtLTtcblx0XHR9XG5cblx0XHRpZiAoIGZuICkge1xuXG5cdFx0XHQvLyBBZGQgYSBwcm9ncmVzcyBzZW50aW5lbCB0byBwcmV2ZW50IHRoZSBmeCBxdWV1ZSBmcm9tIGJlaW5nXG5cdFx0XHQvLyBhdXRvbWF0aWNhbGx5IGRlcXVldWVkXG5cdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiApIHtcblx0XHRcdFx0cXVldWUudW5zaGlmdCggXCJpbnByb2dyZXNzXCIgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ2xlYXIgdXAgdGhlIGxhc3QgcXVldWUgc3RvcCBmdW5jdGlvblxuXHRcdFx0ZGVsZXRlIGhvb2tzLnN0b3A7XG5cdFx0XHRmbi5jYWxsKCBlbGVtLCBuZXh0LCBob29rcyApO1xuXHRcdH1cblxuXHRcdGlmICggIXN0YXJ0TGVuZ3RoICYmIGhvb2tzICkge1xuXHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdH1cblx0fSxcblxuXHQvLyBOb3QgcHVibGljIC0gZ2VuZXJhdGUgYSBxdWV1ZUhvb2tzIG9iamVjdCwgb3IgcmV0dXJuIHRoZSBjdXJyZW50IG9uZVxuXHRfcXVldWVIb29rczogZnVuY3Rpb24oIGVsZW0sIHR5cGUgKSB7XG5cdFx0dmFyIGtleSA9IHR5cGUgKyBcInF1ZXVlSG9va3NcIjtcblx0XHRyZXR1cm4gZGF0YVByaXYuZ2V0KCBlbGVtLCBrZXkgKSB8fCBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIGtleSwge1xuXHRcdFx0ZW1wdHk6IGpRdWVyeS5DYWxsYmFja3MoIFwib25jZSBtZW1vcnlcIiApLmFkZCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgWyB0eXBlICsgXCJxdWV1ZVwiLCBrZXkgXSApO1xuXHRcdFx0fSApXG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cXVldWU6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHZhciBzZXR0ZXIgPSAyO1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdGRhdGEgPSB0eXBlO1xuXHRcdFx0dHlwZSA9IFwiZnhcIjtcblx0XHRcdHNldHRlci0tO1xuXHRcdH1cblxuXHRcdGlmICggYXJndW1lbnRzLmxlbmd0aCA8IHNldHRlciApIHtcblx0XHRcdHJldHVybiBqUXVlcnkucXVldWUoIHRoaXNbIDAgXSwgdHlwZSApO1xuXHRcdH1cblxuXHRcdHJldHVybiBkYXRhID09PSB1bmRlZmluZWQgP1xuXHRcdFx0dGhpcyA6XG5cdFx0XHR0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgcXVldWUgPSBqUXVlcnkucXVldWUoIHRoaXMsIHR5cGUsIGRhdGEgKTtcblxuXHRcdFx0XHQvLyBFbnN1cmUgYSBob29rcyBmb3IgdGhpcyBxdWV1ZVxuXHRcdFx0XHRqUXVlcnkuX3F1ZXVlSG9va3MoIHRoaXMsIHR5cGUgKTtcblxuXHRcdFx0XHRpZiAoIHR5cGUgPT09IFwiZnhcIiAmJiBxdWV1ZVsgMCBdICE9PSBcImlucHJvZ3Jlc3NcIiApIHtcblx0XHRcdFx0XHRqUXVlcnkuZGVxdWV1ZSggdGhpcywgdHlwZSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdH0sXG5cdGRlcXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHR9ICk7XG5cdH0sXG5cdGNsZWFyUXVldWU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdHJldHVybiB0aGlzLnF1ZXVlKCB0eXBlIHx8IFwiZnhcIiwgW10gKTtcblx0fSxcblxuXHQvLyBHZXQgYSBwcm9taXNlIHJlc29sdmVkIHdoZW4gcXVldWVzIG9mIGEgY2VydGFpbiB0eXBlXG5cdC8vIGFyZSBlbXB0aWVkIChmeCBpcyB0aGUgdHlwZSBieSBkZWZhdWx0KVxuXHRwcm9taXNlOiBmdW5jdGlvbiggdHlwZSwgb2JqICkge1xuXHRcdHZhciB0bXAsXG5cdFx0XHRjb3VudCA9IDEsXG5cdFx0XHRkZWZlciA9IGpRdWVyeS5EZWZlcnJlZCgpLFxuXHRcdFx0ZWxlbWVudHMgPSB0aGlzLFxuXHRcdFx0aSA9IHRoaXMubGVuZ3RoLFxuXHRcdFx0cmVzb2x2ZSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoICEoIC0tY291bnQgKSApIHtcblx0XHRcdFx0XHRkZWZlci5yZXNvbHZlV2l0aCggZWxlbWVudHMsIFsgZWxlbWVudHMgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0aWYgKCB0eXBlb2YgdHlwZSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdG9iaiA9IHR5cGU7XG5cdFx0XHR0eXBlID0gdW5kZWZpbmVkO1xuXHRcdH1cblx0XHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdHRtcCA9IGRhdGFQcml2LmdldCggZWxlbWVudHNbIGkgXSwgdHlwZSArIFwicXVldWVIb29rc1wiICk7XG5cdFx0XHRpZiAoIHRtcCAmJiB0bXAuZW1wdHkgKSB7XG5cdFx0XHRcdGNvdW50Kys7XG5cdFx0XHRcdHRtcC5lbXB0eS5hZGQoIHJlc29sdmUgKTtcblx0XHRcdH1cblx0XHR9XG5cdFx0cmVzb2x2ZSgpO1xuXHRcdHJldHVybiBkZWZlci5wcm9taXNlKCBvYmogKTtcblx0fVxufSApO1xudmFyIHBudW0gPSAoIC9bKy1dPyg/OlxcZCpcXC58KVxcZCsoPzpbZUVdWystXT9cXGQrfCkvICkuc291cmNlO1xuXG52YXIgcmNzc051bSA9IG5ldyBSZWdFeHAoIFwiXig/OihbKy1dKT18KShcIiArIHBudW0gKyBcIikoW2EteiVdKikkXCIsIFwiaVwiICk7XG5cblxudmFyIGNzc0V4cGFuZCA9IFsgXCJUb3BcIiwgXCJSaWdodFwiLCBcIkJvdHRvbVwiLCBcIkxlZnRcIiBdO1xuXG52YXIgaXNIaWRkZW5XaXRoaW5UcmVlID0gZnVuY3Rpb24oIGVsZW0sIGVsICkge1xuXG5cdFx0Ly8gaXNIaWRkZW5XaXRoaW5UcmVlIG1pZ2h0IGJlIGNhbGxlZCBmcm9tIGpRdWVyeSNmaWx0ZXIgZnVuY3Rpb247XG5cdFx0Ly8gaW4gdGhhdCBjYXNlLCBlbGVtZW50IHdpbGwgYmUgc2Vjb25kIGFyZ3VtZW50XG5cdFx0ZWxlbSA9IGVsIHx8IGVsZW07XG5cblx0XHQvLyBJbmxpbmUgc3R5bGUgdHJ1bXBzIGFsbFxuXHRcdHJldHVybiBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwibm9uZVwiIHx8XG5cdFx0XHRlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiZcblxuXHRcdFx0Ly8gT3RoZXJ3aXNlLCBjaGVjayBjb21wdXRlZCBzdHlsZVxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQzIC0gNDVcblx0XHRcdC8vIERpc2Nvbm5lY3RlZCBlbGVtZW50cyBjYW4gaGF2ZSBjb21wdXRlZCBkaXNwbGF5OiBub25lLCBzbyBmaXJzdCBjb25maXJtIHRoYXQgZWxlbSBpc1xuXHRcdFx0Ly8gaW4gdGhlIGRvY3VtZW50LlxuXHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKSAmJlxuXG5cdFx0XHRqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApID09PSBcIm5vbmVcIjtcblx0fTtcblxudmFyIHN3YXAgPSBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgY2FsbGJhY2ssIGFyZ3MgKSB7XG5cdHZhciByZXQsIG5hbWUsXG5cdFx0b2xkID0ge307XG5cblx0Ly8gUmVtZW1iZXIgdGhlIG9sZCB2YWx1ZXMsIGFuZCBpbnNlcnQgdGhlIG5ldyBvbmVzXG5cdGZvciAoIG5hbWUgaW4gb3B0aW9ucyApIHtcblx0XHRvbGRbIG5hbWUgXSA9IGVsZW0uc3R5bGVbIG5hbWUgXTtcblx0XHRlbGVtLnN0eWxlWyBuYW1lIF0gPSBvcHRpb25zWyBuYW1lIF07XG5cdH1cblxuXHRyZXQgPSBjYWxsYmFjay5hcHBseSggZWxlbSwgYXJncyB8fCBbXSApO1xuXG5cdC8vIFJldmVydCB0aGUgb2xkIHZhbHVlc1xuXHRmb3IgKCBuYW1lIGluIG9wdGlvbnMgKSB7XG5cdFx0ZWxlbS5zdHlsZVsgbmFtZSBdID0gb2xkWyBuYW1lIF07XG5cdH1cblxuXHRyZXR1cm4gcmV0O1xufTtcblxuXG5cblxuZnVuY3Rpb24gYWRqdXN0Q1NTKCBlbGVtLCBwcm9wLCB2YWx1ZVBhcnRzLCB0d2VlbiApIHtcblx0dmFyIGFkanVzdGVkLCBzY2FsZSxcblx0XHRtYXhJdGVyYXRpb25zID0gMjAsXG5cdFx0Y3VycmVudFZhbHVlID0gdHdlZW4gP1xuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiB0d2Vlbi5jdXIoKTtcblx0XHRcdH0gOlxuXHRcdFx0ZnVuY3Rpb24oKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wLCBcIlwiICk7XG5cdFx0XHR9LFxuXHRcdGluaXRpYWwgPSBjdXJyZW50VmFsdWUoKSxcblx0XHR1bml0ID0gdmFsdWVQYXJ0cyAmJiB2YWx1ZVBhcnRzWyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICksXG5cblx0XHQvLyBTdGFydGluZyB2YWx1ZSBjb21wdXRhdGlvbiBpcyByZXF1aXJlZCBmb3IgcG90ZW50aWFsIHVuaXQgbWlzbWF0Y2hlc1xuXHRcdGluaXRpYWxJblVuaXQgPSAoIGpRdWVyeS5jc3NOdW1iZXJbIHByb3AgXSB8fCB1bml0ICE9PSBcInB4XCIgJiYgK2luaXRpYWwgKSAmJlxuXHRcdFx0cmNzc051bS5leGVjKCBqUXVlcnkuY3NzKCBlbGVtLCBwcm9wICkgKTtcblxuXHRpZiAoIGluaXRpYWxJblVuaXQgJiYgaW5pdGlhbEluVW5pdFsgMyBdICE9PSB1bml0ICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTU0XG5cdFx0Ly8gSGFsdmUgdGhlIGl0ZXJhdGlvbiB0YXJnZXQgdmFsdWUgdG8gcHJldmVudCBpbnRlcmZlcmVuY2UgZnJvbSBDU1MgdXBwZXIgYm91bmRzIChnaC0yMTQ0KVxuXHRcdGluaXRpYWwgPSBpbml0aWFsIC8gMjtcblxuXHRcdC8vIFRydXN0IHVuaXRzIHJlcG9ydGVkIGJ5IGpRdWVyeS5jc3Ncblx0XHR1bml0ID0gdW5pdCB8fCBpbml0aWFsSW5Vbml0WyAzIF07XG5cblx0XHQvLyBJdGVyYXRpdmVseSBhcHByb3hpbWF0ZSBmcm9tIGEgbm9uemVybyBzdGFydGluZyBwb2ludFxuXHRcdGluaXRpYWxJblVuaXQgPSAraW5pdGlhbCB8fCAxO1xuXG5cdFx0d2hpbGUgKCBtYXhJdGVyYXRpb25zLS0gKSB7XG5cblx0XHRcdC8vIEV2YWx1YXRlIGFuZCB1cGRhdGUgb3VyIGJlc3QgZ3Vlc3MgKGRvdWJsaW5nIGd1ZXNzZXMgdGhhdCB6ZXJvIG91dCkuXG5cdFx0XHQvLyBGaW5pc2ggaWYgdGhlIHNjYWxlIGVxdWFscyBvciBjcm9zc2VzIDEgKG1ha2luZyB0aGUgb2xkKm5ldyBwcm9kdWN0IG5vbi1wb3NpdGl2ZSkuXG5cdFx0XHRqUXVlcnkuc3R5bGUoIGVsZW0sIHByb3AsIGluaXRpYWxJblVuaXQgKyB1bml0ICk7XG5cdFx0XHRpZiAoICggMSAtIHNjYWxlICkgKiAoIDEgLSAoIHNjYWxlID0gY3VycmVudFZhbHVlKCkgLyBpbml0aWFsIHx8IDAuNSApICkgPD0gMCApIHtcblx0XHRcdFx0bWF4SXRlcmF0aW9ucyA9IDA7XG5cdFx0XHR9XG5cdFx0XHRpbml0aWFsSW5Vbml0ID0gaW5pdGlhbEluVW5pdCAvIHNjYWxlO1xuXG5cdFx0fVxuXG5cdFx0aW5pdGlhbEluVW5pdCA9IGluaXRpYWxJblVuaXQgKiAyO1xuXHRcdGpRdWVyeS5zdHlsZSggZWxlbSwgcHJvcCwgaW5pdGlhbEluVW5pdCArIHVuaXQgKTtcblxuXHRcdC8vIE1ha2Ugc3VyZSB3ZSB1cGRhdGUgdGhlIHR3ZWVuIHByb3BlcnRpZXMgbGF0ZXIgb25cblx0XHR2YWx1ZVBhcnRzID0gdmFsdWVQYXJ0cyB8fCBbXTtcblx0fVxuXG5cdGlmICggdmFsdWVQYXJ0cyApIHtcblx0XHRpbml0aWFsSW5Vbml0ID0gK2luaXRpYWxJblVuaXQgfHwgK2luaXRpYWwgfHwgMDtcblxuXHRcdC8vIEFwcGx5IHJlbGF0aXZlIG9mZnNldCAoKz0vLT0pIGlmIHNwZWNpZmllZFxuXHRcdGFkanVzdGVkID0gdmFsdWVQYXJ0c1sgMSBdID9cblx0XHRcdGluaXRpYWxJblVuaXQgKyAoIHZhbHVlUGFydHNbIDEgXSArIDEgKSAqIHZhbHVlUGFydHNbIDIgXSA6XG5cdFx0XHQrdmFsdWVQYXJ0c1sgMiBdO1xuXHRcdGlmICggdHdlZW4gKSB7XG5cdFx0XHR0d2Vlbi51bml0ID0gdW5pdDtcblx0XHRcdHR3ZWVuLnN0YXJ0ID0gaW5pdGlhbEluVW5pdDtcblx0XHRcdHR3ZWVuLmVuZCA9IGFkanVzdGVkO1xuXHRcdH1cblx0fVxuXHRyZXR1cm4gYWRqdXN0ZWQ7XG59XG5cblxudmFyIGRlZmF1bHREaXNwbGF5TWFwID0ge307XG5cbmZ1bmN0aW9uIGdldERlZmF1bHREaXNwbGF5KCBlbGVtICkge1xuXHR2YXIgdGVtcCxcblx0XHRkb2MgPSBlbGVtLm93bmVyRG9jdW1lbnQsXG5cdFx0bm9kZU5hbWUgPSBlbGVtLm5vZGVOYW1lLFxuXHRcdGRpc3BsYXkgPSBkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXTtcblxuXHRpZiAoIGRpc3BsYXkgKSB7XG5cdFx0cmV0dXJuIGRpc3BsYXk7XG5cdH1cblxuXHR0ZW1wID0gZG9jLmJvZHkuYXBwZW5kQ2hpbGQoIGRvYy5jcmVhdGVFbGVtZW50KCBub2RlTmFtZSApICk7XG5cdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCB0ZW1wLCBcImRpc3BsYXlcIiApO1xuXG5cdHRlbXAucGFyZW50Tm9kZS5yZW1vdmVDaGlsZCggdGVtcCApO1xuXG5cdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0ZGlzcGxheSA9IFwiYmxvY2tcIjtcblx0fVxuXHRkZWZhdWx0RGlzcGxheU1hcFsgbm9kZU5hbWUgXSA9IGRpc3BsYXk7XG5cblx0cmV0dXJuIGRpc3BsYXk7XG59XG5cbmZ1bmN0aW9uIHNob3dIaWRlKCBlbGVtZW50cywgc2hvdyApIHtcblx0dmFyIGRpc3BsYXksIGVsZW0sXG5cdFx0dmFsdWVzID0gW10sXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGVsZW1lbnRzLmxlbmd0aDtcblxuXHQvLyBEZXRlcm1pbmUgbmV3IGRpc3BsYXkgdmFsdWUgZm9yIGVsZW1lbnRzIHRoYXQgbmVlZCB0byBjaGFuZ2Vcblx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRlbGVtID0gZWxlbWVudHNbIGluZGV4IF07XG5cdFx0aWYgKCAhZWxlbS5zdHlsZSApIHtcblx0XHRcdGNvbnRpbnVlO1xuXHRcdH1cblxuXHRcdGRpc3BsYXkgPSBlbGVtLnN0eWxlLmRpc3BsYXk7XG5cdFx0aWYgKCBzaG93ICkge1xuXG5cdFx0XHQvLyBTaW5jZSB3ZSBmb3JjZSB2aXNpYmlsaXR5IHVwb24gY2FzY2FkZS1oaWRkZW4gZWxlbWVudHMsIGFuIGltbWVkaWF0ZSAoYW5kIHNsb3cpXG5cdFx0XHQvLyBjaGVjayBpcyByZXF1aXJlZCBpbiB0aGlzIGZpcnN0IGxvb3AgdW5sZXNzIHdlIGhhdmUgYSBub25lbXB0eSBkaXNwbGF5IHZhbHVlIChlaXRoZXJcblx0XHRcdC8vIGlubGluZSBvciBhYm91dC10by1iZS1yZXN0b3JlZClcblx0XHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGRhdGFQcml2LmdldCggZWxlbSwgXCJkaXNwbGF5XCIgKSB8fCBudWxsO1xuXHRcdFx0XHRpZiAoICF2YWx1ZXNbIGluZGV4IF0gKSB7XG5cdFx0XHRcdFx0ZWxlbS5zdHlsZS5kaXNwbGF5ID0gXCJcIjtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdFx0aWYgKCBlbGVtLnN0eWxlLmRpc3BsYXkgPT09IFwiXCIgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICkgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IGdldERlZmF1bHREaXNwbGF5KCBlbGVtICk7XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdGlmICggZGlzcGxheSAhPT0gXCJub25lXCIgKSB7XG5cdFx0XHRcdHZhbHVlc1sgaW5kZXggXSA9IFwibm9uZVwiO1xuXG5cdFx0XHRcdC8vIFJlbWVtYmVyIHdoYXQgd2UncmUgb3ZlcndyaXRpbmdcblx0XHRcdFx0ZGF0YVByaXYuc2V0KCBlbGVtLCBcImRpc3BsYXlcIiwgZGlzcGxheSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxuXG5cdC8vIFNldCB0aGUgZGlzcGxheSBvZiB0aGUgZWxlbWVudHMgaW4gYSBzZWNvbmQgbG9vcCB0byBhdm9pZCBjb25zdGFudCByZWZsb3dcblx0Zm9yICggaW5kZXggPSAwOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRpZiAoIHZhbHVlc1sgaW5kZXggXSAhPSBudWxsICkge1xuXHRcdFx0ZWxlbWVudHNbIGluZGV4IF0uc3R5bGUuZGlzcGxheSA9IHZhbHVlc1sgaW5kZXggXTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbWVudHM7XG59XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2hvdzogZnVuY3Rpb24oKSB7XG5cdFx0cmV0dXJuIHNob3dIaWRlKCB0aGlzLCB0cnVlICk7XG5cdH0sXG5cdGhpZGU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBzaG93SGlkZSggdGhpcyApO1xuXHR9LFxuXHR0b2dnbGU6IGZ1bmN0aW9uKCBzdGF0ZSApIHtcblx0XHRpZiAoIHR5cGVvZiBzdGF0ZSA9PT0gXCJib29sZWFuXCIgKSB7XG5cdFx0XHRyZXR1cm4gc3RhdGUgPyB0aGlzLnNob3coKSA6IHRoaXMuaGlkZSgpO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBpc0hpZGRlbldpdGhpblRyZWUoIHRoaXMgKSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuc2hvdygpO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkuaGlkZSgpO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xudmFyIHJjaGVja2FibGVUeXBlID0gKCAvXig/OmNoZWNrYm94fHJhZGlvKSQvaSApO1xuXG52YXIgcnRhZ05hbWUgPSAoIC88KFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKykvaSApO1xuXG52YXIgcnNjcmlwdFR5cGUgPSAoIC9eJHxebW9kdWxlJHxcXC8oPzpqYXZhfGVjbWEpc2NyaXB0L2kgKTtcblxuXG5cbi8vIFdlIGhhdmUgdG8gY2xvc2UgdGhlc2UgdGFncyB0byBzdXBwb3J0IFhIVE1MICgjMTMyMDApXG52YXIgd3JhcE1hcCA9IHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRvcHRpb246IFsgMSwgXCI8c2VsZWN0IG11bHRpcGxlPSdtdWx0aXBsZSc+XCIsIFwiPC9zZWxlY3Q+XCIgXSxcblxuXHQvLyBYSFRNTCBwYXJzZXJzIGRvIG5vdCBtYWdpY2FsbHkgaW5zZXJ0IGVsZW1lbnRzIGluIHRoZVxuXHQvLyBzYW1lIHdheSB0aGF0IHRhZyBzb3VwIHBhcnNlcnMgZG8uIFNvIHdlIGNhbm5vdCBzaG9ydGVuXG5cdC8vIHRoaXMgYnkgb21pdHRpbmcgPHRib2R5PiBvciBvdGhlciByZXF1aXJlZCBlbGVtZW50cy5cblx0dGhlYWQ6IFsgMSwgXCI8dGFibGU+XCIsIFwiPC90YWJsZT5cIiBdLFxuXHRjb2w6IFsgMiwgXCI8dGFibGU+PGNvbGdyb3VwPlwiLCBcIjwvY29sZ3JvdXA+PC90YWJsZT5cIiBdLFxuXHR0cjogWyAyLCBcIjx0YWJsZT48dGJvZHk+XCIsIFwiPC90Ym9keT48L3RhYmxlPlwiIF0sXG5cdHRkOiBbIDMsIFwiPHRhYmxlPjx0Ym9keT48dHI+XCIsIFwiPC90cj48L3Rib2R5PjwvdGFibGU+XCIgXSxcblxuXHRfZGVmYXVsdDogWyAwLCBcIlwiLCBcIlwiIF1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG53cmFwTWFwLm9wdGdyb3VwID0gd3JhcE1hcC5vcHRpb247XG5cbndyYXBNYXAudGJvZHkgPSB3cmFwTWFwLnRmb290ID0gd3JhcE1hcC5jb2xncm91cCA9IHdyYXBNYXAuY2FwdGlvbiA9IHdyYXBNYXAudGhlYWQ7XG53cmFwTWFwLnRoID0gd3JhcE1hcC50ZDtcblxuXG5mdW5jdGlvbiBnZXRBbGwoIGNvbnRleHQsIHRhZyApIHtcblxuXHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdC8vIFVzZSB0eXBlb2YgdG8gYXZvaWQgemVyby1hcmd1bWVudCBtZXRob2QgaW52b2NhdGlvbiBvbiBob3N0IG9iamVjdHMgKCMxNTE1MSlcblx0dmFyIHJldDtcblxuXHRpZiAoIHR5cGVvZiBjb250ZXh0LmdldEVsZW1lbnRzQnlUYWdOYW1lICE9PSBcInVuZGVmaW5lZFwiICkge1xuXHRcdHJldCA9IGNvbnRleHQuZ2V0RWxlbWVudHNCeVRhZ05hbWUoIHRhZyB8fCBcIipcIiApO1xuXG5cdH0gZWxzZSBpZiAoIHR5cGVvZiBjb250ZXh0LnF1ZXJ5U2VsZWN0b3JBbGwgIT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0cmV0ID0gY29udGV4dC5xdWVyeVNlbGVjdG9yQWxsKCB0YWcgfHwgXCIqXCIgKTtcblxuXHR9IGVsc2Uge1xuXHRcdHJldCA9IFtdO1xuXHR9XG5cblx0aWYgKCB0YWcgPT09IHVuZGVmaW5lZCB8fCB0YWcgJiYgbm9kZU5hbWUoIGNvbnRleHQsIHRhZyApICkge1xuXHRcdHJldHVybiBqUXVlcnkubWVyZ2UoIFsgY29udGV4dCBdLCByZXQgKTtcblx0fVxuXG5cdHJldHVybiByZXQ7XG59XG5cblxuLy8gTWFyayBzY3JpcHRzIGFzIGhhdmluZyBhbHJlYWR5IGJlZW4gZXZhbHVhdGVkXG5mdW5jdGlvbiBzZXRHbG9iYWxFdmFsKCBlbGVtcywgcmVmRWxlbWVudHMgKSB7XG5cdHZhciBpID0gMCxcblx0XHRsID0gZWxlbXMubGVuZ3RoO1xuXG5cdGZvciAoIDsgaSA8IGw7IGkrKyApIHtcblx0XHRkYXRhUHJpdi5zZXQoXG5cdFx0XHRlbGVtc1sgaSBdLFxuXHRcdFx0XCJnbG9iYWxFdmFsXCIsXG5cdFx0XHQhcmVmRWxlbWVudHMgfHwgZGF0YVByaXYuZ2V0KCByZWZFbGVtZW50c1sgaSBdLCBcImdsb2JhbEV2YWxcIiApXG5cdFx0KTtcblx0fVxufVxuXG5cbnZhciByaHRtbCA9IC88fCYjP1xcdys7LztcblxuZnVuY3Rpb24gYnVpbGRGcmFnbWVudCggZWxlbXMsIGNvbnRleHQsIHNjcmlwdHMsIHNlbGVjdGlvbiwgaWdub3JlZCApIHtcblx0dmFyIGVsZW0sIHRtcCwgdGFnLCB3cmFwLCBjb250YWlucywgaixcblx0XHRmcmFnbWVudCA9IGNvbnRleHQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdG5vZGVzID0gW10sXG5cdFx0aSA9IDAsXG5cdFx0bCA9IGVsZW1zLmxlbmd0aDtcblxuXHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0ZWxlbSA9IGVsZW1zWyBpIF07XG5cblx0XHRpZiAoIGVsZW0gfHwgZWxlbSA9PT0gMCApIHtcblxuXHRcdFx0Ly8gQWRkIG5vZGVzIGRpcmVjdGx5XG5cdFx0XHRpZiAoIHRvVHlwZSggZWxlbSApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHQvLyBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRcdGpRdWVyeS5tZXJnZSggbm9kZXMsIGVsZW0ubm9kZVR5cGUgPyBbIGVsZW0gXSA6IGVsZW0gKTtcblxuXHRcdFx0Ly8gQ29udmVydCBub24taHRtbCBpbnRvIGEgdGV4dCBub2RlXG5cdFx0XHR9IGVsc2UgaWYgKCAhcmh0bWwudGVzdCggZWxlbSApICkge1xuXHRcdFx0XHRub2Rlcy5wdXNoKCBjb250ZXh0LmNyZWF0ZVRleHROb2RlKCBlbGVtICkgKTtcblxuXHRcdFx0Ly8gQ29udmVydCBodG1sIGludG8gRE9NIG5vZGVzXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHR0bXAgPSB0bXAgfHwgZnJhZ21lbnQuYXBwZW5kQ2hpbGQoIGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJkaXZcIiApICk7XG5cblx0XHRcdFx0Ly8gRGVzZXJpYWxpemUgYSBzdGFuZGFyZCByZXByZXNlbnRhdGlvblxuXHRcdFx0XHR0YWcgPSAoIHJ0YWdOYW1lLmV4ZWMoIGVsZW0gKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKTtcblx0XHRcdFx0d3JhcCA9IHdyYXBNYXBbIHRhZyBdIHx8IHdyYXBNYXAuX2RlZmF1bHQ7XG5cdFx0XHRcdHRtcC5pbm5lckhUTUwgPSB3cmFwWyAxIF0gKyBqUXVlcnkuaHRtbFByZWZpbHRlciggZWxlbSApICsgd3JhcFsgMiBdO1xuXG5cdFx0XHRcdC8vIERlc2NlbmQgdGhyb3VnaCB3cmFwcGVycyB0byB0aGUgcmlnaHQgY29udGVudFxuXHRcdFx0XHRqID0gd3JhcFsgMCBdO1xuXHRcdFx0XHR3aGlsZSAoIGotLSApIHtcblx0XHRcdFx0XHR0bXAgPSB0bXAubGFzdENoaWxkO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHRcdC8vIHB1c2guYXBwbHkoXywgYXJyYXlsaWtlKSB0aHJvd3Mgb24gYW5jaWVudCBXZWJLaXRcblx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBub2RlcywgdG1wLmNoaWxkTm9kZXMgKTtcblxuXHRcdFx0XHQvLyBSZW1lbWJlciB0aGUgdG9wLWxldmVsIGNvbnRhaW5lclxuXHRcdFx0XHR0bXAgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0XHRcdC8vIEVuc3VyZSB0aGUgY3JlYXRlZCBub2RlcyBhcmUgb3JwaGFuZWQgKCMxMjM5Milcblx0XHRcdFx0dG1wLnRleHRDb250ZW50ID0gXCJcIjtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBSZW1vdmUgd3JhcHBlciBmcm9tIGZyYWdtZW50XG5cdGZyYWdtZW50LnRleHRDb250ZW50ID0gXCJcIjtcblxuXHRpID0gMDtcblx0d2hpbGUgKCAoIGVsZW0gPSBub2Rlc1sgaSsrIF0gKSApIHtcblxuXHRcdC8vIFNraXAgZWxlbWVudHMgYWxyZWFkeSBpbiB0aGUgY29udGV4dCBjb2xsZWN0aW9uICh0cmFjLTQwODcpXG5cdFx0aWYgKCBzZWxlY3Rpb24gJiYgalF1ZXJ5LmluQXJyYXkoIGVsZW0sIHNlbGVjdGlvbiApID4gLTEgKSB7XG5cdFx0XHRpZiAoIGlnbm9yZWQgKSB7XG5cdFx0XHRcdGlnbm9yZWQucHVzaCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdFx0Y29udGludWU7XG5cdFx0fVxuXG5cdFx0Y29udGFpbnMgPSBqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApO1xuXG5cdFx0Ly8gQXBwZW5kIHRvIGZyYWdtZW50XG5cdFx0dG1wID0gZ2V0QWxsKCBmcmFnbWVudC5hcHBlbmRDaGlsZCggZWxlbSApLCBcInNjcmlwdFwiICk7XG5cblx0XHQvLyBQcmVzZXJ2ZSBzY3JpcHQgZXZhbHVhdGlvbiBoaXN0b3J5XG5cdFx0aWYgKCBjb250YWlucyApIHtcblx0XHRcdHNldEdsb2JhbEV2YWwoIHRtcCApO1xuXHRcdH1cblxuXHRcdC8vIENhcHR1cmUgZXhlY3V0YWJsZXNcblx0XHRpZiAoIHNjcmlwdHMgKSB7XG5cdFx0XHRqID0gMDtcblx0XHRcdHdoaWxlICggKCBlbGVtID0gdG1wWyBqKysgXSApICkge1xuXHRcdFx0XHRpZiAoIHJzY3JpcHRUeXBlLnRlc3QoIGVsZW0udHlwZSB8fCBcIlwiICkgKSB7XG5cdFx0XHRcdFx0c2NyaXB0cy5wdXNoKCBlbGVtICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZnJhZ21lbnQ7XG59XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGZyYWdtZW50ID0gZG9jdW1lbnQuY3JlYXRlRG9jdW1lbnRGcmFnbWVudCgpLFxuXHRcdGRpdiA9IGZyYWdtZW50LmFwcGVuZENoaWxkKCBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkgKSxcblx0XHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHlcblx0Ly8gQ2hlY2sgc3RhdGUgbG9zdCBpZiB0aGUgbmFtZSBpcyBzZXQgKCMxMTIxNylcblx0Ly8gU3VwcG9ydDogV2luZG93cyBXZWIgQXBwcyAoV1dBKVxuXHQvLyBgbmFtZWAgYW5kIGB0eXBlYCBtdXN0IHVzZSAuc2V0QXR0cmlidXRlIGZvciBXV0EgKCMxNDkwMSlcblx0aW5wdXQuc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgXCJyYWRpb1wiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJjaGVja2VkXCIsIFwiY2hlY2tlZFwiICk7XG5cdGlucHV0LnNldEF0dHJpYnV0ZSggXCJuYW1lXCIsIFwidFwiICk7XG5cblx0ZGl2LmFwcGVuZENoaWxkKCBpbnB1dCApO1xuXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgb25seVxuXHQvLyBPbGRlciBXZWJLaXQgZG9lc24ndCBjbG9uZSBjaGVja2VkIHN0YXRlIGNvcnJlY3RseSBpbiBmcmFnbWVudHNcblx0c3VwcG9ydC5jaGVja0Nsb25lID0gZGl2LmNsb25lTm9kZSggdHJ1ZSApLmNsb25lTm9kZSggdHJ1ZSApLmxhc3RDaGlsZC5jaGVja2VkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNYWtlIHN1cmUgdGV4dGFyZWEgKGFuZCBjaGVja2JveCkgZGVmYXVsdFZhbHVlIGlzIHByb3Blcmx5IGNsb25lZFxuXHRkaXYuaW5uZXJIVE1MID0gXCI8dGV4dGFyZWE+eDwvdGV4dGFyZWE+XCI7XG5cdHN1cHBvcnQubm9DbG9uZUNoZWNrZWQgPSAhIWRpdi5jbG9uZU5vZGUoIHRydWUgKS5sYXN0Q2hpbGQuZGVmYXVsdFZhbHVlO1xufSApKCk7XG52YXIgZG9jdW1lbnRFbGVtZW50ID0gZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50O1xuXG5cblxudmFyXG5cdHJrZXlFdmVudCA9IC9ea2V5Lyxcblx0cm1vdXNlRXZlbnQgPSAvXig/Om1vdXNlfHBvaW50ZXJ8Y29udGV4dG1lbnV8ZHJhZ3xkcm9wKXxjbGljay8sXG5cdHJ0eXBlbmFtZXNwYWNlID0gL14oW14uXSopKD86XFwuKC4rKXwpLztcblxuZnVuY3Rpb24gcmV0dXJuVHJ1ZSgpIHtcblx0cmV0dXJuIHRydWU7XG59XG5cbmZ1bmN0aW9uIHJldHVybkZhbHNlKCkge1xuXHRyZXR1cm4gZmFsc2U7XG59XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBTZWUgIzEzMzkzIGZvciBtb3JlIGluZm9cbmZ1bmN0aW9uIHNhZmVBY3RpdmVFbGVtZW50KCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBkb2N1bWVudC5hY3RpdmVFbGVtZW50O1xuXHR9IGNhdGNoICggZXJyICkgeyB9XG59XG5cbmZ1bmN0aW9uIG9uKCBlbGVtLCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuLCBvbmUgKSB7XG5cdHZhciBvcmlnRm4sIHR5cGU7XG5cblx0Ly8gVHlwZXMgY2FuIGJlIGEgbWFwIG9mIHR5cGVzL2hhbmRsZXJzXG5cdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gKCB0eXBlcy1PYmplY3QsIHNlbGVjdG9yLCBkYXRhIClcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciAhPT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcy1PYmplY3QsIGRhdGEgKVxuXHRcdFx0ZGF0YSA9IGRhdGEgfHwgc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdG9uKCBlbGVtLCB0eXBlLCBzZWxlY3RvciwgZGF0YSwgdHlwZXNbIHR5cGUgXSwgb25lICk7XG5cdFx0fVxuXHRcdHJldHVybiBlbGVtO1xuXHR9XG5cblx0aWYgKCBkYXRhID09IG51bGwgJiYgZm4gPT0gbnVsbCApIHtcblxuXHRcdC8vICggdHlwZXMsIGZuIClcblx0XHRmbiA9IHNlbGVjdG9yO1xuXHRcdGRhdGEgPSBzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0fSBlbHNlIGlmICggZm4gPT0gbnVsbCApIHtcblx0XHRpZiAoIHR5cGVvZiBzZWxlY3RvciA9PT0gXCJzdHJpbmdcIiApIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgc2VsZWN0b3IsIGZuIClcblx0XHRcdGZuID0gZGF0YTtcblx0XHRcdGRhdGEgPSB1bmRlZmluZWQ7XG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gKCB0eXBlcywgZGF0YSwgZm4gKVxuXHRcdFx0Zm4gPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHNlbGVjdG9yO1xuXHRcdFx0c2VsZWN0b3IgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHR9XG5cdGlmICggZm4gPT09IGZhbHNlICkge1xuXHRcdGZuID0gcmV0dXJuRmFsc2U7XG5cdH0gZWxzZSBpZiAoICFmbiApIHtcblx0XHRyZXR1cm4gZWxlbTtcblx0fVxuXG5cdGlmICggb25lID09PSAxICkge1xuXHRcdG9yaWdGbiA9IGZuO1xuXHRcdGZuID0gZnVuY3Rpb24oIGV2ZW50ICkge1xuXG5cdFx0XHQvLyBDYW4gdXNlIGFuIGVtcHR5IHNldCwgc2luY2UgZXZlbnQgY29udGFpbnMgdGhlIGluZm9cblx0XHRcdGpRdWVyeSgpLm9mZiggZXZlbnQgKTtcblx0XHRcdHJldHVybiBvcmlnRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH07XG5cblx0XHQvLyBVc2Ugc2FtZSBndWlkIHNvIGNhbGxlciBjYW4gcmVtb3ZlIHVzaW5nIG9yaWdGblxuXHRcdGZuLmd1aWQgPSBvcmlnRm4uZ3VpZCB8fCAoIG9yaWdGbi5ndWlkID0galF1ZXJ5Lmd1aWQrKyApO1xuXHR9XG5cdHJldHVybiBlbGVtLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdGpRdWVyeS5ldmVudC5hZGQoIHRoaXMsIHR5cGVzLCBmbiwgZGF0YSwgc2VsZWN0b3IgKTtcblx0fSApO1xufVxuXG4vKlxuICogSGVscGVyIGZ1bmN0aW9ucyBmb3IgbWFuYWdpbmcgZXZlbnRzIC0tIG5vdCBwYXJ0IG9mIHRoZSBwdWJsaWMgaW50ZXJmYWNlLlxuICogUHJvcHMgdG8gRGVhbiBFZHdhcmRzJyBhZGRFdmVudCBsaWJyYXJ5IGZvciBtYW55IG9mIHRoZSBpZGVhcy5cbiAqL1xualF1ZXJ5LmV2ZW50ID0ge1xuXG5cdGdsb2JhbDoge30sXG5cblx0YWRkOiBmdW5jdGlvbiggZWxlbSwgdHlwZXMsIGhhbmRsZXIsIGRhdGEsIHNlbGVjdG9yICkge1xuXG5cdFx0dmFyIGhhbmRsZU9iakluLCBldmVudEhhbmRsZSwgdG1wLFxuXHRcdFx0ZXZlbnRzLCB0LCBoYW5kbGVPYmosXG5cdFx0XHRzcGVjaWFsLCBoYW5kbGVycywgdHlwZSwgbmFtZXNwYWNlcywgb3JpZ1R5cGUsXG5cdFx0XHRlbGVtRGF0YSA9IGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0Ly8gRG9uJ3QgYXR0YWNoIGV2ZW50cyB0byBub0RhdGEgb3IgdGV4dC9jb21tZW50IG5vZGVzIChidXQgYWxsb3cgcGxhaW4gb2JqZWN0cylcblx0XHRpZiAoICFlbGVtRGF0YSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBDYWxsZXIgY2FuIHBhc3MgaW4gYW4gb2JqZWN0IG9mIGN1c3RvbSBkYXRhIGluIGxpZXUgb2YgdGhlIGhhbmRsZXJcblx0XHRpZiAoIGhhbmRsZXIuaGFuZGxlciApIHtcblx0XHRcdGhhbmRsZU9iakluID0gaGFuZGxlcjtcblx0XHRcdGhhbmRsZXIgPSBoYW5kbGVPYmpJbi5oYW5kbGVyO1xuXHRcdFx0c2VsZWN0b3IgPSBoYW5kbGVPYmpJbi5zZWxlY3Rvcjtcblx0XHR9XG5cblx0XHQvLyBFbnN1cmUgdGhhdCBpbnZhbGlkIHNlbGVjdG9ycyB0aHJvdyBleGNlcHRpb25zIGF0IGF0dGFjaCB0aW1lXG5cdFx0Ly8gRXZhbHVhdGUgYWdhaW5zdCBkb2N1bWVudEVsZW1lbnQgaW4gY2FzZSBlbGVtIGlzIGEgbm9uLWVsZW1lbnQgbm9kZSAoZS5nLiwgZG9jdW1lbnQpXG5cdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdGpRdWVyeS5maW5kLm1hdGNoZXNTZWxlY3RvciggZG9jdW1lbnRFbGVtZW50LCBzZWxlY3RvciApO1xuXHRcdH1cblxuXHRcdC8vIE1ha2Ugc3VyZSB0aGF0IHRoZSBoYW5kbGVyIGhhcyBhIHVuaXF1ZSBJRCwgdXNlZCB0byBmaW5kL3JlbW92ZSBpdCBsYXRlclxuXHRcdGlmICggIWhhbmRsZXIuZ3VpZCApIHtcblx0XHRcdGhhbmRsZXIuZ3VpZCA9IGpRdWVyeS5ndWlkKys7XG5cdFx0fVxuXG5cdFx0Ly8gSW5pdCB0aGUgZWxlbWVudCdzIGV2ZW50IHN0cnVjdHVyZSBhbmQgbWFpbiBoYW5kbGVyLCBpZiB0aGlzIGlzIHRoZSBmaXJzdFxuXHRcdGlmICggISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRldmVudHMgPSBlbGVtRGF0YS5ldmVudHMgPSB7fTtcblx0XHR9XG5cdFx0aWYgKCAhKCBldmVudEhhbmRsZSA9IGVsZW1EYXRhLmhhbmRsZSApICkge1xuXHRcdFx0ZXZlbnRIYW5kbGUgPSBlbGVtRGF0YS5oYW5kbGUgPSBmdW5jdGlvbiggZSApIHtcblxuXHRcdFx0XHQvLyBEaXNjYXJkIHRoZSBzZWNvbmQgZXZlbnQgb2YgYSBqUXVlcnkuZXZlbnQudHJpZ2dlcigpIGFuZFxuXHRcdFx0XHQvLyB3aGVuIGFuIGV2ZW50IGlzIGNhbGxlZCBhZnRlciBhIHBhZ2UgaGFzIHVubG9hZGVkXG5cdFx0XHRcdHJldHVybiB0eXBlb2YgalF1ZXJ5ICE9PSBcInVuZGVmaW5lZFwiICYmIGpRdWVyeS5ldmVudC50cmlnZ2VyZWQgIT09IGUudHlwZSA/XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmRpc3BhdGNoLmFwcGx5KCBlbGVtLCBhcmd1bWVudHMgKSA6IHVuZGVmaW5lZDtcblx0XHRcdH07XG5cdFx0fVxuXG5cdFx0Ly8gSGFuZGxlIG11bHRpcGxlIGV2ZW50cyBzZXBhcmF0ZWQgYnkgYSBzcGFjZVxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBUaGVyZSAqbXVzdCogYmUgYSB0eXBlLCBubyBhdHRhY2hpbmcgbmFtZXNwYWNlLW9ubHkgaGFuZGxlcnNcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiBldmVudCBjaGFuZ2VzIGl0cyB0eXBlLCB1c2UgdGhlIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMgZm9yIHRoZSBjaGFuZ2VkIHR5cGVcblx0XHRcdHNwZWNpYWwgPSBqUXVlcnkuZXZlbnQuc3BlY2lhbFsgdHlwZSBdIHx8IHt9O1xuXG5cdFx0XHQvLyBJZiBzZWxlY3RvciBkZWZpbmVkLCBkZXRlcm1pbmUgc3BlY2lhbCBldmVudCBhcGkgdHlwZSwgb3RoZXJ3aXNlIGdpdmVuIHR5cGVcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblxuXHRcdFx0Ly8gVXBkYXRlIHNwZWNpYWwgYmFzZWQgb24gbmV3bHkgcmVzZXQgdHlwZVxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyB0eXBlIF0gfHwge307XG5cblx0XHRcdC8vIGhhbmRsZU9iaiBpcyBwYXNzZWQgdG8gYWxsIGV2ZW50IGhhbmRsZXJzXG5cdFx0XHRoYW5kbGVPYmogPSBqUXVlcnkuZXh0ZW5kKCB7XG5cdFx0XHRcdHR5cGU6IHR5cGUsXG5cdFx0XHRcdG9yaWdUeXBlOiBvcmlnVHlwZSxcblx0XHRcdFx0ZGF0YTogZGF0YSxcblx0XHRcdFx0aGFuZGxlcjogaGFuZGxlcixcblx0XHRcdFx0Z3VpZDogaGFuZGxlci5ndWlkLFxuXHRcdFx0XHRzZWxlY3Rvcjogc2VsZWN0b3IsXG5cdFx0XHRcdG5lZWRzQ29udGV4dDogc2VsZWN0b3IgJiYgalF1ZXJ5LmV4cHIubWF0Y2gubmVlZHNDb250ZXh0LnRlc3QoIHNlbGVjdG9yICksXG5cdFx0XHRcdG5hbWVzcGFjZTogbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApXG5cdFx0XHR9LCBoYW5kbGVPYmpJbiApO1xuXG5cdFx0XHQvLyBJbml0IHRoZSBldmVudCBoYW5kbGVyIHF1ZXVlIGlmIHdlJ3JlIHRoZSBmaXJzdFxuXHRcdFx0aWYgKCAhKCBoYW5kbGVycyA9IGV2ZW50c1sgdHlwZSBdICkgKSB7XG5cdFx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gPSBbXTtcblx0XHRcdFx0aGFuZGxlcnMuZGVsZWdhdGVDb3VudCA9IDA7XG5cblx0XHRcdFx0Ly8gT25seSB1c2UgYWRkRXZlbnRMaXN0ZW5lciBpZiB0aGUgc3BlY2lhbCBldmVudHMgaGFuZGxlciByZXR1cm5zIGZhbHNlXG5cdFx0XHRcdGlmICggIXNwZWNpYWwuc2V0dXAgfHxcblx0XHRcdFx0XHRzcGVjaWFsLnNldHVwLmNhbGwoIGVsZW0sIGRhdGEsIG5hbWVzcGFjZXMsIGV2ZW50SGFuZGxlICkgPT09IGZhbHNlICkge1xuXG5cdFx0XHRcdFx0aWYgKCBlbGVtLmFkZEV2ZW50TGlzdGVuZXIgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLmFkZEV2ZW50TGlzdGVuZXIoIHR5cGUsIGV2ZW50SGFuZGxlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdGlmICggc3BlY2lhbC5hZGQgKSB7XG5cdFx0XHRcdHNwZWNpYWwuYWRkLmNhbGwoIGVsZW0sIGhhbmRsZU9iaiApO1xuXG5cdFx0XHRcdGlmICggIWhhbmRsZU9iai5oYW5kbGVyLmd1aWQgKSB7XG5cdFx0XHRcdFx0aGFuZGxlT2JqLmhhbmRsZXIuZ3VpZCA9IGhhbmRsZXIuZ3VpZDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHQvLyBBZGQgdG8gdGhlIGVsZW1lbnQncyBoYW5kbGVyIGxpc3QsIGRlbGVnYXRlcyBpbiBmcm9udFxuXHRcdFx0aWYgKCBzZWxlY3RvciApIHtcblx0XHRcdFx0aGFuZGxlcnMuc3BsaWNlKCBoYW5kbGVycy5kZWxlZ2F0ZUNvdW50KyssIDAsIGhhbmRsZU9iaiApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0aGFuZGxlcnMucHVzaCggaGFuZGxlT2JqICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEtlZXAgdHJhY2sgb2Ygd2hpY2ggZXZlbnRzIGhhdmUgZXZlciBiZWVuIHVzZWQsIGZvciBldmVudCBvcHRpbWl6YXRpb25cblx0XHRcdGpRdWVyeS5ldmVudC5nbG9iYWxbIHR5cGUgXSA9IHRydWU7XG5cdFx0fVxuXG5cdH0sXG5cblx0Ly8gRGV0YWNoIGFuIGV2ZW50IG9yIHNldCBvZiBldmVudHMgZnJvbSBhbiBlbGVtZW50XG5cdHJlbW92ZTogZnVuY3Rpb24oIGVsZW0sIHR5cGVzLCBoYW5kbGVyLCBzZWxlY3RvciwgbWFwcGVkVHlwZXMgKSB7XG5cblx0XHR2YXIgaiwgb3JpZ0NvdW50LCB0bXAsXG5cdFx0XHRldmVudHMsIHQsIGhhbmRsZU9iaixcblx0XHRcdHNwZWNpYWwsIGhhbmRsZXJzLCB0eXBlLCBuYW1lc3BhY2VzLCBvcmlnVHlwZSxcblx0XHRcdGVsZW1EYXRhID0gZGF0YVByaXYuaGFzRGF0YSggZWxlbSApICYmIGRhdGFQcml2LmdldCggZWxlbSApO1xuXG5cdFx0aWYgKCAhZWxlbURhdGEgfHwgISggZXZlbnRzID0gZWxlbURhdGEuZXZlbnRzICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gT25jZSBmb3IgZWFjaCB0eXBlLm5hbWVzcGFjZSBpbiB0eXBlczsgdHlwZSBtYXkgYmUgb21pdHRlZFxuXHRcdHR5cGVzID0gKCB0eXBlcyB8fCBcIlwiICkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbIFwiXCIgXTtcblx0XHR0ID0gdHlwZXMubGVuZ3RoO1xuXHRcdHdoaWxlICggdC0tICkge1xuXHRcdFx0dG1wID0gcnR5cGVuYW1lc3BhY2UuZXhlYyggdHlwZXNbIHQgXSApIHx8IFtdO1xuXHRcdFx0dHlwZSA9IG9yaWdUeXBlID0gdG1wWyAxIF07XG5cdFx0XHRuYW1lc3BhY2VzID0gKCB0bXBbIDIgXSB8fCBcIlwiICkuc3BsaXQoIFwiLlwiICkuc29ydCgpO1xuXG5cdFx0XHQvLyBVbmJpbmQgYWxsIGV2ZW50cyAob24gdGhpcyBuYW1lc3BhY2UsIGlmIHByb3ZpZGVkKSBmb3IgdGhlIGVsZW1lbnRcblx0XHRcdGlmICggIXR5cGUgKSB7XG5cdFx0XHRcdGZvciAoIHR5cGUgaW4gZXZlbnRzICkge1xuXHRcdFx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIGVsZW0sIHR5cGUgKyB0eXBlc1sgdCBdLCBoYW5kbGVyLCBzZWxlY3RvciwgdHJ1ZSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGNvbnRpbnVlO1xuXHRcdFx0fVxuXG5cdFx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRcdHR5cGUgPSAoIHNlbGVjdG9yID8gc3BlY2lhbC5kZWxlZ2F0ZVR5cGUgOiBzcGVjaWFsLmJpbmRUeXBlICkgfHwgdHlwZTtcblx0XHRcdGhhbmRsZXJzID0gZXZlbnRzWyB0eXBlIF0gfHwgW107XG5cdFx0XHR0bXAgPSB0bXBbIDIgXSAmJlxuXHRcdFx0XHRuZXcgUmVnRXhwKCBcIihefFxcXFwuKVwiICsgbmFtZXNwYWNlcy5qb2luKCBcIlxcXFwuKD86LipcXFxcLnwpXCIgKSArIFwiKFxcXFwufCQpXCIgKTtcblxuXHRcdFx0Ly8gUmVtb3ZlIG1hdGNoaW5nIGV2ZW50c1xuXHRcdFx0b3JpZ0NvdW50ID0gaiA9IGhhbmRsZXJzLmxlbmd0aDtcblx0XHRcdHdoaWxlICggai0tICkge1xuXHRcdFx0XHRoYW5kbGVPYmogPSBoYW5kbGVyc1sgaiBdO1xuXG5cdFx0XHRcdGlmICggKCBtYXBwZWRUeXBlcyB8fCBvcmlnVHlwZSA9PT0gaGFuZGxlT2JqLm9yaWdUeXBlICkgJiZcblx0XHRcdFx0XHQoICFoYW5kbGVyIHx8IGhhbmRsZXIuZ3VpZCA9PT0gaGFuZGxlT2JqLmd1aWQgKSAmJlxuXHRcdFx0XHRcdCggIXRtcCB8fCB0bXAudGVzdCggaGFuZGxlT2JqLm5hbWVzcGFjZSApICkgJiZcblx0XHRcdFx0XHQoICFzZWxlY3RvciB8fCBzZWxlY3RvciA9PT0gaGFuZGxlT2JqLnNlbGVjdG9yIHx8XG5cdFx0XHRcdFx0XHRzZWxlY3RvciA9PT0gXCIqKlwiICYmIGhhbmRsZU9iai5zZWxlY3RvciApICkge1xuXHRcdFx0XHRcdGhhbmRsZXJzLnNwbGljZSggaiwgMSApO1xuXG5cdFx0XHRcdFx0aWYgKCBoYW5kbGVPYmouc2VsZWN0b3IgKSB7XG5cdFx0XHRcdFx0XHRoYW5kbGVycy5kZWxlZ2F0ZUNvdW50LS07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGlmICggc3BlY2lhbC5yZW1vdmUgKSB7XG5cdFx0XHRcdFx0XHRzcGVjaWFsLnJlbW92ZS5jYWxsKCBlbGVtLCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gUmVtb3ZlIGdlbmVyaWMgZXZlbnQgaGFuZGxlciBpZiB3ZSByZW1vdmVkIHNvbWV0aGluZyBhbmQgbm8gbW9yZSBoYW5kbGVycyBleGlzdFxuXHRcdFx0Ly8gKGF2b2lkcyBwb3RlbnRpYWwgZm9yIGVuZGxlc3MgcmVjdXJzaW9uIGR1cmluZyByZW1vdmFsIG9mIHNwZWNpYWwgZXZlbnQgaGFuZGxlcnMpXG5cdFx0XHRpZiAoIG9yaWdDb3VudCAmJiAhaGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRpZiAoICFzcGVjaWFsLnRlYXJkb3duIHx8XG5cdFx0XHRcdFx0c3BlY2lhbC50ZWFyZG93bi5jYWxsKCBlbGVtLCBuYW1lc3BhY2VzLCBlbGVtRGF0YS5oYW5kbGUgKSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGVsZW1EYXRhLmhhbmRsZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0ZGVsZXRlIGV2ZW50c1sgdHlwZSBdO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIFJlbW92ZSBkYXRhIGFuZCB0aGUgZXhwYW5kbyBpZiBpdCdzIG5vIGxvbmdlciB1c2VkXG5cdFx0aWYgKCBqUXVlcnkuaXNFbXB0eU9iamVjdCggZXZlbnRzICkgKSB7XG5cdFx0XHRkYXRhUHJpdi5yZW1vdmUoIGVsZW0sIFwiaGFuZGxlIGV2ZW50c1wiICk7XG5cdFx0fVxuXHR9LFxuXG5cdGRpc3BhdGNoOiBmdW5jdGlvbiggbmF0aXZlRXZlbnQgKSB7XG5cblx0XHQvLyBNYWtlIGEgd3JpdGFibGUgalF1ZXJ5LkV2ZW50IGZyb20gdGhlIG5hdGl2ZSBldmVudCBvYmplY3Rcblx0XHR2YXIgZXZlbnQgPSBqUXVlcnkuZXZlbnQuZml4KCBuYXRpdmVFdmVudCApO1xuXG5cdFx0dmFyIGksIGosIHJldCwgbWF0Y2hlZCwgaGFuZGxlT2JqLCBoYW5kbGVyUXVldWUsXG5cdFx0XHRhcmdzID0gbmV3IEFycmF5KCBhcmd1bWVudHMubGVuZ3RoICksXG5cdFx0XHRoYW5kbGVycyA9ICggZGF0YVByaXYuZ2V0KCB0aGlzLCBcImV2ZW50c1wiICkgfHwge30gKVsgZXZlbnQudHlwZSBdIHx8IFtdLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsWyBldmVudC50eXBlIF0gfHwge307XG5cblx0XHQvLyBVc2UgdGhlIGZpeC1lZCBqUXVlcnkuRXZlbnQgcmF0aGVyIHRoYW4gdGhlIChyZWFkLW9ubHkpIG5hdGl2ZSBldmVudFxuXHRcdGFyZ3NbIDAgXSA9IGV2ZW50O1xuXG5cdFx0Zm9yICggaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKysgKSB7XG5cdFx0XHRhcmdzWyBpIF0gPSBhcmd1bWVudHNbIGkgXTtcblx0XHR9XG5cblx0XHRldmVudC5kZWxlZ2F0ZVRhcmdldCA9IHRoaXM7XG5cblx0XHQvLyBDYWxsIHRoZSBwcmVEaXNwYXRjaCBob29rIGZvciB0aGUgbWFwcGVkIHR5cGUsIGFuZCBsZXQgaXQgYmFpbCBpZiBkZXNpcmVkXG5cdFx0aWYgKCBzcGVjaWFsLnByZURpc3BhdGNoICYmIHNwZWNpYWwucHJlRGlzcGF0Y2guY2FsbCggdGhpcywgZXZlbnQgKSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gRGV0ZXJtaW5lIGhhbmRsZXJzXG5cdFx0aGFuZGxlclF1ZXVlID0galF1ZXJ5LmV2ZW50LmhhbmRsZXJzLmNhbGwoIHRoaXMsIGV2ZW50LCBoYW5kbGVycyApO1xuXG5cdFx0Ly8gUnVuIGRlbGVnYXRlcyBmaXJzdDsgdGhleSBtYXkgd2FudCB0byBzdG9wIHByb3BhZ2F0aW9uIGJlbmVhdGggdXNcblx0XHRpID0gMDtcblx0XHR3aGlsZSAoICggbWF0Y2hlZCA9IGhhbmRsZXJRdWV1ZVsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGV2ZW50LmN1cnJlbnRUYXJnZXQgPSBtYXRjaGVkLmVsZW07XG5cblx0XHRcdGogPSAwO1xuXHRcdFx0d2hpbGUgKCAoIGhhbmRsZU9iaiA9IG1hdGNoZWQuaGFuZGxlcnNbIGorKyBdICkgJiZcblx0XHRcdFx0IWV2ZW50LmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cblx0XHRcdFx0Ly8gVHJpZ2dlcmVkIGV2ZW50IG11c3QgZWl0aGVyIDEpIGhhdmUgbm8gbmFtZXNwYWNlLCBvciAyKSBoYXZlIG5hbWVzcGFjZShzKVxuXHRcdFx0XHQvLyBhIHN1YnNldCBvciBlcXVhbCB0byB0aG9zZSBpbiB0aGUgYm91bmQgZXZlbnQgKGJvdGggY2FuIGhhdmUgbm8gbmFtZXNwYWNlKS5cblx0XHRcdFx0aWYgKCAhZXZlbnQucm5hbWVzcGFjZSB8fCBldmVudC5ybmFtZXNwYWNlLnRlc3QoIGhhbmRsZU9iai5uYW1lc3BhY2UgKSApIHtcblxuXHRcdFx0XHRcdGV2ZW50LmhhbmRsZU9iaiA9IGhhbmRsZU9iajtcblx0XHRcdFx0XHRldmVudC5kYXRhID0gaGFuZGxlT2JqLmRhdGE7XG5cblx0XHRcdFx0XHRyZXQgPSAoICggalF1ZXJ5LmV2ZW50LnNwZWNpYWxbIGhhbmRsZU9iai5vcmlnVHlwZSBdIHx8IHt9ICkuaGFuZGxlIHx8XG5cdFx0XHRcdFx0XHRoYW5kbGVPYmouaGFuZGxlciApLmFwcGx5KCBtYXRjaGVkLmVsZW0sIGFyZ3MgKTtcblxuXHRcdFx0XHRcdGlmICggcmV0ICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRpZiAoICggZXZlbnQucmVzdWx0ID0gcmV0ICkgPT09IGZhbHNlICkge1xuXHRcdFx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHRcdFx0XHRldmVudC5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDYWxsIHRoZSBwb3N0RGlzcGF0Y2ggaG9vayBmb3IgdGhlIG1hcHBlZCB0eXBlXG5cdFx0aWYgKCBzcGVjaWFsLnBvc3REaXNwYXRjaCApIHtcblx0XHRcdHNwZWNpYWwucG9zdERpc3BhdGNoLmNhbGwoIHRoaXMsIGV2ZW50ICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGV2ZW50LnJlc3VsdDtcblx0fSxcblxuXHRoYW5kbGVyczogZnVuY3Rpb24oIGV2ZW50LCBoYW5kbGVycyApIHtcblx0XHR2YXIgaSwgaGFuZGxlT2JqLCBzZWwsIG1hdGNoZWRIYW5kbGVycywgbWF0Y2hlZFNlbGVjdG9ycyxcblx0XHRcdGhhbmRsZXJRdWV1ZSA9IFtdLFxuXHRcdFx0ZGVsZWdhdGVDb3VudCA9IGhhbmRsZXJzLmRlbGVnYXRlQ291bnQsXG5cdFx0XHRjdXIgPSBldmVudC50YXJnZXQ7XG5cblx0XHQvLyBGaW5kIGRlbGVnYXRlIGhhbmRsZXJzXG5cdFx0aWYgKCBkZWxlZ2F0ZUNvdW50ICYmXG5cblx0XHRcdC8vIFN1cHBvcnQ6IElFIDw9OVxuXHRcdFx0Ly8gQmxhY2staG9sZSBTVkcgPHVzZT4gaW5zdGFuY2UgdHJlZXMgKHRyYWMtMTMxODApXG5cdFx0XHRjdXIubm9kZVR5cGUgJiZcblxuXHRcdFx0Ly8gU3VwcG9ydDogRmlyZWZveCA8PTQyXG5cdFx0XHQvLyBTdXBwcmVzcyBzcGVjLXZpb2xhdGluZyBjbGlja3MgaW5kaWNhdGluZyBhIG5vbi1wcmltYXJ5IHBvaW50ZXIgYnV0dG9uICh0cmFjLTM4NjEpXG5cdFx0XHQvLyBodHRwczovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudC10eXBlLWNsaWNrXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSAxMSBvbmx5XG5cdFx0XHQvLyAuLi5idXQgbm90IGFycm93IGtleSBcImNsaWNrc1wiIG9mIHJhZGlvIGlucHV0cywgd2hpY2ggY2FuIGhhdmUgYGJ1dHRvbmAgLTEgKGdoLTIzNDMpXG5cdFx0XHQhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgZXZlbnQuYnV0dG9uID49IDEgKSApIHtcblxuXHRcdFx0Zm9yICggOyBjdXIgIT09IHRoaXM7IGN1ciA9IGN1ci5wYXJlbnROb2RlIHx8IHRoaXMgKSB7XG5cblx0XHRcdFx0Ly8gRG9uJ3QgY2hlY2sgbm9uLWVsZW1lbnRzICgjMTMyMDgpXG5cdFx0XHRcdC8vIERvbid0IHByb2Nlc3MgY2xpY2tzIG9uIGRpc2FibGVkIGVsZW1lbnRzICgjNjkxMSwgIzgxNjUsICMxMTM4MiwgIzExNzY0KVxuXHRcdFx0XHRpZiAoIGN1ci5ub2RlVHlwZSA9PT0gMSAmJiAhKCBldmVudC50eXBlID09PSBcImNsaWNrXCIgJiYgY3VyLmRpc2FibGVkID09PSB0cnVlICkgKSB7XG5cdFx0XHRcdFx0bWF0Y2hlZEhhbmRsZXJzID0gW107XG5cdFx0XHRcdFx0bWF0Y2hlZFNlbGVjdG9ycyA9IHt9O1xuXHRcdFx0XHRcdGZvciAoIGkgPSAwOyBpIDwgZGVsZWdhdGVDb3VudDsgaSsrICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlT2JqID0gaGFuZGxlcnNbIGkgXTtcblxuXHRcdFx0XHRcdFx0Ly8gRG9uJ3QgY29uZmxpY3Qgd2l0aCBPYmplY3QucHJvdG90eXBlIHByb3BlcnRpZXMgKCMxMzIwMylcblx0XHRcdFx0XHRcdHNlbCA9IGhhbmRsZU9iai5zZWxlY3RvciArIFwiIFwiO1xuXG5cdFx0XHRcdFx0XHRpZiAoIG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRTZWxlY3RvcnNbIHNlbCBdID0gaGFuZGxlT2JqLm5lZWRzQ29udGV4dCA/XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5KCBzZWwsIHRoaXMgKS5pbmRleCggY3VyICkgPiAtMSA6XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmZpbmQoIHNlbCwgdGhpcywgbnVsbCwgWyBjdXIgXSApLmxlbmd0aDtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdGlmICggbWF0Y2hlZFNlbGVjdG9yc1sgc2VsIF0gKSB7XG5cdFx0XHRcdFx0XHRcdG1hdGNoZWRIYW5kbGVycy5wdXNoKCBoYW5kbGVPYmogKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0aWYgKCBtYXRjaGVkSGFuZGxlcnMubGVuZ3RoICkge1xuXHRcdFx0XHRcdFx0aGFuZGxlclF1ZXVlLnB1c2goIHsgZWxlbTogY3VyLCBoYW5kbGVyczogbWF0Y2hlZEhhbmRsZXJzIH0gKTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBBZGQgdGhlIHJlbWFpbmluZyAoZGlyZWN0bHktYm91bmQpIGhhbmRsZXJzXG5cdFx0Y3VyID0gdGhpcztcblx0XHRpZiAoIGRlbGVnYXRlQ291bnQgPCBoYW5kbGVycy5sZW5ndGggKSB7XG5cdFx0XHRoYW5kbGVyUXVldWUucHVzaCggeyBlbGVtOiBjdXIsIGhhbmRsZXJzOiBoYW5kbGVycy5zbGljZSggZGVsZWdhdGVDb3VudCApIH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gaGFuZGxlclF1ZXVlO1xuXHR9LFxuXG5cdGFkZFByb3A6IGZ1bmN0aW9uKCBuYW1lLCBob29rICkge1xuXHRcdE9iamVjdC5kZWZpbmVQcm9wZXJ0eSggalF1ZXJ5LkV2ZW50LnByb3RvdHlwZSwgbmFtZSwge1xuXHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdGNvbmZpZ3VyYWJsZTogdHJ1ZSxcblxuXHRcdFx0Z2V0OiBpc0Z1bmN0aW9uKCBob29rICkgP1xuXHRcdFx0XHRmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRpZiAoIHRoaXMub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGhvb2soIHRoaXMub3JpZ2luYWxFdmVudCApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fSA6XG5cdFx0XHRcdGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdGlmICggdGhpcy5vcmlnaW5hbEV2ZW50ICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4gdGhpcy5vcmlnaW5hbEV2ZW50WyBuYW1lIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9LFxuXG5cdFx0XHRzZXQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdFx0T2JqZWN0LmRlZmluZVByb3BlcnR5KCB0aGlzLCBuYW1lLCB7XG5cdFx0XHRcdFx0ZW51bWVyYWJsZTogdHJ1ZSxcblx0XHRcdFx0XHRjb25maWd1cmFibGU6IHRydWUsXG5cdFx0XHRcdFx0d3JpdGFibGU6IHRydWUsXG5cdFx0XHRcdFx0dmFsdWU6IHZhbHVlXG5cdFx0XHRcdH0gKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cblx0Zml4OiBmdW5jdGlvbiggb3JpZ2luYWxFdmVudCApIHtcblx0XHRyZXR1cm4gb3JpZ2luYWxFdmVudFsgalF1ZXJ5LmV4cGFuZG8gXSA/XG5cdFx0XHRvcmlnaW5hbEV2ZW50IDpcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoIG9yaWdpbmFsRXZlbnQgKTtcblx0fSxcblxuXHRzcGVjaWFsOiB7XG5cdFx0bG9hZDoge1xuXG5cdFx0XHQvLyBQcmV2ZW50IHRyaWdnZXJlZCBpbWFnZS5sb2FkIGV2ZW50cyBmcm9tIGJ1YmJsaW5nIHRvIHdpbmRvdy5sb2FkXG5cdFx0XHRub0J1YmJsZTogdHJ1ZVxuXHRcdH0sXG5cdFx0Zm9jdXM6IHtcblxuXHRcdFx0Ly8gRmlyZSBuYXRpdmUgZXZlbnQgaWYgcG9zc2libGUgc28gYmx1ci9mb2N1cyBzZXF1ZW5jZSBpcyBjb3JyZWN0XG5cdFx0XHR0cmlnZ2VyOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCB0aGlzICE9PSBzYWZlQWN0aXZlRWxlbWVudCgpICYmIHRoaXMuZm9jdXMgKSB7XG5cdFx0XHRcdFx0dGhpcy5mb2N1cygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c2luXCJcblx0XHR9LFxuXHRcdGJsdXI6IHtcblx0XHRcdHRyaWdnZXI6IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRpZiAoIHRoaXMgPT09IHNhZmVBY3RpdmVFbGVtZW50KCkgJiYgdGhpcy5ibHVyICkge1xuXHRcdFx0XHRcdHRoaXMuYmx1cigpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblx0XHRcdGRlbGVnYXRlVHlwZTogXCJmb2N1c291dFwiXG5cdFx0fSxcblx0XHRjbGljazoge1xuXG5cdFx0XHQvLyBGb3IgY2hlY2tib3gsIGZpcmUgbmF0aXZlIGV2ZW50IHNvIGNoZWNrZWQgc3RhdGUgd2lsbCBiZSByaWdodFxuXHRcdFx0dHJpZ2dlcjogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggdGhpcy50eXBlID09PSBcImNoZWNrYm94XCIgJiYgdGhpcy5jbGljayAmJiBub2RlTmFtZSggdGhpcywgXCJpbnB1dFwiICkgKSB7XG5cdFx0XHRcdFx0dGhpcy5jbGljaygpO1xuXHRcdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdFx0fVxuXHRcdFx0fSxcblxuXHRcdFx0Ly8gRm9yIGNyb3NzLWJyb3dzZXIgY29uc2lzdGVuY3ksIGRvbid0IGZpcmUgbmF0aXZlIC5jbGljaygpIG9uIGxpbmtzXG5cdFx0XHRfZGVmYXVsdDogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0XHRyZXR1cm4gbm9kZU5hbWUoIGV2ZW50LnRhcmdldCwgXCJhXCIgKTtcblx0XHRcdH1cblx0XHR9LFxuXG5cdFx0YmVmb3JldW5sb2FkOiB7XG5cdFx0XHRwb3N0RGlzcGF0Y2g6IGZ1bmN0aW9uKCBldmVudCApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDIwK1xuXHRcdFx0XHQvLyBGaXJlZm94IGRvZXNuJ3QgYWxlcnQgaWYgdGhlIHJldHVyblZhbHVlIGZpZWxkIGlzIG5vdCBzZXQuXG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ICE9PSB1bmRlZmluZWQgJiYgZXZlbnQub3JpZ2luYWxFdmVudCApIHtcblx0XHRcdFx0XHRldmVudC5vcmlnaW5hbEV2ZW50LnJldHVyblZhbHVlID0gZXZlbnQucmVzdWx0O1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59O1xuXG5qUXVlcnkucmVtb3ZlRXZlbnQgPSBmdW5jdGlvbiggZWxlbSwgdHlwZSwgaGFuZGxlICkge1xuXG5cdC8vIFRoaXMgXCJpZlwiIGlzIG5lZWRlZCBmb3IgcGxhaW4gb2JqZWN0c1xuXHRpZiAoIGVsZW0ucmVtb3ZlRXZlbnRMaXN0ZW5lciApIHtcblx0XHRlbGVtLnJlbW92ZUV2ZW50TGlzdGVuZXIoIHR5cGUsIGhhbmRsZSApO1xuXHR9XG59O1xuXG5qUXVlcnkuRXZlbnQgPSBmdW5jdGlvbiggc3JjLCBwcm9wcyApIHtcblxuXHQvLyBBbGxvdyBpbnN0YW50aWF0aW9uIHdpdGhvdXQgdGhlICduZXcnIGtleXdvcmRcblx0aWYgKCAhKCB0aGlzIGluc3RhbmNlb2YgalF1ZXJ5LkV2ZW50ICkgKSB7XG5cdFx0cmV0dXJuIG5ldyBqUXVlcnkuRXZlbnQoIHNyYywgcHJvcHMgKTtcblx0fVxuXG5cdC8vIEV2ZW50IG9iamVjdFxuXHRpZiAoIHNyYyAmJiBzcmMudHlwZSApIHtcblx0XHR0aGlzLm9yaWdpbmFsRXZlbnQgPSBzcmM7XG5cdFx0dGhpcy50eXBlID0gc3JjLnR5cGU7XG5cblx0XHQvLyBFdmVudHMgYnViYmxpbmcgdXAgdGhlIGRvY3VtZW50IG1heSBoYXZlIGJlZW4gbWFya2VkIGFzIHByZXZlbnRlZFxuXHRcdC8vIGJ5IGEgaGFuZGxlciBsb3dlciBkb3duIHRoZSB0cmVlOyByZWZsZWN0IHRoZSBjb3JyZWN0IHZhbHVlLlxuXHRcdHRoaXMuaXNEZWZhdWx0UHJldmVudGVkID0gc3JjLmRlZmF1bHRQcmV2ZW50ZWQgfHxcblx0XHRcdFx0c3JjLmRlZmF1bHRQcmV2ZW50ZWQgPT09IHVuZGVmaW5lZCAmJlxuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD0yLjMgb25seVxuXHRcdFx0XHRzcmMucmV0dXJuVmFsdWUgPT09IGZhbHNlID9cblx0XHRcdHJldHVyblRydWUgOlxuXHRcdFx0cmV0dXJuRmFsc2U7XG5cblx0XHQvLyBDcmVhdGUgdGFyZ2V0IHByb3BlcnRpZXNcblx0XHQvLyBTdXBwb3J0OiBTYWZhcmkgPD02IC0gNyBvbmx5XG5cdFx0Ly8gVGFyZ2V0IHNob3VsZCBub3QgYmUgYSB0ZXh0IG5vZGUgKCM1MDQsICMxMzE0Mylcblx0XHR0aGlzLnRhcmdldCA9ICggc3JjLnRhcmdldCAmJiBzcmMudGFyZ2V0Lm5vZGVUeXBlID09PSAzICkgP1xuXHRcdFx0c3JjLnRhcmdldC5wYXJlbnROb2RlIDpcblx0XHRcdHNyYy50YXJnZXQ7XG5cblx0XHR0aGlzLmN1cnJlbnRUYXJnZXQgPSBzcmMuY3VycmVudFRhcmdldDtcblx0XHR0aGlzLnJlbGF0ZWRUYXJnZXQgPSBzcmMucmVsYXRlZFRhcmdldDtcblxuXHQvLyBFdmVudCB0eXBlXG5cdH0gZWxzZSB7XG5cdFx0dGhpcy50eXBlID0gc3JjO1xuXHR9XG5cblx0Ly8gUHV0IGV4cGxpY2l0bHkgcHJvdmlkZWQgcHJvcGVydGllcyBvbnRvIHRoZSBldmVudCBvYmplY3Rcblx0aWYgKCBwcm9wcyApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0aGlzLCBwcm9wcyApO1xuXHR9XG5cblx0Ly8gQ3JlYXRlIGEgdGltZXN0YW1wIGlmIGluY29taW5nIGV2ZW50IGRvZXNuJ3QgaGF2ZSBvbmVcblx0dGhpcy50aW1lU3RhbXAgPSBzcmMgJiYgc3JjLnRpbWVTdGFtcCB8fCBEYXRlLm5vdygpO1xuXG5cdC8vIE1hcmsgaXQgYXMgZml4ZWRcblx0dGhpc1sgalF1ZXJ5LmV4cGFuZG8gXSA9IHRydWU7XG59O1xuXG4vLyBqUXVlcnkuRXZlbnQgaXMgYmFzZWQgb24gRE9NMyBFdmVudHMgYXMgc3BlY2lmaWVkIGJ5IHRoZSBFQ01BU2NyaXB0IExhbmd1YWdlIEJpbmRpbmdcbi8vIGh0dHBzOi8vd3d3LnczLm9yZy9UUi8yMDAzL1dELURPTS1MZXZlbC0zLUV2ZW50cy0yMDAzMDMzMS9lY21hLXNjcmlwdC1iaW5kaW5nLmh0bWxcbmpRdWVyeS5FdmVudC5wcm90b3R5cGUgPSB7XG5cdGNvbnN0cnVjdG9yOiBqUXVlcnkuRXZlbnQsXG5cdGlzRGVmYXVsdFByZXZlbnRlZDogcmV0dXJuRmFsc2UsXG5cdGlzUHJvcGFnYXRpb25TdG9wcGVkOiByZXR1cm5GYWxzZSxcblx0aXNJbW1lZGlhdGVQcm9wYWdhdGlvblN0b3BwZWQ6IHJldHVybkZhbHNlLFxuXHRpc1NpbXVsYXRlZDogZmFsc2UsXG5cblx0cHJldmVudERlZmF1bHQ6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBlID0gdGhpcy5vcmlnaW5hbEV2ZW50O1xuXG5cdFx0dGhpcy5pc0RlZmF1bHRQcmV2ZW50ZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdH1cblx0fSxcblx0c3RvcFByb3BhZ2F0aW9uOiBmdW5jdGlvbigpIHtcblx0XHR2YXIgZSA9IHRoaXMub3JpZ2luYWxFdmVudDtcblxuXHRcdHRoaXMuaXNQcm9wYWdhdGlvblN0b3BwZWQgPSByZXR1cm5UcnVlO1xuXG5cdFx0aWYgKCBlICYmICF0aGlzLmlzU2ltdWxhdGVkICkge1xuXHRcdFx0ZS5zdG9wUHJvcGFnYXRpb24oKTtcblx0XHR9XG5cdH0sXG5cdHN0b3BJbW1lZGlhdGVQcm9wYWdhdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGUgPSB0aGlzLm9yaWdpbmFsRXZlbnQ7XG5cblx0XHR0aGlzLmlzSW1tZWRpYXRlUHJvcGFnYXRpb25TdG9wcGVkID0gcmV0dXJuVHJ1ZTtcblxuXHRcdGlmICggZSAmJiAhdGhpcy5pc1NpbXVsYXRlZCApIHtcblx0XHRcdGUuc3RvcEltbWVkaWF0ZVByb3BhZ2F0aW9uKCk7XG5cdFx0fVxuXG5cdFx0dGhpcy5zdG9wUHJvcGFnYXRpb24oKTtcblx0fVxufTtcblxuLy8gSW5jbHVkZXMgYWxsIGNvbW1vbiBldmVudCBwcm9wcyBpbmNsdWRpbmcgS2V5RXZlbnQgYW5kIE1vdXNlRXZlbnQgc3BlY2lmaWMgcHJvcHNcbmpRdWVyeS5lYWNoKCB7XG5cdGFsdEtleTogdHJ1ZSxcblx0YnViYmxlczogdHJ1ZSxcblx0Y2FuY2VsYWJsZTogdHJ1ZSxcblx0Y2hhbmdlZFRvdWNoZXM6IHRydWUsXG5cdGN0cmxLZXk6IHRydWUsXG5cdGRldGFpbDogdHJ1ZSxcblx0ZXZlbnRQaGFzZTogdHJ1ZSxcblx0bWV0YUtleTogdHJ1ZSxcblx0cGFnZVg6IHRydWUsXG5cdHBhZ2VZOiB0cnVlLFxuXHRzaGlmdEtleTogdHJ1ZSxcblx0dmlldzogdHJ1ZSxcblx0XCJjaGFyXCI6IHRydWUsXG5cdGNoYXJDb2RlOiB0cnVlLFxuXHRrZXk6IHRydWUsXG5cdGtleUNvZGU6IHRydWUsXG5cdGJ1dHRvbjogdHJ1ZSxcblx0YnV0dG9uczogdHJ1ZSxcblx0Y2xpZW50WDogdHJ1ZSxcblx0Y2xpZW50WTogdHJ1ZSxcblx0b2Zmc2V0WDogdHJ1ZSxcblx0b2Zmc2V0WTogdHJ1ZSxcblx0cG9pbnRlcklkOiB0cnVlLFxuXHRwb2ludGVyVHlwZTogdHJ1ZSxcblx0c2NyZWVuWDogdHJ1ZSxcblx0c2NyZWVuWTogdHJ1ZSxcblx0dGFyZ2V0VG91Y2hlczogdHJ1ZSxcblx0dG9FbGVtZW50OiB0cnVlLFxuXHR0b3VjaGVzOiB0cnVlLFxuXG5cdHdoaWNoOiBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0dmFyIGJ1dHRvbiA9IGV2ZW50LmJ1dHRvbjtcblxuXHRcdC8vIEFkZCB3aGljaCBmb3Iga2V5IGV2ZW50c1xuXHRcdGlmICggZXZlbnQud2hpY2ggPT0gbnVsbCAmJiBya2V5RXZlbnQudGVzdCggZXZlbnQudHlwZSApICkge1xuXHRcdFx0cmV0dXJuIGV2ZW50LmNoYXJDb2RlICE9IG51bGwgPyBldmVudC5jaGFyQ29kZSA6IGV2ZW50LmtleUNvZGU7XG5cdFx0fVxuXG5cdFx0Ly8gQWRkIHdoaWNoIGZvciBjbGljazogMSA9PT0gbGVmdDsgMiA9PT0gbWlkZGxlOyAzID09PSByaWdodFxuXHRcdGlmICggIWV2ZW50LndoaWNoICYmIGJ1dHRvbiAhPT0gdW5kZWZpbmVkICYmIHJtb3VzZUV2ZW50LnRlc3QoIGV2ZW50LnR5cGUgKSApIHtcblx0XHRcdGlmICggYnV0dG9uICYgMSApIHtcblx0XHRcdFx0cmV0dXJuIDE7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgMiApIHtcblx0XHRcdFx0cmV0dXJuIDM7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggYnV0dG9uICYgNCApIHtcblx0XHRcdFx0cmV0dXJuIDI7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAwO1xuXHRcdH1cblxuXHRcdHJldHVybiBldmVudC53aGljaDtcblx0fVxufSwgalF1ZXJ5LmV2ZW50LmFkZFByb3AgKTtcblxuLy8gQ3JlYXRlIG1vdXNlZW50ZXIvbGVhdmUgZXZlbnRzIHVzaW5nIG1vdXNlb3Zlci9vdXQgYW5kIGV2ZW50LXRpbWUgY2hlY2tzXG4vLyBzbyB0aGF0IGV2ZW50IGRlbGVnYXRpb24gd29ya3MgaW4galF1ZXJ5LlxuLy8gRG8gdGhlIHNhbWUgZm9yIHBvaW50ZXJlbnRlci9wb2ludGVybGVhdmUgYW5kIHBvaW50ZXJvdmVyL3BvaW50ZXJvdXRcbi8vXG4vLyBTdXBwb3J0OiBTYWZhcmkgNyBvbmx5XG4vLyBTYWZhcmkgc2VuZHMgbW91c2VlbnRlciB0b28gb2Z0ZW47IHNlZTpcbi8vIGh0dHBzOi8vYnVncy5jaHJvbWl1bS5vcmcvcC9jaHJvbWl1bS9pc3N1ZXMvZGV0YWlsP2lkPTQ3MDI1OFxuLy8gZm9yIHRoZSBkZXNjcmlwdGlvbiBvZiB0aGUgYnVnIChpdCBleGlzdGVkIGluIG9sZGVyIENocm9tZSB2ZXJzaW9ucyBhcyB3ZWxsKS5cbmpRdWVyeS5lYWNoKCB7XG5cdG1vdXNlZW50ZXI6IFwibW91c2VvdmVyXCIsXG5cdG1vdXNlbGVhdmU6IFwibW91c2VvdXRcIixcblx0cG9pbnRlcmVudGVyOiBcInBvaW50ZXJvdmVyXCIsXG5cdHBvaW50ZXJsZWF2ZTogXCJwb2ludGVyb3V0XCJcbn0sIGZ1bmN0aW9uKCBvcmlnLCBmaXggKSB7XG5cdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBvcmlnIF0gPSB7XG5cdFx0ZGVsZWdhdGVUeXBlOiBmaXgsXG5cdFx0YmluZFR5cGU6IGZpeCxcblxuXHRcdGhhbmRsZTogZnVuY3Rpb24oIGV2ZW50ICkge1xuXHRcdFx0dmFyIHJldCxcblx0XHRcdFx0dGFyZ2V0ID0gdGhpcyxcblx0XHRcdFx0cmVsYXRlZCA9IGV2ZW50LnJlbGF0ZWRUYXJnZXQsXG5cdFx0XHRcdGhhbmRsZU9iaiA9IGV2ZW50LmhhbmRsZU9iajtcblxuXHRcdFx0Ly8gRm9yIG1vdXNlZW50ZXIvbGVhdmUgY2FsbCB0aGUgaGFuZGxlciBpZiByZWxhdGVkIGlzIG91dHNpZGUgdGhlIHRhcmdldC5cblx0XHRcdC8vIE5COiBObyByZWxhdGVkVGFyZ2V0IGlmIHRoZSBtb3VzZSBsZWZ0L2VudGVyZWQgdGhlIGJyb3dzZXIgd2luZG93XG5cdFx0XHRpZiAoICFyZWxhdGVkIHx8ICggcmVsYXRlZCAhPT0gdGFyZ2V0ICYmICFqUXVlcnkuY29udGFpbnMoIHRhcmdldCwgcmVsYXRlZCApICkgKSB7XG5cdFx0XHRcdGV2ZW50LnR5cGUgPSBoYW5kbGVPYmoub3JpZ1R5cGU7XG5cdFx0XHRcdHJldCA9IGhhbmRsZU9iai5oYW5kbGVyLmFwcGx5KCB0aGlzLCBhcmd1bWVudHMgKTtcblx0XHRcdFx0ZXZlbnQudHlwZSA9IGZpeDtcblx0XHRcdH1cblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cblx0b246IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiApO1xuXHR9LFxuXHRvbmU6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiBvbiggdGhpcywgdHlwZXMsIHNlbGVjdG9yLCBkYXRhLCBmbiwgMSApO1xuXHR9LFxuXHRvZmY6IGZ1bmN0aW9uKCB0eXBlcywgc2VsZWN0b3IsIGZuICkge1xuXHRcdHZhciBoYW5kbGVPYmosIHR5cGU7XG5cdFx0aWYgKCB0eXBlcyAmJiB0eXBlcy5wcmV2ZW50RGVmYXVsdCAmJiB0eXBlcy5oYW5kbGVPYmogKSB7XG5cblx0XHRcdC8vICggZXZlbnQgKSAgZGlzcGF0Y2hlZCBqUXVlcnkuRXZlbnRcblx0XHRcdGhhbmRsZU9iaiA9IHR5cGVzLmhhbmRsZU9iajtcblx0XHRcdGpRdWVyeSggdHlwZXMuZGVsZWdhdGVUYXJnZXQgKS5vZmYoXG5cdFx0XHRcdGhhbmRsZU9iai5uYW1lc3BhY2UgP1xuXHRcdFx0XHRcdGhhbmRsZU9iai5vcmlnVHlwZSArIFwiLlwiICsgaGFuZGxlT2JqLm5hbWVzcGFjZSA6XG5cdFx0XHRcdFx0aGFuZGxlT2JqLm9yaWdUeXBlLFxuXHRcdFx0XHRoYW5kbGVPYmouc2VsZWN0b3IsXG5cdFx0XHRcdGhhbmRsZU9iai5oYW5kbGVyXG5cdFx0XHQpO1xuXHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0fVxuXHRcdGlmICggdHlwZW9mIHR5cGVzID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0XHQvLyAoIHR5cGVzLW9iamVjdCBbLCBzZWxlY3Rvcl0gKVxuXHRcdFx0Zm9yICggdHlwZSBpbiB0eXBlcyApIHtcblx0XHRcdFx0dGhpcy5vZmYoIHR5cGUsIHNlbGVjdG9yLCB0eXBlc1sgdHlwZSBdICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gdGhpcztcblx0XHR9XG5cdFx0aWYgKCBzZWxlY3RvciA9PT0gZmFsc2UgfHwgdHlwZW9mIHNlbGVjdG9yID09PSBcImZ1bmN0aW9uXCIgKSB7XG5cblx0XHRcdC8vICggdHlwZXMgWywgZm5dIClcblx0XHRcdGZuID0gc2VsZWN0b3I7XG5cdFx0XHRzZWxlY3RvciA9IHVuZGVmaW5lZDtcblx0XHR9XG5cdFx0aWYgKCBmbiA9PT0gZmFsc2UgKSB7XG5cdFx0XHRmbiA9IHJldHVybkZhbHNlO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGpRdWVyeS5ldmVudC5yZW1vdmUoIHRoaXMsIHR5cGVzLCBmbiwgc2VsZWN0b3IgKTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxuXG52YXJcblxuXHQvKiBlc2xpbnQtZGlzYWJsZSBtYXgtbGVuICovXG5cblx0Ly8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9lc2xpbnQvZXNsaW50L2lzc3Vlcy8zMjI5XG5cdHJ4aHRtbFRhZyA9IC88KD8hYXJlYXxicnxjb2x8ZW1iZWR8aHJ8aW1nfGlucHV0fGxpbmt8bWV0YXxwYXJhbSkoKFthLXpdW15cXC9cXDA+XFx4MjBcXHRcXHJcXG5cXGZdKilbXj5dKilcXC8+L2dpLFxuXG5cdC8qIGVzbGludC1lbmFibGUgKi9cblxuXHQvLyBTdXBwb3J0OiBJRSA8PTEwIC0gMTEsIEVkZ2UgMTIgLSAxMyBvbmx5XG5cdC8vIEluIElFL0VkZ2UgdXNpbmcgcmVnZXggZ3JvdXBzIGhlcmUgY2F1c2VzIHNldmVyZSBzbG93ZG93bnMuXG5cdC8vIFNlZSBodHRwczovL2Nvbm5lY3QubWljcm9zb2Z0LmNvbS9JRS9mZWVkYmFjay9kZXRhaWxzLzE3MzY1MTIvXG5cdHJub0lubmVyaHRtbCA9IC88c2NyaXB0fDxzdHlsZXw8bGluay9pLFxuXG5cdC8vIGNoZWNrZWQ9XCJjaGVja2VkXCIgb3IgY2hlY2tlZFxuXHRyY2hlY2tlZCA9IC9jaGVja2VkXFxzKig/OltePV18PVxccyouY2hlY2tlZC4pL2ksXG5cdHJjbGVhblNjcmlwdCA9IC9eXFxzKjwhKD86XFxbQ0RBVEFcXFt8LS0pfCg/OlxcXVxcXXwtLSk+XFxzKiQvZztcblxuLy8gUHJlZmVyIGEgdGJvZHkgb3ZlciBpdHMgcGFyZW50IHRhYmxlIGZvciBjb250YWluaW5nIG5ldyByb3dzXG5mdW5jdGlvbiBtYW5pcHVsYXRpb25UYXJnZXQoIGVsZW0sIGNvbnRlbnQgKSB7XG5cdGlmICggbm9kZU5hbWUoIGVsZW0sIFwidGFibGVcIiApICYmXG5cdFx0bm9kZU5hbWUoIGNvbnRlbnQubm9kZVR5cGUgIT09IDExID8gY29udGVudCA6IGNvbnRlbnQuZmlyc3RDaGlsZCwgXCJ0clwiICkgKSB7XG5cblx0XHRyZXR1cm4galF1ZXJ5KCBlbGVtICkuY2hpbGRyZW4oIFwidGJvZHlcIiApWyAwIF0gfHwgZWxlbTtcblx0fVxuXG5cdHJldHVybiBlbGVtO1xufVxuXG4vLyBSZXBsYWNlL3Jlc3RvcmUgdGhlIHR5cGUgYXR0cmlidXRlIG9mIHNjcmlwdCBlbGVtZW50cyBmb3Igc2FmZSBET00gbWFuaXB1bGF0aW9uXG5mdW5jdGlvbiBkaXNhYmxlU2NyaXB0KCBlbGVtICkge1xuXHRlbGVtLnR5cGUgPSAoIGVsZW0uZ2V0QXR0cmlidXRlKCBcInR5cGVcIiApICE9PSBudWxsICkgKyBcIi9cIiArIGVsZW0udHlwZTtcblx0cmV0dXJuIGVsZW07XG59XG5mdW5jdGlvbiByZXN0b3JlU2NyaXB0KCBlbGVtICkge1xuXHRpZiAoICggZWxlbS50eXBlIHx8IFwiXCIgKS5zbGljZSggMCwgNSApID09PSBcInRydWUvXCIgKSB7XG5cdFx0ZWxlbS50eXBlID0gZWxlbS50eXBlLnNsaWNlKCA1ICk7XG5cdH0gZWxzZSB7XG5cdFx0ZWxlbS5yZW1vdmVBdHRyaWJ1dGUoIFwidHlwZVwiICk7XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxuZnVuY3Rpb24gY2xvbmVDb3B5RXZlbnQoIHNyYywgZGVzdCApIHtcblx0dmFyIGksIGwsIHR5cGUsIHBkYXRhT2xkLCBwZGF0YUN1ciwgdWRhdGFPbGQsIHVkYXRhQ3VyLCBldmVudHM7XG5cblx0aWYgKCBkZXN0Lm5vZGVUeXBlICE9PSAxICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIDEuIENvcHkgcHJpdmF0ZSBkYXRhOiBldmVudHMsIGhhbmRsZXJzLCBldGMuXG5cdGlmICggZGF0YVByaXYuaGFzRGF0YSggc3JjICkgKSB7XG5cdFx0cGRhdGFPbGQgPSBkYXRhUHJpdi5hY2Nlc3MoIHNyYyApO1xuXHRcdHBkYXRhQ3VyID0gZGF0YVByaXYuc2V0KCBkZXN0LCBwZGF0YU9sZCApO1xuXHRcdGV2ZW50cyA9IHBkYXRhT2xkLmV2ZW50cztcblxuXHRcdGlmICggZXZlbnRzICkge1xuXHRcdFx0ZGVsZXRlIHBkYXRhQ3VyLmhhbmRsZTtcblx0XHRcdHBkYXRhQ3VyLmV2ZW50cyA9IHt9O1xuXG5cdFx0XHRmb3IgKCB0eXBlIGluIGV2ZW50cyApIHtcblx0XHRcdFx0Zm9yICggaSA9IDAsIGwgPSBldmVudHNbIHR5cGUgXS5sZW5ndGg7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LmFkZCggZGVzdCwgdHlwZSwgZXZlbnRzWyB0eXBlIF1bIGkgXSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gMi4gQ29weSB1c2VyIGRhdGFcblx0aWYgKCBkYXRhVXNlci5oYXNEYXRhKCBzcmMgKSApIHtcblx0XHR1ZGF0YU9sZCA9IGRhdGFVc2VyLmFjY2Vzcyggc3JjICk7XG5cdFx0dWRhdGFDdXIgPSBqUXVlcnkuZXh0ZW5kKCB7fSwgdWRhdGFPbGQgKTtcblxuXHRcdGRhdGFVc2VyLnNldCggZGVzdCwgdWRhdGFDdXIgKTtcblx0fVxufVxuXG4vLyBGaXggSUUgYnVncywgc2VlIHN1cHBvcnQgdGVzdHNcbmZ1bmN0aW9uIGZpeElucHV0KCBzcmMsIGRlc3QgKSB7XG5cdHZhciBub2RlTmFtZSA9IGRlc3Qubm9kZU5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHQvLyBGYWlscyB0byBwZXJzaXN0IHRoZSBjaGVja2VkIHN0YXRlIG9mIGEgY2xvbmVkIGNoZWNrYm94IG9yIHJhZGlvIGJ1dHRvbi5cblx0aWYgKCBub2RlTmFtZSA9PT0gXCJpbnB1dFwiICYmIHJjaGVja2FibGVUeXBlLnRlc3QoIHNyYy50eXBlICkgKSB7XG5cdFx0ZGVzdC5jaGVja2VkID0gc3JjLmNoZWNrZWQ7XG5cblx0Ly8gRmFpbHMgdG8gcmV0dXJuIHRoZSBzZWxlY3RlZCBvcHRpb24gdG8gdGhlIGRlZmF1bHQgc2VsZWN0ZWQgc3RhdGUgd2hlbiBjbG9uaW5nIG9wdGlvbnNcblx0fSBlbHNlIGlmICggbm9kZU5hbWUgPT09IFwiaW5wdXRcIiB8fCBub2RlTmFtZSA9PT0gXCJ0ZXh0YXJlYVwiICkge1xuXHRcdGRlc3QuZGVmYXVsdFZhbHVlID0gc3JjLmRlZmF1bHRWYWx1ZTtcblx0fVxufVxuXG5mdW5jdGlvbiBkb21NYW5pcCggY29sbGVjdGlvbiwgYXJncywgY2FsbGJhY2ssIGlnbm9yZWQgKSB7XG5cblx0Ly8gRmxhdHRlbiBhbnkgbmVzdGVkIGFycmF5c1xuXHRhcmdzID0gY29uY2F0LmFwcGx5KCBbXSwgYXJncyApO1xuXG5cdHZhciBmcmFnbWVudCwgZmlyc3QsIHNjcmlwdHMsIGhhc1NjcmlwdHMsIG5vZGUsIGRvYyxcblx0XHRpID0gMCxcblx0XHRsID0gY29sbGVjdGlvbi5sZW5ndGgsXG5cdFx0aU5vQ2xvbmUgPSBsIC0gMSxcblx0XHR2YWx1ZSA9IGFyZ3NbIDAgXSxcblx0XHR2YWx1ZUlzRnVuY3Rpb24gPSBpc0Z1bmN0aW9uKCB2YWx1ZSApO1xuXG5cdC8vIFdlIGNhbid0IGNsb25lTm9kZSBmcmFnbWVudHMgdGhhdCBjb250YWluIGNoZWNrZWQsIGluIFdlYktpdFxuXHRpZiAoIHZhbHVlSXNGdW5jdGlvbiB8fFxuXHRcdFx0KCBsID4gMSAmJiB0eXBlb2YgdmFsdWUgPT09IFwic3RyaW5nXCIgJiZcblx0XHRcdFx0IXN1cHBvcnQuY2hlY2tDbG9uZSAmJiByY2hlY2tlZC50ZXN0KCB2YWx1ZSApICkgKSB7XG5cdFx0cmV0dXJuIGNvbGxlY3Rpb24uZWFjaCggZnVuY3Rpb24oIGluZGV4ICkge1xuXHRcdFx0dmFyIHNlbGYgPSBjb2xsZWN0aW9uLmVxKCBpbmRleCApO1xuXHRcdFx0aWYgKCB2YWx1ZUlzRnVuY3Rpb24gKSB7XG5cdFx0XHRcdGFyZ3NbIDAgXSA9IHZhbHVlLmNhbGwoIHRoaXMsIGluZGV4LCBzZWxmLmh0bWwoKSApO1xuXHRcdFx0fVxuXHRcdFx0ZG9tTWFuaXAoIHNlbGYsIGFyZ3MsIGNhbGxiYWNrLCBpZ25vcmVkICk7XG5cdFx0fSApO1xuXHR9XG5cblx0aWYgKCBsICkge1xuXHRcdGZyYWdtZW50ID0gYnVpbGRGcmFnbWVudCggYXJncywgY29sbGVjdGlvblsgMCBdLm93bmVyRG9jdW1lbnQsIGZhbHNlLCBjb2xsZWN0aW9uLCBpZ25vcmVkICk7XG5cdFx0Zmlyc3QgPSBmcmFnbWVudC5maXJzdENoaWxkO1xuXG5cdFx0aWYgKCBmcmFnbWVudC5jaGlsZE5vZGVzLmxlbmd0aCA9PT0gMSApIHtcblx0XHRcdGZyYWdtZW50ID0gZmlyc3Q7XG5cdFx0fVxuXG5cdFx0Ly8gUmVxdWlyZSBlaXRoZXIgbmV3IGNvbnRlbnQgb3IgYW4gaW50ZXJlc3QgaW4gaWdub3JlZCBlbGVtZW50cyB0byBpbnZva2UgdGhlIGNhbGxiYWNrXG5cdFx0aWYgKCBmaXJzdCB8fCBpZ25vcmVkICkge1xuXHRcdFx0c2NyaXB0cyA9IGpRdWVyeS5tYXAoIGdldEFsbCggZnJhZ21lbnQsIFwic2NyaXB0XCIgKSwgZGlzYWJsZVNjcmlwdCApO1xuXHRcdFx0aGFzU2NyaXB0cyA9IHNjcmlwdHMubGVuZ3RoO1xuXG5cdFx0XHQvLyBVc2UgdGhlIG9yaWdpbmFsIGZyYWdtZW50IGZvciB0aGUgbGFzdCBpdGVtXG5cdFx0XHQvLyBpbnN0ZWFkIG9mIHRoZSBmaXJzdCBiZWNhdXNlIGl0IGNhbiBlbmQgdXBcblx0XHRcdC8vIGJlaW5nIGVtcHRpZWQgaW5jb3JyZWN0bHkgaW4gY2VydGFpbiBzaXR1YXRpb25zICgjODA3MCkuXG5cdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdG5vZGUgPSBmcmFnbWVudDtcblxuXHRcdFx0XHRpZiAoIGkgIT09IGlOb0Nsb25lICkge1xuXHRcdFx0XHRcdG5vZGUgPSBqUXVlcnkuY2xvbmUoIG5vZGUsIHRydWUsIHRydWUgKTtcblxuXHRcdFx0XHRcdC8vIEtlZXAgcmVmZXJlbmNlcyB0byBjbG9uZWQgc2NyaXB0cyBmb3IgbGF0ZXIgcmVzdG9yYXRpb25cblx0XHRcdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjAgb25seSwgUGhhbnRvbUpTIDEgb25seVxuXHRcdFx0XHRcdFx0Ly8gcHVzaC5hcHBseShfLCBhcnJheWxpa2UpIHRocm93cyBvbiBhbmNpZW50IFdlYktpdFxuXHRcdFx0XHRcdFx0alF1ZXJ5Lm1lcmdlKCBzY3JpcHRzLCBnZXRBbGwoIG5vZGUsIFwic2NyaXB0XCIgKSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXG5cdFx0XHRcdGNhbGxiYWNrLmNhbGwoIGNvbGxlY3Rpb25bIGkgXSwgbm9kZSwgaSApO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhhc1NjcmlwdHMgKSB7XG5cdFx0XHRcdGRvYyA9IHNjcmlwdHNbIHNjcmlwdHMubGVuZ3RoIC0gMSBdLm93bmVyRG9jdW1lbnQ7XG5cblx0XHRcdFx0Ly8gUmVlbmFibGUgc2NyaXB0c1xuXHRcdFx0XHRqUXVlcnkubWFwKCBzY3JpcHRzLCByZXN0b3JlU2NyaXB0ICk7XG5cblx0XHRcdFx0Ly8gRXZhbHVhdGUgZXhlY3V0YWJsZSBzY3JpcHRzIG9uIGZpcnN0IGRvY3VtZW50IGluc2VydGlvblxuXHRcdFx0XHRmb3IgKCBpID0gMDsgaSA8IGhhc1NjcmlwdHM7IGkrKyApIHtcblx0XHRcdFx0XHRub2RlID0gc2NyaXB0c1sgaSBdO1xuXHRcdFx0XHRcdGlmICggcnNjcmlwdFR5cGUudGVzdCggbm9kZS50eXBlIHx8IFwiXCIgKSAmJlxuXHRcdFx0XHRcdFx0IWRhdGFQcml2LmFjY2Vzcyggbm9kZSwgXCJnbG9iYWxFdmFsXCIgKSAmJlxuXHRcdFx0XHRcdFx0alF1ZXJ5LmNvbnRhaW5zKCBkb2MsIG5vZGUgKSApIHtcblxuXHRcdFx0XHRcdFx0aWYgKCBub2RlLnNyYyAmJiAoIG5vZGUudHlwZSB8fCBcIlwiICkudG9Mb3dlckNhc2UoKSAgIT09IFwibW9kdWxlXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gT3B0aW9uYWwgQUpBWCBkZXBlbmRlbmN5LCBidXQgd29uJ3QgcnVuIHNjcmlwdHMgaWYgbm90IHByZXNlbnRcblx0XHRcdFx0XHRcdFx0aWYgKCBqUXVlcnkuX2V2YWxVcmwgKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5Ll9ldmFsVXJsKCBub2RlLnNyYyApO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0XHRET01FdmFsKCBub2RlLnRleHRDb250ZW50LnJlcGxhY2UoIHJjbGVhblNjcmlwdCwgXCJcIiApLCBkb2MsIG5vZGUgKTtcblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gY29sbGVjdGlvbjtcbn1cblxuZnVuY3Rpb24gcmVtb3ZlKCBlbGVtLCBzZWxlY3Rvciwga2VlcERhdGEgKSB7XG5cdHZhciBub2RlLFxuXHRcdG5vZGVzID0gc2VsZWN0b3IgPyBqUXVlcnkuZmlsdGVyKCBzZWxlY3RvciwgZWxlbSApIDogZWxlbSxcblx0XHRpID0gMDtcblxuXHRmb3IgKCA7ICggbm9kZSA9IG5vZGVzWyBpIF0gKSAhPSBudWxsOyBpKysgKSB7XG5cdFx0aWYgKCAha2VlcERhdGEgJiYgbm9kZS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggbm9kZSApICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBub2RlLnBhcmVudE5vZGUgKSB7XG5cdFx0XHRpZiAoIGtlZXBEYXRhICYmIGpRdWVyeS5jb250YWlucyggbm9kZS5vd25lckRvY3VtZW50LCBub2RlICkgKSB7XG5cdFx0XHRcdHNldEdsb2JhbEV2YWwoIGdldEFsbCggbm9kZSwgXCJzY3JpcHRcIiApICk7XG5cdFx0XHR9XG5cdFx0XHRub2RlLnBhcmVudE5vZGUucmVtb3ZlQ2hpbGQoIG5vZGUgKTtcblx0XHR9XG5cdH1cblxuXHRyZXR1cm4gZWxlbTtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXHRodG1sUHJlZmlsdGVyOiBmdW5jdGlvbiggaHRtbCApIHtcblx0XHRyZXR1cm4gaHRtbC5yZXBsYWNlKCByeGh0bWxUYWcsIFwiPCQxPjwvJDI+XCIgKTtcblx0fSxcblxuXHRjbG9uZTogZnVuY3Rpb24oIGVsZW0sIGRhdGFBbmRFdmVudHMsIGRlZXBEYXRhQW5kRXZlbnRzICkge1xuXHRcdHZhciBpLCBsLCBzcmNFbGVtZW50cywgZGVzdEVsZW1lbnRzLFxuXHRcdFx0Y2xvbmUgPSBlbGVtLmNsb25lTm9kZSggdHJ1ZSApLFxuXHRcdFx0aW5QYWdlID0galF1ZXJ5LmNvbnRhaW5zKCBlbGVtLm93bmVyRG9jdW1lbnQsIGVsZW0gKTtcblxuXHRcdC8vIEZpeCBJRSBjbG9uaW5nIGlzc3Vlc1xuXHRcdGlmICggIXN1cHBvcnQubm9DbG9uZUNoZWNrZWQgJiYgKCBlbGVtLm5vZGVUeXBlID09PSAxIHx8IGVsZW0ubm9kZVR5cGUgPT09IDExICkgJiZcblx0XHRcdFx0IWpRdWVyeS5pc1hNTERvYyggZWxlbSApICkge1xuXG5cdFx0XHQvLyBXZSBlc2NoZXcgU2l6emxlIGhlcmUgZm9yIHBlcmZvcm1hbmNlIHJlYXNvbnM6IGh0dHBzOi8vanNwZXJmLmNvbS9nZXRhbGwtdnMtc2l6emxlLzJcblx0XHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUgKTtcblx0XHRcdHNyY0VsZW1lbnRzID0gZ2V0QWxsKCBlbGVtICk7XG5cblx0XHRcdGZvciAoIGkgPSAwLCBsID0gc3JjRWxlbWVudHMubGVuZ3RoOyBpIDwgbDsgaSsrICkge1xuXHRcdFx0XHRmaXhJbnB1dCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBDb3B5IHRoZSBldmVudHMgZnJvbSB0aGUgb3JpZ2luYWwgdG8gdGhlIGNsb25lXG5cdFx0aWYgKCBkYXRhQW5kRXZlbnRzICkge1xuXHRcdFx0aWYgKCBkZWVwRGF0YUFuZEV2ZW50cyApIHtcblx0XHRcdFx0c3JjRWxlbWVudHMgPSBzcmNFbGVtZW50cyB8fCBnZXRBbGwoIGVsZW0gKTtcblx0XHRcdFx0ZGVzdEVsZW1lbnRzID0gZGVzdEVsZW1lbnRzIHx8IGdldEFsbCggY2xvbmUgKTtcblxuXHRcdFx0XHRmb3IgKCBpID0gMCwgbCA9IHNyY0VsZW1lbnRzLmxlbmd0aDsgaSA8IGw7IGkrKyApIHtcblx0XHRcdFx0XHRjbG9uZUNvcHlFdmVudCggc3JjRWxlbWVudHNbIGkgXSwgZGVzdEVsZW1lbnRzWyBpIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Y2xvbmVDb3B5RXZlbnQoIGVsZW0sIGNsb25lICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gUHJlc2VydmUgc2NyaXB0IGV2YWx1YXRpb24gaGlzdG9yeVxuXHRcdGRlc3RFbGVtZW50cyA9IGdldEFsbCggY2xvbmUsIFwic2NyaXB0XCIgKTtcblx0XHRpZiAoIGRlc3RFbGVtZW50cy5sZW5ndGggPiAwICkge1xuXHRcdFx0c2V0R2xvYmFsRXZhbCggZGVzdEVsZW1lbnRzLCAhaW5QYWdlICYmIGdldEFsbCggZWxlbSwgXCJzY3JpcHRcIiApICk7XG5cdFx0fVxuXG5cdFx0Ly8gUmV0dXJuIHRoZSBjbG9uZWQgc2V0XG5cdFx0cmV0dXJuIGNsb25lO1xuXHR9LFxuXG5cdGNsZWFuRGF0YTogZnVuY3Rpb24oIGVsZW1zICkge1xuXHRcdHZhciBkYXRhLCBlbGVtLCB0eXBlLFxuXHRcdFx0c3BlY2lhbCA9IGpRdWVyeS5ldmVudC5zcGVjaWFsLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7ICggZWxlbSA9IGVsZW1zWyBpIF0gKSAhPT0gdW5kZWZpbmVkOyBpKysgKSB7XG5cdFx0XHRpZiAoIGFjY2VwdERhdGEoIGVsZW0gKSApIHtcblx0XHRcdFx0aWYgKCAoIGRhdGEgPSBlbGVtWyBkYXRhUHJpdi5leHBhbmRvIF0gKSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGEuZXZlbnRzICkge1xuXHRcdFx0XHRcdFx0Zm9yICggdHlwZSBpbiBkYXRhLmV2ZW50cyApIHtcblx0XHRcdFx0XHRcdFx0aWYgKCBzcGVjaWFsWyB0eXBlIF0gKSB7XG5cdFx0XHRcdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnJlbW92ZSggZWxlbSwgdHlwZSApO1xuXG5cdFx0XHRcdFx0XHRcdC8vIFRoaXMgaXMgYSBzaG9ydGN1dCB0byBhdm9pZCBqUXVlcnkuZXZlbnQucmVtb3ZlJ3Mgb3ZlcmhlYWRcblx0XHRcdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdFx0XHRqUXVlcnkucmVtb3ZlRXZlbnQoIGVsZW0sIHR5cGUsIGRhdGEuaGFuZGxlICk7XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBDaHJvbWUgPD0zNSAtIDQ1K1xuXHRcdFx0XHRcdC8vIEFzc2lnbiB1bmRlZmluZWQgaW5zdGVhZCBvZiB1c2luZyBkZWxldGUsIHNlZSBEYXRhI3JlbW92ZVxuXHRcdFx0XHRcdGVsZW1bIGRhdGFQcml2LmV4cGFuZG8gXSA9IHVuZGVmaW5lZDtcblx0XHRcdFx0fVxuXHRcdFx0XHRpZiAoIGVsZW1bIGRhdGFVc2VyLmV4cGFuZG8gXSApIHtcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IENocm9tZSA8PTM1IC0gNDUrXG5cdFx0XHRcdFx0Ly8gQXNzaWduIHVuZGVmaW5lZCBpbnN0ZWFkIG9mIHVzaW5nIGRlbGV0ZSwgc2VlIERhdGEjcmVtb3ZlXG5cdFx0XHRcdFx0ZWxlbVsgZGF0YVVzZXIuZXhwYW5kbyBdID0gdW5kZWZpbmVkO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZGV0YWNoOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0cmV0dXJuIHJlbW92ZSggdGhpcywgc2VsZWN0b3IsIHRydWUgKTtcblx0fSxcblxuXHRyZW1vdmU6IGZ1bmN0aW9uKCBzZWxlY3RvciApIHtcblx0XHRyZXR1cm4gcmVtb3ZlKCB0aGlzLCBzZWxlY3RvciApO1xuXHR9LFxuXG5cdHRleHQ6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cdFx0XHRcdGpRdWVyeS50ZXh0KCB0aGlzICkgOlxuXHRcdFx0XHR0aGlzLmVtcHR5KCkuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlID09PSAxIHx8IHRoaXMubm9kZVR5cGUgPT09IDExIHx8IHRoaXMubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0XHR0aGlzLnRleHRDb250ZW50ID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9ICk7XG5cdFx0fSwgbnVsbCwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggKTtcblx0fSxcblxuXHRhcHBlbmQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5ub2RlVHlwZSA9PT0gMSB8fCB0aGlzLm5vZGVUeXBlID09PSAxMSB8fCB0aGlzLm5vZGVUeXBlID09PSA5ICkge1xuXHRcdFx0XHR2YXIgdGFyZ2V0ID0gbWFuaXB1bGF0aW9uVGFyZ2V0KCB0aGlzLCBlbGVtICk7XG5cdFx0XHRcdHRhcmdldC5hcHBlbmRDaGlsZCggZWxlbSApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRwcmVwZW5kOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMubm9kZVR5cGUgPT09IDEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gMTEgfHwgdGhpcy5ub2RlVHlwZSA9PT0gOSApIHtcblx0XHRcdFx0dmFyIHRhcmdldCA9IG1hbmlwdWxhdGlvblRhcmdldCggdGhpcywgZWxlbSApO1xuXHRcdFx0XHR0YXJnZXQuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0YXJnZXQuZmlyc3RDaGlsZCApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRiZWZvcmU6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiBkb21NYW5pcCggdGhpcywgYXJndW1lbnRzLCBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdGlmICggdGhpcy5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR0aGlzLnBhcmVudE5vZGUuaW5zZXJ0QmVmb3JlKCBlbGVtLCB0aGlzICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdGFmdGVyOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHRpZiAoIHRoaXMucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0dGhpcy5wYXJlbnROb2RlLmluc2VydEJlZm9yZSggZWxlbSwgdGhpcy5uZXh0U2libGluZyApO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRlbXB0eTogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGZvciAoIDsgKCBlbGVtID0gdGhpc1sgaSBdICkgIT0gbnVsbDsgaSsrICkge1xuXHRcdFx0aWYgKCBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0XHRcdC8vIFByZXZlbnQgbWVtb3J5IGxlYWtzXG5cdFx0XHRcdGpRdWVyeS5jbGVhbkRhdGEoIGdldEFsbCggZWxlbSwgZmFsc2UgKSApO1xuXG5cdFx0XHRcdC8vIFJlbW92ZSBhbnkgcmVtYWluaW5nIG5vZGVzXG5cdFx0XHRcdGVsZW0udGV4dENvbnRlbnQgPSBcIlwiO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdGNsb25lOiBmdW5jdGlvbiggZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKSB7XG5cdFx0ZGF0YUFuZEV2ZW50cyA9IGRhdGFBbmRFdmVudHMgPT0gbnVsbCA/IGZhbHNlIDogZGF0YUFuZEV2ZW50cztcblx0XHRkZWVwRGF0YUFuZEV2ZW50cyA9IGRlZXBEYXRhQW5kRXZlbnRzID09IG51bGwgPyBkYXRhQW5kRXZlbnRzIDogZGVlcERhdGFBbmRFdmVudHM7XG5cblx0XHRyZXR1cm4gdGhpcy5tYXAoIGZ1bmN0aW9uKCkge1xuXHRcdFx0cmV0dXJuIGpRdWVyeS5jbG9uZSggdGhpcywgZGF0YUFuZEV2ZW50cywgZGVlcERhdGFBbmRFdmVudHMgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0aHRtbDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHRcdHZhciBlbGVtID0gdGhpc1sgMCBdIHx8IHt9LFxuXHRcdFx0XHRpID0gMCxcblx0XHRcdFx0bCA9IHRoaXMubGVuZ3RoO1xuXG5cdFx0XHRpZiAoIHZhbHVlID09PSB1bmRlZmluZWQgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0cmV0dXJuIGVsZW0uaW5uZXJIVE1MO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTZWUgaWYgd2UgY2FuIHRha2UgYSBzaG9ydGN1dCBhbmQganVzdCB1c2UgaW5uZXJIVE1MXG5cdFx0XHRpZiAoIHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiAmJiAhcm5vSW5uZXJodG1sLnRlc3QoIHZhbHVlICkgJiZcblx0XHRcdFx0IXdyYXBNYXBbICggcnRhZ05hbWUuZXhlYyggdmFsdWUgKSB8fCBbIFwiXCIsIFwiXCIgXSApWyAxIF0udG9Mb3dlckNhc2UoKSBdICkge1xuXG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5Lmh0bWxQcmVmaWx0ZXIoIHZhbHVlICk7XG5cblx0XHRcdFx0dHJ5IHtcblx0XHRcdFx0XHRmb3IgKCA7IGkgPCBsOyBpKysgKSB7XG5cdFx0XHRcdFx0XHRlbGVtID0gdGhpc1sgaSBdIHx8IHt9O1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgZWxlbWVudCBub2RlcyBhbmQgcHJldmVudCBtZW1vcnkgbGVha3Ncblx0XHRcdFx0XHRcdGlmICggZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdFx0XHRcdFx0alF1ZXJ5LmNsZWFuRGF0YSggZ2V0QWxsKCBlbGVtLCBmYWxzZSApICk7XG5cdFx0XHRcdFx0XHRcdGVsZW0uaW5uZXJIVE1MID0gdmFsdWU7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0ZWxlbSA9IDA7XG5cblx0XHRcdFx0Ly8gSWYgdXNpbmcgaW5uZXJIVE1MIHRocm93cyBhbiBleGNlcHRpb24sIHVzZSB0aGUgZmFsbGJhY2sgbWV0aG9kXG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge31cblx0XHRcdH1cblxuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHR0aGlzLmVtcHR5KCkuYXBwZW5kKCB2YWx1ZSApO1xuXHRcdFx0fVxuXHRcdH0sIG51bGwsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH0sXG5cblx0cmVwbGFjZVdpdGg6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBpZ25vcmVkID0gW107XG5cblx0XHQvLyBNYWtlIHRoZSBjaGFuZ2VzLCByZXBsYWNpbmcgZWFjaCBub24taWdub3JlZCBjb250ZXh0IGVsZW1lbnQgd2l0aCB0aGUgbmV3IGNvbnRlbnRcblx0XHRyZXR1cm4gZG9tTWFuaXAoIHRoaXMsIGFyZ3VtZW50cywgZnVuY3Rpb24oIGVsZW0gKSB7XG5cdFx0XHR2YXIgcGFyZW50ID0gdGhpcy5wYXJlbnROb2RlO1xuXG5cdFx0XHRpZiAoIGpRdWVyeS5pbkFycmF5KCB0aGlzLCBpZ25vcmVkICkgPCAwICkge1xuXHRcdFx0XHRqUXVlcnkuY2xlYW5EYXRhKCBnZXRBbGwoIHRoaXMgKSApO1xuXHRcdFx0XHRpZiAoIHBhcmVudCApIHtcblx0XHRcdFx0XHRwYXJlbnQucmVwbGFjZUNoaWxkKCBlbGVtLCB0aGlzICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdC8vIEZvcmNlIGNhbGxiYWNrIGludm9jYXRpb25cblx0XHR9LCBpZ25vcmVkICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIHtcblx0YXBwZW5kVG86IFwiYXBwZW5kXCIsXG5cdHByZXBlbmRUbzogXCJwcmVwZW5kXCIsXG5cdGluc2VydEJlZm9yZTogXCJiZWZvcmVcIixcblx0aW5zZXJ0QWZ0ZXI6IFwiYWZ0ZXJcIixcblx0cmVwbGFjZUFsbDogXCJyZXBsYWNlV2l0aFwiXG59LCBmdW5jdGlvbiggbmFtZSwgb3JpZ2luYWwgKSB7XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBlbGVtcyxcblx0XHRcdHJldCA9IFtdLFxuXHRcdFx0aW5zZXJ0ID0galF1ZXJ5KCBzZWxlY3RvciApLFxuXHRcdFx0bGFzdCA9IGluc2VydC5sZW5ndGggLSAxLFxuXHRcdFx0aSA9IDA7XG5cblx0XHRmb3IgKCA7IGkgPD0gbGFzdDsgaSsrICkge1xuXHRcdFx0ZWxlbXMgPSBpID09PSBsYXN0ID8gdGhpcyA6IHRoaXMuY2xvbmUoIHRydWUgKTtcblx0XHRcdGpRdWVyeSggaW5zZXJ0WyBpIF0gKVsgb3JpZ2luYWwgXSggZWxlbXMgKTtcblxuXHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA8PTQuMCBvbmx5LCBQaGFudG9tSlMgMSBvbmx5XG5cdFx0XHQvLyAuZ2V0KCkgYmVjYXVzZSBwdXNoLmFwcGx5KF8sIGFycmF5bGlrZSkgdGhyb3dzIG9uIGFuY2llbnQgV2ViS2l0XG5cdFx0XHRwdXNoLmFwcGx5KCByZXQsIGVsZW1zLmdldCgpICk7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXMucHVzaFN0YWNrKCByZXQgKTtcblx0fTtcbn0gKTtcbnZhciBybnVtbm9ucHggPSBuZXcgUmVnRXhwKCBcIl4oXCIgKyBwbnVtICsgXCIpKD8hcHgpW2EteiVdKyRcIiwgXCJpXCIgKTtcblxudmFyIGdldFN0eWxlcyA9IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD0xMSBvbmx5LCBGaXJlZm94IDw9MzAgKCMxNTA5OCwgIzE0MTUwKVxuXHRcdC8vIElFIHRocm93cyBvbiBlbGVtZW50cyBjcmVhdGVkIGluIHBvcHVwc1xuXHRcdC8vIEZGIG1lYW53aGlsZSB0aHJvd3Mgb24gZnJhbWUgZWxlbWVudHMgdGhyb3VnaCBcImRlZmF1bHRWaWV3LmdldENvbXB1dGVkU3R5bGVcIlxuXHRcdHZhciB2aWV3ID0gZWxlbS5vd25lckRvY3VtZW50LmRlZmF1bHRWaWV3O1xuXG5cdFx0aWYgKCAhdmlldyB8fCAhdmlldy5vcGVuZXIgKSB7XG5cdFx0XHR2aWV3ID0gd2luZG93O1xuXHRcdH1cblxuXHRcdHJldHVybiB2aWV3LmdldENvbXB1dGVkU3R5bGUoIGVsZW0gKTtcblx0fTtcblxudmFyIHJib3hTdHlsZSA9IG5ldyBSZWdFeHAoIGNzc0V4cGFuZC5qb2luKCBcInxcIiApLCBcImlcIiApO1xuXG5cblxuKCBmdW5jdGlvbigpIHtcblxuXHQvLyBFeGVjdXRpbmcgYm90aCBwaXhlbFBvc2l0aW9uICYgYm94U2l6aW5nUmVsaWFibGUgdGVzdHMgcmVxdWlyZSBvbmx5IG9uZSBsYXlvdXRcblx0Ly8gc28gdGhleSdyZSBleGVjdXRlZCBhdCB0aGUgc2FtZSB0aW1lIHRvIHNhdmUgdGhlIHNlY29uZCBjb21wdXRhdGlvbi5cblx0ZnVuY3Rpb24gY29tcHV0ZVN0eWxlVGVzdHMoKSB7XG5cblx0XHQvLyBUaGlzIGlzIGEgc2luZ2xldG9uLCB3ZSBuZWVkIHRvIGV4ZWN1dGUgaXQgb25seSBvbmNlXG5cdFx0aWYgKCAhZGl2ICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdGNvbnRhaW5lci5zdHlsZS5jc3NUZXh0ID0gXCJwb3NpdGlvbjphYnNvbHV0ZTtsZWZ0Oi0xMTExMXB4O3dpZHRoOjYwcHg7XCIgK1xuXHRcdFx0XCJtYXJnaW4tdG9wOjFweDtwYWRkaW5nOjA7Ym9yZGVyOjBcIjtcblx0XHRkaXYuc3R5bGUuY3NzVGV4dCA9XG5cdFx0XHRcInBvc2l0aW9uOnJlbGF0aXZlO2Rpc3BsYXk6YmxvY2s7Ym94LXNpemluZzpib3JkZXItYm94O292ZXJmbG93OnNjcm9sbDtcIiArXG5cdFx0XHRcIm1hcmdpbjphdXRvO2JvcmRlcjoxcHg7cGFkZGluZzoxcHg7XCIgK1xuXHRcdFx0XCJ3aWR0aDo2MCU7dG9wOjElXCI7XG5cdFx0ZG9jdW1lbnRFbGVtZW50LmFwcGVuZENoaWxkKCBjb250YWluZXIgKS5hcHBlbmRDaGlsZCggZGl2ICk7XG5cblx0XHR2YXIgZGl2U3R5bGUgPSB3aW5kb3cuZ2V0Q29tcHV0ZWRTdHlsZSggZGl2ICk7XG5cdFx0cGl4ZWxQb3NpdGlvblZhbCA9IGRpdlN0eWxlLnRvcCAhPT0gXCIxJVwiO1xuXG5cdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCA0LjAgLSA0LjMgb25seSwgRmlyZWZveCA8PTMgLSA0NFxuXHRcdHJlbGlhYmxlTWFyZ2luTGVmdFZhbCA9IHJvdW5kUGl4ZWxNZWFzdXJlcyggZGl2U3R5bGUubWFyZ2luTGVmdCApID09PSAxMjtcblxuXHRcdC8vIFN1cHBvcnQ6IEFuZHJvaWQgNC4wIC0gNC4zIG9ubHksIFNhZmFyaSA8PTkuMSAtIDEwLjEsIGlPUyA8PTcuMCAtIDkuM1xuXHRcdC8vIFNvbWUgc3R5bGVzIGNvbWUgYmFjayB3aXRoIHBlcmNlbnRhZ2UgdmFsdWVzLCBldmVuIHRob3VnaCB0aGV5IHNob3VsZG4ndFxuXHRcdGRpdi5zdHlsZS5yaWdodCA9IFwiNjAlXCI7XG5cdFx0cGl4ZWxCb3hTdHlsZXNWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLnJpZ2h0ICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0XHQvLyBEZXRlY3QgbWlzcmVwb3J0aW5nIG9mIGNvbnRlbnQgZGltZW5zaW9ucyBmb3IgYm94LXNpemluZzpib3JkZXItYm94IGVsZW1lbnRzXG5cdFx0Ym94U2l6aW5nUmVsaWFibGVWYWwgPSByb3VuZFBpeGVsTWVhc3VyZXMoIGRpdlN0eWxlLndpZHRoICkgPT09IDM2O1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgOSBvbmx5XG5cdFx0Ly8gRGV0ZWN0IG92ZXJmbG93OnNjcm9sbCBzY3Jld2luZXNzIChnaC0zNjk5KVxuXHRcdGRpdi5zdHlsZS5wb3NpdGlvbiA9IFwiYWJzb2x1dGVcIjtcblx0XHRzY3JvbGxib3hTaXplVmFsID0gZGl2Lm9mZnNldFdpZHRoID09PSAzNiB8fCBcImFic29sdXRlXCI7XG5cblx0XHRkb2N1bWVudEVsZW1lbnQucmVtb3ZlQ2hpbGQoIGNvbnRhaW5lciApO1xuXG5cdFx0Ly8gTnVsbGlmeSB0aGUgZGl2IHNvIGl0IHdvdWxkbid0IGJlIHN0b3JlZCBpbiB0aGUgbWVtb3J5IGFuZFxuXHRcdC8vIGl0IHdpbGwgYWxzbyBiZSBhIHNpZ24gdGhhdCBjaGVja3MgYWxyZWFkeSBwZXJmb3JtZWRcblx0XHRkaXYgPSBudWxsO1xuXHR9XG5cblx0ZnVuY3Rpb24gcm91bmRQaXhlbE1lYXN1cmVzKCBtZWFzdXJlICkge1xuXHRcdHJldHVybiBNYXRoLnJvdW5kKCBwYXJzZUZsb2F0KCBtZWFzdXJlICkgKTtcblx0fVxuXG5cdHZhciBwaXhlbFBvc2l0aW9uVmFsLCBib3hTaXppbmdSZWxpYWJsZVZhbCwgc2Nyb2xsYm94U2l6ZVZhbCwgcGl4ZWxCb3hTdHlsZXNWYWwsXG5cdFx0cmVsaWFibGVNYXJnaW5MZWZ0VmFsLFxuXHRcdGNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiZGl2XCIgKSxcblx0XHRkaXYgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICk7XG5cblx0Ly8gRmluaXNoIGVhcmx5IGluIGxpbWl0ZWQgKG5vbi1icm93c2VyKSBlbnZpcm9ubWVudHNcblx0aWYgKCAhZGl2LnN0eWxlICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0Ly8gU3R5bGUgb2YgY2xvbmVkIGVsZW1lbnQgYWZmZWN0cyBzb3VyY2UgZWxlbWVudCBjbG9uZWQgKCM4OTA4KVxuXHRkaXYuc3R5bGUuYmFja2dyb3VuZENsaXAgPSBcImNvbnRlbnQtYm94XCI7XG5cdGRpdi5jbG9uZU5vZGUoIHRydWUgKS5zdHlsZS5iYWNrZ3JvdW5kQ2xpcCA9IFwiXCI7XG5cdHN1cHBvcnQuY2xlYXJDbG9uZVN0eWxlID0gZGl2LnN0eWxlLmJhY2tncm91bmRDbGlwID09PSBcImNvbnRlbnQtYm94XCI7XG5cblx0alF1ZXJ5LmV4dGVuZCggc3VwcG9ydCwge1xuXHRcdGJveFNpemluZ1JlbGlhYmxlOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gYm94U2l6aW5nUmVsaWFibGVWYWw7XG5cdFx0fSxcblx0XHRwaXhlbEJveFN0eWxlczogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsQm94U3R5bGVzVmFsO1xuXHRcdH0sXG5cdFx0cGl4ZWxQb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0XHRjb21wdXRlU3R5bGVUZXN0cygpO1xuXHRcdFx0cmV0dXJuIHBpeGVsUG9zaXRpb25WYWw7XG5cdFx0fSxcblx0XHRyZWxpYWJsZU1hcmdpbkxlZnQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0Y29tcHV0ZVN0eWxlVGVzdHMoKTtcblx0XHRcdHJldHVybiByZWxpYWJsZU1hcmdpbkxlZnRWYWw7XG5cdFx0fSxcblx0XHRzY3JvbGxib3hTaXplOiBmdW5jdGlvbigpIHtcblx0XHRcdGNvbXB1dGVTdHlsZVRlc3RzKCk7XG5cdFx0XHRyZXR1cm4gc2Nyb2xsYm94U2l6ZVZhbDtcblx0XHR9XG5cdH0gKTtcbn0gKSgpO1xuXG5cbmZ1bmN0aW9uIGN1ckNTUyggZWxlbSwgbmFtZSwgY29tcHV0ZWQgKSB7XG5cdHZhciB3aWR0aCwgbWluV2lkdGgsIG1heFdpZHRoLCByZXQsXG5cblx0XHQvLyBTdXBwb3J0OiBGaXJlZm94IDUxK1xuXHRcdC8vIFJldHJpZXZpbmcgc3R5bGUgYmVmb3JlIGNvbXB1dGVkIHNvbWVob3dcblx0XHQvLyBmaXhlcyBhbiBpc3N1ZSB3aXRoIGdldHRpbmcgd3JvbmcgdmFsdWVzXG5cdFx0Ly8gb24gZGV0YWNoZWQgZWxlbWVudHNcblx0XHRzdHlsZSA9IGVsZW0uc3R5bGU7XG5cblx0Y29tcHV0ZWQgPSBjb21wdXRlZCB8fCBnZXRTdHlsZXMoIGVsZW0gKTtcblxuXHQvLyBnZXRQcm9wZXJ0eVZhbHVlIGlzIG5lZWRlZCBmb3I6XG5cdC8vICAgLmNzcygnZmlsdGVyJykgKElFIDkgb25seSwgIzEyNTM3KVxuXHQvLyAgIC5jc3MoJy0tY3VzdG9tUHJvcGVydHkpICgjMzE0NClcblx0aWYgKCBjb21wdXRlZCApIHtcblx0XHRyZXQgPSBjb21wdXRlZC5nZXRQcm9wZXJ0eVZhbHVlKCBuYW1lICkgfHwgY29tcHV0ZWRbIG5hbWUgXTtcblxuXHRcdGlmICggcmV0ID09PSBcIlwiICYmICFqUXVlcnkuY29udGFpbnMoIGVsZW0ub3duZXJEb2N1bWVudCwgZWxlbSApICkge1xuXHRcdFx0cmV0ID0galF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lICk7XG5cdFx0fVxuXG5cdFx0Ly8gQSB0cmlidXRlIHRvIHRoZSBcImF3ZXNvbWUgaGFjayBieSBEZWFuIEVkd2FyZHNcIlxuXHRcdC8vIEFuZHJvaWQgQnJvd3NlciByZXR1cm5zIHBlcmNlbnRhZ2UgZm9yIHNvbWUgdmFsdWVzLFxuXHRcdC8vIGJ1dCB3aWR0aCBzZWVtcyB0byBiZSByZWxpYWJseSBwaXhlbHMuXG5cdFx0Ly8gVGhpcyBpcyBhZ2FpbnN0IHRoZSBDU1NPTSBkcmFmdCBzcGVjOlxuXHRcdC8vIGh0dHBzOi8vZHJhZnRzLmNzc3dnLm9yZy9jc3NvbS8jcmVzb2x2ZWQtdmFsdWVzXG5cdFx0aWYgKCAhc3VwcG9ydC5waXhlbEJveFN0eWxlcygpICYmIHJudW1ub25weC50ZXN0KCByZXQgKSAmJiByYm94U3R5bGUudGVzdCggbmFtZSApICkge1xuXG5cdFx0XHQvLyBSZW1lbWJlciB0aGUgb3JpZ2luYWwgdmFsdWVzXG5cdFx0XHR3aWR0aCA9IHN0eWxlLndpZHRoO1xuXHRcdFx0bWluV2lkdGggPSBzdHlsZS5taW5XaWR0aDtcblx0XHRcdG1heFdpZHRoID0gc3R5bGUubWF4V2lkdGg7XG5cblx0XHRcdC8vIFB1dCBpbiB0aGUgbmV3IHZhbHVlcyB0byBnZXQgYSBjb21wdXRlZCB2YWx1ZSBvdXRcblx0XHRcdHN0eWxlLm1pbldpZHRoID0gc3R5bGUubWF4V2lkdGggPSBzdHlsZS53aWR0aCA9IHJldDtcblx0XHRcdHJldCA9IGNvbXB1dGVkLndpZHRoO1xuXG5cdFx0XHQvLyBSZXZlcnQgdGhlIGNoYW5nZWQgdmFsdWVzXG5cdFx0XHRzdHlsZS53aWR0aCA9IHdpZHRoO1xuXHRcdFx0c3R5bGUubWluV2lkdGggPSBtaW5XaWR0aDtcblx0XHRcdHN0eWxlLm1heFdpZHRoID0gbWF4V2lkdGg7XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHJldCAhPT0gdW5kZWZpbmVkID9cblxuXHRcdC8vIFN1cHBvcnQ6IElFIDw9OSAtIDExIG9ubHlcblx0XHQvLyBJRSByZXR1cm5zIHpJbmRleCB2YWx1ZSBhcyBhbiBpbnRlZ2VyLlxuXHRcdHJldCArIFwiXCIgOlxuXHRcdHJldDtcbn1cblxuXG5mdW5jdGlvbiBhZGRHZXRIb29rSWYoIGNvbmRpdGlvbkZuLCBob29rRm4gKSB7XG5cblx0Ly8gRGVmaW5lIHRoZSBob29rLCB3ZSdsbCBjaGVjayBvbiB0aGUgZmlyc3QgcnVuIGlmIGl0J3MgcmVhbGx5IG5lZWRlZC5cblx0cmV0dXJuIHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBjb25kaXRpb25GbigpICkge1xuXG5cdFx0XHRcdC8vIEhvb2sgbm90IG5lZWRlZCAob3IgaXQncyBub3QgcG9zc2libGUgdG8gdXNlIGl0IGR1ZVxuXHRcdFx0XHQvLyB0byBtaXNzaW5nIGRlcGVuZGVuY3kpLCByZW1vdmUgaXQuXG5cdFx0XHRcdGRlbGV0ZSB0aGlzLmdldDtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBIb29rIG5lZWRlZDsgcmVkZWZpbmUgaXQgc28gdGhhdCB0aGUgc3VwcG9ydCB0ZXN0IGlzIG5vdCBleGVjdXRlZCBhZ2Fpbi5cblx0XHRcdHJldHVybiAoIHRoaXMuZ2V0ID0gaG9va0ZuICkuYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApO1xuXHRcdH1cblx0fTtcbn1cblxuXG52YXJcblxuXHQvLyBTd2FwcGFibGUgaWYgZGlzcGxheSBpcyBub25lIG9yIHN0YXJ0cyB3aXRoIHRhYmxlXG5cdC8vIGV4Y2VwdCBcInRhYmxlXCIsIFwidGFibGUtY2VsbFwiLCBvciBcInRhYmxlLWNhcHRpb25cIlxuXHQvLyBTZWUgaGVyZSBmb3IgZGlzcGxheSB2YWx1ZXM6IGh0dHBzOi8vZGV2ZWxvcGVyLm1vemlsbGEub3JnL2VuLVVTL2RvY3MvQ1NTL2Rpc3BsYXlcblx0cmRpc3BsYXlzd2FwID0gL14obm9uZXx0YWJsZSg/IS1jW2VhXSkuKykvLFxuXHRyY3VzdG9tUHJvcCA9IC9eLS0vLFxuXHRjc3NTaG93ID0geyBwb3NpdGlvbjogXCJhYnNvbHV0ZVwiLCB2aXNpYmlsaXR5OiBcImhpZGRlblwiLCBkaXNwbGF5OiBcImJsb2NrXCIgfSxcblx0Y3NzTm9ybWFsVHJhbnNmb3JtID0ge1xuXHRcdGxldHRlclNwYWNpbmc6IFwiMFwiLFxuXHRcdGZvbnRXZWlnaHQ6IFwiNDAwXCJcblx0fSxcblxuXHRjc3NQcmVmaXhlcyA9IFsgXCJXZWJraXRcIiwgXCJNb3pcIiwgXCJtc1wiIF0sXG5cdGVtcHR5U3R5bGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImRpdlwiICkuc3R5bGU7XG5cbi8vIFJldHVybiBhIGNzcyBwcm9wZXJ0eSBtYXBwZWQgdG8gYSBwb3RlbnRpYWxseSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHlcbmZ1bmN0aW9uIHZlbmRvclByb3BOYW1lKCBuYW1lICkge1xuXG5cdC8vIFNob3J0Y3V0IGZvciBuYW1lcyB0aGF0IGFyZSBub3QgdmVuZG9yIHByZWZpeGVkXG5cdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdHJldHVybiBuYW1lO1xuXHR9XG5cblx0Ly8gQ2hlY2sgZm9yIHZlbmRvciBwcmVmaXhlZCBuYW1lc1xuXHR2YXIgY2FwTmFtZSA9IG5hbWVbIDAgXS50b1VwcGVyQ2FzZSgpICsgbmFtZS5zbGljZSggMSApLFxuXHRcdGkgPSBjc3NQcmVmaXhlcy5sZW5ndGg7XG5cblx0d2hpbGUgKCBpLS0gKSB7XG5cdFx0bmFtZSA9IGNzc1ByZWZpeGVzWyBpIF0gKyBjYXBOYW1lO1xuXHRcdGlmICggbmFtZSBpbiBlbXB0eVN0eWxlICkge1xuXHRcdFx0cmV0dXJuIG5hbWU7XG5cdFx0fVxuXHR9XG59XG5cbi8vIFJldHVybiBhIHByb3BlcnR5IG1hcHBlZCBhbG9uZyB3aGF0IGpRdWVyeS5jc3NQcm9wcyBzdWdnZXN0cyBvciB0b1xuLy8gYSB2ZW5kb3IgcHJlZml4ZWQgcHJvcGVydHkuXG5mdW5jdGlvbiBmaW5hbFByb3BOYW1lKCBuYW1lICkge1xuXHR2YXIgcmV0ID0galF1ZXJ5LmNzc1Byb3BzWyBuYW1lIF07XG5cdGlmICggIXJldCApIHtcblx0XHRyZXQgPSBqUXVlcnkuY3NzUHJvcHNbIG5hbWUgXSA9IHZlbmRvclByb3BOYW1lKCBuYW1lICkgfHwgbmFtZTtcblx0fVxuXHRyZXR1cm4gcmV0O1xufVxuXG5mdW5jdGlvbiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICkge1xuXG5cdC8vIEFueSByZWxhdGl2ZSAoKy8tKSB2YWx1ZXMgaGF2ZSBhbHJlYWR5IGJlZW5cblx0Ly8gbm9ybWFsaXplZCBhdCB0aGlzIHBvaW50XG5cdHZhciBtYXRjaGVzID0gcmNzc051bS5leGVjKCB2YWx1ZSApO1xuXHRyZXR1cm4gbWF0Y2hlcyA/XG5cblx0XHQvLyBHdWFyZCBhZ2FpbnN0IHVuZGVmaW5lZCBcInN1YnRyYWN0XCIsIGUuZy4sIHdoZW4gdXNlZCBhcyBpbiBjc3NIb29rc1xuXHRcdE1hdGgubWF4KCAwLCBtYXRjaGVzWyAyIF0gLSAoIHN1YnRyYWN0IHx8IDAgKSApICsgKCBtYXRjaGVzWyAzIF0gfHwgXCJweFwiICkgOlxuXHRcdHZhbHVlO1xufVxuXG5mdW5jdGlvbiBib3hNb2RlbEFkanVzdG1lbnQoIGVsZW0sIGRpbWVuc2lvbiwgYm94LCBpc0JvcmRlckJveCwgc3R5bGVzLCBjb21wdXRlZFZhbCApIHtcblx0dmFyIGkgPSBkaW1lbnNpb24gPT09IFwid2lkdGhcIiA/IDEgOiAwLFxuXHRcdGV4dHJhID0gMCxcblx0XHRkZWx0YSA9IDA7XG5cblx0Ly8gQWRqdXN0bWVudCBtYXkgbm90IGJlIG5lY2Vzc2FyeVxuXHRpZiAoIGJveCA9PT0gKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApICkge1xuXHRcdHJldHVybiAwO1xuXHR9XG5cblx0Zm9yICggOyBpIDwgNDsgaSArPSAyICkge1xuXG5cdFx0Ly8gQm90aCBib3ggbW9kZWxzIGV4Y2x1ZGUgbWFyZ2luXG5cdFx0aWYgKCBib3ggPT09IFwibWFyZ2luXCIgKSB7XG5cdFx0XHRkZWx0YSArPSBqUXVlcnkuY3NzKCBlbGVtLCBib3ggKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGNvbnRlbnQtYm94LCB3ZSdyZSBzZWVraW5nIFwicGFkZGluZ1wiIG9yIFwiYm9yZGVyXCIgb3IgXCJtYXJnaW5cIlxuXHRcdGlmICggIWlzQm9yZGVyQm94ICkge1xuXG5cdFx0XHQvLyBBZGQgcGFkZGluZ1xuXHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cblx0XHRcdC8vIEZvciBcImJvcmRlclwiIG9yIFwibWFyZ2luXCIsIGFkZCBib3JkZXJcblx0XHRcdGlmICggYm94ICE9PSBcInBhZGRpbmdcIiApIHtcblx0XHRcdFx0ZGVsdGEgKz0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblxuXHRcdFx0Ly8gQnV0IHN0aWxsIGtlZXAgdHJhY2sgb2YgaXQgb3RoZXJ3aXNlXG5cdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRleHRyYSArPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJvcmRlclwiICsgY3NzRXhwYW5kWyBpIF0gKyBcIldpZHRoXCIsIHRydWUsIHN0eWxlcyApO1xuXHRcdFx0fVxuXG5cdFx0Ly8gSWYgd2UgZ2V0IGhlcmUgd2l0aCBhIGJvcmRlci1ib3ggKGNvbnRlbnQgKyBwYWRkaW5nICsgYm9yZGVyKSwgd2UncmUgc2Vla2luZyBcImNvbnRlbnRcIiBvclxuXHRcdC8vIFwicGFkZGluZ1wiIG9yIFwibWFyZ2luXCJcblx0XHR9IGVsc2Uge1xuXG5cdFx0XHQvLyBGb3IgXCJjb250ZW50XCIsIHN1YnRyYWN0IHBhZGRpbmdcblx0XHRcdGlmICggYm94ID09PSBcImNvbnRlbnRcIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJwYWRkaW5nXCIgKyBjc3NFeHBhbmRbIGkgXSwgdHJ1ZSwgc3R5bGVzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEZvciBcImNvbnRlbnRcIiBvciBcInBhZGRpbmdcIiwgc3VidHJhY3QgYm9yZGVyXG5cdFx0XHRpZiAoIGJveCAhPT0gXCJtYXJnaW5cIiApIHtcblx0XHRcdFx0ZGVsdGEgLT0galF1ZXJ5LmNzcyggZWxlbSwgXCJib3JkZXJcIiArIGNzc0V4cGFuZFsgaSBdICsgXCJXaWR0aFwiLCB0cnVlLCBzdHlsZXMgKTtcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBBY2NvdW50IGZvciBwb3NpdGl2ZSBjb250ZW50LWJveCBzY3JvbGwgZ3V0dGVyIHdoZW4gcmVxdWVzdGVkIGJ5IHByb3ZpZGluZyBjb21wdXRlZFZhbFxuXHRpZiAoICFpc0JvcmRlckJveCAmJiBjb21wdXRlZFZhbCA+PSAwICkge1xuXG5cdFx0Ly8gb2Zmc2V0V2lkdGgvb2Zmc2V0SGVpZ2h0IGlzIGEgcm91bmRlZCBzdW0gb2YgY29udGVudCwgcGFkZGluZywgc2Nyb2xsIGd1dHRlciwgYW5kIGJvcmRlclxuXHRcdC8vIEFzc3VtaW5nIGludGVnZXIgc2Nyb2xsIGd1dHRlciwgc3VidHJhY3QgdGhlIHJlc3QgYW5kIHJvdW5kIGRvd25cblx0XHRkZWx0YSArPSBNYXRoLm1heCggMCwgTWF0aC5jZWlsKFxuXHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdGNvbXB1dGVkVmFsIC1cblx0XHRcdGRlbHRhIC1cblx0XHRcdGV4dHJhIC1cblx0XHRcdDAuNVxuXHRcdCkgKTtcblx0fVxuXG5cdHJldHVybiBkZWx0YTtcbn1cblxuZnVuY3Rpb24gZ2V0V2lkdGhPckhlaWdodCggZWxlbSwgZGltZW5zaW9uLCBleHRyYSApIHtcblxuXHQvLyBTdGFydCB3aXRoIGNvbXB1dGVkIHN0eWxlXG5cdHZhciBzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIGRpbWVuc2lvbiwgc3R5bGVzICksXG5cdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdHZhbHVlSXNCb3JkZXJCb3ggPSBpc0JvcmRlckJveDtcblxuXHQvLyBTdXBwb3J0OiBGaXJlZm94IDw9NTRcblx0Ly8gUmV0dXJuIGEgY29uZm91bmRpbmcgbm9uLXBpeGVsIHZhbHVlIG9yIGZlaWduIGlnbm9yYW5jZSwgYXMgYXBwcm9wcmlhdGUuXG5cdGlmICggcm51bW5vbnB4LnRlc3QoIHZhbCApICkge1xuXHRcdGlmICggIWV4dHJhICkge1xuXHRcdFx0cmV0dXJuIHZhbDtcblx0XHR9XG5cdFx0dmFsID0gXCJhdXRvXCI7XG5cdH1cblxuXHQvLyBDaGVjayBmb3Igc3R5bGUgaW4gY2FzZSBhIGJyb3dzZXIgd2hpY2ggcmV0dXJucyB1bnJlbGlhYmxlIHZhbHVlc1xuXHQvLyBmb3IgZ2V0Q29tcHV0ZWRTdHlsZSBzaWxlbnRseSBmYWxscyBiYWNrIHRvIHRoZSByZWxpYWJsZSBlbGVtLnN0eWxlXG5cdHZhbHVlSXNCb3JkZXJCb3ggPSB2YWx1ZUlzQm9yZGVyQm94ICYmXG5cdFx0KCBzdXBwb3J0LmJveFNpemluZ1JlbGlhYmxlKCkgfHwgdmFsID09PSBlbGVtLnN0eWxlWyBkaW1lbnNpb24gXSApO1xuXG5cdC8vIEZhbGwgYmFjayB0byBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgd2hlbiB2YWx1ZSBpcyBcImF1dG9cIlxuXHQvLyBUaGlzIGhhcHBlbnMgZm9yIGlubGluZSBlbGVtZW50cyB3aXRoIG5vIGV4cGxpY2l0IHNldHRpbmcgKGdoLTM1NzEpXG5cdC8vIFN1cHBvcnQ6IEFuZHJvaWQgPD00LjEgLSA0LjMgb25seVxuXHQvLyBBbHNvIHVzZSBvZmZzZXRXaWR0aC9vZmZzZXRIZWlnaHQgZm9yIG1pc3JlcG9ydGVkIGlubGluZSBkaW1lbnNpb25zIChnaC0zNjAyKVxuXHRpZiAoIHZhbCA9PT0gXCJhdXRvXCIgfHxcblx0XHQhcGFyc2VGbG9hdCggdmFsICkgJiYgalF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIsIGZhbHNlLCBzdHlsZXMgKSA9PT0gXCJpbmxpbmVcIiApIHtcblxuXHRcdHZhbCA9IGVsZW1bIFwib2Zmc2V0XCIgKyBkaW1lbnNpb25bIDAgXS50b1VwcGVyQ2FzZSgpICsgZGltZW5zaW9uLnNsaWNlKCAxICkgXTtcblxuXHRcdC8vIG9mZnNldFdpZHRoL29mZnNldEhlaWdodCBwcm92aWRlIGJvcmRlci1ib3ggdmFsdWVzXG5cdFx0dmFsdWVJc0JvcmRlckJveCA9IHRydWU7XG5cdH1cblxuXHQvLyBOb3JtYWxpemUgXCJcIiBhbmQgYXV0b1xuXHR2YWwgPSBwYXJzZUZsb2F0KCB2YWwgKSB8fCAwO1xuXG5cdC8vIEFkanVzdCBmb3IgdGhlIGVsZW1lbnQncyBib3ggbW9kZWxcblx0cmV0dXJuICggdmFsICtcblx0XHRib3hNb2RlbEFkanVzdG1lbnQoXG5cdFx0XHRlbGVtLFxuXHRcdFx0ZGltZW5zaW9uLFxuXHRcdFx0ZXh0cmEgfHwgKCBpc0JvcmRlckJveCA/IFwiYm9yZGVyXCIgOiBcImNvbnRlbnRcIiApLFxuXHRcdFx0dmFsdWVJc0JvcmRlckJveCxcblx0XHRcdHN0eWxlcyxcblxuXHRcdFx0Ly8gUHJvdmlkZSB0aGUgY3VycmVudCBjb21wdXRlZCBzaXplIHRvIHJlcXVlc3Qgc2Nyb2xsIGd1dHRlciBjYWxjdWxhdGlvbiAoZ2gtMzU4OSlcblx0XHRcdHZhbFxuXHRcdClcblx0KSArIFwicHhcIjtcbn1cblxualF1ZXJ5LmV4dGVuZCgge1xuXG5cdC8vIEFkZCBpbiBzdHlsZSBwcm9wZXJ0eSBob29rcyBmb3Igb3ZlcnJpZGluZyB0aGUgZGVmYXVsdFxuXHQvLyBiZWhhdmlvciBvZiBnZXR0aW5nIGFuZCBzZXR0aW5nIGEgc3R5bGUgcHJvcGVydHlcblx0Y3NzSG9va3M6IHtcblx0XHRvcGFjaXR5OiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHRcdC8vIFdlIHNob3VsZCBhbHdheXMgZ2V0IGEgbnVtYmVyIGJhY2sgZnJvbSBvcGFjaXR5XG5cdFx0XHRcdFx0dmFyIHJldCA9IGN1ckNTUyggZWxlbSwgXCJvcGFjaXR5XCIgKTtcblx0XHRcdFx0XHRyZXR1cm4gcmV0ID09PSBcIlwiID8gXCIxXCIgOiByZXQ7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cdH0sXG5cblx0Ly8gRG9uJ3QgYXV0b21hdGljYWxseSBhZGQgXCJweFwiIHRvIHRoZXNlIHBvc3NpYmx5LXVuaXRsZXNzIHByb3BlcnRpZXNcblx0Y3NzTnVtYmVyOiB7XG5cdFx0XCJhbmltYXRpb25JdGVyYXRpb25Db3VudFwiOiB0cnVlLFxuXHRcdFwiY29sdW1uQ291bnRcIjogdHJ1ZSxcblx0XHRcImZpbGxPcGFjaXR5XCI6IHRydWUsXG5cdFx0XCJmbGV4R3Jvd1wiOiB0cnVlLFxuXHRcdFwiZmxleFNocmlua1wiOiB0cnVlLFxuXHRcdFwiZm9udFdlaWdodFwiOiB0cnVlLFxuXHRcdFwibGluZUhlaWdodFwiOiB0cnVlLFxuXHRcdFwib3BhY2l0eVwiOiB0cnVlLFxuXHRcdFwib3JkZXJcIjogdHJ1ZSxcblx0XHRcIm9ycGhhbnNcIjogdHJ1ZSxcblx0XHRcIndpZG93c1wiOiB0cnVlLFxuXHRcdFwiekluZGV4XCI6IHRydWUsXG5cdFx0XCJ6b29tXCI6IHRydWVcblx0fSxcblxuXHQvLyBBZGQgaW4gcHJvcGVydGllcyB3aG9zZSBuYW1lcyB5b3Ugd2lzaCB0byBmaXggYmVmb3JlXG5cdC8vIHNldHRpbmcgb3IgZ2V0dGluZyB0aGUgdmFsdWVcblx0Y3NzUHJvcHM6IHt9LFxuXG5cdC8vIEdldCBhbmQgc2V0IHRoZSBzdHlsZSBwcm9wZXJ0eSBvbiBhIERPTSBOb2RlXG5cdHN0eWxlOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUsIGV4dHJhICkge1xuXG5cdFx0Ly8gRG9uJ3Qgc2V0IHN0eWxlcyBvbiB0ZXh0IGFuZCBjb21tZW50IG5vZGVzXG5cdFx0aWYgKCAhZWxlbSB8fCBlbGVtLm5vZGVUeXBlID09PSAzIHx8IGVsZW0ubm9kZVR5cGUgPT09IDggfHwgIWVsZW0uc3R5bGUgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lXG5cdFx0dmFyIHJldCwgdHlwZSwgaG9va3MsXG5cdFx0XHRvcmlnTmFtZSA9IGNhbWVsQ2FzZSggbmFtZSApLFxuXHRcdFx0aXNDdXN0b21Qcm9wID0gcmN1c3RvbVByb3AudGVzdCggbmFtZSApLFxuXHRcdFx0c3R5bGUgPSBlbGVtLnN0eWxlO1xuXG5cdFx0Ly8gTWFrZSBzdXJlIHRoYXQgd2UncmUgd29ya2luZyB3aXRoIHRoZSByaWdodCBuYW1lLiBXZSBkb24ndFxuXHRcdC8vIHdhbnQgdG8gcXVlcnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBHZXRzIGhvb2sgZm9yIHRoZSBwcmVmaXhlZCB2ZXJzaW9uLCB0aGVuIHVucHJlZml4ZWQgdmVyc2lvblxuXHRcdGhvb2tzID0galF1ZXJ5LmNzc0hvb2tzWyBuYW1lIF0gfHwgalF1ZXJ5LmNzc0hvb2tzWyBvcmlnTmFtZSBdO1xuXG5cdFx0Ly8gQ2hlY2sgaWYgd2UncmUgc2V0dGluZyBhIHZhbHVlXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0dHlwZSA9IHR5cGVvZiB2YWx1ZTtcblxuXHRcdFx0Ly8gQ29udmVydCBcIis9XCIgb3IgXCItPVwiIHRvIHJlbGF0aXZlIG51bWJlcnMgKCM3MzQ1KVxuXHRcdFx0aWYgKCB0eXBlID09PSBcInN0cmluZ1wiICYmICggcmV0ID0gcmNzc051bS5leGVjKCB2YWx1ZSApICkgJiYgcmV0WyAxIF0gKSB7XG5cdFx0XHRcdHZhbHVlID0gYWRqdXN0Q1NTKCBlbGVtLCBuYW1lLCByZXQgKTtcblxuXHRcdFx0XHQvLyBGaXhlcyBidWcgIzkyMzdcblx0XHRcdFx0dHlwZSA9IFwibnVtYmVyXCI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE1ha2Ugc3VyZSB0aGF0IG51bGwgYW5kIE5hTiB2YWx1ZXMgYXJlbid0IHNldCAoIzcxMTYpXG5cdFx0XHRpZiAoIHZhbHVlID09IG51bGwgfHwgdmFsdWUgIT09IHZhbHVlICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIGEgbnVtYmVyIHdhcyBwYXNzZWQgaW4sIGFkZCB0aGUgdW5pdCAoZXhjZXB0IGZvciBjZXJ0YWluIENTUyBwcm9wZXJ0aWVzKVxuXHRcdFx0aWYgKCB0eXBlID09PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHR2YWx1ZSArPSByZXQgJiYgcmV0WyAzIF0gfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBvcmlnTmFtZSBdID8gXCJcIiA6IFwicHhcIiApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBiYWNrZ3JvdW5kLSogcHJvcHMgYWZmZWN0IG9yaWdpbmFsIGNsb25lJ3MgdmFsdWVzXG5cdFx0XHRpZiAoICFzdXBwb3J0LmNsZWFyQ2xvbmVTdHlsZSAmJiB2YWx1ZSA9PT0gXCJcIiAmJiBuYW1lLmluZGV4T2YoIFwiYmFja2dyb3VuZFwiICkgPT09IDAgKSB7XG5cdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSBcImluaGVyaXRcIjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCwgdXNlIHRoYXQgdmFsdWUsIG90aGVyd2lzZSBqdXN0IHNldCB0aGUgc3BlY2lmaWVkIHZhbHVlXG5cdFx0XHRpZiAoICFob29rcyB8fCAhKCBcInNldFwiIGluIGhvb2tzICkgfHxcblx0XHRcdFx0KCB2YWx1ZSA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIGV4dHJhICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXG5cdFx0XHRcdGlmICggaXNDdXN0b21Qcm9wICkge1xuXHRcdFx0XHRcdHN0eWxlLnNldFByb3BlcnR5KCBuYW1lLCB2YWx1ZSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdHN0eWxlWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0fSBlbHNlIHtcblxuXHRcdFx0Ly8gSWYgYSBob29rIHdhcyBwcm92aWRlZCBnZXQgdGhlIG5vbi1jb21wdXRlZCB2YWx1ZSBmcm9tIHRoZXJlXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwiZ2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIGZhbHNlLCBleHRyYSApICkgIT09IHVuZGVmaW5lZCApIHtcblxuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBPdGhlcndpc2UganVzdCBnZXQgdGhlIHZhbHVlIGZyb20gdGhlIHN0eWxlIG9iamVjdFxuXHRcdFx0cmV0dXJuIHN0eWxlWyBuYW1lIF07XG5cdFx0fVxuXHR9LFxuXG5cdGNzczogZnVuY3Rpb24oIGVsZW0sIG5hbWUsIGV4dHJhLCBzdHlsZXMgKSB7XG5cdFx0dmFyIHZhbCwgbnVtLCBob29rcyxcblx0XHRcdG9yaWdOYW1lID0gY2FtZWxDYXNlKCBuYW1lICksXG5cdFx0XHRpc0N1c3RvbVByb3AgPSByY3VzdG9tUHJvcC50ZXN0KCBuYW1lICk7XG5cblx0XHQvLyBNYWtlIHN1cmUgdGhhdCB3ZSdyZSB3b3JraW5nIHdpdGggdGhlIHJpZ2h0IG5hbWUuIFdlIGRvbid0XG5cdFx0Ly8gd2FudCB0byBtb2RpZnkgdGhlIHZhbHVlIGlmIGl0IGlzIGEgQ1NTIGN1c3RvbSBwcm9wZXJ0eVxuXHRcdC8vIHNpbmNlIHRoZXkgYXJlIHVzZXItZGVmaW5lZC5cblx0XHRpZiAoICFpc0N1c3RvbVByb3AgKSB7XG5cdFx0XHRuYW1lID0gZmluYWxQcm9wTmFtZSggb3JpZ05hbWUgKTtcblx0XHR9XG5cblx0XHQvLyBUcnkgcHJlZml4ZWQgbmFtZSBmb2xsb3dlZCBieSB0aGUgdW5wcmVmaXhlZCBuYW1lXG5cdFx0aG9va3MgPSBqUXVlcnkuY3NzSG9va3NbIG5hbWUgXSB8fCBqUXVlcnkuY3NzSG9va3NbIG9yaWdOYW1lIF07XG5cblx0XHQvLyBJZiBhIGhvb2sgd2FzIHByb3ZpZGVkIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZnJvbSB0aGVyZVxuXHRcdGlmICggaG9va3MgJiYgXCJnZXRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbCA9IGhvb2tzLmdldCggZWxlbSwgdHJ1ZSwgZXh0cmEgKTtcblx0XHR9XG5cblx0XHQvLyBPdGhlcndpc2UsIGlmIGEgd2F5IHRvIGdldCB0aGUgY29tcHV0ZWQgdmFsdWUgZXhpc3RzLCB1c2UgdGhhdFxuXHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHR2YWwgPSBjdXJDU1MoIGVsZW0sIG5hbWUsIHN0eWxlcyApO1xuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgXCJub3JtYWxcIiB0byBjb21wdXRlZCB2YWx1ZVxuXHRcdGlmICggdmFsID09PSBcIm5vcm1hbFwiICYmIG5hbWUgaW4gY3NzTm9ybWFsVHJhbnNmb3JtICkge1xuXHRcdFx0dmFsID0gY3NzTm9ybWFsVHJhbnNmb3JtWyBuYW1lIF07XG5cdFx0fVxuXG5cdFx0Ly8gTWFrZSBudW1lcmljIGlmIGZvcmNlZCBvciBhIHF1YWxpZmllciB3YXMgcHJvdmlkZWQgYW5kIHZhbCBsb29rcyBudW1lcmljXG5cdFx0aWYgKCBleHRyYSA9PT0gXCJcIiB8fCBleHRyYSApIHtcblx0XHRcdG51bSA9IHBhcnNlRmxvYXQoIHZhbCApO1xuXHRcdFx0cmV0dXJuIGV4dHJhID09PSB0cnVlIHx8IGlzRmluaXRlKCBudW0gKSA/IG51bSB8fCAwIDogdmFsO1xuXHRcdH1cblxuXHRcdHJldHVybiB2YWw7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJoZWlnaHRcIiwgXCJ3aWR0aFwiIF0sIGZ1bmN0aW9uKCBpLCBkaW1lbnNpb24gKSB7XG5cdGpRdWVyeS5jc3NIb29rc1sgZGltZW5zaW9uIF0gPSB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSwgY29tcHV0ZWQsIGV4dHJhICkge1xuXHRcdFx0aWYgKCBjb21wdXRlZCApIHtcblxuXHRcdFx0XHQvLyBDZXJ0YWluIGVsZW1lbnRzIGNhbiBoYXZlIGRpbWVuc2lvbiBpbmZvIGlmIHdlIGludmlzaWJseSBzaG93IHRoZW1cblx0XHRcdFx0Ly8gYnV0IGl0IG11c3QgaGF2ZSBhIGN1cnJlbnQgZGlzcGxheSBzdHlsZSB0aGF0IHdvdWxkIGJlbmVmaXRcblx0XHRcdFx0cmV0dXJuIHJkaXNwbGF5c3dhcC50ZXN0KCBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApICkgJiZcblxuXHRcdFx0XHRcdC8vIFN1cHBvcnQ6IFNhZmFyaSA4K1xuXHRcdFx0XHRcdC8vIFRhYmxlIGNvbHVtbnMgaW4gU2FmYXJpIGhhdmUgbm9uLXplcm8gb2Zmc2V0V2lkdGggJiB6ZXJvXG5cdFx0XHRcdFx0Ly8gZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggdW5sZXNzIGRpc3BsYXkgaXMgY2hhbmdlZC5cblx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHRcdFx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhIGRpc2Nvbm5lY3RlZCBub2RlXG5cdFx0XHRcdFx0Ly8gaW4gSUUgdGhyb3dzIGFuIGVycm9yLlxuXHRcdFx0XHRcdCggIWVsZW0uZ2V0Q2xpZW50UmVjdHMoKS5sZW5ndGggfHwgIWVsZW0uZ2V0Qm91bmRpbmdDbGllbnRSZWN0KCkud2lkdGggKSA/XG5cdFx0XHRcdFx0XHRzd2FwKCBlbGVtLCBjc3NTaG93LCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIGdldFdpZHRoT3JIZWlnaHQoIGVsZW0sIGRpbWVuc2lvbiwgZXh0cmEgKTtcblx0XHRcdFx0XHRcdH0gKSA6XG5cdFx0XHRcdFx0XHRnZXRXaWR0aE9ySGVpZ2h0KCBlbGVtLCBkaW1lbnNpb24sIGV4dHJhICk7XG5cdFx0XHR9XG5cdFx0fSxcblxuXHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlLCBleHRyYSApIHtcblx0XHRcdHZhciBtYXRjaGVzLFxuXHRcdFx0XHRzdHlsZXMgPSBnZXRTdHlsZXMoIGVsZW0gKSxcblx0XHRcdFx0aXNCb3JkZXJCb3ggPSBqUXVlcnkuY3NzKCBlbGVtLCBcImJveFNpemluZ1wiLCBmYWxzZSwgc3R5bGVzICkgPT09IFwiYm9yZGVyLWJveFwiLFxuXHRcdFx0XHRzdWJ0cmFjdCA9IGV4dHJhICYmIGJveE1vZGVsQWRqdXN0bWVudChcblx0XHRcdFx0XHRlbGVtLFxuXHRcdFx0XHRcdGRpbWVuc2lvbixcblx0XHRcdFx0XHRleHRyYSxcblx0XHRcdFx0XHRpc0JvcmRlckJveCxcblx0XHRcdFx0XHRzdHlsZXNcblx0XHRcdFx0KTtcblxuXHRcdFx0Ly8gQWNjb3VudCBmb3IgdW5yZWxpYWJsZSBib3JkZXItYm94IGRpbWVuc2lvbnMgYnkgY29tcGFyaW5nIG9mZnNldCogdG8gY29tcHV0ZWQgYW5kXG5cdFx0XHQvLyBmYWtpbmcgYSBjb250ZW50LWJveCB0byBnZXQgYm9yZGVyIGFuZCBwYWRkaW5nIChnaC0zNjk5KVxuXHRcdFx0aWYgKCBpc0JvcmRlckJveCAmJiBzdXBwb3J0LnNjcm9sbGJveFNpemUoKSA9PT0gc3R5bGVzLnBvc2l0aW9uICkge1xuXHRcdFx0XHRzdWJ0cmFjdCAtPSBNYXRoLmNlaWwoXG5cdFx0XHRcdFx0ZWxlbVsgXCJvZmZzZXRcIiArIGRpbWVuc2lvblsgMCBdLnRvVXBwZXJDYXNlKCkgKyBkaW1lbnNpb24uc2xpY2UoIDEgKSBdIC1cblx0XHRcdFx0XHRwYXJzZUZsb2F0KCBzdHlsZXNbIGRpbWVuc2lvbiBdICkgLVxuXHRcdFx0XHRcdGJveE1vZGVsQWRqdXN0bWVudCggZWxlbSwgZGltZW5zaW9uLCBcImJvcmRlclwiLCBmYWxzZSwgc3R5bGVzICkgLVxuXHRcdFx0XHRcdDAuNVxuXHRcdFx0XHQpO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDb252ZXJ0IHRvIHBpeGVscyBpZiB2YWx1ZSBhZGp1c3RtZW50IGlzIG5lZWRlZFxuXHRcdFx0aWYgKCBzdWJ0cmFjdCAmJiAoIG1hdGNoZXMgPSByY3NzTnVtLmV4ZWMoIHZhbHVlICkgKSAmJlxuXHRcdFx0XHQoIG1hdGNoZXNbIDMgXSB8fCBcInB4XCIgKSAhPT0gXCJweFwiICkge1xuXG5cdFx0XHRcdGVsZW0uc3R5bGVbIGRpbWVuc2lvbiBdID0gdmFsdWU7XG5cdFx0XHRcdHZhbHVlID0galF1ZXJ5LmNzcyggZWxlbSwgZGltZW5zaW9uICk7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBzZXRQb3NpdGl2ZU51bWJlciggZWxlbSwgdmFsdWUsIHN1YnRyYWN0ICk7XG5cdFx0fVxuXHR9O1xufSApO1xuXG5qUXVlcnkuY3NzSG9va3MubWFyZ2luTGVmdCA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5yZWxpYWJsZU1hcmdpbkxlZnQsXG5cdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRpZiAoIGNvbXB1dGVkICkge1xuXHRcdFx0cmV0dXJuICggcGFyc2VGbG9hdCggY3VyQ1NTKCBlbGVtLCBcIm1hcmdpbkxlZnRcIiApICkgfHxcblx0XHRcdFx0ZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0IC1cblx0XHRcdFx0XHRzd2FwKCBlbGVtLCB7IG1hcmdpbkxlZnQ6IDAgfSwgZnVuY3Rpb24oKSB7XG5cdFx0XHRcdFx0XHRyZXR1cm4gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKS5sZWZ0O1xuXHRcdFx0XHRcdH0gKVxuXHRcdFx0XHQpICsgXCJweFwiO1xuXHRcdH1cblx0fVxuKTtcblxuLy8gVGhlc2UgaG9va3MgYXJlIHVzZWQgYnkgYW5pbWF0ZSB0byBleHBhbmQgcHJvcGVydGllc1xualF1ZXJ5LmVhY2goIHtcblx0bWFyZ2luOiBcIlwiLFxuXHRwYWRkaW5nOiBcIlwiLFxuXHRib3JkZXI6IFwiV2lkdGhcIlxufSwgZnVuY3Rpb24oIHByZWZpeCwgc3VmZml4ICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByZWZpeCArIHN1ZmZpeCBdID0ge1xuXHRcdGV4cGFuZDogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdFx0dmFyIGkgPSAwLFxuXHRcdFx0XHRleHBhbmRlZCA9IHt9LFxuXG5cdFx0XHRcdC8vIEFzc3VtZXMgYSBzaW5nbGUgbnVtYmVyIGlmIG5vdCBhIHN0cmluZ1xuXHRcdFx0XHRwYXJ0cyA9IHR5cGVvZiB2YWx1ZSA9PT0gXCJzdHJpbmdcIiA/IHZhbHVlLnNwbGl0KCBcIiBcIiApIDogWyB2YWx1ZSBdO1xuXG5cdFx0XHRmb3IgKCA7IGkgPCA0OyBpKysgKSB7XG5cdFx0XHRcdGV4cGFuZGVkWyBwcmVmaXggKyBjc3NFeHBhbmRbIGkgXSArIHN1ZmZpeCBdID1cblx0XHRcdFx0XHRwYXJ0c1sgaSBdIHx8IHBhcnRzWyBpIC0gMiBdIHx8IHBhcnRzWyAwIF07XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBleHBhbmRlZDtcblx0XHR9XG5cdH07XG5cblx0aWYgKCBwcmVmaXggIT09IFwibWFyZ2luXCIgKSB7XG5cdFx0alF1ZXJ5LmNzc0hvb2tzWyBwcmVmaXggKyBzdWZmaXggXS5zZXQgPSBzZXRQb3NpdGl2ZU51bWJlcjtcblx0fVxufSApO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGNzczogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHRcdHZhciBzdHlsZXMsIGxlbixcblx0XHRcdFx0bWFwID0ge30sXG5cdFx0XHRcdGkgPSAwO1xuXG5cdFx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIG5hbWUgKSApIHtcblx0XHRcdFx0c3R5bGVzID0gZ2V0U3R5bGVzKCBlbGVtICk7XG5cdFx0XHRcdGxlbiA9IG5hbWUubGVuZ3RoO1xuXG5cdFx0XHRcdGZvciAoIDsgaSA8IGxlbjsgaSsrICkge1xuXHRcdFx0XHRcdG1hcFsgbmFtZVsgaSBdIF0gPSBqUXVlcnkuY3NzKCBlbGVtLCBuYW1lWyBpIF0sIGZhbHNlLCBzdHlsZXMgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBtYXA7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiB2YWx1ZSAhPT0gdW5kZWZpbmVkID9cblx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBuYW1lLCB2YWx1ZSApIDpcblx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgbmFtZSApO1xuXHRcdH0sIG5hbWUsIHZhbHVlLCBhcmd1bWVudHMubGVuZ3RoID4gMSApO1xuXHR9XG59ICk7XG5cblxuZnVuY3Rpb24gVHdlZW4oIGVsZW0sIG9wdGlvbnMsIHByb3AsIGVuZCwgZWFzaW5nICkge1xuXHRyZXR1cm4gbmV3IFR3ZWVuLnByb3RvdHlwZS5pbml0KCBlbGVtLCBvcHRpb25zLCBwcm9wLCBlbmQsIGVhc2luZyApO1xufVxualF1ZXJ5LlR3ZWVuID0gVHdlZW47XG5cblR3ZWVuLnByb3RvdHlwZSA9IHtcblx0Y29uc3RydWN0b3I6IFR3ZWVuLFxuXHRpbml0OiBmdW5jdGlvbiggZWxlbSwgb3B0aW9ucywgcHJvcCwgZW5kLCBlYXNpbmcsIHVuaXQgKSB7XG5cdFx0dGhpcy5lbGVtID0gZWxlbTtcblx0XHR0aGlzLnByb3AgPSBwcm9wO1xuXHRcdHRoaXMuZWFzaW5nID0gZWFzaW5nIHx8IGpRdWVyeS5lYXNpbmcuX2RlZmF1bHQ7XG5cdFx0dGhpcy5vcHRpb25zID0gb3B0aW9ucztcblx0XHR0aGlzLnN0YXJ0ID0gdGhpcy5ub3cgPSB0aGlzLmN1cigpO1xuXHRcdHRoaXMuZW5kID0gZW5kO1xuXHRcdHRoaXMudW5pdCA9IHVuaXQgfHwgKCBqUXVlcnkuY3NzTnVtYmVyWyBwcm9wIF0gPyBcIlwiIDogXCJweFwiICk7XG5cdH0sXG5cdGN1cjogZnVuY3Rpb24oKSB7XG5cdFx0dmFyIGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdHJldHVybiBob29rcyAmJiBob29rcy5nZXQgP1xuXHRcdFx0aG9va3MuZ2V0KCB0aGlzICkgOlxuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LmdldCggdGhpcyApO1xuXHR9LFxuXHRydW46IGZ1bmN0aW9uKCBwZXJjZW50ICkge1xuXHRcdHZhciBlYXNlZCxcblx0XHRcdGhvb2tzID0gVHdlZW4ucHJvcEhvb2tzWyB0aGlzLnByb3AgXTtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLmR1cmF0aW9uICkge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IGpRdWVyeS5lYXNpbmdbIHRoaXMuZWFzaW5nIF0oXG5cdFx0XHRcdHBlcmNlbnQsIHRoaXMub3B0aW9ucy5kdXJhdGlvbiAqIHBlcmNlbnQsIDAsIDEsIHRoaXMub3B0aW9ucy5kdXJhdGlvblxuXHRcdFx0KTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0dGhpcy5wb3MgPSBlYXNlZCA9IHBlcmNlbnQ7XG5cdFx0fVxuXHRcdHRoaXMubm93ID0gKCB0aGlzLmVuZCAtIHRoaXMuc3RhcnQgKSAqIGVhc2VkICsgdGhpcy5zdGFydDtcblxuXHRcdGlmICggdGhpcy5vcHRpb25zLnN0ZXAgKSB7XG5cdFx0XHR0aGlzLm9wdGlvbnMuc3RlcC5jYWxsKCB0aGlzLmVsZW0sIHRoaXMubm93LCB0aGlzICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBob29rcy5zZXQgKSB7XG5cdFx0XHRob29rcy5zZXQoIHRoaXMgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0VHdlZW4ucHJvcEhvb2tzLl9kZWZhdWx0LnNldCggdGhpcyApO1xuXHRcdH1cblx0XHRyZXR1cm4gdGhpcztcblx0fVxufTtcblxuVHdlZW4ucHJvdG90eXBlLmluaXQucHJvdG90eXBlID0gVHdlZW4ucHJvdG90eXBlO1xuXG5Ud2Vlbi5wcm9wSG9va3MgPSB7XG5cdF9kZWZhdWx0OiB7XG5cdFx0Z2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0XHR2YXIgcmVzdWx0O1xuXG5cdFx0XHQvLyBVc2UgYSBwcm9wZXJ0eSBvbiB0aGUgZWxlbWVudCBkaXJlY3RseSB3aGVuIGl0IGlzIG5vdCBhIERPTSBlbGVtZW50LFxuXHRcdFx0Ly8gb3Igd2hlbiB0aGVyZSBpcyBubyBtYXRjaGluZyBzdHlsZSBwcm9wZXJ0eSB0aGF0IGV4aXN0cy5cblx0XHRcdGlmICggdHdlZW4uZWxlbS5ub2RlVHlwZSAhPT0gMSB8fFxuXHRcdFx0XHR0d2Vlbi5lbGVtWyB0d2Vlbi5wcm9wIF0gIT0gbnVsbCAmJiB0d2Vlbi5lbGVtLnN0eWxlWyB0d2Vlbi5wcm9wIF0gPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gUGFzc2luZyBhbiBlbXB0eSBzdHJpbmcgYXMgYSAzcmQgcGFyYW1ldGVyIHRvIC5jc3Mgd2lsbCBhdXRvbWF0aWNhbGx5XG5cdFx0XHQvLyBhdHRlbXB0IGEgcGFyc2VGbG9hdCBhbmQgZmFsbGJhY2sgdG8gYSBzdHJpbmcgaWYgdGhlIHBhcnNlIGZhaWxzLlxuXHRcdFx0Ly8gU2ltcGxlIHZhbHVlcyBzdWNoIGFzIFwiMTBweFwiIGFyZSBwYXJzZWQgdG8gRmxvYXQ7XG5cdFx0XHQvLyBjb21wbGV4IHZhbHVlcyBzdWNoIGFzIFwicm90YXRlKDFyYWQpXCIgYXJlIHJldHVybmVkIGFzLWlzLlxuXHRcdFx0cmVzdWx0ID0galF1ZXJ5LmNzcyggdHdlZW4uZWxlbSwgdHdlZW4ucHJvcCwgXCJcIiApO1xuXG5cdFx0XHQvLyBFbXB0eSBzdHJpbmdzLCBudWxsLCB1bmRlZmluZWQgYW5kIFwiYXV0b1wiIGFyZSBjb252ZXJ0ZWQgdG8gMC5cblx0XHRcdHJldHVybiAhcmVzdWx0IHx8IHJlc3VsdCA9PT0gXCJhdXRvXCIgPyAwIDogcmVzdWx0O1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cblx0XHRcdC8vIFVzZSBzdGVwIGhvb2sgZm9yIGJhY2sgY29tcGF0LlxuXHRcdFx0Ly8gVXNlIGNzc0hvb2sgaWYgaXRzIHRoZXJlLlxuXHRcdFx0Ly8gVXNlIC5zdHlsZSBpZiBhdmFpbGFibGUgYW5kIHVzZSBwbGFpbiBwcm9wZXJ0aWVzIHdoZXJlIGF2YWlsYWJsZS5cblx0XHRcdGlmICggalF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSApIHtcblx0XHRcdFx0alF1ZXJ5LmZ4LnN0ZXBbIHR3ZWVuLnByb3AgXSggdHdlZW4gKTtcblx0XHRcdH0gZWxzZSBpZiAoIHR3ZWVuLmVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCB0d2Vlbi5lbGVtLnN0eWxlWyBqUXVlcnkuY3NzUHJvcHNbIHR3ZWVuLnByb3AgXSBdICE9IG51bGwgfHxcblx0XHRcdFx0XHRqUXVlcnkuY3NzSG9va3NbIHR3ZWVuLnByb3AgXSApICkge1xuXHRcdFx0XHRqUXVlcnkuc3R5bGUoIHR3ZWVuLmVsZW0sIHR3ZWVuLnByb3AsIHR3ZWVuLm5vdyArIHR3ZWVuLnVuaXQgKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn07XG5cbi8vIFN1cHBvcnQ6IElFIDw9OSBvbmx5XG4vLyBQYW5pYyBiYXNlZCBhcHByb2FjaCB0byBzZXR0aW5nIHRoaW5ncyBvbiBkaXNjb25uZWN0ZWQgbm9kZXNcblR3ZWVuLnByb3BIb29rcy5zY3JvbGxUb3AgPSBUd2Vlbi5wcm9wSG9va3Muc2Nyb2xsTGVmdCA9IHtcblx0c2V0OiBmdW5jdGlvbiggdHdlZW4gKSB7XG5cdFx0aWYgKCB0d2Vlbi5lbGVtLm5vZGVUeXBlICYmIHR3ZWVuLmVsZW0ucGFyZW50Tm9kZSApIHtcblx0XHRcdHR3ZWVuLmVsZW1bIHR3ZWVuLnByb3AgXSA9IHR3ZWVuLm5vdztcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5lYXNpbmcgPSB7XG5cdGxpbmVhcjogZnVuY3Rpb24oIHAgKSB7XG5cdFx0cmV0dXJuIHA7XG5cdH0sXG5cdHN3aW5nOiBmdW5jdGlvbiggcCApIHtcblx0XHRyZXR1cm4gMC41IC0gTWF0aC5jb3MoIHAgKiBNYXRoLlBJICkgLyAyO1xuXHR9LFxuXHRfZGVmYXVsdDogXCJzd2luZ1wiXG59O1xuXG5qUXVlcnkuZnggPSBUd2Vlbi5wcm90b3R5cGUuaW5pdDtcblxuLy8gQmFjayBjb21wYXQgPDEuOCBleHRlbnNpb24gcG9pbnRcbmpRdWVyeS5meC5zdGVwID0ge307XG5cblxuXG5cbnZhclxuXHRmeE5vdywgaW5Qcm9ncmVzcyxcblx0cmZ4dHlwZXMgPSAvXig/OnRvZ2dsZXxzaG93fGhpZGUpJC8sXG5cdHJydW4gPSAvcXVldWVIb29rcyQvO1xuXG5mdW5jdGlvbiBzY2hlZHVsZSgpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdGlmICggZG9jdW1lbnQuaGlkZGVuID09PSBmYWxzZSAmJiB3aW5kb3cucmVxdWVzdEFuaW1hdGlvbkZyYW1lICkge1xuXHRcdFx0d2luZG93LnJlcXVlc3RBbmltYXRpb25GcmFtZSggc2NoZWR1bGUgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0d2luZG93LnNldFRpbWVvdXQoIHNjaGVkdWxlLCBqUXVlcnkuZnguaW50ZXJ2YWwgKTtcblx0XHR9XG5cblx0XHRqUXVlcnkuZngudGljaygpO1xuXHR9XG59XG5cbi8vIEFuaW1hdGlvbnMgY3JlYXRlZCBzeW5jaHJvbm91c2x5IHdpbGwgcnVuIHN5bmNocm9ub3VzbHlcbmZ1bmN0aW9uIGNyZWF0ZUZ4Tm93KCkge1xuXHR3aW5kb3cuc2V0VGltZW91dCggZnVuY3Rpb24oKSB7XG5cdFx0ZnhOb3cgPSB1bmRlZmluZWQ7XG5cdH0gKTtcblx0cmV0dXJuICggZnhOb3cgPSBEYXRlLm5vdygpICk7XG59XG5cbi8vIEdlbmVyYXRlIHBhcmFtZXRlcnMgdG8gY3JlYXRlIGEgc3RhbmRhcmQgYW5pbWF0aW9uXG5mdW5jdGlvbiBnZW5GeCggdHlwZSwgaW5jbHVkZVdpZHRoICkge1xuXHR2YXIgd2hpY2gsXG5cdFx0aSA9IDAsXG5cdFx0YXR0cnMgPSB7IGhlaWdodDogdHlwZSB9O1xuXG5cdC8vIElmIHdlIGluY2x1ZGUgd2lkdGgsIHN0ZXAgdmFsdWUgaXMgMSB0byBkbyBhbGwgY3NzRXhwYW5kIHZhbHVlcyxcblx0Ly8gb3RoZXJ3aXNlIHN0ZXAgdmFsdWUgaXMgMiB0byBza2lwIG92ZXIgTGVmdCBhbmQgUmlnaHRcblx0aW5jbHVkZVdpZHRoID0gaW5jbHVkZVdpZHRoID8gMSA6IDA7XG5cdGZvciAoIDsgaSA8IDQ7IGkgKz0gMiAtIGluY2x1ZGVXaWR0aCApIHtcblx0XHR3aGljaCA9IGNzc0V4cGFuZFsgaSBdO1xuXHRcdGF0dHJzWyBcIm1hcmdpblwiICsgd2hpY2ggXSA9IGF0dHJzWyBcInBhZGRpbmdcIiArIHdoaWNoIF0gPSB0eXBlO1xuXHR9XG5cblx0aWYgKCBpbmNsdWRlV2lkdGggKSB7XG5cdFx0YXR0cnMub3BhY2l0eSA9IGF0dHJzLndpZHRoID0gdHlwZTtcblx0fVxuXG5cdHJldHVybiBhdHRycztcbn1cblxuZnVuY3Rpb24gY3JlYXRlVHdlZW4oIHZhbHVlLCBwcm9wLCBhbmltYXRpb24gKSB7XG5cdHZhciB0d2Vlbixcblx0XHRjb2xsZWN0aW9uID0gKCBBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSB8fCBbXSApLmNvbmNhdCggQW5pbWF0aW9uLnR3ZWVuZXJzWyBcIipcIiBdICksXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IGNvbGxlY3Rpb24ubGVuZ3RoO1xuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdGlmICggKCB0d2VlbiA9IGNvbGxlY3Rpb25bIGluZGV4IF0uY2FsbCggYW5pbWF0aW9uLCBwcm9wLCB2YWx1ZSApICkgKSB7XG5cblx0XHRcdC8vIFdlJ3JlIGRvbmUgd2l0aCB0aGlzIHByb3BlcnR5XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fVxuXHR9XG59XG5cbmZ1bmN0aW9uIGRlZmF1bHRQcmVmaWx0ZXIoIGVsZW0sIHByb3BzLCBvcHRzICkge1xuXHR2YXIgcHJvcCwgdmFsdWUsIHRvZ2dsZSwgaG9va3MsIG9sZGZpcmUsIHByb3BUd2VlbiwgcmVzdG9yZURpc3BsYXksIGRpc3BsYXksXG5cdFx0aXNCb3ggPSBcIndpZHRoXCIgaW4gcHJvcHMgfHwgXCJoZWlnaHRcIiBpbiBwcm9wcyxcblx0XHRhbmltID0gdGhpcyxcblx0XHRvcmlnID0ge30sXG5cdFx0c3R5bGUgPSBlbGVtLnN0eWxlLFxuXHRcdGhpZGRlbiA9IGVsZW0ubm9kZVR5cGUgJiYgaXNIaWRkZW5XaXRoaW5UcmVlKCBlbGVtICksXG5cdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZnhzaG93XCIgKTtcblxuXHQvLyBRdWV1ZS1za2lwcGluZyBhbmltYXRpb25zIGhpamFjayB0aGUgZnggaG9va3Ncblx0aWYgKCAhb3B0cy5xdWV1ZSApIHtcblx0XHRob29rcyA9IGpRdWVyeS5fcXVldWVIb29rcyggZWxlbSwgXCJmeFwiICk7XG5cdFx0aWYgKCBob29rcy51bnF1ZXVlZCA9PSBudWxsICkge1xuXHRcdFx0aG9va3MudW5xdWV1ZWQgPSAwO1xuXHRcdFx0b2xkZmlyZSA9IGhvb2tzLmVtcHR5LmZpcmU7XG5cdFx0XHRob29rcy5lbXB0eS5maXJlID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggIWhvb2tzLnVucXVldWVkICkge1xuXHRcdFx0XHRcdG9sZGZpcmUoKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHR9XG5cdFx0aG9va3MudW5xdWV1ZWQrKztcblxuXHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0Ly8gRW5zdXJlIHRoZSBjb21wbGV0ZSBoYW5kbGVyIGlzIGNhbGxlZCBiZWZvcmUgdGhpcyBjb21wbGV0ZXNcblx0XHRcdGFuaW0uYWx3YXlzKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0aG9va3MudW5xdWV1ZWQtLTtcblx0XHRcdFx0aWYgKCAhalF1ZXJ5LnF1ZXVlKCBlbGVtLCBcImZ4XCIgKS5sZW5ndGggKSB7XG5cdFx0XHRcdFx0aG9va3MuZW1wdHkuZmlyZSgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9ICk7XG5cdFx0fSApO1xuXHR9XG5cblx0Ly8gRGV0ZWN0IHNob3cvaGlkZSBhbmltYXRpb25zXG5cdGZvciAoIHByb3AgaW4gcHJvcHMgKSB7XG5cdFx0dmFsdWUgPSBwcm9wc1sgcHJvcCBdO1xuXHRcdGlmICggcmZ4dHlwZXMudGVzdCggdmFsdWUgKSApIHtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgcHJvcCBdO1xuXHRcdFx0dG9nZ2xlID0gdG9nZ2xlIHx8IHZhbHVlID09PSBcInRvZ2dsZVwiO1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gKCBoaWRkZW4gPyBcImhpZGVcIiA6IFwic2hvd1wiICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJldGVuZCB0byBiZSBoaWRkZW4gaWYgdGhpcyBpcyBhIFwic2hvd1wiIGFuZFxuXHRcdFx0XHQvLyB0aGVyZSBpcyBzdGlsbCBkYXRhIGZyb20gYSBzdG9wcGVkIHNob3cvaGlkZVxuXHRcdFx0XHRpZiAoIHZhbHVlID09PSBcInNob3dcIiAmJiBkYXRhU2hvdyAmJiBkYXRhU2hvd1sgcHJvcCBdICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdFx0aGlkZGVuID0gdHJ1ZTtcblxuXHRcdFx0XHQvLyBJZ25vcmUgYWxsIG90aGVyIG5vLW9wIHNob3cvaGlkZSBkYXRhXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0Y29udGludWU7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHRcdG9yaWdbIHByb3AgXSA9IGRhdGFTaG93ICYmIGRhdGFTaG93WyBwcm9wIF0gfHwgalF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wICk7XG5cdFx0fVxuXHR9XG5cblx0Ly8gQmFpbCBvdXQgaWYgdGhpcyBpcyBhIG5vLW9wIGxpa2UgLmhpZGUoKS5oaWRlKClcblx0cHJvcFR3ZWVuID0gIWpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wcyApO1xuXHRpZiAoICFwcm9wVHdlZW4gJiYgalF1ZXJ5LmlzRW1wdHlPYmplY3QoIG9yaWcgKSApIHtcblx0XHRyZXR1cm47XG5cdH1cblxuXHQvLyBSZXN0cmljdCBcIm92ZXJmbG93XCIgYW5kIFwiZGlzcGxheVwiIHN0eWxlcyBkdXJpbmcgYm94IGFuaW1hdGlvbnNcblx0aWYgKCBpc0JveCAmJiBlbGVtLm5vZGVUeXBlID09PSAxICkge1xuXG5cdFx0Ly8gU3VwcG9ydDogSUUgPD05IC0gMTEsIEVkZ2UgMTIgLSAxNVxuXHRcdC8vIFJlY29yZCBhbGwgMyBvdmVyZmxvdyBhdHRyaWJ1dGVzIGJlY2F1c2UgSUUgZG9lcyBub3QgaW5mZXIgdGhlIHNob3J0aGFuZFxuXHRcdC8vIGZyb20gaWRlbnRpY2FsbHktdmFsdWVkIG92ZXJmbG93WCBhbmQgb3ZlcmZsb3dZIGFuZCBFZGdlIGp1c3QgbWlycm9yc1xuXHRcdC8vIHRoZSBvdmVyZmxvd1ggdmFsdWUgdGhlcmUuXG5cdFx0b3B0cy5vdmVyZmxvdyA9IFsgc3R5bGUub3ZlcmZsb3csIHN0eWxlLm92ZXJmbG93WCwgc3R5bGUub3ZlcmZsb3dZIF07XG5cblx0XHQvLyBJZGVudGlmeSBhIGRpc3BsYXkgdHlwZSwgcHJlZmVycmluZyBvbGQgc2hvdy9oaWRlIGRhdGEgb3ZlciB0aGUgQ1NTIGNhc2NhZGVcblx0XHRyZXN0b3JlRGlzcGxheSA9IGRhdGFTaG93ICYmIGRhdGFTaG93LmRpc3BsYXk7XG5cdFx0aWYgKCByZXN0b3JlRGlzcGxheSA9PSBudWxsICkge1xuXHRcdFx0cmVzdG9yZURpc3BsYXkgPSBkYXRhUHJpdi5nZXQoIGVsZW0sIFwiZGlzcGxheVwiICk7XG5cdFx0fVxuXHRcdGRpc3BsYXkgPSBqUXVlcnkuY3NzKCBlbGVtLCBcImRpc3BsYXlcIiApO1xuXHRcdGlmICggZGlzcGxheSA9PT0gXCJub25lXCIgKSB7XG5cdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ICkge1xuXHRcdFx0XHRkaXNwbGF5ID0gcmVzdG9yZURpc3BsYXk7XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEdldCBub25lbXB0eSB2YWx1ZShzKSBieSB0ZW1wb3JhcmlseSBmb3JjaW5nIHZpc2liaWxpdHlcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdLCB0cnVlICk7XG5cdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZWxlbS5zdHlsZS5kaXNwbGF5IHx8IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRkaXNwbGF5ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJkaXNwbGF5XCIgKTtcblx0XHRcdFx0c2hvd0hpZGUoIFsgZWxlbSBdICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gQW5pbWF0ZSBpbmxpbmUgZWxlbWVudHMgYXMgaW5saW5lLWJsb2NrXG5cdFx0aWYgKCBkaXNwbGF5ID09PSBcImlubGluZVwiIHx8IGRpc3BsYXkgPT09IFwiaW5saW5lLWJsb2NrXCIgJiYgcmVzdG9yZURpc3BsYXkgIT0gbnVsbCApIHtcblx0XHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJmbG9hdFwiICkgPT09IFwibm9uZVwiICkge1xuXG5cdFx0XHRcdC8vIFJlc3RvcmUgdGhlIG9yaWdpbmFsIGRpc3BsYXkgdmFsdWUgYXQgdGhlIGVuZCBvZiBwdXJlIHNob3cvaGlkZSBhbmltYXRpb25zXG5cdFx0XHRcdGlmICggIXByb3BUd2VlbiApIHtcblx0XHRcdFx0XHRhbmltLmRvbmUoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IHJlc3RvcmVEaXNwbGF5O1xuXHRcdFx0XHRcdH0gKTtcblx0XHRcdFx0XHRpZiAoIHJlc3RvcmVEaXNwbGF5ID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRkaXNwbGF5ID0gc3R5bGUuZGlzcGxheTtcblx0XHRcdFx0XHRcdHJlc3RvcmVEaXNwbGF5ID0gZGlzcGxheSA9PT0gXCJub25lXCIgPyBcIlwiIDogZGlzcGxheTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdFx0c3R5bGUuZGlzcGxheSA9IFwiaW5saW5lLWJsb2NrXCI7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0aWYgKCBvcHRzLm92ZXJmbG93ICkge1xuXHRcdHN0eWxlLm92ZXJmbG93ID0gXCJoaWRkZW5cIjtcblx0XHRhbmltLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cdFx0XHRzdHlsZS5vdmVyZmxvdyA9IG9wdHMub3ZlcmZsb3dbIDAgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WCA9IG9wdHMub3ZlcmZsb3dbIDEgXTtcblx0XHRcdHN0eWxlLm92ZXJmbG93WSA9IG9wdHMub3ZlcmZsb3dbIDIgXTtcblx0XHR9ICk7XG5cdH1cblxuXHQvLyBJbXBsZW1lbnQgc2hvdy9oaWRlIGFuaW1hdGlvbnNcblx0cHJvcFR3ZWVuID0gZmFsc2U7XG5cdGZvciAoIHByb3AgaW4gb3JpZyApIHtcblxuXHRcdC8vIEdlbmVyYWwgc2hvdy9oaWRlIHNldHVwIGZvciB0aGlzIGVsZW1lbnQgYW5pbWF0aW9uXG5cdFx0aWYgKCAhcHJvcFR3ZWVuICkge1xuXHRcdFx0aWYgKCBkYXRhU2hvdyApIHtcblx0XHRcdFx0aWYgKCBcImhpZGRlblwiIGluIGRhdGFTaG93ICkge1xuXHRcdFx0XHRcdGhpZGRlbiA9IGRhdGFTaG93LmhpZGRlbjtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0ZGF0YVNob3cgPSBkYXRhUHJpdi5hY2Nlc3MoIGVsZW0sIFwiZnhzaG93XCIsIHsgZGlzcGxheTogcmVzdG9yZURpc3BsYXkgfSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdG9yZSBoaWRkZW4vdmlzaWJsZSBmb3IgdG9nZ2xlIHNvIGAuc3RvcCgpLnRvZ2dsZSgpYCBcInJldmVyc2VzXCJcblx0XHRcdGlmICggdG9nZ2xlICkge1xuXHRcdFx0XHRkYXRhU2hvdy5oaWRkZW4gPSAhaGlkZGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTaG93IGVsZW1lbnRzIGJlZm9yZSBhbmltYXRpbmcgdGhlbVxuXHRcdFx0aWYgKCBoaWRkZW4gKSB7XG5cdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSwgdHJ1ZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0YW5pbS5kb25lKCBmdW5jdGlvbigpIHtcblxuXHRcdFx0LyogZXNsaW50LWVuYWJsZSBuby1sb29wLWZ1bmMgKi9cblxuXHRcdFx0XHQvLyBUaGUgZmluYWwgc3RlcCBvZiBhIFwiaGlkZVwiIGFuaW1hdGlvbiBpcyBhY3R1YWxseSBoaWRpbmcgdGhlIGVsZW1lbnRcblx0XHRcdFx0aWYgKCAhaGlkZGVuICkge1xuXHRcdFx0XHRcdHNob3dIaWRlKCBbIGVsZW0gXSApO1xuXHRcdFx0XHR9XG5cdFx0XHRcdGRhdGFQcml2LnJlbW92ZSggZWxlbSwgXCJmeHNob3dcIiApO1xuXHRcdFx0XHRmb3IgKCBwcm9wIGluIG9yaWcgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCBwcm9wLCBvcmlnWyBwcm9wIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdC8vIFBlci1wcm9wZXJ0eSBzZXR1cFxuXHRcdHByb3BUd2VlbiA9IGNyZWF0ZVR3ZWVuKCBoaWRkZW4gPyBkYXRhU2hvd1sgcHJvcCBdIDogMCwgcHJvcCwgYW5pbSApO1xuXHRcdGlmICggISggcHJvcCBpbiBkYXRhU2hvdyApICkge1xuXHRcdFx0ZGF0YVNob3dbIHByb3AgXSA9IHByb3BUd2Vlbi5zdGFydDtcblx0XHRcdGlmICggaGlkZGVuICkge1xuXHRcdFx0XHRwcm9wVHdlZW4uZW5kID0gcHJvcFR3ZWVuLnN0YXJ0O1xuXHRcdFx0XHRwcm9wVHdlZW4uc3RhcnQgPSAwO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufVxuXG5mdW5jdGlvbiBwcm9wRmlsdGVyKCBwcm9wcywgc3BlY2lhbEVhc2luZyApIHtcblx0dmFyIGluZGV4LCBuYW1lLCBlYXNpbmcsIHZhbHVlLCBob29rcztcblxuXHQvLyBjYW1lbENhc2UsIHNwZWNpYWxFYXNpbmcgYW5kIGV4cGFuZCBjc3NIb29rIHBhc3Ncblx0Zm9yICggaW5kZXggaW4gcHJvcHMgKSB7XG5cdFx0bmFtZSA9IGNhbWVsQ2FzZSggaW5kZXggKTtcblx0XHRlYXNpbmcgPSBzcGVjaWFsRWFzaW5nWyBuYW1lIF07XG5cdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXTtcblx0XHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0XHRlYXNpbmcgPSB2YWx1ZVsgMSBdO1xuXHRcdFx0dmFsdWUgPSBwcm9wc1sgaW5kZXggXSA9IHZhbHVlWyAwIF07XG5cdFx0fVxuXG5cdFx0aWYgKCBpbmRleCAhPT0gbmFtZSApIHtcblx0XHRcdHByb3BzWyBuYW1lIF0gPSB2YWx1ZTtcblx0XHRcdGRlbGV0ZSBwcm9wc1sgaW5kZXggXTtcblx0XHR9XG5cblx0XHRob29rcyA9IGpRdWVyeS5jc3NIb29rc1sgbmFtZSBdO1xuXHRcdGlmICggaG9va3MgJiYgXCJleHBhbmRcIiBpbiBob29rcyApIHtcblx0XHRcdHZhbHVlID0gaG9va3MuZXhwYW5kKCB2YWx1ZSApO1xuXHRcdFx0ZGVsZXRlIHByb3BzWyBuYW1lIF07XG5cblx0XHRcdC8vIE5vdCBxdWl0ZSAkLmV4dGVuZCwgdGhpcyB3b24ndCBvdmVyd3JpdGUgZXhpc3Rpbmcga2V5cy5cblx0XHRcdC8vIFJldXNpbmcgJ2luZGV4JyBiZWNhdXNlIHdlIGhhdmUgdGhlIGNvcnJlY3QgXCJuYW1lXCJcblx0XHRcdGZvciAoIGluZGV4IGluIHZhbHVlICkge1xuXHRcdFx0XHRpZiAoICEoIGluZGV4IGluIHByb3BzICkgKSB7XG5cdFx0XHRcdFx0cHJvcHNbIGluZGV4IF0gPSB2YWx1ZVsgaW5kZXggXTtcblx0XHRcdFx0XHRzcGVjaWFsRWFzaW5nWyBpbmRleCBdID0gZWFzaW5nO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fSBlbHNlIHtcblx0XHRcdHNwZWNpYWxFYXNpbmdbIG5hbWUgXSA9IGVhc2luZztcblx0XHR9XG5cdH1cbn1cblxuZnVuY3Rpb24gQW5pbWF0aW9uKCBlbGVtLCBwcm9wZXJ0aWVzLCBvcHRpb25zICkge1xuXHR2YXIgcmVzdWx0LFxuXHRcdHN0b3BwZWQsXG5cdFx0aW5kZXggPSAwLFxuXHRcdGxlbmd0aCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzLmxlbmd0aCxcblx0XHRkZWZlcnJlZCA9IGpRdWVyeS5EZWZlcnJlZCgpLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIERvbid0IG1hdGNoIGVsZW0gaW4gdGhlIDphbmltYXRlZCBzZWxlY3RvclxuXHRcdFx0ZGVsZXRlIHRpY2suZWxlbTtcblx0XHR9ICksXG5cdFx0dGljayA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0aWYgKCBzdG9wcGVkICkge1xuXHRcdFx0XHRyZXR1cm4gZmFsc2U7XG5cdFx0XHR9XG5cdFx0XHR2YXIgY3VycmVudFRpbWUgPSBmeE5vdyB8fCBjcmVhdGVGeE5vdygpLFxuXHRcdFx0XHRyZW1haW5pbmcgPSBNYXRoLm1heCggMCwgYW5pbWF0aW9uLnN0YXJ0VGltZSArIGFuaW1hdGlvbi5kdXJhdGlvbiAtIGN1cnJlbnRUaW1lICksXG5cblx0XHRcdFx0Ly8gU3VwcG9ydDogQW5kcm9pZCAyLjMgb25seVxuXHRcdFx0XHQvLyBBcmNoYWljIGNyYXNoIGJ1ZyB3b24ndCBhbGxvdyB1cyB0byB1c2UgYDEgLSAoIDAuNSB8fCAwIClgICgjMTI0OTcpXG5cdFx0XHRcdHRlbXAgPSByZW1haW5pbmcgLyBhbmltYXRpb24uZHVyYXRpb24gfHwgMCxcblx0XHRcdFx0cGVyY2VudCA9IDEgLSB0ZW1wLFxuXHRcdFx0XHRpbmRleCA9IDAsXG5cdFx0XHRcdGxlbmd0aCA9IGFuaW1hdGlvbi50d2VlbnMubGVuZ3RoO1xuXG5cdFx0XHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggcGVyY2VudCApO1xuXHRcdFx0fVxuXG5cdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgcGVyY2VudCwgcmVtYWluaW5nIF0gKTtcblxuXHRcdFx0Ly8gSWYgdGhlcmUncyBtb3JlIHRvIGRvLCB5aWVsZFxuXHRcdFx0aWYgKCBwZXJjZW50IDwgMSAmJiBsZW5ndGggKSB7XG5cdFx0XHRcdHJldHVybiByZW1haW5pbmc7XG5cdFx0XHR9XG5cblx0XHRcdC8vIElmIHRoaXMgd2FzIGFuIGVtcHR5IGFuaW1hdGlvbiwgc3ludGhlc2l6ZSBhIGZpbmFsIHByb2dyZXNzIG5vdGlmaWNhdGlvblxuXHRcdFx0aWYgKCAhbGVuZ3RoICkge1xuXHRcdFx0XHRkZWZlcnJlZC5ub3RpZnlXaXRoKCBlbGVtLCBbIGFuaW1hdGlvbiwgMSwgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFJlc29sdmUgdGhlIGFuaW1hdGlvbiBhbmQgcmVwb3J0IGl0cyBjb25jbHVzaW9uXG5cdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24gXSApO1xuXHRcdFx0cmV0dXJuIGZhbHNlO1xuXHRcdH0sXG5cdFx0YW5pbWF0aW9uID0gZGVmZXJyZWQucHJvbWlzZSgge1xuXHRcdFx0ZWxlbTogZWxlbSxcblx0XHRcdHByb3BzOiBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcGVydGllcyApLFxuXHRcdFx0b3B0czogalF1ZXJ5LmV4dGVuZCggdHJ1ZSwge1xuXHRcdFx0XHRzcGVjaWFsRWFzaW5nOiB7fSxcblx0XHRcdFx0ZWFzaW5nOiBqUXVlcnkuZWFzaW5nLl9kZWZhdWx0XG5cdFx0XHR9LCBvcHRpb25zICksXG5cdFx0XHRvcmlnaW5hbFByb3BlcnRpZXM6IHByb3BlcnRpZXMsXG5cdFx0XHRvcmlnaW5hbE9wdGlvbnM6IG9wdGlvbnMsXG5cdFx0XHRzdGFydFRpbWU6IGZ4Tm93IHx8IGNyZWF0ZUZ4Tm93KCksXG5cdFx0XHRkdXJhdGlvbjogb3B0aW9ucy5kdXJhdGlvbixcblx0XHRcdHR3ZWVuczogW10sXG5cdFx0XHRjcmVhdGVUd2VlbjogZnVuY3Rpb24oIHByb3AsIGVuZCApIHtcblx0XHRcdFx0dmFyIHR3ZWVuID0galF1ZXJ5LlR3ZWVuKCBlbGVtLCBhbmltYXRpb24ub3B0cywgcHJvcCwgZW5kLFxuXHRcdFx0XHRcdFx0YW5pbWF0aW9uLm9wdHMuc3BlY2lhbEVhc2luZ1sgcHJvcCBdIHx8IGFuaW1hdGlvbi5vcHRzLmVhc2luZyApO1xuXHRcdFx0XHRhbmltYXRpb24udHdlZW5zLnB1c2goIHR3ZWVuICk7XG5cdFx0XHRcdHJldHVybiB0d2Vlbjtcblx0XHRcdH0sXG5cdFx0XHRzdG9wOiBmdW5jdGlvbiggZ290b0VuZCApIHtcblx0XHRcdFx0dmFyIGluZGV4ID0gMCxcblxuXHRcdFx0XHRcdC8vIElmIHdlIGFyZSBnb2luZyB0byB0aGUgZW5kLCB3ZSB3YW50IHRvIHJ1biBhbGwgdGhlIHR3ZWVuc1xuXHRcdFx0XHRcdC8vIG90aGVyd2lzZSB3ZSBza2lwIHRoaXMgcGFydFxuXHRcdFx0XHRcdGxlbmd0aCA9IGdvdG9FbmQgPyBhbmltYXRpb24udHdlZW5zLmxlbmd0aCA6IDA7XG5cdFx0XHRcdGlmICggc3RvcHBlZCApIHtcblx0XHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdFx0fVxuXHRcdFx0XHRzdG9wcGVkID0gdHJ1ZTtcblx0XHRcdFx0Zm9yICggOyBpbmRleCA8IGxlbmd0aDsgaW5kZXgrKyApIHtcblx0XHRcdFx0XHRhbmltYXRpb24udHdlZW5zWyBpbmRleCBdLnJ1biggMSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gUmVzb2x2ZSB3aGVuIHdlIHBsYXllZCB0aGUgbGFzdCBmcmFtZTsgb3RoZXJ3aXNlLCByZWplY3Rcblx0XHRcdFx0aWYgKCBnb3RvRW5kICkge1xuXHRcdFx0XHRcdGRlZmVycmVkLm5vdGlmeVdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCAxLCAwIF0gKTtcblx0XHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggZWxlbSwgWyBhbmltYXRpb24sIGdvdG9FbmQgXSApO1xuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGVsZW0sIFsgYW5pbWF0aW9uLCBnb3RvRW5kIF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0XHRyZXR1cm4gdGhpcztcblx0XHRcdH1cblx0XHR9ICksXG5cdFx0cHJvcHMgPSBhbmltYXRpb24ucHJvcHM7XG5cblx0cHJvcEZpbHRlciggcHJvcHMsIGFuaW1hdGlvbi5vcHRzLnNwZWNpYWxFYXNpbmcgKTtcblxuXHRmb3IgKCA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdHJlc3VsdCA9IEFuaW1hdGlvbi5wcmVmaWx0ZXJzWyBpbmRleCBdLmNhbGwoIGFuaW1hdGlvbiwgZWxlbSwgcHJvcHMsIGFuaW1hdGlvbi5vcHRzICk7XG5cdFx0aWYgKCByZXN1bHQgKSB7XG5cdFx0XHRpZiAoIGlzRnVuY3Rpb24oIHJlc3VsdC5zdG9wICkgKSB7XG5cdFx0XHRcdGpRdWVyeS5fcXVldWVIb29rcyggYW5pbWF0aW9uLmVsZW0sIGFuaW1hdGlvbi5vcHRzLnF1ZXVlICkuc3RvcCA9XG5cdFx0XHRcdFx0cmVzdWx0LnN0b3AuYmluZCggcmVzdWx0ICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzdWx0O1xuXHRcdH1cblx0fVxuXG5cdGpRdWVyeS5tYXAoIHByb3BzLCBjcmVhdGVUd2VlbiwgYW5pbWF0aW9uICk7XG5cblx0aWYgKCBpc0Z1bmN0aW9uKCBhbmltYXRpb24ub3B0cy5zdGFydCApICkge1xuXHRcdGFuaW1hdGlvbi5vcHRzLnN0YXJ0LmNhbGwoIGVsZW0sIGFuaW1hdGlvbiApO1xuXHR9XG5cblx0Ly8gQXR0YWNoIGNhbGxiYWNrcyBmcm9tIG9wdGlvbnNcblx0YW5pbWF0aW9uXG5cdFx0LnByb2dyZXNzKCBhbmltYXRpb24ub3B0cy5wcm9ncmVzcyApXG5cdFx0LmRvbmUoIGFuaW1hdGlvbi5vcHRzLmRvbmUsIGFuaW1hdGlvbi5vcHRzLmNvbXBsZXRlIClcblx0XHQuZmFpbCggYW5pbWF0aW9uLm9wdHMuZmFpbCApXG5cdFx0LmFsd2F5cyggYW5pbWF0aW9uLm9wdHMuYWx3YXlzICk7XG5cblx0alF1ZXJ5LmZ4LnRpbWVyKFxuXHRcdGpRdWVyeS5leHRlbmQoIHRpY2ssIHtcblx0XHRcdGVsZW06IGVsZW0sXG5cdFx0XHRhbmltOiBhbmltYXRpb24sXG5cdFx0XHRxdWV1ZTogYW5pbWF0aW9uLm9wdHMucXVldWVcblx0XHR9IClcblx0KTtcblxuXHRyZXR1cm4gYW5pbWF0aW9uO1xufVxuXG5qUXVlcnkuQW5pbWF0aW9uID0galF1ZXJ5LmV4dGVuZCggQW5pbWF0aW9uLCB7XG5cblx0dHdlZW5lcnM6IHtcblx0XHRcIipcIjogWyBmdW5jdGlvbiggcHJvcCwgdmFsdWUgKSB7XG5cdFx0XHR2YXIgdHdlZW4gPSB0aGlzLmNyZWF0ZVR3ZWVuKCBwcm9wLCB2YWx1ZSApO1xuXHRcdFx0YWRqdXN0Q1NTKCB0d2Vlbi5lbGVtLCBwcm9wLCByY3NzTnVtLmV4ZWMoIHZhbHVlICksIHR3ZWVuICk7XG5cdFx0XHRyZXR1cm4gdHdlZW47XG5cdFx0fSBdXG5cdH0sXG5cblx0dHdlZW5lcjogZnVuY3Rpb24oIHByb3BzLCBjYWxsYmFjayApIHtcblx0XHRpZiAoIGlzRnVuY3Rpb24oIHByb3BzICkgKSB7XG5cdFx0XHRjYWxsYmFjayA9IHByb3BzO1xuXHRcdFx0cHJvcHMgPSBbIFwiKlwiIF07XG5cdFx0fSBlbHNlIHtcblx0XHRcdHByb3BzID0gcHJvcHMubWF0Y2goIHJub3RodG1sd2hpdGUgKTtcblx0XHR9XG5cblx0XHR2YXIgcHJvcCxcblx0XHRcdGluZGV4ID0gMCxcblx0XHRcdGxlbmd0aCA9IHByb3BzLmxlbmd0aDtcblxuXHRcdGZvciAoIDsgaW5kZXggPCBsZW5ndGg7IGluZGV4KysgKSB7XG5cdFx0XHRwcm9wID0gcHJvcHNbIGluZGV4IF07XG5cdFx0XHRBbmltYXRpb24udHdlZW5lcnNbIHByb3AgXSA9IEFuaW1hdGlvbi50d2VlbmVyc1sgcHJvcCBdIHx8IFtdO1xuXHRcdFx0QW5pbWF0aW9uLnR3ZWVuZXJzWyBwcm9wIF0udW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH0sXG5cblx0cHJlZmlsdGVyczogWyBkZWZhdWx0UHJlZmlsdGVyIF0sXG5cblx0cHJlZmlsdGVyOiBmdW5jdGlvbiggY2FsbGJhY2ssIHByZXBlbmQgKSB7XG5cdFx0aWYgKCBwcmVwZW5kICkge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMudW5zaGlmdCggY2FsbGJhY2sgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0QW5pbWF0aW9uLnByZWZpbHRlcnMucHVzaCggY2FsbGJhY2sgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxualF1ZXJ5LnNwZWVkID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGZuICkge1xuXHR2YXIgb3B0ID0gc3BlZWQgJiYgdHlwZW9mIHNwZWVkID09PSBcIm9iamVjdFwiID8galF1ZXJ5LmV4dGVuZCgge30sIHNwZWVkICkgOiB7XG5cdFx0Y29tcGxldGU6IGZuIHx8ICFmbiAmJiBlYXNpbmcgfHxcblx0XHRcdGlzRnVuY3Rpb24oIHNwZWVkICkgJiYgc3BlZWQsXG5cdFx0ZHVyYXRpb246IHNwZWVkLFxuXHRcdGVhc2luZzogZm4gJiYgZWFzaW5nIHx8IGVhc2luZyAmJiAhaXNGdW5jdGlvbiggZWFzaW5nICkgJiYgZWFzaW5nXG5cdH07XG5cblx0Ly8gR28gdG8gdGhlIGVuZCBzdGF0ZSBpZiBmeCBhcmUgb2ZmXG5cdGlmICggalF1ZXJ5LmZ4Lm9mZiApIHtcblx0XHRvcHQuZHVyYXRpb24gPSAwO1xuXG5cdH0gZWxzZSB7XG5cdFx0aWYgKCB0eXBlb2Ygb3B0LmR1cmF0aW9uICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0aWYgKCBvcHQuZHVyYXRpb24gaW4galF1ZXJ5LmZ4LnNwZWVkcyApIHtcblx0XHRcdFx0b3B0LmR1cmF0aW9uID0galF1ZXJ5LmZ4LnNwZWVkc1sgb3B0LmR1cmF0aW9uIF07XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdG9wdC5kdXJhdGlvbiA9IGpRdWVyeS5meC5zcGVlZHMuX2RlZmF1bHQ7XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0Ly8gTm9ybWFsaXplIG9wdC5xdWV1ZSAtIHRydWUvdW5kZWZpbmVkL251bGwgLT4gXCJmeFwiXG5cdGlmICggb3B0LnF1ZXVlID09IG51bGwgfHwgb3B0LnF1ZXVlID09PSB0cnVlICkge1xuXHRcdG9wdC5xdWV1ZSA9IFwiZnhcIjtcblx0fVxuXG5cdC8vIFF1ZXVlaW5nXG5cdG9wdC5vbGQgPSBvcHQuY29tcGxldGU7XG5cblx0b3B0LmNvbXBsZXRlID0gZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBvcHQub2xkICkgKSB7XG5cdFx0XHRvcHQub2xkLmNhbGwoIHRoaXMgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdC5xdWV1ZSApIHtcblx0XHRcdGpRdWVyeS5kZXF1ZXVlKCB0aGlzLCBvcHQucXVldWUgKTtcblx0XHR9XG5cdH07XG5cblx0cmV0dXJuIG9wdDtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0ZmFkZVRvOiBmdW5jdGlvbiggc3BlZWQsIHRvLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXG5cdFx0Ly8gU2hvdyBhbnkgaGlkZGVuIGVsZW1lbnRzIGFmdGVyIHNldHRpbmcgb3BhY2l0eSB0byAwXG5cdFx0cmV0dXJuIHRoaXMuZmlsdGVyKCBpc0hpZGRlbldpdGhpblRyZWUgKS5jc3MoIFwib3BhY2l0eVwiLCAwICkuc2hvdygpXG5cblx0XHRcdC8vIEFuaW1hdGUgdG8gdGhlIHZhbHVlIHNwZWNpZmllZFxuXHRcdFx0LmVuZCgpLmFuaW1hdGUoIHsgb3BhY2l0eTogdG8gfSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fSxcblx0YW5pbWF0ZTogZnVuY3Rpb24oIHByb3AsIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHZhciBlbXB0eSA9IGpRdWVyeS5pc0VtcHR5T2JqZWN0KCBwcm9wICksXG5cdFx0XHRvcHRhbGwgPSBqUXVlcnkuc3BlZWQoIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICksXG5cdFx0XHRkb0FuaW1hdGlvbiA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdC8vIE9wZXJhdGUgb24gYSBjb3B5IG9mIHByb3Agc28gcGVyLXByb3BlcnR5IGVhc2luZyB3b24ndCBiZSBsb3N0XG5cdFx0XHRcdHZhciBhbmltID0gQW5pbWF0aW9uKCB0aGlzLCBqUXVlcnkuZXh0ZW5kKCB7fSwgcHJvcCApLCBvcHRhbGwgKTtcblxuXHRcdFx0XHQvLyBFbXB0eSBhbmltYXRpb25zLCBvciBmaW5pc2hpbmcgcmVzb2x2ZXMgaW1tZWRpYXRlbHlcblx0XHRcdFx0aWYgKCBlbXB0eSB8fCBkYXRhUHJpdi5nZXQoIHRoaXMsIFwiZmluaXNoXCIgKSApIHtcblx0XHRcdFx0XHRhbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0fVxuXHRcdFx0fTtcblx0XHRcdGRvQW5pbWF0aW9uLmZpbmlzaCA9IGRvQW5pbWF0aW9uO1xuXG5cdFx0cmV0dXJuIGVtcHR5IHx8IG9wdGFsbC5xdWV1ZSA9PT0gZmFsc2UgP1xuXHRcdFx0dGhpcy5lYWNoKCBkb0FuaW1hdGlvbiApIDpcblx0XHRcdHRoaXMucXVldWUoIG9wdGFsbC5xdWV1ZSwgZG9BbmltYXRpb24gKTtcblx0fSxcblx0c3RvcDogZnVuY3Rpb24oIHR5cGUsIGNsZWFyUXVldWUsIGdvdG9FbmQgKSB7XG5cdFx0dmFyIHN0b3BRdWV1ZSA9IGZ1bmN0aW9uKCBob29rcyApIHtcblx0XHRcdHZhciBzdG9wID0gaG9va3Muc3RvcDtcblx0XHRcdGRlbGV0ZSBob29rcy5zdG9wO1xuXHRcdFx0c3RvcCggZ290b0VuZCApO1xuXHRcdH07XG5cblx0XHRpZiAoIHR5cGVvZiB0eXBlICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0Z290b0VuZCA9IGNsZWFyUXVldWU7XG5cdFx0XHRjbGVhclF1ZXVlID0gdHlwZTtcblx0XHRcdHR5cGUgPSB1bmRlZmluZWQ7XG5cdFx0fVxuXHRcdGlmICggY2xlYXJRdWV1ZSAmJiB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHRoaXMucXVldWUoIHR5cGUgfHwgXCJmeFwiLCBbXSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIGRlcXVldWUgPSB0cnVlLFxuXHRcdFx0XHRpbmRleCA9IHR5cGUgIT0gbnVsbCAmJiB0eXBlICsgXCJxdWV1ZUhvb2tzXCIsXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKTtcblxuXHRcdFx0aWYgKCBpbmRleCApIHtcblx0XHRcdFx0aWYgKCBkYXRhWyBpbmRleCBdICYmIGRhdGFbIGluZGV4IF0uc3RvcCApIHtcblx0XHRcdFx0XHRzdG9wUXVldWUoIGRhdGFbIGluZGV4IF0gKTtcblx0XHRcdFx0fVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0Zm9yICggaW5kZXggaW4gZGF0YSApIHtcblx0XHRcdFx0XHRpZiAoIGRhdGFbIGluZGV4IF0gJiYgZGF0YVsgaW5kZXggXS5zdG9wICYmIHJydW4udGVzdCggaW5kZXggKSApIHtcblx0XHRcdFx0XHRcdHN0b3BRdWV1ZSggZGF0YVsgaW5kZXggXSApO1xuXHRcdFx0XHRcdH1cblx0XHRcdFx0fVxuXHRcdFx0fVxuXG5cdFx0XHRmb3IgKCBpbmRleCA9IHRpbWVycy5sZW5ndGg7IGluZGV4LS07ICkge1xuXHRcdFx0XHRpZiAoIHRpbWVyc1sgaW5kZXggXS5lbGVtID09PSB0aGlzICYmXG5cdFx0XHRcdFx0KCB0eXBlID09IG51bGwgfHwgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkgKSB7XG5cblx0XHRcdFx0XHR0aW1lcnNbIGluZGV4IF0uYW5pbS5zdG9wKCBnb3RvRW5kICk7XG5cdFx0XHRcdFx0ZGVxdWV1ZSA9IGZhbHNlO1xuXHRcdFx0XHRcdHRpbWVycy5zcGxpY2UoIGluZGV4LCAxICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblxuXHRcdFx0Ly8gU3RhcnQgdGhlIG5leHQgaW4gdGhlIHF1ZXVlIGlmIHRoZSBsYXN0IHN0ZXAgd2Fzbid0IGZvcmNlZC5cblx0XHRcdC8vIFRpbWVycyBjdXJyZW50bHkgd2lsbCBjYWxsIHRoZWlyIGNvbXBsZXRlIGNhbGxiYWNrcywgd2hpY2hcblx0XHRcdC8vIHdpbGwgZGVxdWV1ZSBidXQgb25seSBpZiB0aGV5IHdlcmUgZ290b0VuZC5cblx0XHRcdGlmICggZGVxdWV1ZSB8fCAhZ290b0VuZCApIHtcblx0XHRcdFx0alF1ZXJ5LmRlcXVldWUoIHRoaXMsIHR5cGUgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdH0sXG5cdGZpbmlzaDogZnVuY3Rpb24oIHR5cGUgKSB7XG5cdFx0aWYgKCB0eXBlICE9PSBmYWxzZSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IFwiZnhcIjtcblx0XHR9XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgaW5kZXgsXG5cdFx0XHRcdGRhdGEgPSBkYXRhUHJpdi5nZXQoIHRoaXMgKSxcblx0XHRcdFx0cXVldWUgPSBkYXRhWyB0eXBlICsgXCJxdWV1ZVwiIF0sXG5cdFx0XHRcdGhvb2tzID0gZGF0YVsgdHlwZSArIFwicXVldWVIb29rc1wiIF0sXG5cdFx0XHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnMsXG5cdFx0XHRcdGxlbmd0aCA9IHF1ZXVlID8gcXVldWUubGVuZ3RoIDogMDtcblxuXHRcdFx0Ly8gRW5hYmxlIGZpbmlzaGluZyBmbGFnIG9uIHByaXZhdGUgZGF0YVxuXHRcdFx0ZGF0YS5maW5pc2ggPSB0cnVlO1xuXG5cdFx0XHQvLyBFbXB0eSB0aGUgcXVldWUgZmlyc3Rcblx0XHRcdGpRdWVyeS5xdWV1ZSggdGhpcywgdHlwZSwgW10gKTtcblxuXHRcdFx0aWYgKCBob29rcyAmJiBob29rcy5zdG9wICkge1xuXHRcdFx0XHRob29rcy5zdG9wLmNhbGwoIHRoaXMsIHRydWUgKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gTG9vayBmb3IgYW55IGFjdGl2ZSBhbmltYXRpb25zLCBhbmQgZmluaXNoIHRoZW1cblx0XHRcdGZvciAoIGluZGV4ID0gdGltZXJzLmxlbmd0aDsgaW5kZXgtLTsgKSB7XG5cdFx0XHRcdGlmICggdGltZXJzWyBpbmRleCBdLmVsZW0gPT09IHRoaXMgJiYgdGltZXJzWyBpbmRleCBdLnF1ZXVlID09PSB0eXBlICkge1xuXHRcdFx0XHRcdHRpbWVyc1sgaW5kZXggXS5hbmltLnN0b3AoIHRydWUgKTtcblx0XHRcdFx0XHR0aW1lcnMuc3BsaWNlKCBpbmRleCwgMSApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIExvb2sgZm9yIGFueSBhbmltYXRpb25zIGluIHRoZSBvbGQgcXVldWUgYW5kIGZpbmlzaCB0aGVtXG5cdFx0XHRmb3IgKCBpbmRleCA9IDA7IGluZGV4IDwgbGVuZ3RoOyBpbmRleCsrICkge1xuXHRcdFx0XHRpZiAoIHF1ZXVlWyBpbmRleCBdICYmIHF1ZXVlWyBpbmRleCBdLmZpbmlzaCApIHtcblx0XHRcdFx0XHRxdWV1ZVsgaW5kZXggXS5maW5pc2guY2FsbCggdGhpcyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFR1cm4gb2ZmIGZpbmlzaGluZyBmbGFnXG5cdFx0XHRkZWxldGUgZGF0YS5maW5pc2g7XG5cdFx0fSApO1xuXHR9XG59ICk7XG5cbmpRdWVyeS5lYWNoKCBbIFwidG9nZ2xlXCIsIFwic2hvd1wiLCBcImhpZGVcIiBdLCBmdW5jdGlvbiggaSwgbmFtZSApIHtcblx0dmFyIGNzc0ZuID0galF1ZXJ5LmZuWyBuYW1lIF07XG5cdGpRdWVyeS5mblsgbmFtZSBdID0gZnVuY3Rpb24oIHNwZWVkLCBlYXNpbmcsIGNhbGxiYWNrICkge1xuXHRcdHJldHVybiBzcGVlZCA9PSBudWxsIHx8IHR5cGVvZiBzcGVlZCA9PT0gXCJib29sZWFuXCIgP1xuXHRcdFx0Y3NzRm4uYXBwbHkoIHRoaXMsIGFyZ3VtZW50cyApIDpcblx0XHRcdHRoaXMuYW5pbWF0ZSggZ2VuRngoIG5hbWUsIHRydWUgKSwgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxuLy8gR2VuZXJhdGUgc2hvcnRjdXRzIGZvciBjdXN0b20gYW5pbWF0aW9uc1xualF1ZXJ5LmVhY2goIHtcblx0c2xpZGVEb3duOiBnZW5GeCggXCJzaG93XCIgKSxcblx0c2xpZGVVcDogZ2VuRngoIFwiaGlkZVwiICksXG5cdHNsaWRlVG9nZ2xlOiBnZW5GeCggXCJ0b2dnbGVcIiApLFxuXHRmYWRlSW46IHsgb3BhY2l0eTogXCJzaG93XCIgfSxcblx0ZmFkZU91dDogeyBvcGFjaXR5OiBcImhpZGVcIiB9LFxuXHRmYWRlVG9nZ2xlOiB7IG9wYWNpdHk6IFwidG9nZ2xlXCIgfVxufSwgZnVuY3Rpb24oIG5hbWUsIHByb3BzICkge1xuXHRqUXVlcnkuZm5bIG5hbWUgXSA9IGZ1bmN0aW9uKCBzcGVlZCwgZWFzaW5nLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4gdGhpcy5hbmltYXRlKCBwcm9wcywgc3BlZWQsIGVhc2luZywgY2FsbGJhY2sgKTtcblx0fTtcbn0gKTtcblxualF1ZXJ5LnRpbWVycyA9IFtdO1xualF1ZXJ5LmZ4LnRpY2sgPSBmdW5jdGlvbigpIHtcblx0dmFyIHRpbWVyLFxuXHRcdGkgPSAwLFxuXHRcdHRpbWVycyA9IGpRdWVyeS50aW1lcnM7XG5cblx0ZnhOb3cgPSBEYXRlLm5vdygpO1xuXG5cdGZvciAoIDsgaSA8IHRpbWVycy5sZW5ndGg7IGkrKyApIHtcblx0XHR0aW1lciA9IHRpbWVyc1sgaSBdO1xuXG5cdFx0Ly8gUnVuIHRoZSB0aW1lciBhbmQgc2FmZWx5IHJlbW92ZSBpdCB3aGVuIGRvbmUgKGFsbG93aW5nIGZvciBleHRlcm5hbCByZW1vdmFsKVxuXHRcdGlmICggIXRpbWVyKCkgJiYgdGltZXJzWyBpIF0gPT09IHRpbWVyICkge1xuXHRcdFx0dGltZXJzLnNwbGljZSggaS0tLCAxICk7XG5cdFx0fVxuXHR9XG5cblx0aWYgKCAhdGltZXJzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkuZnguc3RvcCgpO1xuXHR9XG5cdGZ4Tm93ID0gdW5kZWZpbmVkO1xufTtcblxualF1ZXJ5LmZ4LnRpbWVyID0gZnVuY3Rpb24oIHRpbWVyICkge1xuXHRqUXVlcnkudGltZXJzLnB1c2goIHRpbWVyICk7XG5cdGpRdWVyeS5meC5zdGFydCgpO1xufTtcblxualF1ZXJ5LmZ4LmludGVydmFsID0gMTM7XG5qUXVlcnkuZnguc3RhcnQgPSBmdW5jdGlvbigpIHtcblx0aWYgKCBpblByb2dyZXNzICkge1xuXHRcdHJldHVybjtcblx0fVxuXG5cdGluUHJvZ3Jlc3MgPSB0cnVlO1xuXHRzY2hlZHVsZSgpO1xufTtcblxualF1ZXJ5LmZ4LnN0b3AgPSBmdW5jdGlvbigpIHtcblx0aW5Qcm9ncmVzcyA9IG51bGw7XG59O1xuXG5qUXVlcnkuZnguc3BlZWRzID0ge1xuXHRzbG93OiA2MDAsXG5cdGZhc3Q6IDIwMCxcblxuXHQvLyBEZWZhdWx0IHNwZWVkXG5cdF9kZWZhdWx0OiA0MDBcbn07XG5cblxuLy8gQmFzZWQgb2ZmIG9mIHRoZSBwbHVnaW4gYnkgQ2xpbnQgSGVsZmVycywgd2l0aCBwZXJtaXNzaW9uLlxuLy8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTAwMzI0MDE0NzQ3L2h0dHA6Ly9ibGluZHNpZ25hbHMuY29tL2luZGV4LnBocC8yMDA5LzA3L2pxdWVyeS1kZWxheS9cbmpRdWVyeS5mbi5kZWxheSA9IGZ1bmN0aW9uKCB0aW1lLCB0eXBlICkge1xuXHR0aW1lID0galF1ZXJ5LmZ4ID8galF1ZXJ5LmZ4LnNwZWVkc1sgdGltZSBdIHx8IHRpbWUgOiB0aW1lO1xuXHR0eXBlID0gdHlwZSB8fCBcImZ4XCI7XG5cblx0cmV0dXJuIHRoaXMucXVldWUoIHR5cGUsIGZ1bmN0aW9uKCBuZXh0LCBob29rcyApIHtcblx0XHR2YXIgdGltZW91dCA9IHdpbmRvdy5zZXRUaW1lb3V0KCBuZXh0LCB0aW1lICk7XG5cdFx0aG9va3Muc3RvcCA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dCApO1xuXHRcdH07XG5cdH0gKTtcbn07XG5cblxuKCBmdW5jdGlvbigpIHtcblx0dmFyIGlucHV0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJpbnB1dFwiICksXG5cdFx0c2VsZWN0ID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJzZWxlY3RcIiApLFxuXHRcdG9wdCA9IHNlbGVjdC5hcHBlbmRDaGlsZCggZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJvcHRpb25cIiApICk7XG5cblx0aW5wdXQudHlwZSA9IFwiY2hlY2tib3hcIjtcblxuXHQvLyBTdXBwb3J0OiBBbmRyb2lkIDw9NC4zIG9ubHlcblx0Ly8gRGVmYXVsdCB2YWx1ZSBmb3IgYSBjaGVja2JveCBzaG91bGQgYmUgXCJvblwiXG5cdHN1cHBvcnQuY2hlY2tPbiA9IGlucHV0LnZhbHVlICE9PSBcIlwiO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBNdXN0IGFjY2VzcyBzZWxlY3RlZEluZGV4IHRvIG1ha2UgZGVmYXVsdCBvcHRpb25zIHNlbGVjdFxuXHRzdXBwb3J0Lm9wdFNlbGVjdGVkID0gb3B0LnNlbGVjdGVkO1xuXG5cdC8vIFN1cHBvcnQ6IElFIDw9MTEgb25seVxuXHQvLyBBbiBpbnB1dCBsb3NlcyBpdHMgdmFsdWUgYWZ0ZXIgYmVjb21pbmcgYSByYWRpb1xuXHRpbnB1dCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoIFwiaW5wdXRcIiApO1xuXHRpbnB1dC52YWx1ZSA9IFwidFwiO1xuXHRpbnB1dC50eXBlID0gXCJyYWRpb1wiO1xuXHRzdXBwb3J0LnJhZGlvVmFsdWUgPSBpbnB1dC52YWx1ZSA9PT0gXCJ0XCI7XG59ICkoKTtcblxuXG52YXIgYm9vbEhvb2ssXG5cdGF0dHJIYW5kbGUgPSBqUXVlcnkuZXhwci5hdHRySGFuZGxlO1xuXG5qUXVlcnkuZm4uZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBuYW1lLCB2YWx1ZSApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBqUXVlcnkuYXR0ciwgbmFtZSwgdmFsdWUsIGFyZ3VtZW50cy5sZW5ndGggPiAxICk7XG5cdH0sXG5cblx0cmVtb3ZlQXR0cjogZnVuY3Rpb24oIG5hbWUgKSB7XG5cdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oKSB7XG5cdFx0XHRqUXVlcnkucmVtb3ZlQXR0ciggdGhpcywgbmFtZSApO1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdGF0dHI6IGZ1bmN0aW9uKCBlbGVtLCBuYW1lLCB2YWx1ZSApIHtcblx0XHR2YXIgcmV0LCBob29rcyxcblx0XHRcdG5UeXBlID0gZWxlbS5ub2RlVHlwZTtcblxuXHRcdC8vIERvbid0IGdldC9zZXQgYXR0cmlidXRlcyBvbiB0ZXh0LCBjb21tZW50IGFuZCBhdHRyaWJ1dGUgbm9kZXNcblx0XHRpZiAoIG5UeXBlID09PSAzIHx8IG5UeXBlID09PSA4IHx8IG5UeXBlID09PSAyICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdC8vIEZhbGxiYWNrIHRvIHByb3Agd2hlbiBhdHRyaWJ1dGVzIGFyZSBub3Qgc3VwcG9ydGVkXG5cdFx0aWYgKCB0eXBlb2YgZWxlbS5nZXRBdHRyaWJ1dGUgPT09IFwidW5kZWZpbmVkXCIgKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LnByb3AoIGVsZW0sIG5hbWUsIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXR0cmlidXRlIGhvb2tzIGFyZSBkZXRlcm1pbmVkIGJ5IHRoZSBsb3dlcmNhc2UgdmVyc2lvblxuXHRcdC8vIEdyYWIgbmVjZXNzYXJ5IGhvb2sgaWYgb25lIGlzIGRlZmluZWRcblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblx0XHRcdGhvb2tzID0galF1ZXJ5LmF0dHJIb29rc1sgbmFtZS50b0xvd2VyQ2FzZSgpIF0gfHxcblx0XHRcdFx0KCBqUXVlcnkuZXhwci5tYXRjaC5ib29sLnRlc3QoIG5hbWUgKSA/IGJvb2xIb29rIDogdW5kZWZpbmVkICk7XG5cdFx0fVxuXG5cdFx0aWYgKCB2YWx1ZSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0aWYgKCB2YWx1ZSA9PT0gbnVsbCApIHtcblx0XHRcdFx0alF1ZXJ5LnJlbW92ZUF0dHIoIGVsZW0sIG5hbWUgKTtcblx0XHRcdFx0cmV0dXJuO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIGhvb2tzICYmIFwic2V0XCIgaW4gaG9va3MgJiZcblx0XHRcdFx0KCByZXQgPSBob29rcy5zZXQoIGVsZW0sIHZhbHVlLCBuYW1lICkgKSAhPT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggbmFtZSwgdmFsdWUgKyBcIlwiICk7XG5cdFx0XHRyZXR1cm4gdmFsdWU7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0ID0galF1ZXJ5LmZpbmQuYXR0ciggZWxlbSwgbmFtZSApO1xuXG5cdFx0Ly8gTm9uLWV4aXN0ZW50IGF0dHJpYnV0ZXMgcmV0dXJuIG51bGwsIHdlIG5vcm1hbGl6ZSB0byB1bmRlZmluZWRcblx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyB1bmRlZmluZWQgOiByZXQ7XG5cdH0sXG5cblx0YXR0ckhvb2tzOiB7XG5cdFx0dHlwZToge1xuXHRcdFx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0XHRcdGlmICggIXN1cHBvcnQucmFkaW9WYWx1ZSAmJiB2YWx1ZSA9PT0gXCJyYWRpb1wiICYmXG5cdFx0XHRcdFx0bm9kZU5hbWUoIGVsZW0sIFwiaW5wdXRcIiApICkge1xuXHRcdFx0XHRcdHZhciB2YWwgPSBlbGVtLnZhbHVlO1xuXHRcdFx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBcInR5cGVcIiwgdmFsdWUgKTtcblx0XHRcdFx0XHRpZiAoIHZhbCApIHtcblx0XHRcdFx0XHRcdGVsZW0udmFsdWUgPSB2YWw7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB2YWx1ZTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRyZW1vdmVBdHRyOiBmdW5jdGlvbiggZWxlbSwgdmFsdWUgKSB7XG5cdFx0dmFyIG5hbWUsXG5cdFx0XHRpID0gMCxcblxuXHRcdFx0Ly8gQXR0cmlidXRlIG5hbWVzIGNhbiBjb250YWluIG5vbi1IVE1MIHdoaXRlc3BhY2UgY2hhcmFjdGVyc1xuXHRcdFx0Ly8gaHR0cHM6Ly9odG1sLnNwZWMud2hhdHdnLm9yZy9tdWx0aXBhZ2Uvc3ludGF4Lmh0bWwjYXR0cmlidXRlcy0yXG5cdFx0XHRhdHRyTmFtZXMgPSB2YWx1ZSAmJiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApO1xuXG5cdFx0aWYgKCBhdHRyTmFtZXMgJiYgZWxlbS5ub2RlVHlwZSA9PT0gMSApIHtcblx0XHRcdHdoaWxlICggKCBuYW1lID0gYXR0ck5hbWVzWyBpKysgXSApICkge1xuXHRcdFx0XHRlbGVtLnJlbW92ZUF0dHJpYnV0ZSggbmFtZSApO1xuXHRcdFx0fVxuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIb29rcyBmb3IgYm9vbGVhbiBhdHRyaWJ1dGVzXG5ib29sSG9vayA9IHtcblx0c2V0OiBmdW5jdGlvbiggZWxlbSwgdmFsdWUsIG5hbWUgKSB7XG5cdFx0aWYgKCB2YWx1ZSA9PT0gZmFsc2UgKSB7XG5cblx0XHRcdC8vIFJlbW92ZSBib29sZWFuIGF0dHJpYnV0ZXMgd2hlbiBzZXQgdG8gZmFsc2Vcblx0XHRcdGpRdWVyeS5yZW1vdmVBdHRyKCBlbGVtLCBuYW1lICk7XG5cdFx0fSBlbHNlIHtcblx0XHRcdGVsZW0uc2V0QXR0cmlidXRlKCBuYW1lLCBuYW1lICk7XG5cdFx0fVxuXHRcdHJldHVybiBuYW1lO1xuXHR9XG59O1xuXG5qUXVlcnkuZWFjaCggalF1ZXJ5LmV4cHIubWF0Y2guYm9vbC5zb3VyY2UubWF0Y2goIC9cXHcrL2cgKSwgZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cdHZhciBnZXR0ZXIgPSBhdHRySGFuZGxlWyBuYW1lIF0gfHwgalF1ZXJ5LmZpbmQuYXR0cjtcblxuXHRhdHRySGFuZGxlWyBuYW1lIF0gPSBmdW5jdGlvbiggZWxlbSwgbmFtZSwgaXNYTUwgKSB7XG5cdFx0dmFyIHJldCwgaGFuZGxlLFxuXHRcdFx0bG93ZXJjYXNlTmFtZSA9IG5hbWUudG9Mb3dlckNhc2UoKTtcblxuXHRcdGlmICggIWlzWE1MICkge1xuXG5cdFx0XHQvLyBBdm9pZCBhbiBpbmZpbml0ZSBsb29wIGJ5IHRlbXBvcmFyaWx5IHJlbW92aW5nIHRoaXMgZnVuY3Rpb24gZnJvbSB0aGUgZ2V0dGVyXG5cdFx0XHRoYW5kbGUgPSBhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF07XG5cdFx0XHRhdHRySGFuZGxlWyBsb3dlcmNhc2VOYW1lIF0gPSByZXQ7XG5cdFx0XHRyZXQgPSBnZXR0ZXIoIGVsZW0sIG5hbWUsIGlzWE1MICkgIT0gbnVsbCA/XG5cdFx0XHRcdGxvd2VyY2FzZU5hbWUgOlxuXHRcdFx0XHRudWxsO1xuXHRcdFx0YXR0ckhhbmRsZVsgbG93ZXJjYXNlTmFtZSBdID0gaGFuZGxlO1xuXHRcdH1cblx0XHRyZXR1cm4gcmV0O1xuXHR9O1xufSApO1xuXG5cblxuXG52YXIgcmZvY3VzYWJsZSA9IC9eKD86aW5wdXR8c2VsZWN0fHRleHRhcmVhfGJ1dHRvbikkL2ksXG5cdHJjbGlja2FibGUgPSAvXig/OmF8YXJlYSkkL2k7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0cHJvcDogZnVuY3Rpb24oIG5hbWUsIHZhbHVlICkge1xuXHRcdHJldHVybiBhY2Nlc3MoIHRoaXMsIGpRdWVyeS5wcm9wLCBuYW1lLCB2YWx1ZSwgYXJndW1lbnRzLmxlbmd0aCA+IDEgKTtcblx0fSxcblxuXHRyZW1vdmVQcm9wOiBmdW5jdGlvbiggbmFtZSApIHtcblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdGRlbGV0ZSB0aGlzWyBqUXVlcnkucHJvcEZpeFsgbmFtZSBdIHx8IG5hbWUgXTtcblx0XHR9ICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmV4dGVuZCgge1xuXHRwcm9wOiBmdW5jdGlvbiggZWxlbSwgbmFtZSwgdmFsdWUgKSB7XG5cdFx0dmFyIHJldCwgaG9va3MsXG5cdFx0XHRuVHlwZSA9IGVsZW0ubm9kZVR5cGU7XG5cblx0XHQvLyBEb24ndCBnZXQvc2V0IHByb3BlcnRpZXMgb24gdGV4dCwgY29tbWVudCBhbmQgYXR0cmlidXRlIG5vZGVzXG5cdFx0aWYgKCBuVHlwZSA9PT0gMyB8fCBuVHlwZSA9PT0gOCB8fCBuVHlwZSA9PT0gMiApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHRpZiAoIG5UeXBlICE9PSAxIHx8ICFqUXVlcnkuaXNYTUxEb2MoIGVsZW0gKSApIHtcblxuXHRcdFx0Ly8gRml4IG5hbWUgYW5kIGF0dGFjaCBob29rc1xuXHRcdFx0bmFtZSA9IGpRdWVyeS5wcm9wRml4WyBuYW1lIF0gfHwgbmFtZTtcblx0XHRcdGhvb2tzID0galF1ZXJ5LnByb3BIb29rc1sgbmFtZSBdO1xuXHRcdH1cblxuXHRcdGlmICggdmFsdWUgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGlmICggaG9va3MgJiYgXCJzZXRcIiBpbiBob29rcyAmJlxuXHRcdFx0XHQoIHJldCA9IGhvb2tzLnNldCggZWxlbSwgdmFsdWUsIG5hbWUgKSApICE9PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiByZXQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiAoIGVsZW1bIG5hbWUgXSA9IHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBob29rcyAmJiBcImdldFwiIGluIGhvb2tzICYmICggcmV0ID0gaG9va3MuZ2V0KCBlbGVtLCBuYW1lICkgKSAhPT0gbnVsbCApIHtcblx0XHRcdHJldHVybiByZXQ7XG5cdFx0fVxuXG5cdFx0cmV0dXJuIGVsZW1bIG5hbWUgXTtcblx0fSxcblxuXHRwcm9wSG9va3M6IHtcblx0XHR0YWJJbmRleDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgLSAxMSBvbmx5XG5cdFx0XHRcdC8vIGVsZW0udGFiSW5kZXggZG9lc24ndCBhbHdheXMgcmV0dXJuIHRoZVxuXHRcdFx0XHQvLyBjb3JyZWN0IHZhbHVlIHdoZW4gaXQgaGFzbid0IGJlZW4gZXhwbGljaXRseSBzZXRcblx0XHRcdFx0Ly8gaHR0cHM6Ly93ZWIuYXJjaGl2ZS5vcmcvd2ViLzIwMTQxMTE2MjMzMzQ3L2h0dHA6Ly9mbHVpZHByb2plY3Qub3JnL2Jsb2cvMjAwOC8wMS8wOS9nZXR0aW5nLXNldHRpbmctYW5kLXJlbW92aW5nLXRhYmluZGV4LXZhbHVlcy13aXRoLWphdmFzY3JpcHQvXG5cdFx0XHRcdC8vIFVzZSBwcm9wZXIgYXR0cmlidXRlIHJldHJpZXZhbCgjMTIwNzIpXG5cdFx0XHRcdHZhciB0YWJpbmRleCA9IGpRdWVyeS5maW5kLmF0dHIoIGVsZW0sIFwidGFiaW5kZXhcIiApO1xuXG5cdFx0XHRcdGlmICggdGFiaW5kZXggKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHBhcnNlSW50KCB0YWJpbmRleCwgMTAgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdGlmIChcblx0XHRcdFx0XHRyZm9jdXNhYmxlLnRlc3QoIGVsZW0ubm9kZU5hbWUgKSB8fFxuXHRcdFx0XHRcdHJjbGlja2FibGUudGVzdCggZWxlbS5ub2RlTmFtZSApICYmXG5cdFx0XHRcdFx0ZWxlbS5ocmVmXG5cdFx0XHRcdCkge1xuXHRcdFx0XHRcdHJldHVybiAwO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIC0xO1xuXHRcdFx0fVxuXHRcdH1cblx0fSxcblxuXHRwcm9wRml4OiB7XG5cdFx0XCJmb3JcIjogXCJodG1sRm9yXCIsXG5cdFx0XCJjbGFzc1wiOiBcImNsYXNzTmFtZVwiXG5cdH1cbn0gKTtcblxuLy8gU3VwcG9ydDogSUUgPD0xMSBvbmx5XG4vLyBBY2Nlc3NpbmcgdGhlIHNlbGVjdGVkSW5kZXggcHJvcGVydHlcbi8vIGZvcmNlcyB0aGUgYnJvd3NlciB0byByZXNwZWN0IHNldHRpbmcgc2VsZWN0ZWRcbi8vIG9uIHRoZSBvcHRpb25cbi8vIFRoZSBnZXR0ZXIgZW5zdXJlcyBhIGRlZmF1bHQgb3B0aW9uIGlzIHNlbGVjdGVkXG4vLyB3aGVuIGluIGFuIG9wdGdyb3VwXG4vLyBlc2xpbnQgcnVsZSBcIm5vLXVudXNlZC1leHByZXNzaW9uc1wiIGlzIGRpc2FibGVkIGZvciB0aGlzIGNvZGVcbi8vIHNpbmNlIGl0IGNvbnNpZGVycyBzdWNoIGFjY2Vzc2lvbnMgbm9vcFxuaWYgKCAhc3VwcG9ydC5vcHRTZWxlY3RlZCApIHtcblx0alF1ZXJ5LnByb3BIb29rcy5zZWxlY3RlZCA9IHtcblx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHQvKiBlc2xpbnQgbm8tdW51c2VkLWV4cHJlc3Npb25zOiBcIm9mZlwiICovXG5cblx0XHRcdHZhciBwYXJlbnQgPSBlbGVtLnBhcmVudE5vZGU7XG5cdFx0XHRpZiAoIHBhcmVudCAmJiBwYXJlbnQucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdH1cblx0XHRcdHJldHVybiBudWxsO1xuXHRcdH0sXG5cdFx0c2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblxuXHRcdFx0LyogZXNsaW50IG5vLXVudXNlZC1leHByZXNzaW9uczogXCJvZmZcIiAqL1xuXG5cdFx0XHR2YXIgcGFyZW50ID0gZWxlbS5wYXJlbnROb2RlO1xuXHRcdFx0aWYgKCBwYXJlbnQgKSB7XG5cdFx0XHRcdHBhcmVudC5zZWxlY3RlZEluZGV4O1xuXG5cdFx0XHRcdGlmICggcGFyZW50LnBhcmVudE5vZGUgKSB7XG5cdFx0XHRcdFx0cGFyZW50LnBhcmVudE5vZGUuc2VsZWN0ZWRJbmRleDtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH1cblx0fTtcbn1cblxualF1ZXJ5LmVhY2goIFtcblx0XCJ0YWJJbmRleFwiLFxuXHRcInJlYWRPbmx5XCIsXG5cdFwibWF4TGVuZ3RoXCIsXG5cdFwiY2VsbFNwYWNpbmdcIixcblx0XCJjZWxsUGFkZGluZ1wiLFxuXHRcInJvd1NwYW5cIixcblx0XCJjb2xTcGFuXCIsXG5cdFwidXNlTWFwXCIsXG5cdFwiZnJhbWVCb3JkZXJcIixcblx0XCJjb250ZW50RWRpdGFibGVcIlxuXSwgZnVuY3Rpb24oKSB7XG5cdGpRdWVyeS5wcm9wRml4WyB0aGlzLnRvTG93ZXJDYXNlKCkgXSA9IHRoaXM7XG59ICk7XG5cblxuXG5cblx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2UgYWNjb3JkaW5nIHRvIEhUTUwgc3BlY1xuXHQvLyBodHRwczovL2luZnJhLnNwZWMud2hhdHdnLm9yZy8jc3RyaXAtYW5kLWNvbGxhcHNlLWFzY2lpLXdoaXRlc3BhY2Vcblx0ZnVuY3Rpb24gc3RyaXBBbmRDb2xsYXBzZSggdmFsdWUgKSB7XG5cdFx0dmFyIHRva2VucyA9IHZhbHVlLm1hdGNoKCBybm90aHRtbHdoaXRlICkgfHwgW107XG5cdFx0cmV0dXJuIHRva2Vucy5qb2luKCBcIiBcIiApO1xuXHR9XG5cblxuZnVuY3Rpb24gZ2V0Q2xhc3MoIGVsZW0gKSB7XG5cdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSAmJiBlbGVtLmdldEF0dHJpYnV0ZSggXCJjbGFzc1wiICkgfHwgXCJcIjtcbn1cblxuZnVuY3Rpb24gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICkge1xuXHRpZiAoIEFycmF5LmlzQXJyYXkoIHZhbHVlICkgKSB7XG5cdFx0cmV0dXJuIHZhbHVlO1xuXHR9XG5cdGlmICggdHlwZW9mIHZhbHVlID09PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiB2YWx1ZS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFtdO1xuXHR9XG5cdHJldHVybiBbXTtcbn1cblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXHRhZGRDbGFzczogZnVuY3Rpb24oIHZhbHVlICkge1xuXHRcdHZhciBjbGFzc2VzLCBlbGVtLCBjdXIsIGN1clZhbHVlLCBjbGF6eiwgaiwgZmluYWxWYWx1ZSxcblx0XHRcdGkgPSAwO1xuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGogKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLmFkZENsYXNzKCB2YWx1ZS5jYWxsKCB0aGlzLCBqLCBnZXRDbGFzcyggdGhpcyApICkgKTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRjbGFzc2VzID0gY2xhc3Nlc1RvQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIGNsYXNzZXMubGVuZ3RoICkge1xuXHRcdFx0d2hpbGUgKCAoIGVsZW0gPSB0aGlzWyBpKysgXSApICkge1xuXHRcdFx0XHRjdXJWYWx1ZSA9IGdldENsYXNzKCBlbGVtICk7XG5cdFx0XHRcdGN1ciA9IGVsZW0ubm9kZVR5cGUgPT09IDEgJiYgKCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGN1clZhbHVlICkgKyBcIiBcIiApO1xuXG5cdFx0XHRcdGlmICggY3VyICkge1xuXHRcdFx0XHRcdGogPSAwO1xuXHRcdFx0XHRcdHdoaWxlICggKCBjbGF6eiA9IGNsYXNzZXNbIGorKyBdICkgKSB7XG5cdFx0XHRcdFx0XHRpZiAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA8IDAgKSB7XG5cdFx0XHRcdFx0XHRcdGN1ciArPSBjbGF6eiArIFwiIFwiO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0cmVtb3ZlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSApIHtcblx0XHR2YXIgY2xhc3NlcywgZWxlbSwgY3VyLCBjdXJWYWx1ZSwgY2xhenosIGosIGZpbmFsVmFsdWUsXG5cdFx0XHRpID0gMDtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggdmFsdWUgKSApIHtcblx0XHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBqICkge1xuXHRcdFx0XHRqUXVlcnkoIHRoaXMgKS5yZW1vdmVDbGFzcyggdmFsdWUuY2FsbCggdGhpcywgaiwgZ2V0Q2xhc3MoIHRoaXMgKSApICk7XG5cdFx0XHR9ICk7XG5cdFx0fVxuXG5cdFx0aWYgKCAhYXJndW1lbnRzLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB0aGlzLmF0dHIoIFwiY2xhc3NcIiwgXCJcIiApO1xuXHRcdH1cblxuXHRcdGNsYXNzZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdGlmICggY2xhc3Nlcy5sZW5ndGggKSB7XG5cdFx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRcdGN1clZhbHVlID0gZ2V0Q2xhc3MoIGVsZW0gKTtcblxuXHRcdFx0XHQvLyBUaGlzIGV4cHJlc3Npb24gaXMgaGVyZSBmb3IgYmV0dGVyIGNvbXByZXNzaWJpbGl0eSAoc2VlIGFkZENsYXNzKVxuXHRcdFx0XHRjdXIgPSBlbGVtLm5vZGVUeXBlID09PSAxICYmICggXCIgXCIgKyBzdHJpcEFuZENvbGxhcHNlKCBjdXJWYWx1ZSApICsgXCIgXCIgKTtcblxuXHRcdFx0XHRpZiAoIGN1ciApIHtcblx0XHRcdFx0XHRqID0gMDtcblx0XHRcdFx0XHR3aGlsZSAoICggY2xhenogPSBjbGFzc2VzWyBqKysgXSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBSZW1vdmUgKmFsbCogaW5zdGFuY2VzXG5cdFx0XHRcdFx0XHR3aGlsZSAoIGN1ci5pbmRleE9mKCBcIiBcIiArIGNsYXp6ICsgXCIgXCIgKSA+IC0xICkge1xuXHRcdFx0XHRcdFx0XHRjdXIgPSBjdXIucmVwbGFjZSggXCIgXCIgKyBjbGF6eiArIFwiIFwiLCBcIiBcIiApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIE9ubHkgYXNzaWduIGlmIGRpZmZlcmVudCB0byBhdm9pZCB1bm5lZWRlZCByZW5kZXJpbmcuXG5cdFx0XHRcdFx0ZmluYWxWYWx1ZSA9IHN0cmlwQW5kQ29sbGFwc2UoIGN1ciApO1xuXHRcdFx0XHRcdGlmICggY3VyVmFsdWUgIT09IGZpbmFsVmFsdWUgKSB7XG5cdFx0XHRcdFx0XHRlbGVtLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLCBmaW5hbFZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0cmV0dXJuIHRoaXM7XG5cdH0sXG5cblx0dG9nZ2xlQ2xhc3M6IGZ1bmN0aW9uKCB2YWx1ZSwgc3RhdGVWYWwgKSB7XG5cdFx0dmFyIHR5cGUgPSB0eXBlb2YgdmFsdWUsXG5cdFx0XHRpc1ZhbGlkVmFsdWUgPSB0eXBlID09PSBcInN0cmluZ1wiIHx8IEFycmF5LmlzQXJyYXkoIHZhbHVlICk7XG5cblx0XHRpZiAoIHR5cGVvZiBzdGF0ZVZhbCA9PT0gXCJib29sZWFuXCIgJiYgaXNWYWxpZFZhbHVlICkge1xuXHRcdFx0cmV0dXJuIHN0YXRlVmFsID8gdGhpcy5hZGRDbGFzcyggdmFsdWUgKSA6IHRoaXMucmVtb3ZlQ2xhc3MoIHZhbHVlICk7XG5cdFx0fVxuXG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCB2YWx1ZSApICkge1xuXHRcdFx0cmV0dXJuIHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdGpRdWVyeSggdGhpcyApLnRvZ2dsZUNsYXNzKFxuXHRcdFx0XHRcdHZhbHVlLmNhbGwoIHRoaXMsIGksIGdldENsYXNzKCB0aGlzICksIHN0YXRlVmFsICksXG5cdFx0XHRcdFx0c3RhdGVWYWxcblx0XHRcdFx0KTtcblx0XHRcdH0gKTtcblx0XHR9XG5cblx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdHZhciBjbGFzc05hbWUsIGksIHNlbGYsIGNsYXNzTmFtZXM7XG5cblx0XHRcdGlmICggaXNWYWxpZFZhbHVlICkge1xuXG5cdFx0XHRcdC8vIFRvZ2dsZSBpbmRpdmlkdWFsIGNsYXNzIG5hbWVzXG5cdFx0XHRcdGkgPSAwO1xuXHRcdFx0XHRzZWxmID0galF1ZXJ5KCB0aGlzICk7XG5cdFx0XHRcdGNsYXNzTmFtZXMgPSBjbGFzc2VzVG9BcnJheSggdmFsdWUgKTtcblxuXHRcdFx0XHR3aGlsZSAoICggY2xhc3NOYW1lID0gY2xhc3NOYW1lc1sgaSsrIF0gKSApIHtcblxuXHRcdFx0XHRcdC8vIENoZWNrIGVhY2ggY2xhc3NOYW1lIGdpdmVuLCBzcGFjZSBzZXBhcmF0ZWQgbGlzdFxuXHRcdFx0XHRcdGlmICggc2VsZi5oYXNDbGFzcyggY2xhc3NOYW1lICkgKSB7XG5cdFx0XHRcdFx0XHRzZWxmLnJlbW92ZUNsYXNzKCBjbGFzc05hbWUgKTtcblx0XHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdFx0c2VsZi5hZGRDbGFzcyggY2xhc3NOYW1lICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdC8vIFRvZ2dsZSB3aG9sZSBjbGFzcyBuYW1lXG5cdFx0XHR9IGVsc2UgaWYgKCB2YWx1ZSA9PT0gdW5kZWZpbmVkIHx8IHR5cGUgPT09IFwiYm9vbGVhblwiICkge1xuXHRcdFx0XHRjbGFzc05hbWUgPSBnZXRDbGFzcyggdGhpcyApO1xuXHRcdFx0XHRpZiAoIGNsYXNzTmFtZSApIHtcblxuXHRcdFx0XHRcdC8vIFN0b3JlIGNsYXNzTmFtZSBpZiBzZXRcblx0XHRcdFx0XHRkYXRhUHJpdi5zZXQoIHRoaXMsIFwiX19jbGFzc05hbWVfX1wiLCBjbGFzc05hbWUgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIElmIHRoZSBlbGVtZW50IGhhcyBhIGNsYXNzIG5hbWUgb3IgaWYgd2UncmUgcGFzc2VkIGBmYWxzZWAsXG5cdFx0XHRcdC8vIHRoZW4gcmVtb3ZlIHRoZSB3aG9sZSBjbGFzc25hbWUgKGlmIHRoZXJlIHdhcyBvbmUsIHRoZSBhYm92ZSBzYXZlZCBpdCkuXG5cdFx0XHRcdC8vIE90aGVyd2lzZSBicmluZyBiYWNrIHdoYXRldmVyIHdhcyBwcmV2aW91c2x5IHNhdmVkIChpZiBhbnl0aGluZyksXG5cdFx0XHRcdC8vIGZhbGxpbmcgYmFjayB0byB0aGUgZW1wdHkgc3RyaW5nIGlmIG5vdGhpbmcgd2FzIHN0b3JlZC5cblx0XHRcdFx0aWYgKCB0aGlzLnNldEF0dHJpYnV0ZSApIHtcblx0XHRcdFx0XHR0aGlzLnNldEF0dHJpYnV0ZSggXCJjbGFzc1wiLFxuXHRcdFx0XHRcdFx0Y2xhc3NOYW1lIHx8IHZhbHVlID09PSBmYWxzZSA/XG5cdFx0XHRcdFx0XHRcIlwiIDpcblx0XHRcdFx0XHRcdGRhdGFQcml2LmdldCggdGhpcywgXCJfX2NsYXNzTmFtZV9fXCIgKSB8fCBcIlwiXG5cdFx0XHRcdFx0KTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH0gKTtcblx0fSxcblxuXHRoYXNDbGFzczogZnVuY3Rpb24oIHNlbGVjdG9yICkge1xuXHRcdHZhciBjbGFzc05hbWUsIGVsZW0sXG5cdFx0XHRpID0gMDtcblxuXHRcdGNsYXNzTmFtZSA9IFwiIFwiICsgc2VsZWN0b3IgKyBcIiBcIjtcblx0XHR3aGlsZSAoICggZWxlbSA9IHRoaXNbIGkrKyBdICkgKSB7XG5cdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDEgJiZcblx0XHRcdFx0KCBcIiBcIiArIHN0cmlwQW5kQ29sbGFwc2UoIGdldENsYXNzKCBlbGVtICkgKSArIFwiIFwiICkuaW5kZXhPZiggY2xhc3NOYW1lICkgPiAtMSApIHtcblx0XHRcdFx0XHRyZXR1cm4gdHJ1ZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZmFsc2U7XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIHJyZXR1cm4gPSAvXFxyL2c7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0dmFsOiBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0dmFyIGhvb2tzLCByZXQsIHZhbHVlSXNGdW5jdGlvbixcblx0XHRcdGVsZW0gPSB0aGlzWyAwIF07XG5cblx0XHRpZiAoICFhcmd1bWVudHMubGVuZ3RoICkge1xuXHRcdFx0aWYgKCBlbGVtICkge1xuXHRcdFx0XHRob29rcyA9IGpRdWVyeS52YWxIb29rc1sgZWxlbS50eXBlIF0gfHxcblx0XHRcdFx0XHRqUXVlcnkudmFsSG9va3NbIGVsZW0ubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHRcdGlmICggaG9va3MgJiZcblx0XHRcdFx0XHRcImdldFwiIGluIGhvb2tzICYmXG5cdFx0XHRcdFx0KCByZXQgPSBob29rcy5nZXQoIGVsZW0sIFwidmFsdWVcIiApICkgIT09IHVuZGVmaW5lZFxuXHRcdFx0XHQpIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0O1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0ID0gZWxlbS52YWx1ZTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgbW9zdCBjb21tb24gc3RyaW5nIGNhc2VzXG5cdFx0XHRcdGlmICggdHlwZW9mIHJldCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdFx0XHRyZXR1cm4gcmV0LnJlcGxhY2UoIHJyZXR1cm4sIFwiXCIgKTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIEhhbmRsZSBjYXNlcyB3aGVyZSB2YWx1ZSBpcyBudWxsL3VuZGVmIG9yIG51bWJlclxuXHRcdFx0XHRyZXR1cm4gcmV0ID09IG51bGwgPyBcIlwiIDogcmV0O1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0dmFsdWVJc0Z1bmN0aW9uID0gaXNGdW5jdGlvbiggdmFsdWUgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0dmFyIHZhbDtcblxuXHRcdFx0aWYgKCB0aGlzLm5vZGVUeXBlICE9PSAxICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsdWVJc0Z1bmN0aW9uICkge1xuXHRcdFx0XHR2YWwgPSB2YWx1ZS5jYWxsKCB0aGlzLCBpLCBqUXVlcnkoIHRoaXMgKS52YWwoKSApO1xuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0dmFsID0gdmFsdWU7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFRyZWF0IG51bGwvdW5kZWZpbmVkIGFzIFwiXCI7IGNvbnZlcnQgbnVtYmVycyB0byBzdHJpbmdcblx0XHRcdGlmICggdmFsID09IG51bGwgKSB7XG5cdFx0XHRcdHZhbCA9IFwiXCI7XG5cblx0XHRcdH0gZWxzZSBpZiAoIHR5cGVvZiB2YWwgPT09IFwibnVtYmVyXCIgKSB7XG5cdFx0XHRcdHZhbCArPSBcIlwiO1xuXG5cdFx0XHR9IGVsc2UgaWYgKCBBcnJheS5pc0FycmF5KCB2YWwgKSApIHtcblx0XHRcdFx0dmFsID0galF1ZXJ5Lm1hcCggdmFsLCBmdW5jdGlvbiggdmFsdWUgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHZhbHVlID09IG51bGwgPyBcIlwiIDogdmFsdWUgKyBcIlwiO1xuXHRcdFx0XHR9ICk7XG5cdFx0XHR9XG5cblx0XHRcdGhvb2tzID0galF1ZXJ5LnZhbEhvb2tzWyB0aGlzLnR5cGUgXSB8fCBqUXVlcnkudmFsSG9va3NbIHRoaXMubm9kZU5hbWUudG9Mb3dlckNhc2UoKSBdO1xuXG5cdFx0XHQvLyBJZiBzZXQgcmV0dXJucyB1bmRlZmluZWQsIGZhbGwgYmFjayB0byBub3JtYWwgc2V0dGluZ1xuXHRcdFx0aWYgKCAhaG9va3MgfHwgISggXCJzZXRcIiBpbiBob29rcyApIHx8IGhvb2tzLnNldCggdGhpcywgdmFsLCBcInZhbHVlXCIgKSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHR0aGlzLnZhbHVlID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0gKTtcblx0fVxufSApO1xuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cdHZhbEhvb2tzOiB7XG5cdFx0b3B0aW9uOiB7XG5cdFx0XHRnZXQ6IGZ1bmN0aW9uKCBlbGVtICkge1xuXG5cdFx0XHRcdHZhciB2YWwgPSBqUXVlcnkuZmluZC5hdHRyKCBlbGVtLCBcInZhbHVlXCIgKTtcblx0XHRcdFx0cmV0dXJuIHZhbCAhPSBudWxsID9cblx0XHRcdFx0XHR2YWwgOlxuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD0xMCAtIDExIG9ubHlcblx0XHRcdFx0XHQvLyBvcHRpb24udGV4dCB0aHJvd3MgZXhjZXB0aW9ucyAoIzE0Njg2LCAjMTQ4NTgpXG5cdFx0XHRcdFx0Ly8gU3RyaXAgYW5kIGNvbGxhcHNlIHdoaXRlc3BhY2Vcblx0XHRcdFx0XHQvLyBodHRwczovL2h0bWwuc3BlYy53aGF0d2cub3JnLyNzdHJpcC1hbmQtY29sbGFwc2Utd2hpdGVzcGFjZVxuXHRcdFx0XHRcdHN0cmlwQW5kQ29sbGFwc2UoIGpRdWVyeS50ZXh0KCBlbGVtICkgKTtcblx0XHRcdH1cblx0XHR9LFxuXHRcdHNlbGVjdDoge1xuXHRcdFx0Z2V0OiBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdFx0dmFyIHZhbHVlLCBvcHRpb24sIGksXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHRpbmRleCA9IGVsZW0uc2VsZWN0ZWRJbmRleCxcblx0XHRcdFx0XHRvbmUgPSBlbGVtLnR5cGUgPT09IFwic2VsZWN0LW9uZVwiLFxuXHRcdFx0XHRcdHZhbHVlcyA9IG9uZSA/IG51bGwgOiBbXSxcblx0XHRcdFx0XHRtYXggPSBvbmUgPyBpbmRleCArIDEgOiBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHRpZiAoIGluZGV4IDwgMCApIHtcblx0XHRcdFx0XHRpID0gbWF4O1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0aSA9IG9uZSA/IGluZGV4IDogMDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIExvb3AgdGhyb3VnaCBhbGwgdGhlIHNlbGVjdGVkIG9wdGlvbnNcblx0XHRcdFx0Zm9yICggOyBpIDwgbWF4OyBpKysgKSB7XG5cdFx0XHRcdFx0b3B0aW9uID0gb3B0aW9uc1sgaSBdO1xuXG5cdFx0XHRcdFx0Ly8gU3VwcG9ydDogSUUgPD05IG9ubHlcblx0XHRcdFx0XHQvLyBJRTgtOSBkb2Vzbid0IHVwZGF0ZSBzZWxlY3RlZCBhZnRlciBmb3JtIHJlc2V0ICgjMjU1MSlcblx0XHRcdFx0XHRpZiAoICggb3B0aW9uLnNlbGVjdGVkIHx8IGkgPT09IGluZGV4ICkgJiZcblxuXHRcdFx0XHRcdFx0XHQvLyBEb24ndCByZXR1cm4gb3B0aW9ucyB0aGF0IGFyZSBkaXNhYmxlZCBvciBpbiBhIGRpc2FibGVkIG9wdGdyb3VwXG5cdFx0XHRcdFx0XHRcdCFvcHRpb24uZGlzYWJsZWQgJiZcblx0XHRcdFx0XHRcdFx0KCAhb3B0aW9uLnBhcmVudE5vZGUuZGlzYWJsZWQgfHxcblx0XHRcdFx0XHRcdFx0XHQhbm9kZU5hbWUoIG9wdGlvbi5wYXJlbnROb2RlLCBcIm9wdGdyb3VwXCIgKSApICkge1xuXG5cdFx0XHRcdFx0XHQvLyBHZXQgdGhlIHNwZWNpZmljIHZhbHVlIGZvciB0aGUgb3B0aW9uXG5cdFx0XHRcdFx0XHR2YWx1ZSA9IGpRdWVyeSggb3B0aW9uICkudmFsKCk7XG5cblx0XHRcdFx0XHRcdC8vIFdlIGRvbid0IG5lZWQgYW4gYXJyYXkgZm9yIG9uZSBzZWxlY3RzXG5cdFx0XHRcdFx0XHRpZiAoIG9uZSApIHtcblx0XHRcdFx0XHRcdFx0cmV0dXJuIHZhbHVlO1xuXHRcdFx0XHRcdFx0fVxuXG5cdFx0XHRcdFx0XHQvLyBNdWx0aS1TZWxlY3RzIHJldHVybiBhbiBhcnJheVxuXHRcdFx0XHRcdFx0dmFsdWVzLnB1c2goIHZhbHVlICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH0sXG5cblx0XHRcdHNldDogZnVuY3Rpb24oIGVsZW0sIHZhbHVlICkge1xuXHRcdFx0XHR2YXIgb3B0aW9uU2V0LCBvcHRpb24sXG5cdFx0XHRcdFx0b3B0aW9ucyA9IGVsZW0ub3B0aW9ucyxcblx0XHRcdFx0XHR2YWx1ZXMgPSBqUXVlcnkubWFrZUFycmF5KCB2YWx1ZSApLFxuXHRcdFx0XHRcdGkgPSBvcHRpb25zLmxlbmd0aDtcblxuXHRcdFx0XHR3aGlsZSAoIGktLSApIHtcblx0XHRcdFx0XHRvcHRpb24gPSBvcHRpb25zWyBpIF07XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZGlzYWJsZSBuby1jb25kLWFzc2lnbiAqL1xuXG5cdFx0XHRcdFx0aWYgKCBvcHRpb24uc2VsZWN0ZWQgPVxuXHRcdFx0XHRcdFx0alF1ZXJ5LmluQXJyYXkoIGpRdWVyeS52YWxIb29rcy5vcHRpb24uZ2V0KCBvcHRpb24gKSwgdmFsdWVzICkgPiAtMVxuXHRcdFx0XHRcdCkge1xuXHRcdFx0XHRcdFx0b3B0aW9uU2V0ID0gdHJ1ZTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHQvKiBlc2xpbnQtZW5hYmxlIG5vLWNvbmQtYXNzaWduICovXG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBGb3JjZSBicm93c2VycyB0byBiZWhhdmUgY29uc2lzdGVudGx5IHdoZW4gbm9uLW1hdGNoaW5nIHZhbHVlIGlzIHNldFxuXHRcdFx0XHRpZiAoICFvcHRpb25TZXQgKSB7XG5cdFx0XHRcdFx0ZWxlbS5zZWxlY3RlZEluZGV4ID0gLTE7XG5cdFx0XHRcdH1cblx0XHRcdFx0cmV0dXJuIHZhbHVlcztcblx0XHRcdH1cblx0XHR9XG5cdH1cbn0gKTtcblxuLy8gUmFkaW9zIGFuZCBjaGVja2JveGVzIGdldHRlci9zZXR0ZXJcbmpRdWVyeS5lYWNoKCBbIFwicmFkaW9cIiwgXCJjaGVja2JveFwiIF0sIGZ1bmN0aW9uKCkge1xuXHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXSA9IHtcblx0XHRzZXQ6IGZ1bmN0aW9uKCBlbGVtLCB2YWx1ZSApIHtcblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsdWUgKSApIHtcblx0XHRcdFx0cmV0dXJuICggZWxlbS5jaGVja2VkID0galF1ZXJ5LmluQXJyYXkoIGpRdWVyeSggZWxlbSApLnZhbCgpLCB2YWx1ZSApID4gLTEgKTtcblx0XHRcdH1cblx0XHR9XG5cdH07XG5cdGlmICggIXN1cHBvcnQuY2hlY2tPbiApIHtcblx0XHRqUXVlcnkudmFsSG9va3NbIHRoaXMgXS5nZXQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0XHRcdHJldHVybiBlbGVtLmdldEF0dHJpYnV0ZSggXCJ2YWx1ZVwiICkgPT09IG51bGwgPyBcIm9uXCIgOiBlbGVtLnZhbHVlO1xuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxuLy8gUmV0dXJuIGpRdWVyeSBmb3IgYXR0cmlidXRlcy1vbmx5IGluY2x1c2lvblxuXG5cbnN1cHBvcnQuZm9jdXNpbiA9IFwib25mb2N1c2luXCIgaW4gd2luZG93O1xuXG5cbnZhciByZm9jdXNNb3JwaCA9IC9eKD86Zm9jdXNpbmZvY3VzfGZvY3Vzb3V0Ymx1cikkLyxcblx0c3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgPSBmdW5jdGlvbiggZSApIHtcblx0XHRlLnN0b3BQcm9wYWdhdGlvbigpO1xuXHR9O1xuXG5qUXVlcnkuZXh0ZW5kKCBqUXVlcnkuZXZlbnQsIHtcblxuXHR0cmlnZ2VyOiBmdW5jdGlvbiggZXZlbnQsIGRhdGEsIGVsZW0sIG9ubHlIYW5kbGVycyApIHtcblxuXHRcdHZhciBpLCBjdXIsIHRtcCwgYnViYmxlVHlwZSwgb250eXBlLCBoYW5kbGUsIHNwZWNpYWwsIGxhc3RFbGVtZW50LFxuXHRcdFx0ZXZlbnRQYXRoID0gWyBlbGVtIHx8IGRvY3VtZW50IF0sXG5cdFx0XHR0eXBlID0gaGFzT3duLmNhbGwoIGV2ZW50LCBcInR5cGVcIiApID8gZXZlbnQudHlwZSA6IGV2ZW50LFxuXHRcdFx0bmFtZXNwYWNlcyA9IGhhc093bi5jYWxsKCBldmVudCwgXCJuYW1lc3BhY2VcIiApID8gZXZlbnQubmFtZXNwYWNlLnNwbGl0KCBcIi5cIiApIDogW107XG5cblx0XHRjdXIgPSBsYXN0RWxlbWVudCA9IHRtcCA9IGVsZW0gPSBlbGVtIHx8IGRvY3VtZW50O1xuXG5cdFx0Ly8gRG9uJ3QgZG8gZXZlbnRzIG9uIHRleHQgYW5kIGNvbW1lbnQgbm9kZXNcblx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDMgfHwgZWxlbS5ub2RlVHlwZSA9PT0gOCApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBmb2N1cy9ibHVyIG1vcnBocyB0byBmb2N1c2luL291dDsgZW5zdXJlIHdlJ3JlIG5vdCBmaXJpbmcgdGhlbSByaWdodCBub3dcblx0XHRpZiAoIHJmb2N1c01vcnBoLnRlc3QoIHR5cGUgKyBqUXVlcnkuZXZlbnQudHJpZ2dlcmVkICkgKSB7XG5cdFx0XHRyZXR1cm47XG5cdFx0fVxuXG5cdFx0aWYgKCB0eXBlLmluZGV4T2YoIFwiLlwiICkgPiAtMSApIHtcblxuXHRcdFx0Ly8gTmFtZXNwYWNlZCB0cmlnZ2VyOyBjcmVhdGUgYSByZWdleHAgdG8gbWF0Y2ggZXZlbnQgdHlwZSBpbiBoYW5kbGUoKVxuXHRcdFx0bmFtZXNwYWNlcyA9IHR5cGUuc3BsaXQoIFwiLlwiICk7XG5cdFx0XHR0eXBlID0gbmFtZXNwYWNlcy5zaGlmdCgpO1xuXHRcdFx0bmFtZXNwYWNlcy5zb3J0KCk7XG5cdFx0fVxuXHRcdG9udHlwZSA9IHR5cGUuaW5kZXhPZiggXCI6XCIgKSA8IDAgJiYgXCJvblwiICsgdHlwZTtcblxuXHRcdC8vIENhbGxlciBjYW4gcGFzcyBpbiBhIGpRdWVyeS5FdmVudCBvYmplY3QsIE9iamVjdCwgb3IganVzdCBhbiBldmVudCB0eXBlIHN0cmluZ1xuXHRcdGV2ZW50ID0gZXZlbnRbIGpRdWVyeS5leHBhbmRvIF0gP1xuXHRcdFx0ZXZlbnQgOlxuXHRcdFx0bmV3IGpRdWVyeS5FdmVudCggdHlwZSwgdHlwZW9mIGV2ZW50ID09PSBcIm9iamVjdFwiICYmIGV2ZW50ICk7XG5cblx0XHQvLyBUcmlnZ2VyIGJpdG1hc2s6ICYgMSBmb3IgbmF0aXZlIGhhbmRsZXJzOyAmIDIgZm9yIGpRdWVyeSAoYWx3YXlzIHRydWUpXG5cdFx0ZXZlbnQuaXNUcmlnZ2VyID0gb25seUhhbmRsZXJzID8gMiA6IDM7XG5cdFx0ZXZlbnQubmFtZXNwYWNlID0gbmFtZXNwYWNlcy5qb2luKCBcIi5cIiApO1xuXHRcdGV2ZW50LnJuYW1lc3BhY2UgPSBldmVudC5uYW1lc3BhY2UgP1xuXHRcdFx0bmV3IFJlZ0V4cCggXCIoXnxcXFxcLilcIiArIG5hbWVzcGFjZXMuam9pbiggXCJcXFxcLig/Oi4qXFxcXC58KVwiICkgKyBcIihcXFxcLnwkKVwiICkgOlxuXHRcdFx0bnVsbDtcblxuXHRcdC8vIENsZWFuIHVwIHRoZSBldmVudCBpbiBjYXNlIGl0IGlzIGJlaW5nIHJldXNlZFxuXHRcdGV2ZW50LnJlc3VsdCA9IHVuZGVmaW5lZDtcblx0XHRpZiAoICFldmVudC50YXJnZXQgKSB7XG5cdFx0XHRldmVudC50YXJnZXQgPSBlbGVtO1xuXHRcdH1cblxuXHRcdC8vIENsb25lIGFueSBpbmNvbWluZyBkYXRhIGFuZCBwcmVwZW5kIHRoZSBldmVudCwgY3JlYXRpbmcgdGhlIGhhbmRsZXIgYXJnIGxpc3Rcblx0XHRkYXRhID0gZGF0YSA9PSBudWxsID9cblx0XHRcdFsgZXZlbnQgXSA6XG5cdFx0XHRqUXVlcnkubWFrZUFycmF5KCBkYXRhLCBbIGV2ZW50IF0gKTtcblxuXHRcdC8vIEFsbG93IHNwZWNpYWwgZXZlbnRzIHRvIGRyYXcgb3V0c2lkZSB0aGUgbGluZXNcblx0XHRzcGVjaWFsID0galF1ZXJ5LmV2ZW50LnNwZWNpYWxbIHR5cGUgXSB8fCB7fTtcblx0XHRpZiAoICFvbmx5SGFuZGxlcnMgJiYgc3BlY2lhbC50cmlnZ2VyICYmIHNwZWNpYWwudHJpZ2dlci5hcHBseSggZWxlbSwgZGF0YSApID09PSBmYWxzZSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBEZXRlcm1pbmUgZXZlbnQgcHJvcGFnYXRpb24gcGF0aCBpbiBhZHZhbmNlLCBwZXIgVzNDIGV2ZW50cyBzcGVjICgjOTk1MSlcblx0XHQvLyBCdWJibGUgdXAgdG8gZG9jdW1lbnQsIHRoZW4gdG8gd2luZG93OyB3YXRjaCBmb3IgYSBnbG9iYWwgb3duZXJEb2N1bWVudCB2YXIgKCM5NzI0KVxuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhc3BlY2lhbC5ub0J1YmJsZSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0YnViYmxlVHlwZSA9IHNwZWNpYWwuZGVsZWdhdGVUeXBlIHx8IHR5cGU7XG5cdFx0XHRpZiAoICFyZm9jdXNNb3JwaC50ZXN0KCBidWJibGVUeXBlICsgdHlwZSApICkge1xuXHRcdFx0XHRjdXIgPSBjdXIucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGZvciAoIDsgY3VyOyBjdXIgPSBjdXIucGFyZW50Tm9kZSApIHtcblx0XHRcdFx0ZXZlbnRQYXRoLnB1c2goIGN1ciApO1xuXHRcdFx0XHR0bXAgPSBjdXI7XG5cdFx0XHR9XG5cblx0XHRcdC8vIE9ubHkgYWRkIHdpbmRvdyBpZiB3ZSBnb3QgdG8gZG9jdW1lbnQgKGUuZy4sIG5vdCBwbGFpbiBvYmogb3IgZGV0YWNoZWQgRE9NKVxuXHRcdFx0aWYgKCB0bXAgPT09ICggZWxlbS5vd25lckRvY3VtZW50IHx8IGRvY3VtZW50ICkgKSB7XG5cdFx0XHRcdGV2ZW50UGF0aC5wdXNoKCB0bXAuZGVmYXVsdFZpZXcgfHwgdG1wLnBhcmVudFdpbmRvdyB8fCB3aW5kb3cgKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBGaXJlIGhhbmRsZXJzIG9uIHRoZSBldmVudCBwYXRoXG5cdFx0aSA9IDA7XG5cdFx0d2hpbGUgKCAoIGN1ciA9IGV2ZW50UGF0aFsgaSsrIF0gKSAmJiAhZXZlbnQuaXNQcm9wYWdhdGlvblN0b3BwZWQoKSApIHtcblx0XHRcdGxhc3RFbGVtZW50ID0gY3VyO1xuXHRcdFx0ZXZlbnQudHlwZSA9IGkgPiAxID9cblx0XHRcdFx0YnViYmxlVHlwZSA6XG5cdFx0XHRcdHNwZWNpYWwuYmluZFR5cGUgfHwgdHlwZTtcblxuXHRcdFx0Ly8galF1ZXJ5IGhhbmRsZXJcblx0XHRcdGhhbmRsZSA9ICggZGF0YVByaXYuZ2V0KCBjdXIsIFwiZXZlbnRzXCIgKSB8fCB7fSApWyBldmVudC50eXBlIF0gJiZcblx0XHRcdFx0ZGF0YVByaXYuZ2V0KCBjdXIsIFwiaGFuZGxlXCIgKTtcblx0XHRcdGlmICggaGFuZGxlICkge1xuXHRcdFx0XHRoYW5kbGUuYXBwbHkoIGN1ciwgZGF0YSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBOYXRpdmUgaGFuZGxlclxuXHRcdFx0aGFuZGxlID0gb250eXBlICYmIGN1clsgb250eXBlIF07XG5cdFx0XHRpZiAoIGhhbmRsZSAmJiBoYW5kbGUuYXBwbHkgJiYgYWNjZXB0RGF0YSggY3VyICkgKSB7XG5cdFx0XHRcdGV2ZW50LnJlc3VsdCA9IGhhbmRsZS5hcHBseSggY3VyLCBkYXRhICk7XG5cdFx0XHRcdGlmICggZXZlbnQucmVzdWx0ID09PSBmYWxzZSApIHtcblx0XHRcdFx0XHRldmVudC5wcmV2ZW50RGVmYXVsdCgpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHRcdGV2ZW50LnR5cGUgPSB0eXBlO1xuXG5cdFx0Ly8gSWYgbm9ib2R5IHByZXZlbnRlZCB0aGUgZGVmYXVsdCBhY3Rpb24sIGRvIGl0IG5vd1xuXHRcdGlmICggIW9ubHlIYW5kbGVycyAmJiAhZXZlbnQuaXNEZWZhdWx0UHJldmVudGVkKCkgKSB7XG5cblx0XHRcdGlmICggKCAhc3BlY2lhbC5fZGVmYXVsdCB8fFxuXHRcdFx0XHRzcGVjaWFsLl9kZWZhdWx0LmFwcGx5KCBldmVudFBhdGgucG9wKCksIGRhdGEgKSA9PT0gZmFsc2UgKSAmJlxuXHRcdFx0XHRhY2NlcHREYXRhKCBlbGVtICkgKSB7XG5cblx0XHRcdFx0Ly8gQ2FsbCBhIG5hdGl2ZSBET00gbWV0aG9kIG9uIHRoZSB0YXJnZXQgd2l0aCB0aGUgc2FtZSBuYW1lIGFzIHRoZSBldmVudC5cblx0XHRcdFx0Ly8gRG9uJ3QgZG8gZGVmYXVsdCBhY3Rpb25zIG9uIHdpbmRvdywgdGhhdCdzIHdoZXJlIGdsb2JhbCB2YXJpYWJsZXMgYmUgKCM2MTcwKVxuXHRcdFx0XHRpZiAoIG9udHlwZSAmJiBpc0Z1bmN0aW9uKCBlbGVtWyB0eXBlIF0gKSAmJiAhaXNXaW5kb3coIGVsZW0gKSApIHtcblxuXHRcdFx0XHRcdC8vIERvbid0IHJlLXRyaWdnZXIgYW4gb25GT08gZXZlbnQgd2hlbiB3ZSBjYWxsIGl0cyBGT08oKSBtZXRob2Rcblx0XHRcdFx0XHR0bXAgPSBlbGVtWyBvbnR5cGUgXTtcblxuXHRcdFx0XHRcdGlmICggdG1wICkge1xuXHRcdFx0XHRcdFx0ZWxlbVsgb250eXBlIF0gPSBudWxsO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdC8vIFByZXZlbnQgcmUtdHJpZ2dlcmluZyBvZiB0aGUgc2FtZSBldmVudCwgc2luY2Ugd2UgYWxyZWFkeSBidWJibGVkIGl0IGFib3ZlXG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXJlZCA9IHR5cGU7XG5cblx0XHRcdFx0XHRpZiAoIGV2ZW50LmlzUHJvcGFnYXRpb25TdG9wcGVkKCkgKSB7XG5cdFx0XHRcdFx0XHRsYXN0RWxlbWVudC5hZGRFdmVudExpc3RlbmVyKCB0eXBlLCBzdG9wUHJvcGFnYXRpb25DYWxsYmFjayApO1xuXHRcdFx0XHRcdH1cblxuXHRcdFx0XHRcdGVsZW1bIHR5cGUgXSgpO1xuXG5cdFx0XHRcdFx0aWYgKCBldmVudC5pc1Byb3BhZ2F0aW9uU3RvcHBlZCgpICkge1xuXHRcdFx0XHRcdFx0bGFzdEVsZW1lbnQucmVtb3ZlRXZlbnRMaXN0ZW5lciggdHlwZSwgc3RvcFByb3BhZ2F0aW9uQ2FsbGJhY2sgKTtcblx0XHRcdFx0XHR9XG5cblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlcmVkID0gdW5kZWZpbmVkO1xuXG5cdFx0XHRcdFx0aWYgKCB0bXAgKSB7XG5cdFx0XHRcdFx0XHRlbGVtWyBvbnR5cGUgXSA9IHRtcDtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4gZXZlbnQucmVzdWx0O1xuXHR9LFxuXG5cdC8vIFBpZ2d5YmFjayBvbiBhIGRvbm9yIGV2ZW50IHRvIHNpbXVsYXRlIGEgZGlmZmVyZW50IG9uZVxuXHQvLyBVc2VkIG9ubHkgZm9yIGBmb2N1cyhpbiB8IG91dClgIGV2ZW50c1xuXHRzaW11bGF0ZTogZnVuY3Rpb24oIHR5cGUsIGVsZW0sIGV2ZW50ICkge1xuXHRcdHZhciBlID0galF1ZXJ5LmV4dGVuZChcblx0XHRcdG5ldyBqUXVlcnkuRXZlbnQoKSxcblx0XHRcdGV2ZW50LFxuXHRcdFx0e1xuXHRcdFx0XHR0eXBlOiB0eXBlLFxuXHRcdFx0XHRpc1NpbXVsYXRlZDogdHJ1ZVxuXHRcdFx0fVxuXHRcdCk7XG5cblx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggZSwgbnVsbCwgZWxlbSApO1xuXHR9XG5cbn0gKTtcblxualF1ZXJ5LmZuLmV4dGVuZCgge1xuXG5cdHRyaWdnZXI6IGZ1bmN0aW9uKCB0eXBlLCBkYXRhICkge1xuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIHRoaXMgKTtcblx0XHR9ICk7XG5cdH0sXG5cdHRyaWdnZXJIYW5kbGVyOiBmdW5jdGlvbiggdHlwZSwgZGF0YSApIHtcblx0XHR2YXIgZWxlbSA9IHRoaXNbIDAgXTtcblx0XHRpZiAoIGVsZW0gKSB7XG5cdFx0XHRyZXR1cm4galF1ZXJ5LmV2ZW50LnRyaWdnZXIoIHR5cGUsIGRhdGEsIGVsZW0sIHRydWUgKTtcblx0XHR9XG5cdH1cbn0gKTtcblxuXG4vLyBTdXBwb3J0OiBGaXJlZm94IDw9NDRcbi8vIEZpcmVmb3ggZG9lc24ndCBoYXZlIGZvY3VzKGluIHwgb3V0KSBldmVudHNcbi8vIFJlbGF0ZWQgdGlja2V0IC0gaHR0cHM6Ly9idWd6aWxsYS5tb3ppbGxhLm9yZy9zaG93X2J1Zy5jZ2k/aWQ9Njg3Nzg3XG4vL1xuLy8gU3VwcG9ydDogQ2hyb21lIDw9NDggLSA0OSwgU2FmYXJpIDw9OS4wIC0gOS4xXG4vLyBmb2N1cyhpbiB8IG91dCkgZXZlbnRzIGZpcmUgYWZ0ZXIgZm9jdXMgJiBibHVyIGV2ZW50cyxcbi8vIHdoaWNoIGlzIHNwZWMgdmlvbGF0aW9uIC0gaHR0cDovL3d3dy53My5vcmcvVFIvRE9NLUxldmVsLTMtRXZlbnRzLyNldmVudHMtZm9jdXNldmVudC1ldmVudC1vcmRlclxuLy8gUmVsYXRlZCB0aWNrZXQgLSBodHRwczovL2J1Z3MuY2hyb21pdW0ub3JnL3AvY2hyb21pdW0vaXNzdWVzL2RldGFpbD9pZD00NDk4NTdcbmlmICggIXN1cHBvcnQuZm9jdXNpbiApIHtcblx0alF1ZXJ5LmVhY2goIHsgZm9jdXM6IFwiZm9jdXNpblwiLCBibHVyOiBcImZvY3Vzb3V0XCIgfSwgZnVuY3Rpb24oIG9yaWcsIGZpeCApIHtcblxuXHRcdC8vIEF0dGFjaCBhIHNpbmdsZSBjYXB0dXJpbmcgaGFuZGxlciBvbiB0aGUgZG9jdW1lbnQgd2hpbGUgc29tZW9uZSB3YW50cyBmb2N1c2luL2ZvY3Vzb3V0XG5cdFx0dmFyIGhhbmRsZXIgPSBmdW5jdGlvbiggZXZlbnQgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQuc2ltdWxhdGUoIGZpeCwgZXZlbnQudGFyZ2V0LCBqUXVlcnkuZXZlbnQuZml4KCBldmVudCApICk7XG5cdFx0fTtcblxuXHRcdGpRdWVyeS5ldmVudC5zcGVjaWFsWyBmaXggXSA9IHtcblx0XHRcdHNldHVwOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGRvYyA9IHRoaXMub3duZXJEb2N1bWVudCB8fCB0aGlzLFxuXHRcdFx0XHRcdGF0dGFjaGVzID0gZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5hZGRFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdH1cblx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgKCBhdHRhY2hlcyB8fCAwICkgKyAxICk7XG5cdFx0XHR9LFxuXHRcdFx0dGVhcmRvd246IGZ1bmN0aW9uKCkge1xuXHRcdFx0XHR2YXIgZG9jID0gdGhpcy5vd25lckRvY3VtZW50IHx8IHRoaXMsXG5cdFx0XHRcdFx0YXR0YWNoZXMgPSBkYXRhUHJpdi5hY2Nlc3MoIGRvYywgZml4ICkgLSAxO1xuXG5cdFx0XHRcdGlmICggIWF0dGFjaGVzICkge1xuXHRcdFx0XHRcdGRvYy5yZW1vdmVFdmVudExpc3RlbmVyKCBvcmlnLCBoYW5kbGVyLCB0cnVlICk7XG5cdFx0XHRcdFx0ZGF0YVByaXYucmVtb3ZlKCBkb2MsIGZpeCApO1xuXG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0ZGF0YVByaXYuYWNjZXNzKCBkb2MsIGZpeCwgYXR0YWNoZXMgKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH0gKTtcbn1cbnZhciBsb2NhdGlvbiA9IHdpbmRvdy5sb2NhdGlvbjtcblxudmFyIG5vbmNlID0gRGF0ZS5ub3coKTtcblxudmFyIHJxdWVyeSA9ICggL1xcPy8gKTtcblxuXG5cbi8vIENyb3NzLWJyb3dzZXIgeG1sIHBhcnNpbmdcbmpRdWVyeS5wYXJzZVhNTCA9IGZ1bmN0aW9uKCBkYXRhICkge1xuXHR2YXIgeG1sO1xuXHRpZiAoICFkYXRhIHx8IHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBudWxsO1xuXHR9XG5cblx0Ly8gU3VwcG9ydDogSUUgOSAtIDExIG9ubHlcblx0Ly8gSUUgdGhyb3dzIG9uIHBhcnNlRnJvbVN0cmluZyB3aXRoIGludmFsaWQgaW5wdXQuXG5cdHRyeSB7XG5cdFx0eG1sID0gKCBuZXcgd2luZG93LkRPTVBhcnNlcigpICkucGFyc2VGcm9tU3RyaW5nKCBkYXRhLCBcInRleHQveG1sXCIgKTtcblx0fSBjYXRjaCAoIGUgKSB7XG5cdFx0eG1sID0gdW5kZWZpbmVkO1xuXHR9XG5cblx0aWYgKCAheG1sIHx8IHhtbC5nZXRFbGVtZW50c0J5VGFnTmFtZSggXCJwYXJzZXJlcnJvclwiICkubGVuZ3RoICkge1xuXHRcdGpRdWVyeS5lcnJvciggXCJJbnZhbGlkIFhNTDogXCIgKyBkYXRhICk7XG5cdH1cblx0cmV0dXJuIHhtbDtcbn07XG5cblxudmFyXG5cdHJicmFja2V0ID0gL1xcW1xcXSQvLFxuXHRyQ1JMRiA9IC9cXHI/XFxuL2csXG5cdHJzdWJtaXR0ZXJUeXBlcyA9IC9eKD86c3VibWl0fGJ1dHRvbnxpbWFnZXxyZXNldHxmaWxlKSQvaSxcblx0cnN1Ym1pdHRhYmxlID0gL14oPzppbnB1dHxzZWxlY3R8dGV4dGFyZWF8a2V5Z2VuKS9pO1xuXG5mdW5jdGlvbiBidWlsZFBhcmFtcyggcHJlZml4LCBvYmosIHRyYWRpdGlvbmFsLCBhZGQgKSB7XG5cdHZhciBuYW1lO1xuXG5cdGlmICggQXJyYXkuaXNBcnJheSggb2JqICkgKSB7XG5cblx0XHQvLyBTZXJpYWxpemUgYXJyYXkgaXRlbS5cblx0XHRqUXVlcnkuZWFjaCggb2JqLCBmdW5jdGlvbiggaSwgdiApIHtcblx0XHRcdGlmICggdHJhZGl0aW9uYWwgfHwgcmJyYWNrZXQudGVzdCggcHJlZml4ICkgKSB7XG5cblx0XHRcdFx0Ly8gVHJlYXQgZWFjaCBhcnJheSBpdGVtIGFzIGEgc2NhbGFyLlxuXHRcdFx0XHRhZGQoIHByZWZpeCwgdiApO1xuXG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEl0ZW0gaXMgbm9uLXNjYWxhciAoYXJyYXkgb3Igb2JqZWN0KSwgZW5jb2RlIGl0cyBudW1lcmljIGluZGV4LlxuXHRcdFx0XHRidWlsZFBhcmFtcyhcblx0XHRcdFx0XHRwcmVmaXggKyBcIltcIiArICggdHlwZW9mIHYgPT09IFwib2JqZWN0XCIgJiYgdiAhPSBudWxsID8gaSA6IFwiXCIgKSArIFwiXVwiLFxuXHRcdFx0XHRcdHYsXG5cdFx0XHRcdFx0dHJhZGl0aW9uYWwsXG5cdFx0XHRcdFx0YWRkXG5cdFx0XHRcdCk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXG5cdH0gZWxzZSBpZiAoICF0cmFkaXRpb25hbCAmJiB0b1R5cGUoIG9iaiApID09PSBcIm9iamVjdFwiICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIG9iamVjdCBpdGVtLlxuXHRcdGZvciAoIG5hbWUgaW4gb2JqICkge1xuXHRcdFx0YnVpbGRQYXJhbXMoIHByZWZpeCArIFwiW1wiICsgbmFtZSArIFwiXVwiLCBvYmpbIG5hbWUgXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblxuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHNjYWxhciBpdGVtLlxuXHRcdGFkZCggcHJlZml4LCBvYmogKTtcblx0fVxufVxuXG4vLyBTZXJpYWxpemUgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cyBvciBhIHNldCBvZlxuLy8ga2V5L3ZhbHVlcyBpbnRvIGEgcXVlcnkgc3RyaW5nXG5qUXVlcnkucGFyYW0gPSBmdW5jdGlvbiggYSwgdHJhZGl0aW9uYWwgKSB7XG5cdHZhciBwcmVmaXgsXG5cdFx0cyA9IFtdLFxuXHRcdGFkZCA9IGZ1bmN0aW9uKCBrZXksIHZhbHVlT3JGdW5jdGlvbiApIHtcblxuXHRcdFx0Ly8gSWYgdmFsdWUgaXMgYSBmdW5jdGlvbiwgaW52b2tlIGl0IGFuZCB1c2UgaXRzIHJldHVybiB2YWx1ZVxuXHRcdFx0dmFyIHZhbHVlID0gaXNGdW5jdGlvbiggdmFsdWVPckZ1bmN0aW9uICkgP1xuXHRcdFx0XHR2YWx1ZU9yRnVuY3Rpb24oKSA6XG5cdFx0XHRcdHZhbHVlT3JGdW5jdGlvbjtcblxuXHRcdFx0c1sgcy5sZW5ndGggXSA9IGVuY29kZVVSSUNvbXBvbmVudCgga2V5ICkgKyBcIj1cIiArXG5cdFx0XHRcdGVuY29kZVVSSUNvbXBvbmVudCggdmFsdWUgPT0gbnVsbCA/IFwiXCIgOiB2YWx1ZSApO1xuXHRcdH07XG5cblx0Ly8gSWYgYW4gYXJyYXkgd2FzIHBhc3NlZCBpbiwgYXNzdW1lIHRoYXQgaXQgaXMgYW4gYXJyYXkgb2YgZm9ybSBlbGVtZW50cy5cblx0aWYgKCBBcnJheS5pc0FycmF5KCBhICkgfHwgKCBhLmpxdWVyeSAmJiAhalF1ZXJ5LmlzUGxhaW5PYmplY3QoIGEgKSApICkge1xuXG5cdFx0Ly8gU2VyaWFsaXplIHRoZSBmb3JtIGVsZW1lbnRzXG5cdFx0alF1ZXJ5LmVhY2goIGEsIGZ1bmN0aW9uKCkge1xuXHRcdFx0YWRkKCB0aGlzLm5hbWUsIHRoaXMudmFsdWUgKTtcblx0XHR9ICk7XG5cblx0fSBlbHNlIHtcblxuXHRcdC8vIElmIHRyYWRpdGlvbmFsLCBlbmNvZGUgdGhlIFwib2xkXCIgd2F5ICh0aGUgd2F5IDEuMy4yIG9yIG9sZGVyXG5cdFx0Ly8gZGlkIGl0KSwgb3RoZXJ3aXNlIGVuY29kZSBwYXJhbXMgcmVjdXJzaXZlbHkuXG5cdFx0Zm9yICggcHJlZml4IGluIGEgKSB7XG5cdFx0XHRidWlsZFBhcmFtcyggcHJlZml4LCBhWyBwcmVmaXggXSwgdHJhZGl0aW9uYWwsIGFkZCApO1xuXHRcdH1cblx0fVxuXG5cdC8vIFJldHVybiB0aGUgcmVzdWx0aW5nIHNlcmlhbGl6YXRpb25cblx0cmV0dXJuIHMuam9pbiggXCImXCIgKTtcbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0c2VyaWFsaXplOiBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5LnBhcmFtKCB0aGlzLnNlcmlhbGl6ZUFycmF5KCkgKTtcblx0fSxcblx0c2VyaWFsaXplQXJyYXk6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIENhbiBhZGQgcHJvcEhvb2sgZm9yIFwiZWxlbWVudHNcIiB0byBmaWx0ZXIgb3IgYWRkIGZvcm0gZWxlbWVudHNcblx0XHRcdHZhciBlbGVtZW50cyA9IGpRdWVyeS5wcm9wKCB0aGlzLCBcImVsZW1lbnRzXCIgKTtcblx0XHRcdHJldHVybiBlbGVtZW50cyA/IGpRdWVyeS5tYWtlQXJyYXkoIGVsZW1lbnRzICkgOiB0aGlzO1xuXHRcdH0gKVxuXHRcdC5maWx0ZXIoIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHR5cGUgPSB0aGlzLnR5cGU7XG5cblx0XHRcdC8vIFVzZSAuaXMoIFwiOmRpc2FibGVkXCIgKSBzbyB0aGF0IGZpZWxkc2V0W2Rpc2FibGVkXSB3b3Jrc1xuXHRcdFx0cmV0dXJuIHRoaXMubmFtZSAmJiAhalF1ZXJ5KCB0aGlzICkuaXMoIFwiOmRpc2FibGVkXCIgKSAmJlxuXHRcdFx0XHRyc3VibWl0dGFibGUudGVzdCggdGhpcy5ub2RlTmFtZSApICYmICFyc3VibWl0dGVyVHlwZXMudGVzdCggdHlwZSApICYmXG5cdFx0XHRcdCggdGhpcy5jaGVja2VkIHx8ICFyY2hlY2thYmxlVHlwZS50ZXN0KCB0eXBlICkgKTtcblx0XHR9IClcblx0XHQubWFwKCBmdW5jdGlvbiggaSwgZWxlbSApIHtcblx0XHRcdHZhciB2YWwgPSBqUXVlcnkoIHRoaXMgKS52YWwoKTtcblxuXHRcdFx0aWYgKCB2YWwgPT0gbnVsbCApIHtcblx0XHRcdFx0cmV0dXJuIG51bGw7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggQXJyYXkuaXNBcnJheSggdmFsICkgKSB7XG5cdFx0XHRcdHJldHVybiBqUXVlcnkubWFwKCB2YWwsIGZ1bmN0aW9uKCB2YWwgKSB7XG5cdFx0XHRcdFx0cmV0dXJuIHsgbmFtZTogZWxlbS5uYW1lLCB2YWx1ZTogdmFsLnJlcGxhY2UoIHJDUkxGLCBcIlxcclxcblwiICkgfTtcblx0XHRcdFx0fSApO1xuXHRcdFx0fVxuXG5cdFx0XHRyZXR1cm4geyBuYW1lOiBlbGVtLm5hbWUsIHZhbHVlOiB2YWwucmVwbGFjZSggckNSTEYsIFwiXFxyXFxuXCIgKSB9O1xuXHRcdH0gKS5nZXQoKTtcblx0fVxufSApO1xuXG5cbnZhclxuXHRyMjAgPSAvJTIwL2csXG5cdHJoYXNoID0gLyMuKiQvLFxuXHRyYW50aUNhY2hlID0gLyhbPyZdKV89W14mXSovLFxuXHRyaGVhZGVycyA9IC9eKC4qPyk6WyBcXHRdKihbXlxcclxcbl0qKSQvbWcsXG5cblx0Ly8gIzc2NTMsICM4MTI1LCAjODE1MjogbG9jYWwgcHJvdG9jb2wgZGV0ZWN0aW9uXG5cdHJsb2NhbFByb3RvY29sID0gL14oPzphYm91dHxhcHB8YXBwLXN0b3JhZ2V8ListZXh0ZW5zaW9ufGZpbGV8cmVzfHdpZGdldCk6JC8sXG5cdHJub0NvbnRlbnQgPSAvXig/OkdFVHxIRUFEKSQvLFxuXHRycHJvdG9jb2wgPSAvXlxcL1xcLy8sXG5cblx0LyogUHJlZmlsdGVyc1xuXHQgKiAxKSBUaGV5IGFyZSB1c2VmdWwgdG8gaW50cm9kdWNlIGN1c3RvbSBkYXRhVHlwZXMgKHNlZSBhamF4L2pzb25wLmpzIGZvciBhbiBleGFtcGxlKVxuXHQgKiAyKSBUaGVzZSBhcmUgY2FsbGVkOlxuXHQgKiAgICAtIEJFRk9SRSBhc2tpbmcgZm9yIGEgdHJhbnNwb3J0XG5cdCAqICAgIC0gQUZURVIgcGFyYW0gc2VyaWFsaXphdGlvbiAocy5kYXRhIGlzIGEgc3RyaW5nIGlmIHMucHJvY2Vzc0RhdGEgaXMgdHJ1ZSlcblx0ICogMykga2V5IGlzIHRoZSBkYXRhVHlwZVxuXHQgKiA0KSB0aGUgY2F0Y2hhbGwgc3ltYm9sIFwiKlwiIGNhbiBiZSB1c2VkXG5cdCAqIDUpIGV4ZWN1dGlvbiB3aWxsIHN0YXJ0IHdpdGggdHJhbnNwb3J0IGRhdGFUeXBlIGFuZCBUSEVOIGNvbnRpbnVlIGRvd24gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHRwcmVmaWx0ZXJzID0ge30sXG5cblx0LyogVHJhbnNwb3J0cyBiaW5kaW5nc1xuXHQgKiAxKSBrZXkgaXMgdGhlIGRhdGFUeXBlXG5cdCAqIDIpIHRoZSBjYXRjaGFsbCBzeW1ib2wgXCIqXCIgY2FuIGJlIHVzZWRcblx0ICogMykgc2VsZWN0aW9uIHdpbGwgc3RhcnQgd2l0aCB0cmFuc3BvcnQgZGF0YVR5cGUgYW5kIFRIRU4gZ28gdG8gXCIqXCIgaWYgbmVlZGVkXG5cdCAqL1xuXHR0cmFuc3BvcnRzID0ge30sXG5cblx0Ly8gQXZvaWQgY29tbWVudC1wcm9sb2cgY2hhciBzZXF1ZW5jZSAoIzEwMDk4KTsgbXVzdCBhcHBlYXNlIGxpbnQgYW5kIGV2YWRlIGNvbXByZXNzaW9uXG5cdGFsbFR5cGVzID0gXCIqL1wiLmNvbmNhdCggXCIqXCIgKSxcblxuXHQvLyBBbmNob3IgdGFnIGZvciBwYXJzaW5nIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b3JpZ2luQW5jaG9yID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCggXCJhXCIgKTtcblx0b3JpZ2luQW5jaG9yLmhyZWYgPSBsb2NhdGlvbi5ocmVmO1xuXG4vLyBCYXNlIFwiY29uc3RydWN0b3JcIiBmb3IgalF1ZXJ5LmFqYXhQcmVmaWx0ZXIgYW5kIGpRdWVyeS5hamF4VHJhbnNwb3J0XG5mdW5jdGlvbiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHN0cnVjdHVyZSApIHtcblxuXHQvLyBkYXRhVHlwZUV4cHJlc3Npb24gaXMgb3B0aW9uYWwgYW5kIGRlZmF1bHRzIHRvIFwiKlwiXG5cdHJldHVybiBmdW5jdGlvbiggZGF0YVR5cGVFeHByZXNzaW9uLCBmdW5jICkge1xuXG5cdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVFeHByZXNzaW9uICE9PSBcInN0cmluZ1wiICkge1xuXHRcdFx0ZnVuYyA9IGRhdGFUeXBlRXhwcmVzc2lvbjtcblx0XHRcdGRhdGFUeXBlRXhwcmVzc2lvbiA9IFwiKlwiO1xuXHRcdH1cblxuXHRcdHZhciBkYXRhVHlwZSxcblx0XHRcdGkgPSAwLFxuXHRcdFx0ZGF0YVR5cGVzID0gZGF0YVR5cGVFeHByZXNzaW9uLnRvTG93ZXJDYXNlKCkubWF0Y2goIHJub3RodG1sd2hpdGUgKSB8fCBbXTtcblxuXHRcdGlmICggaXNGdW5jdGlvbiggZnVuYyApICkge1xuXG5cdFx0XHQvLyBGb3IgZWFjaCBkYXRhVHlwZSBpbiB0aGUgZGF0YVR5cGVFeHByZXNzaW9uXG5cdFx0XHR3aGlsZSAoICggZGF0YVR5cGUgPSBkYXRhVHlwZXNbIGkrKyBdICkgKSB7XG5cblx0XHRcdFx0Ly8gUHJlcGVuZCBpZiByZXF1ZXN0ZWRcblx0XHRcdFx0aWYgKCBkYXRhVHlwZVsgMCBdID09PSBcIitcIiApIHtcblx0XHRcdFx0XHRkYXRhVHlwZSA9IGRhdGFUeXBlLnNsaWNlKCAxICkgfHwgXCIqXCI7XG5cdFx0XHRcdFx0KCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gPSBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10gKS51bnNoaWZ0KCBmdW5jICk7XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIGFwcGVuZFxuXHRcdFx0XHR9IGVsc2Uge1xuXHRcdFx0XHRcdCggc3RydWN0dXJlWyBkYXRhVHlwZSBdID0gc3RydWN0dXJlWyBkYXRhVHlwZSBdIHx8IFtdICkucHVzaCggZnVuYyApO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9O1xufVxuXG4vLyBCYXNlIGluc3BlY3Rpb24gZnVuY3Rpb24gZm9yIHByZWZpbHRlcnMgYW5kIHRyYW5zcG9ydHNcbmZ1bmN0aW9uIGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBzdHJ1Y3R1cmUsIG9wdGlvbnMsIG9yaWdpbmFsT3B0aW9ucywganFYSFIgKSB7XG5cblx0dmFyIGluc3BlY3RlZCA9IHt9LFxuXHRcdHNlZWtpbmdUcmFuc3BvcnQgPSAoIHN0cnVjdHVyZSA9PT0gdHJhbnNwb3J0cyApO1xuXG5cdGZ1bmN0aW9uIGluc3BlY3QoIGRhdGFUeXBlICkge1xuXHRcdHZhciBzZWxlY3RlZDtcblx0XHRpbnNwZWN0ZWRbIGRhdGFUeXBlIF0gPSB0cnVlO1xuXHRcdGpRdWVyeS5lYWNoKCBzdHJ1Y3R1cmVbIGRhdGFUeXBlIF0gfHwgW10sIGZ1bmN0aW9uKCBfLCBwcmVmaWx0ZXJPckZhY3RvcnkgKSB7XG5cdFx0XHR2YXIgZGF0YVR5cGVPclRyYW5zcG9ydCA9IHByZWZpbHRlck9yRmFjdG9yeSggb3B0aW9ucywgb3JpZ2luYWxPcHRpb25zLCBqcVhIUiApO1xuXHRcdFx0aWYgKCB0eXBlb2YgZGF0YVR5cGVPclRyYW5zcG9ydCA9PT0gXCJzdHJpbmdcIiAmJlxuXHRcdFx0XHQhc2Vla2luZ1RyYW5zcG9ydCAmJiAhaW5zcGVjdGVkWyBkYXRhVHlwZU9yVHJhbnNwb3J0IF0gKSB7XG5cblx0XHRcdFx0b3B0aW9ucy5kYXRhVHlwZXMudW5zaGlmdCggZGF0YVR5cGVPclRyYW5zcG9ydCApO1xuXHRcdFx0XHRpbnNwZWN0KCBkYXRhVHlwZU9yVHJhbnNwb3J0ICk7XG5cdFx0XHRcdHJldHVybiBmYWxzZTtcblx0XHRcdH0gZWxzZSBpZiAoIHNlZWtpbmdUcmFuc3BvcnQgKSB7XG5cdFx0XHRcdHJldHVybiAhKCBzZWxlY3RlZCA9IGRhdGFUeXBlT3JUcmFuc3BvcnQgKTtcblx0XHRcdH1cblx0XHR9ICk7XG5cdFx0cmV0dXJuIHNlbGVjdGVkO1xuXHR9XG5cblx0cmV0dXJuIGluc3BlY3QoIG9wdGlvbnMuZGF0YVR5cGVzWyAwIF0gKSB8fCAhaW5zcGVjdGVkWyBcIipcIiBdICYmIGluc3BlY3QoIFwiKlwiICk7XG59XG5cbi8vIEEgc3BlY2lhbCBleHRlbmQgZm9yIGFqYXggb3B0aW9uc1xuLy8gdGhhdCB0YWtlcyBcImZsYXRcIiBvcHRpb25zIChub3QgdG8gYmUgZGVlcCBleHRlbmRlZClcbi8vIEZpeGVzICM5ODg3XG5mdW5jdGlvbiBhamF4RXh0ZW5kKCB0YXJnZXQsIHNyYyApIHtcblx0dmFyIGtleSwgZGVlcCxcblx0XHRmbGF0T3B0aW9ucyA9IGpRdWVyeS5hamF4U2V0dGluZ3MuZmxhdE9wdGlvbnMgfHwge307XG5cblx0Zm9yICgga2V5IGluIHNyYyApIHtcblx0XHRpZiAoIHNyY1sga2V5IF0gIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdCggZmxhdE9wdGlvbnNbIGtleSBdID8gdGFyZ2V0IDogKCBkZWVwIHx8ICggZGVlcCA9IHt9ICkgKSApWyBrZXkgXSA9IHNyY1sga2V5IF07XG5cdFx0fVxuXHR9XG5cdGlmICggZGVlcCApIHtcblx0XHRqUXVlcnkuZXh0ZW5kKCB0cnVlLCB0YXJnZXQsIGRlZXAgKTtcblx0fVxuXG5cdHJldHVybiB0YXJnZXQ7XG59XG5cbi8qIEhhbmRsZXMgcmVzcG9uc2VzIHRvIGFuIGFqYXggcmVxdWVzdDpcbiAqIC0gZmluZHMgdGhlIHJpZ2h0IGRhdGFUeXBlIChtZWRpYXRlcyBiZXR3ZWVuIGNvbnRlbnQtdHlwZSBhbmQgZXhwZWN0ZWQgZGF0YVR5cGUpXG4gKiAtIHJldHVybnMgdGhlIGNvcnJlc3BvbmRpbmcgcmVzcG9uc2VcbiAqL1xuZnVuY3Rpb24gYWpheEhhbmRsZVJlc3BvbnNlcyggcywganFYSFIsIHJlc3BvbnNlcyApIHtcblxuXHR2YXIgY3QsIHR5cGUsIGZpbmFsRGF0YVR5cGUsIGZpcnN0RGF0YVR5cGUsXG5cdFx0Y29udGVudHMgPSBzLmNvbnRlbnRzLFxuXHRcdGRhdGFUeXBlcyA9IHMuZGF0YVR5cGVzO1xuXG5cdC8vIFJlbW92ZSBhdXRvIGRhdGFUeXBlIGFuZCBnZXQgY29udGVudC10eXBlIGluIHRoZSBwcm9jZXNzXG5cdHdoaWxlICggZGF0YVR5cGVzWyAwIF0gPT09IFwiKlwiICkge1xuXHRcdGRhdGFUeXBlcy5zaGlmdCgpO1xuXHRcdGlmICggY3QgPT09IHVuZGVmaW5lZCApIHtcblx0XHRcdGN0ID0gcy5taW1lVHlwZSB8fCBqcVhIUi5nZXRSZXNwb25zZUhlYWRlciggXCJDb250ZW50LVR5cGVcIiApO1xuXHRcdH1cblx0fVxuXG5cdC8vIENoZWNrIGlmIHdlJ3JlIGRlYWxpbmcgd2l0aCBhIGtub3duIGNvbnRlbnQtdHlwZVxuXHRpZiAoIGN0ICkge1xuXHRcdGZvciAoIHR5cGUgaW4gY29udGVudHMgKSB7XG5cdFx0XHRpZiAoIGNvbnRlbnRzWyB0eXBlIF0gJiYgY29udGVudHNbIHR5cGUgXS50ZXN0KCBjdCApICkge1xuXHRcdFx0XHRkYXRhVHlwZXMudW5zaGlmdCggdHlwZSApO1xuXHRcdFx0XHRicmVhaztcblx0XHRcdH1cblx0XHR9XG5cdH1cblxuXHQvLyBDaGVjayB0byBzZWUgaWYgd2UgaGF2ZSBhIHJlc3BvbnNlIGZvciB0aGUgZXhwZWN0ZWQgZGF0YVR5cGVcblx0aWYgKCBkYXRhVHlwZXNbIDAgXSBpbiByZXNwb25zZXMgKSB7XG5cdFx0ZmluYWxEYXRhVHlwZSA9IGRhdGFUeXBlc1sgMCBdO1xuXHR9IGVsc2Uge1xuXG5cdFx0Ly8gVHJ5IGNvbnZlcnRpYmxlIGRhdGFUeXBlc1xuXHRcdGZvciAoIHR5cGUgaW4gcmVzcG9uc2VzICkge1xuXHRcdFx0aWYgKCAhZGF0YVR5cGVzWyAwIF0gfHwgcy5jb252ZXJ0ZXJzWyB0eXBlICsgXCIgXCIgKyBkYXRhVHlwZXNbIDAgXSBdICkge1xuXHRcdFx0XHRmaW5hbERhdGFUeXBlID0gdHlwZTtcblx0XHRcdFx0YnJlYWs7XG5cdFx0XHR9XG5cdFx0XHRpZiAoICFmaXJzdERhdGFUeXBlICkge1xuXHRcdFx0XHRmaXJzdERhdGFUeXBlID0gdHlwZTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBPciBqdXN0IHVzZSBmaXJzdCBvbmVcblx0XHRmaW5hbERhdGFUeXBlID0gZmluYWxEYXRhVHlwZSB8fCBmaXJzdERhdGFUeXBlO1xuXHR9XG5cblx0Ly8gSWYgd2UgZm91bmQgYSBkYXRhVHlwZVxuXHQvLyBXZSBhZGQgdGhlIGRhdGFUeXBlIHRvIHRoZSBsaXN0IGlmIG5lZWRlZFxuXHQvLyBhbmQgcmV0dXJuIHRoZSBjb3JyZXNwb25kaW5nIHJlc3BvbnNlXG5cdGlmICggZmluYWxEYXRhVHlwZSApIHtcblx0XHRpZiAoIGZpbmFsRGF0YVR5cGUgIT09IGRhdGFUeXBlc1sgMCBdICkge1xuXHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIGZpbmFsRGF0YVR5cGUgKTtcblx0XHR9XG5cdFx0cmV0dXJuIHJlc3BvbnNlc1sgZmluYWxEYXRhVHlwZSBdO1xuXHR9XG59XG5cbi8qIENoYWluIGNvbnZlcnNpb25zIGdpdmVuIHRoZSByZXF1ZXN0IGFuZCB0aGUgb3JpZ2luYWwgcmVzcG9uc2VcbiAqIEFsc28gc2V0cyB0aGUgcmVzcG9uc2VYWFggZmllbGRzIG9uIHRoZSBqcVhIUiBpbnN0YW5jZVxuICovXG5mdW5jdGlvbiBhamF4Q29udmVydCggcywgcmVzcG9uc2UsIGpxWEhSLCBpc1N1Y2Nlc3MgKSB7XG5cdHZhciBjb252MiwgY3VycmVudCwgY29udiwgdG1wLCBwcmV2LFxuXHRcdGNvbnZlcnRlcnMgPSB7fSxcblxuXHRcdC8vIFdvcmsgd2l0aCBhIGNvcHkgb2YgZGF0YVR5cGVzIGluIGNhc2Ugd2UgbmVlZCB0byBtb2RpZnkgaXQgZm9yIGNvbnZlcnNpb25cblx0XHRkYXRhVHlwZXMgPSBzLmRhdGFUeXBlcy5zbGljZSgpO1xuXG5cdC8vIENyZWF0ZSBjb252ZXJ0ZXJzIG1hcCB3aXRoIGxvd2VyY2FzZWQga2V5c1xuXHRpZiAoIGRhdGFUeXBlc1sgMSBdICkge1xuXHRcdGZvciAoIGNvbnYgaW4gcy5jb252ZXJ0ZXJzICkge1xuXHRcdFx0Y29udmVydGVyc1sgY29udi50b0xvd2VyQ2FzZSgpIF0gPSBzLmNvbnZlcnRlcnNbIGNvbnYgXTtcblx0XHR9XG5cdH1cblxuXHRjdXJyZW50ID0gZGF0YVR5cGVzLnNoaWZ0KCk7XG5cblx0Ly8gQ29udmVydCB0byBlYWNoIHNlcXVlbnRpYWwgZGF0YVR5cGVcblx0d2hpbGUgKCBjdXJyZW50ICkge1xuXG5cdFx0aWYgKCBzLnJlc3BvbnNlRmllbGRzWyBjdXJyZW50IF0gKSB7XG5cdFx0XHRqcVhIUlsgcy5yZXNwb25zZUZpZWxkc1sgY3VycmVudCBdIF0gPSByZXNwb25zZTtcblx0XHR9XG5cblx0XHQvLyBBcHBseSB0aGUgZGF0YUZpbHRlciBpZiBwcm92aWRlZFxuXHRcdGlmICggIXByZXYgJiYgaXNTdWNjZXNzICYmIHMuZGF0YUZpbHRlciApIHtcblx0XHRcdHJlc3BvbnNlID0gcy5kYXRhRmlsdGVyKCByZXNwb25zZSwgcy5kYXRhVHlwZSApO1xuXHRcdH1cblxuXHRcdHByZXYgPSBjdXJyZW50O1xuXHRcdGN1cnJlbnQgPSBkYXRhVHlwZXMuc2hpZnQoKTtcblxuXHRcdGlmICggY3VycmVudCApIHtcblxuXHRcdFx0Ly8gVGhlcmUncyBvbmx5IHdvcmsgdG8gZG8gaWYgY3VycmVudCBkYXRhVHlwZSBpcyBub24tYXV0b1xuXHRcdFx0aWYgKCBjdXJyZW50ID09PSBcIipcIiApIHtcblxuXHRcdFx0XHRjdXJyZW50ID0gcHJldjtcblxuXHRcdFx0Ly8gQ29udmVydCByZXNwb25zZSBpZiBwcmV2IGRhdGFUeXBlIGlzIG5vbi1hdXRvIGFuZCBkaWZmZXJzIGZyb20gY3VycmVudFxuXHRcdFx0fSBlbHNlIGlmICggcHJldiAhPT0gXCIqXCIgJiYgcHJldiAhPT0gY3VycmVudCApIHtcblxuXHRcdFx0XHQvLyBTZWVrIGEgZGlyZWN0IGNvbnZlcnRlclxuXHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgY3VycmVudCBdIHx8IGNvbnZlcnRlcnNbIFwiKiBcIiArIGN1cnJlbnQgXTtcblxuXHRcdFx0XHQvLyBJZiBub25lIGZvdW5kLCBzZWVrIGEgcGFpclxuXHRcdFx0XHRpZiAoICFjb252ICkge1xuXHRcdFx0XHRcdGZvciAoIGNvbnYyIGluIGNvbnZlcnRlcnMgKSB7XG5cblx0XHRcdFx0XHRcdC8vIElmIGNvbnYyIG91dHB1dHMgY3VycmVudFxuXHRcdFx0XHRcdFx0dG1wID0gY29udjIuc3BsaXQoIFwiIFwiICk7XG5cdFx0XHRcdFx0XHRpZiAoIHRtcFsgMSBdID09PSBjdXJyZW50ICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIElmIHByZXYgY2FuIGJlIGNvbnZlcnRlZCB0byBhY2NlcHRlZCBpbnB1dFxuXHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgcHJldiArIFwiIFwiICsgdG1wWyAwIF0gXSB8fFxuXHRcdFx0XHRcdFx0XHRcdGNvbnZlcnRlcnNbIFwiKiBcIiArIHRtcFsgMCBdIF07XG5cdFx0XHRcdFx0XHRcdGlmICggY29udiApIHtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIENvbmRlbnNlIGVxdWl2YWxlbmNlIGNvbnZlcnRlcnNcblx0XHRcdFx0XHRcdFx0XHRpZiAoIGNvbnYgPT09IHRydWUgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb252ID0gY29udmVydGVyc1sgY29udjIgXTtcblxuXHRcdFx0XHRcdFx0XHRcdC8vIE90aGVyd2lzZSwgaW5zZXJ0IHRoZSBpbnRlcm1lZGlhdGUgZGF0YVR5cGVcblx0XHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCBjb252ZXJ0ZXJzWyBjb252MiBdICE9PSB0cnVlICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y3VycmVudCA9IHRtcFsgMCBdO1xuXHRcdFx0XHRcdFx0XHRcdFx0ZGF0YVR5cGVzLnVuc2hpZnQoIHRtcFsgMSBdICk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHRcdGJyZWFrO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gQXBwbHkgY29udmVydGVyIChpZiBub3QgYW4gZXF1aXZhbGVuY2UpXG5cdFx0XHRcdGlmICggY29udiAhPT0gdHJ1ZSApIHtcblxuXHRcdFx0XHRcdC8vIFVubGVzcyBlcnJvcnMgYXJlIGFsbG93ZWQgdG8gYnViYmxlLCBjYXRjaCBhbmQgcmV0dXJuIHRoZW1cblx0XHRcdFx0XHRpZiAoIGNvbnYgJiYgcy50aHJvd3MgKSB7XG5cdFx0XHRcdFx0XHRyZXNwb25zZSA9IGNvbnYoIHJlc3BvbnNlICk7XG5cdFx0XHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0XHRcdHRyeSB7XG5cdFx0XHRcdFx0XHRcdHJlc3BvbnNlID0gY29udiggcmVzcG9uc2UgKTtcblx0XHRcdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXHRcdFx0XHRcdFx0XHRyZXR1cm4ge1xuXHRcdFx0XHRcdFx0XHRcdHN0YXRlOiBcInBhcnNlcmVycm9yXCIsXG5cdFx0XHRcdFx0XHRcdFx0ZXJyb3I6IGNvbnYgPyBlIDogXCJObyBjb252ZXJzaW9uIGZyb20gXCIgKyBwcmV2ICsgXCIgdG8gXCIgKyBjdXJyZW50XG5cdFx0XHRcdFx0XHRcdH07XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fVxuXHR9XG5cblx0cmV0dXJuIHsgc3RhdGU6IFwic3VjY2Vzc1wiLCBkYXRhOiByZXNwb25zZSB9O1xufVxuXG5qUXVlcnkuZXh0ZW5kKCB7XG5cblx0Ly8gQ291bnRlciBmb3IgaG9sZGluZyB0aGUgbnVtYmVyIG9mIGFjdGl2ZSBxdWVyaWVzXG5cdGFjdGl2ZTogMCxcblxuXHQvLyBMYXN0LU1vZGlmaWVkIGhlYWRlciBjYWNoZSBmb3IgbmV4dCByZXF1ZXN0XG5cdGxhc3RNb2RpZmllZDoge30sXG5cdGV0YWc6IHt9LFxuXG5cdGFqYXhTZXR0aW5nczoge1xuXHRcdHVybDogbG9jYXRpb24uaHJlZixcblx0XHR0eXBlOiBcIkdFVFwiLFxuXHRcdGlzTG9jYWw6IHJsb2NhbFByb3RvY29sLnRlc3QoIGxvY2F0aW9uLnByb3RvY29sICksXG5cdFx0Z2xvYmFsOiB0cnVlLFxuXHRcdHByb2Nlc3NEYXRhOiB0cnVlLFxuXHRcdGFzeW5jOiB0cnVlLFxuXHRcdGNvbnRlbnRUeXBlOiBcImFwcGxpY2F0aW9uL3gtd3d3LWZvcm0tdXJsZW5jb2RlZDsgY2hhcnNldD1VVEYtOFwiLFxuXG5cdFx0Lypcblx0XHR0aW1lb3V0OiAwLFxuXHRcdGRhdGE6IG51bGwsXG5cdFx0ZGF0YVR5cGU6IG51bGwsXG5cdFx0dXNlcm5hbWU6IG51bGwsXG5cdFx0cGFzc3dvcmQ6IG51bGwsXG5cdFx0Y2FjaGU6IG51bGwsXG5cdFx0dGhyb3dzOiBmYWxzZSxcblx0XHR0cmFkaXRpb25hbDogZmFsc2UsXG5cdFx0aGVhZGVyczoge30sXG5cdFx0Ki9cblxuXHRcdGFjY2VwdHM6IHtcblx0XHRcdFwiKlwiOiBhbGxUeXBlcyxcblx0XHRcdHRleHQ6IFwidGV4dC9wbGFpblwiLFxuXHRcdFx0aHRtbDogXCJ0ZXh0L2h0bWxcIixcblx0XHRcdHhtbDogXCJhcHBsaWNhdGlvbi94bWwsIHRleHQveG1sXCIsXG5cdFx0XHRqc29uOiBcImFwcGxpY2F0aW9uL2pzb24sIHRleHQvamF2YXNjcmlwdFwiXG5cdFx0fSxcblxuXHRcdGNvbnRlbnRzOiB7XG5cdFx0XHR4bWw6IC9cXGJ4bWxcXGIvLFxuXHRcdFx0aHRtbDogL1xcYmh0bWwvLFxuXHRcdFx0anNvbjogL1xcYmpzb25cXGIvXG5cdFx0fSxcblxuXHRcdHJlc3BvbnNlRmllbGRzOiB7XG5cdFx0XHR4bWw6IFwicmVzcG9uc2VYTUxcIixcblx0XHRcdHRleHQ6IFwicmVzcG9uc2VUZXh0XCIsXG5cdFx0XHRqc29uOiBcInJlc3BvbnNlSlNPTlwiXG5cdFx0fSxcblxuXHRcdC8vIERhdGEgY29udmVydGVyc1xuXHRcdC8vIEtleXMgc2VwYXJhdGUgc291cmNlIChvciBjYXRjaGFsbCBcIipcIikgYW5kIGRlc3RpbmF0aW9uIHR5cGVzIHdpdGggYSBzaW5nbGUgc3BhY2Vcblx0XHRjb252ZXJ0ZXJzOiB7XG5cblx0XHRcdC8vIENvbnZlcnQgYW55dGhpbmcgdG8gdGV4dFxuXHRcdFx0XCIqIHRleHRcIjogU3RyaW5nLFxuXG5cdFx0XHQvLyBUZXh0IHRvIGh0bWwgKHRydWUgPSBubyB0cmFuc2Zvcm1hdGlvbilcblx0XHRcdFwidGV4dCBodG1sXCI6IHRydWUsXG5cblx0XHRcdC8vIEV2YWx1YXRlIHRleHQgYXMgYSBqc29uIGV4cHJlc3Npb25cblx0XHRcdFwidGV4dCBqc29uXCI6IEpTT04ucGFyc2UsXG5cblx0XHRcdC8vIFBhcnNlIHRleHQgYXMgeG1sXG5cdFx0XHRcInRleHQgeG1sXCI6IGpRdWVyeS5wYXJzZVhNTFxuXHRcdH0sXG5cblx0XHQvLyBGb3Igb3B0aW9ucyB0aGF0IHNob3VsZG4ndCBiZSBkZWVwIGV4dGVuZGVkOlxuXHRcdC8vIHlvdSBjYW4gYWRkIHlvdXIgb3duIGN1c3RvbSBvcHRpb25zIGhlcmUgaWZcblx0XHQvLyBhbmQgd2hlbiB5b3UgY3JlYXRlIG9uZSB0aGF0IHNob3VsZG4ndCBiZVxuXHRcdC8vIGRlZXAgZXh0ZW5kZWQgKHNlZSBhamF4RXh0ZW5kKVxuXHRcdGZsYXRPcHRpb25zOiB7XG5cdFx0XHR1cmw6IHRydWUsXG5cdFx0XHRjb250ZXh0OiB0cnVlXG5cdFx0fVxuXHR9LFxuXG5cdC8vIENyZWF0ZXMgYSBmdWxsIGZsZWRnZWQgc2V0dGluZ3Mgb2JqZWN0IGludG8gdGFyZ2V0XG5cdC8vIHdpdGggYm90aCBhamF4U2V0dGluZ3MgYW5kIHNldHRpbmdzIGZpZWxkcy5cblx0Ly8gSWYgdGFyZ2V0IGlzIG9taXR0ZWQsIHdyaXRlcyBpbnRvIGFqYXhTZXR0aW5ncy5cblx0YWpheFNldHVwOiBmdW5jdGlvbiggdGFyZ2V0LCBzZXR0aW5ncyApIHtcblx0XHRyZXR1cm4gc2V0dGluZ3MgP1xuXG5cdFx0XHQvLyBCdWlsZGluZyBhIHNldHRpbmdzIG9iamVjdFxuXHRcdFx0YWpheEV4dGVuZCggYWpheEV4dGVuZCggdGFyZ2V0LCBqUXVlcnkuYWpheFNldHRpbmdzICksIHNldHRpbmdzICkgOlxuXG5cdFx0XHQvLyBFeHRlbmRpbmcgYWpheFNldHRpbmdzXG5cdFx0XHRhamF4RXh0ZW5kKCBqUXVlcnkuYWpheFNldHRpbmdzLCB0YXJnZXQgKTtcblx0fSxcblxuXHRhamF4UHJlZmlsdGVyOiBhZGRUb1ByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHByZWZpbHRlcnMgKSxcblx0YWpheFRyYW5zcG9ydDogYWRkVG9QcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCB0cmFuc3BvcnRzICksXG5cblx0Ly8gTWFpbiBtZXRob2Rcblx0YWpheDogZnVuY3Rpb24oIHVybCwgb3B0aW9ucyApIHtcblxuXHRcdC8vIElmIHVybCBpcyBhbiBvYmplY3QsIHNpbXVsYXRlIHByZS0xLjUgc2lnbmF0dXJlXG5cdFx0aWYgKCB0eXBlb2YgdXJsID09PSBcIm9iamVjdFwiICkge1xuXHRcdFx0b3B0aW9ucyA9IHVybDtcblx0XHRcdHVybCA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBGb3JjZSBvcHRpb25zIHRvIGJlIGFuIG9iamVjdFxuXHRcdG9wdGlvbnMgPSBvcHRpb25zIHx8IHt9O1xuXG5cdFx0dmFyIHRyYW5zcG9ydCxcblxuXHRcdFx0Ly8gVVJMIHdpdGhvdXQgYW50aS1jYWNoZSBwYXJhbVxuXHRcdFx0Y2FjaGVVUkwsXG5cblx0XHRcdC8vIFJlc3BvbnNlIGhlYWRlcnNcblx0XHRcdHJlc3BvbnNlSGVhZGVyc1N0cmluZyxcblx0XHRcdHJlc3BvbnNlSGVhZGVycyxcblxuXHRcdFx0Ly8gdGltZW91dCBoYW5kbGVcblx0XHRcdHRpbWVvdXRUaW1lcixcblxuXHRcdFx0Ly8gVXJsIGNsZWFudXAgdmFyXG5cdFx0XHR1cmxBbmNob3IsXG5cblx0XHRcdC8vIFJlcXVlc3Qgc3RhdGUgKGJlY29tZXMgZmFsc2UgdXBvbiBzZW5kIGFuZCB0cnVlIHVwb24gY29tcGxldGlvbilcblx0XHRcdGNvbXBsZXRlZCxcblxuXHRcdFx0Ly8gVG8ga25vdyBpZiBnbG9iYWwgZXZlbnRzIGFyZSB0byBiZSBkaXNwYXRjaGVkXG5cdFx0XHRmaXJlR2xvYmFscyxcblxuXHRcdFx0Ly8gTG9vcCB2YXJpYWJsZVxuXHRcdFx0aSxcblxuXHRcdFx0Ly8gdW5jYWNoZWQgcGFydCBvZiB0aGUgdXJsXG5cdFx0XHR1bmNhY2hlZCxcblxuXHRcdFx0Ly8gQ3JlYXRlIHRoZSBmaW5hbCBvcHRpb25zIG9iamVjdFxuXHRcdFx0cyA9IGpRdWVyeS5hamF4U2V0dXAoIHt9LCBvcHRpb25zICksXG5cblx0XHRcdC8vIENhbGxiYWNrcyBjb250ZXh0XG5cdFx0XHRjYWxsYmFja0NvbnRleHQgPSBzLmNvbnRleHQgfHwgcyxcblxuXHRcdFx0Ly8gQ29udGV4dCBmb3IgZ2xvYmFsIGV2ZW50cyBpcyBjYWxsYmFja0NvbnRleHQgaWYgaXQgaXMgYSBET00gbm9kZSBvciBqUXVlcnkgY29sbGVjdGlvblxuXHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0ID0gcy5jb250ZXh0ICYmXG5cdFx0XHRcdCggY2FsbGJhY2tDb250ZXh0Lm5vZGVUeXBlIHx8IGNhbGxiYWNrQ29udGV4dC5qcXVlcnkgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBjYWxsYmFja0NvbnRleHQgKSA6XG5cdFx0XHRcdFx0alF1ZXJ5LmV2ZW50LFxuXG5cdFx0XHQvLyBEZWZlcnJlZHNcblx0XHRcdGRlZmVycmVkID0galF1ZXJ5LkRlZmVycmVkKCksXG5cdFx0XHRjb21wbGV0ZURlZmVycmVkID0galF1ZXJ5LkNhbGxiYWNrcyggXCJvbmNlIG1lbW9yeVwiICksXG5cblx0XHRcdC8vIFN0YXR1cy1kZXBlbmRlbnQgY2FsbGJhY2tzXG5cdFx0XHRzdGF0dXNDb2RlID0gcy5zdGF0dXNDb2RlIHx8IHt9LFxuXG5cdFx0XHQvLyBIZWFkZXJzICh0aGV5IGFyZSBzZW50IGFsbCBhdCBvbmNlKVxuXHRcdFx0cmVxdWVzdEhlYWRlcnMgPSB7fSxcblx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXMgPSB7fSxcblxuXHRcdFx0Ly8gRGVmYXVsdCBhYm9ydCBtZXNzYWdlXG5cdFx0XHRzdHJBYm9ydCA9IFwiY2FuY2VsZWRcIixcblxuXHRcdFx0Ly8gRmFrZSB4aHJcblx0XHRcdGpxWEhSID0ge1xuXHRcdFx0XHRyZWFkeVN0YXRlOiAwLFxuXG5cdFx0XHRcdC8vIEJ1aWxkcyBoZWFkZXJzIGhhc2h0YWJsZSBpZiBuZWVkZWRcblx0XHRcdFx0Z2V0UmVzcG9uc2VIZWFkZXI6IGZ1bmN0aW9uKCBrZXkgKSB7XG5cdFx0XHRcdFx0dmFyIG1hdGNoO1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRcdFx0aWYgKCAhcmVzcG9uc2VIZWFkZXJzICkge1xuXHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnMgPSB7fTtcblx0XHRcdFx0XHRcdFx0d2hpbGUgKCAoIG1hdGNoID0gcmhlYWRlcnMuZXhlYyggcmVzcG9uc2VIZWFkZXJzU3RyaW5nICkgKSApIHtcblx0XHRcdFx0XHRcdFx0XHRyZXNwb25zZUhlYWRlcnNbIG1hdGNoWyAxIF0udG9Mb3dlckNhc2UoKSBdID0gbWF0Y2hbIDIgXTtcblx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0bWF0Y2ggPSByZXNwb25zZUhlYWRlcnNbIGtleS50b0xvd2VyQ2FzZSgpIF07XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiBtYXRjaCA9PSBudWxsID8gbnVsbCA6IG1hdGNoO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIFJhdyBzdHJpbmdcblx0XHRcdFx0Z2V0QWxsUmVzcG9uc2VIZWFkZXJzOiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRyZXR1cm4gY29tcGxldGVkID8gcmVzcG9uc2VIZWFkZXJzU3RyaW5nIDogbnVsbDtcblx0XHRcdFx0fSxcblxuXHRcdFx0XHQvLyBDYWNoZXMgdGhlIGhlYWRlclxuXHRcdFx0XHRzZXRSZXF1ZXN0SGVhZGVyOiBmdW5jdGlvbiggbmFtZSwgdmFsdWUgKSB7XG5cdFx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgPT0gbnVsbCApIHtcblx0XHRcdFx0XHRcdG5hbWUgPSByZXF1ZXN0SGVhZGVyc05hbWVzWyBuYW1lLnRvTG93ZXJDYXNlKCkgXSA9XG5cdFx0XHRcdFx0XHRcdHJlcXVlc3RIZWFkZXJzTmFtZXNbIG5hbWUudG9Mb3dlckNhc2UoKSBdIHx8IG5hbWU7XG5cdFx0XHRcdFx0XHRyZXF1ZXN0SGVhZGVyc1sgbmFtZSBdID0gdmFsdWU7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9LFxuXG5cdFx0XHRcdC8vIE92ZXJyaWRlcyByZXNwb25zZSBjb250ZW50LXR5cGUgaGVhZGVyXG5cdFx0XHRcdG92ZXJyaWRlTWltZVR5cGU6IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdGlmICggY29tcGxldGVkID09IG51bGwgKSB7XG5cdFx0XHRcdFx0XHRzLm1pbWVUeXBlID0gdHlwZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gU3RhdHVzLWRlcGVuZGVudCBjYWxsYmFja3Ncblx0XHRcdFx0c3RhdHVzQ29kZTogZnVuY3Rpb24oIG1hcCApIHtcblx0XHRcdFx0XHR2YXIgY29kZTtcblx0XHRcdFx0XHRpZiAoIG1hcCApIHtcblx0XHRcdFx0XHRcdGlmICggY29tcGxldGVkICkge1xuXG5cdFx0XHRcdFx0XHRcdC8vIEV4ZWN1dGUgdGhlIGFwcHJvcHJpYXRlIGNhbGxiYWNrc1xuXHRcdFx0XHRcdFx0XHRqcVhIUi5hbHdheXMoIG1hcFsganFYSFIuc3RhdHVzIF0gKTtcblx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gTGF6eS1hZGQgdGhlIG5ldyBjYWxsYmFja3MgaW4gYSB3YXkgdGhhdCBwcmVzZXJ2ZXMgb2xkIG9uZXNcblx0XHRcdFx0XHRcdFx0Zm9yICggY29kZSBpbiBtYXAgKSB7XG5cdFx0XHRcdFx0XHRcdFx0c3RhdHVzQ29kZVsgY29kZSBdID0gWyBzdGF0dXNDb2RlWyBjb2RlIF0sIG1hcFsgY29kZSBdIF07XG5cdFx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHRcdH1cblx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0cmV0dXJuIHRoaXM7XG5cdFx0XHRcdH0sXG5cblx0XHRcdFx0Ly8gQ2FuY2VsIHRoZSByZXF1ZXN0XG5cdFx0XHRcdGFib3J0OiBmdW5jdGlvbiggc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHR2YXIgZmluYWxUZXh0ID0gc3RhdHVzVGV4dCB8fCBzdHJBYm9ydDtcblx0XHRcdFx0XHRpZiAoIHRyYW5zcG9ydCApIHtcblx0XHRcdFx0XHRcdHRyYW5zcG9ydC5hYm9ydCggZmluYWxUZXh0ICk7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdGRvbmUoIDAsIGZpbmFsVGV4dCApO1xuXHRcdFx0XHRcdHJldHVybiB0aGlzO1xuXHRcdFx0XHR9XG5cdFx0XHR9O1xuXG5cdFx0Ly8gQXR0YWNoIGRlZmVycmVkc1xuXHRcdGRlZmVycmVkLnByb21pc2UoIGpxWEhSICk7XG5cblx0XHQvLyBBZGQgcHJvdG9jb2wgaWYgbm90IHByb3ZpZGVkIChwcmVmaWx0ZXJzIG1pZ2h0IGV4cGVjdCBpdClcblx0XHQvLyBIYW5kbGUgZmFsc3kgdXJsIGluIHRoZSBzZXR0aW5ncyBvYmplY3QgKCMxMDA5MzogY29uc2lzdGVuY3kgd2l0aCBvbGQgc2lnbmF0dXJlKVxuXHRcdC8vIFdlIGFsc28gdXNlIHRoZSB1cmwgcGFyYW1ldGVyIGlmIGF2YWlsYWJsZVxuXHRcdHMudXJsID0gKCAoIHVybCB8fCBzLnVybCB8fCBsb2NhdGlvbi5ocmVmICkgKyBcIlwiIClcblx0XHRcdC5yZXBsYWNlKCBycHJvdG9jb2wsIGxvY2F0aW9uLnByb3RvY29sICsgXCIvL1wiICk7XG5cblx0XHQvLyBBbGlhcyBtZXRob2Qgb3B0aW9uIHRvIHR5cGUgYXMgcGVyIHRpY2tldCAjMTIwMDRcblx0XHRzLnR5cGUgPSBvcHRpb25zLm1ldGhvZCB8fCBvcHRpb25zLnR5cGUgfHwgcy5tZXRob2QgfHwgcy50eXBlO1xuXG5cdFx0Ly8gRXh0cmFjdCBkYXRhVHlwZXMgbGlzdFxuXHRcdHMuZGF0YVR5cGVzID0gKCBzLmRhdGFUeXBlIHx8IFwiKlwiICkudG9Mb3dlckNhc2UoKS5tYXRjaCggcm5vdGh0bWx3aGl0ZSApIHx8IFsgXCJcIiBdO1xuXG5cdFx0Ly8gQSBjcm9zcy1kb21haW4gcmVxdWVzdCBpcyBpbiBvcmRlciB3aGVuIHRoZSBvcmlnaW4gZG9lc24ndCBtYXRjaCB0aGUgY3VycmVudCBvcmlnaW4uXG5cdFx0aWYgKCBzLmNyb3NzRG9tYWluID09IG51bGwgKSB7XG5cdFx0XHR1cmxBbmNob3IgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCBcImFcIiApO1xuXG5cdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSwgRWRnZSAxMiAtIDE1XG5cdFx0XHQvLyBJRSB0aHJvd3MgZXhjZXB0aW9uIG9uIGFjY2Vzc2luZyB0aGUgaHJlZiBwcm9wZXJ0eSBpZiB1cmwgaXMgbWFsZm9ybWVkLFxuXHRcdFx0Ly8gZS5nLiBodHRwOi8vZXhhbXBsZS5jb206ODB4L1xuXHRcdFx0dHJ5IHtcblx0XHRcdFx0dXJsQW5jaG9yLmhyZWYgPSBzLnVybDtcblxuXHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTggLSAxMSBvbmx5XG5cdFx0XHRcdC8vIEFuY2hvcidzIGhvc3QgcHJvcGVydHkgaXNuJ3QgY29ycmVjdGx5IHNldCB3aGVuIHMudXJsIGlzIHJlbGF0aXZlXG5cdFx0XHRcdHVybEFuY2hvci5ocmVmID0gdXJsQW5jaG9yLmhyZWY7XG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSBvcmlnaW5BbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyBvcmlnaW5BbmNob3IuaG9zdCAhPT1cblx0XHRcdFx0XHR1cmxBbmNob3IucHJvdG9jb2wgKyBcIi8vXCIgKyB1cmxBbmNob3IuaG9zdDtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIElmIHRoZXJlIGlzIGFuIGVycm9yIHBhcnNpbmcgdGhlIFVSTCwgYXNzdW1lIGl0IGlzIGNyb3NzRG9tYWluLFxuXHRcdFx0XHQvLyBpdCBjYW4gYmUgcmVqZWN0ZWQgYnkgdGhlIHRyYW5zcG9ydCBpZiBpdCBpcyBpbnZhbGlkXG5cdFx0XHRcdHMuY3Jvc3NEb21haW4gPSB0cnVlO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENvbnZlcnQgZGF0YSBpZiBub3QgYWxyZWFkeSBhIHN0cmluZ1xuXHRcdGlmICggcy5kYXRhICYmIHMucHJvY2Vzc0RhdGEgJiYgdHlwZW9mIHMuZGF0YSAhPT0gXCJzdHJpbmdcIiApIHtcblx0XHRcdHMuZGF0YSA9IGpRdWVyeS5wYXJhbSggcy5kYXRhLCBzLnRyYWRpdGlvbmFsICk7XG5cdFx0fVxuXG5cdFx0Ly8gQXBwbHkgcHJlZmlsdGVyc1xuXHRcdGluc3BlY3RQcmVmaWx0ZXJzT3JUcmFuc3BvcnRzKCBwcmVmaWx0ZXJzLCBzLCBvcHRpb25zLCBqcVhIUiApO1xuXG5cdFx0Ly8gSWYgcmVxdWVzdCB3YXMgYWJvcnRlZCBpbnNpZGUgYSBwcmVmaWx0ZXIsIHN0b3AgdGhlcmVcblx0XHRpZiAoIGNvbXBsZXRlZCApIHtcblx0XHRcdHJldHVybiBqcVhIUjtcblx0XHR9XG5cblx0XHQvLyBXZSBjYW4gZmlyZSBnbG9iYWwgZXZlbnRzIGFzIG9mIG5vdyBpZiBhc2tlZCB0b1xuXHRcdC8vIERvbid0IGZpcmUgZXZlbnRzIGlmIGpRdWVyeS5ldmVudCBpcyB1bmRlZmluZWQgaW4gYW4gQU1ELXVzYWdlIHNjZW5hcmlvICgjMTUxMTgpXG5cdFx0ZmlyZUdsb2JhbHMgPSBqUXVlcnkuZXZlbnQgJiYgcy5nbG9iYWw7XG5cblx0XHQvLyBXYXRjaCBmb3IgYSBuZXcgc2V0IG9mIHJlcXVlc3RzXG5cdFx0aWYgKCBmaXJlR2xvYmFscyAmJiBqUXVlcnkuYWN0aXZlKysgPT09IDAgKSB7XG5cdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RhcnRcIiApO1xuXHRcdH1cblxuXHRcdC8vIFVwcGVyY2FzZSB0aGUgdHlwZVxuXHRcdHMudHlwZSA9IHMudHlwZS50b1VwcGVyQ2FzZSgpO1xuXG5cdFx0Ly8gRGV0ZXJtaW5lIGlmIHJlcXVlc3QgaGFzIGNvbnRlbnRcblx0XHRzLmhhc0NvbnRlbnQgPSAhcm5vQ29udGVudC50ZXN0KCBzLnR5cGUgKTtcblxuXHRcdC8vIFNhdmUgdGhlIFVSTCBpbiBjYXNlIHdlJ3JlIHRveWluZyB3aXRoIHRoZSBJZi1Nb2RpZmllZC1TaW5jZVxuXHRcdC8vIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciBsYXRlciBvblxuXHRcdC8vIFJlbW92ZSBoYXNoIHRvIHNpbXBsaWZ5IHVybCBtYW5pcHVsYXRpb25cblx0XHRjYWNoZVVSTCA9IHMudXJsLnJlcGxhY2UoIHJoYXNoLCBcIlwiICk7XG5cblx0XHQvLyBNb3JlIG9wdGlvbnMgaGFuZGxpbmcgZm9yIHJlcXVlc3RzIHdpdGggbm8gY29udGVudFxuXHRcdGlmICggIXMuaGFzQ29udGVudCApIHtcblxuXHRcdFx0Ly8gUmVtZW1iZXIgdGhlIGhhc2ggc28gd2UgY2FuIHB1dCBpdCBiYWNrXG5cdFx0XHR1bmNhY2hlZCA9IHMudXJsLnNsaWNlKCBjYWNoZVVSTC5sZW5ndGggKTtcblxuXHRcdFx0Ly8gSWYgZGF0YSBpcyBhdmFpbGFibGUgYW5kIHNob3VsZCBiZSBwcm9jZXNzZWQsIGFwcGVuZCBkYXRhIHRvIHVybFxuXHRcdFx0aWYgKCBzLmRhdGEgJiYgKCBzLnByb2Nlc3NEYXRhIHx8IHR5cGVvZiBzLmRhdGEgPT09IFwic3RyaW5nXCIgKSApIHtcblx0XHRcdFx0Y2FjaGVVUkwgKz0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIHMuZGF0YTtcblxuXHRcdFx0XHQvLyAjOTY4MjogcmVtb3ZlIGRhdGEgc28gdGhhdCBpdCdzIG5vdCB1c2VkIGluIGFuIGV2ZW50dWFsIHJldHJ5XG5cdFx0XHRcdGRlbGV0ZSBzLmRhdGE7XG5cdFx0XHR9XG5cblx0XHRcdC8vIEFkZCBvciB1cGRhdGUgYW50aS1jYWNoZSBwYXJhbSBpZiBuZWVkZWRcblx0XHRcdGlmICggcy5jYWNoZSA9PT0gZmFsc2UgKSB7XG5cdFx0XHRcdGNhY2hlVVJMID0gY2FjaGVVUkwucmVwbGFjZSggcmFudGlDYWNoZSwgXCIkMVwiICk7XG5cdFx0XHRcdHVuY2FjaGVkID0gKCBycXVlcnkudGVzdCggY2FjaGVVUkwgKSA/IFwiJlwiIDogXCI/XCIgKSArIFwiXz1cIiArICggbm9uY2UrKyApICsgdW5jYWNoZWQ7XG5cdFx0XHR9XG5cblx0XHRcdC8vIFB1dCBoYXNoIGFuZCBhbnRpLWNhY2hlIG9uIHRoZSBVUkwgdGhhdCB3aWxsIGJlIHJlcXVlc3RlZCAoZ2gtMTczMilcblx0XHRcdHMudXJsID0gY2FjaGVVUkwgKyB1bmNhY2hlZDtcblxuXHRcdC8vIENoYW5nZSAnJTIwJyB0byAnKycgaWYgdGhpcyBpcyBlbmNvZGVkIGZvcm0gYm9keSBjb250ZW50IChnaC0yNjU4KVxuXHRcdH0gZWxzZSBpZiAoIHMuZGF0YSAmJiBzLnByb2Nlc3NEYXRhICYmXG5cdFx0XHQoIHMuY29udGVudFR5cGUgfHwgXCJcIiApLmluZGV4T2YoIFwiYXBwbGljYXRpb24veC13d3ctZm9ybS11cmxlbmNvZGVkXCIgKSA9PT0gMCApIHtcblx0XHRcdHMuZGF0YSA9IHMuZGF0YS5yZXBsYWNlKCByMjAsIFwiK1wiICk7XG5cdFx0fVxuXG5cdFx0Ly8gU2V0IHRoZSBJZi1Nb2RpZmllZC1TaW5jZSBhbmQvb3IgSWYtTm9uZS1NYXRjaCBoZWFkZXIsIGlmIGluIGlmTW9kaWZpZWQgbW9kZS5cblx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdGlmICggalF1ZXJ5Lmxhc3RNb2RpZmllZFsgY2FjaGVVUkwgXSApIHtcblx0XHRcdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlciggXCJJZi1Nb2RpZmllZC1TaW5jZVwiLCBqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdICk7XG5cdFx0XHR9XG5cdFx0XHRpZiAoIGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdICkge1xuXHRcdFx0XHRqcVhIUi5zZXRSZXF1ZXN0SGVhZGVyKCBcIklmLU5vbmUtTWF0Y2hcIiwgalF1ZXJ5LmV0YWdbIGNhY2hlVVJMIF0gKTtcblx0XHRcdH1cblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIGNvcnJlY3QgaGVhZGVyLCBpZiBkYXRhIGlzIGJlaW5nIHNlbnRcblx0XHRpZiAoIHMuZGF0YSAmJiBzLmhhc0NvbnRlbnQgJiYgcy5jb250ZW50VHlwZSAhPT0gZmFsc2UgfHwgb3B0aW9ucy5jb250ZW50VHlwZSApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIFwiQ29udGVudC1UeXBlXCIsIHMuY29udGVudFR5cGUgKTtcblx0XHR9XG5cblx0XHQvLyBTZXQgdGhlIEFjY2VwdHMgaGVhZGVyIGZvciB0aGUgc2VydmVyLCBkZXBlbmRpbmcgb24gdGhlIGRhdGFUeXBlXG5cdFx0anFYSFIuc2V0UmVxdWVzdEhlYWRlcihcblx0XHRcdFwiQWNjZXB0XCIsXG5cdFx0XHRzLmRhdGFUeXBlc1sgMCBdICYmIHMuYWNjZXB0c1sgcy5kYXRhVHlwZXNbIDAgXSBdID9cblx0XHRcdFx0cy5hY2NlcHRzWyBzLmRhdGFUeXBlc1sgMCBdIF0gK1xuXHRcdFx0XHRcdCggcy5kYXRhVHlwZXNbIDAgXSAhPT0gXCIqXCIgPyBcIiwgXCIgKyBhbGxUeXBlcyArIFwiOyBxPTAuMDFcIiA6IFwiXCIgKSA6XG5cdFx0XHRcdHMuYWNjZXB0c1sgXCIqXCIgXVxuXHRcdCk7XG5cblx0XHQvLyBDaGVjayBmb3IgaGVhZGVycyBvcHRpb25cblx0XHRmb3IgKCBpIGluIHMuaGVhZGVycyApIHtcblx0XHRcdGpxWEhSLnNldFJlcXVlc3RIZWFkZXIoIGksIHMuaGVhZGVyc1sgaSBdICk7XG5cdFx0fVxuXG5cdFx0Ly8gQWxsb3cgY3VzdG9tIGhlYWRlcnMvbWltZXR5cGVzIGFuZCBlYXJseSBhYm9ydFxuXHRcdGlmICggcy5iZWZvcmVTZW5kICYmXG5cdFx0XHQoIHMuYmVmb3JlU2VuZC5jYWxsKCBjYWxsYmFja0NvbnRleHQsIGpxWEhSLCBzICkgPT09IGZhbHNlIHx8IGNvbXBsZXRlZCApICkge1xuXG5cdFx0XHQvLyBBYm9ydCBpZiBub3QgZG9uZSBhbHJlYWR5IGFuZCByZXR1cm5cblx0XHRcdHJldHVybiBqcVhIUi5hYm9ydCgpO1xuXHRcdH1cblxuXHRcdC8vIEFib3J0aW5nIGlzIG5vIGxvbmdlciBhIGNhbmNlbGxhdGlvblxuXHRcdHN0ckFib3J0ID0gXCJhYm9ydFwiO1xuXG5cdFx0Ly8gSW5zdGFsbCBjYWxsYmFja3Mgb24gZGVmZXJyZWRzXG5cdFx0Y29tcGxldGVEZWZlcnJlZC5hZGQoIHMuY29tcGxldGUgKTtcblx0XHRqcVhIUi5kb25lKCBzLnN1Y2Nlc3MgKTtcblx0XHRqcVhIUi5mYWlsKCBzLmVycm9yICk7XG5cblx0XHQvLyBHZXQgdHJhbnNwb3J0XG5cdFx0dHJhbnNwb3J0ID0gaW5zcGVjdFByZWZpbHRlcnNPclRyYW5zcG9ydHMoIHRyYW5zcG9ydHMsIHMsIG9wdGlvbnMsIGpxWEhSICk7XG5cblx0XHQvLyBJZiBubyB0cmFuc3BvcnQsIHdlIGF1dG8tYWJvcnRcblx0XHRpZiAoICF0cmFuc3BvcnQgKSB7XG5cdFx0XHRkb25lKCAtMSwgXCJObyBUcmFuc3BvcnRcIiApO1xuXHRcdH0gZWxzZSB7XG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gMTtcblxuXHRcdFx0Ly8gU2VuZCBnbG9iYWwgZXZlbnRcblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhTZW5kXCIsIFsganFYSFIsIHMgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBJZiByZXF1ZXN0IHdhcyBhYm9ydGVkIGluc2lkZSBhamF4U2VuZCwgc3RvcCB0aGVyZVxuXHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdHJldHVybiBqcVhIUjtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGltZW91dFxuXHRcdFx0aWYgKCBzLmFzeW5jICYmIHMudGltZW91dCA+IDAgKSB7XG5cdFx0XHRcdHRpbWVvdXRUaW1lciA9IHdpbmRvdy5zZXRUaW1lb3V0KCBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRqcVhIUi5hYm9ydCggXCJ0aW1lb3V0XCIgKTtcblx0XHRcdFx0fSwgcy50aW1lb3V0ICk7XG5cdFx0XHR9XG5cblx0XHRcdHRyeSB7XG5cdFx0XHRcdGNvbXBsZXRlZCA9IGZhbHNlO1xuXHRcdFx0XHR0cmFuc3BvcnQuc2VuZCggcmVxdWVzdEhlYWRlcnMsIGRvbmUgKTtcblx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdC8vIFJldGhyb3cgcG9zdC1jb21wbGV0aW9uIGV4Y2VwdGlvbnNcblx0XHRcdFx0aWYgKCBjb21wbGV0ZWQgKSB7XG5cdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFByb3BhZ2F0ZSBvdGhlcnMgYXMgcmVzdWx0c1xuXHRcdFx0XHRkb25lKCAtMSwgZSApO1xuXHRcdFx0fVxuXHRcdH1cblxuXHRcdC8vIENhbGxiYWNrIGZvciB3aGVuIGV2ZXJ5dGhpbmcgaXMgZG9uZVxuXHRcdGZ1bmN0aW9uIGRvbmUoIHN0YXR1cywgbmF0aXZlU3RhdHVzVGV4dCwgcmVzcG9uc2VzLCBoZWFkZXJzICkge1xuXHRcdFx0dmFyIGlzU3VjY2Vzcywgc3VjY2VzcywgZXJyb3IsIHJlc3BvbnNlLCBtb2RpZmllZCxcblx0XHRcdFx0c3RhdHVzVGV4dCA9IG5hdGl2ZVN0YXR1c1RleHQ7XG5cblx0XHRcdC8vIElnbm9yZSByZXBlYXQgaW52b2NhdGlvbnNcblx0XHRcdGlmICggY29tcGxldGVkICkge1xuXHRcdFx0XHRyZXR1cm47XG5cdFx0XHR9XG5cblx0XHRcdGNvbXBsZXRlZCA9IHRydWU7XG5cblx0XHRcdC8vIENsZWFyIHRpbWVvdXQgaWYgaXQgZXhpc3RzXG5cdFx0XHRpZiAoIHRpbWVvdXRUaW1lciApIHtcblx0XHRcdFx0d2luZG93LmNsZWFyVGltZW91dCggdGltZW91dFRpbWVyICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIERlcmVmZXJlbmNlIHRyYW5zcG9ydCBmb3IgZWFybHkgZ2FyYmFnZSBjb2xsZWN0aW9uXG5cdFx0XHQvLyAobm8gbWF0dGVyIGhvdyBsb25nIHRoZSBqcVhIUiBvYmplY3Qgd2lsbCBiZSB1c2VkKVxuXHRcdFx0dHJhbnNwb3J0ID0gdW5kZWZpbmVkO1xuXG5cdFx0XHQvLyBDYWNoZSByZXNwb25zZSBoZWFkZXJzXG5cdFx0XHRyZXNwb25zZUhlYWRlcnNTdHJpbmcgPSBoZWFkZXJzIHx8IFwiXCI7XG5cblx0XHRcdC8vIFNldCByZWFkeVN0YXRlXG5cdFx0XHRqcVhIUi5yZWFkeVN0YXRlID0gc3RhdHVzID4gMCA/IDQgOiAwO1xuXG5cdFx0XHQvLyBEZXRlcm1pbmUgaWYgc3VjY2Vzc2Z1bFxuXHRcdFx0aXNTdWNjZXNzID0gc3RhdHVzID49IDIwMCAmJiBzdGF0dXMgPCAzMDAgfHwgc3RhdHVzID09PSAzMDQ7XG5cblx0XHRcdC8vIEdldCByZXNwb25zZSBkYXRhXG5cdFx0XHRpZiAoIHJlc3BvbnNlcyApIHtcblx0XHRcdFx0cmVzcG9uc2UgPSBhamF4SGFuZGxlUmVzcG9uc2VzKCBzLCBqcVhIUiwgcmVzcG9uc2VzICk7XG5cdFx0XHR9XG5cblx0XHRcdC8vIENvbnZlcnQgbm8gbWF0dGVyIHdoYXQgKHRoYXQgd2F5IHJlc3BvbnNlWFhYIGZpZWxkcyBhcmUgYWx3YXlzIHNldClcblx0XHRcdHJlc3BvbnNlID0gYWpheENvbnZlcnQoIHMsIHJlc3BvbnNlLCBqcVhIUiwgaXNTdWNjZXNzICk7XG5cblx0XHRcdC8vIElmIHN1Y2Nlc3NmdWwsIGhhbmRsZSB0eXBlIGNoYWluaW5nXG5cdFx0XHRpZiAoIGlzU3VjY2VzcyApIHtcblxuXHRcdFx0XHQvLyBTZXQgdGhlIElmLU1vZGlmaWVkLVNpbmNlIGFuZC9vciBJZi1Ob25lLU1hdGNoIGhlYWRlciwgaWYgaW4gaWZNb2RpZmllZCBtb2RlLlxuXHRcdFx0XHRpZiAoIHMuaWZNb2RpZmllZCApIHtcblx0XHRcdFx0XHRtb2RpZmllZCA9IGpxWEhSLmdldFJlc3BvbnNlSGVhZGVyKCBcIkxhc3QtTW9kaWZpZWRcIiApO1xuXHRcdFx0XHRcdGlmICggbW9kaWZpZWQgKSB7XG5cdFx0XHRcdFx0XHRqUXVlcnkubGFzdE1vZGlmaWVkWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHRcdG1vZGlmaWVkID0ganFYSFIuZ2V0UmVzcG9uc2VIZWFkZXIoIFwiZXRhZ1wiICk7XG5cdFx0XHRcdFx0aWYgKCBtb2RpZmllZCApIHtcblx0XHRcdFx0XHRcdGpRdWVyeS5ldGFnWyBjYWNoZVVSTCBdID0gbW9kaWZpZWQ7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gaWYgbm8gY29udGVudFxuXHRcdFx0XHRpZiAoIHN0YXR1cyA9PT0gMjA0IHx8IHMudHlwZSA9PT0gXCJIRUFEXCIgKSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IFwibm9jb250ZW50XCI7XG5cblx0XHRcdFx0Ly8gaWYgbm90IG1vZGlmaWVkXG5cdFx0XHRcdH0gZWxzZSBpZiAoIHN0YXR1cyA9PT0gMzA0ICkge1xuXHRcdFx0XHRcdHN0YXR1c1RleHQgPSBcIm5vdG1vZGlmaWVkXCI7XG5cblx0XHRcdFx0Ly8gSWYgd2UgaGF2ZSBkYXRhLCBsZXQncyBjb252ZXJ0IGl0XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0c3RhdHVzVGV4dCA9IHJlc3BvbnNlLnN0YXRlO1xuXHRcdFx0XHRcdHN1Y2Nlc3MgPSByZXNwb25zZS5kYXRhO1xuXHRcdFx0XHRcdGVycm9yID0gcmVzcG9uc2UuZXJyb3I7XG5cdFx0XHRcdFx0aXNTdWNjZXNzID0gIWVycm9yO1xuXHRcdFx0XHR9XG5cdFx0XHR9IGVsc2Uge1xuXG5cdFx0XHRcdC8vIEV4dHJhY3QgZXJyb3IgZnJvbSBzdGF0dXNUZXh0IGFuZCBub3JtYWxpemUgZm9yIG5vbi1hYm9ydHNcblx0XHRcdFx0ZXJyb3IgPSBzdGF0dXNUZXh0O1xuXHRcdFx0XHRpZiAoIHN0YXR1cyB8fCAhc3RhdHVzVGV4dCApIHtcblx0XHRcdFx0XHRzdGF0dXNUZXh0ID0gXCJlcnJvclwiO1xuXHRcdFx0XHRcdGlmICggc3RhdHVzIDwgMCApIHtcblx0XHRcdFx0XHRcdHN0YXR1cyA9IDA7XG5cdFx0XHRcdFx0fVxuXHRcdFx0XHR9XG5cdFx0XHR9XG5cblx0XHRcdC8vIFNldCBkYXRhIGZvciB0aGUgZmFrZSB4aHIgb2JqZWN0XG5cdFx0XHRqcVhIUi5zdGF0dXMgPSBzdGF0dXM7XG5cdFx0XHRqcVhIUi5zdGF0dXNUZXh0ID0gKCBuYXRpdmVTdGF0dXNUZXh0IHx8IHN0YXR1c1RleHQgKSArIFwiXCI7XG5cblx0XHRcdC8vIFN1Y2Nlc3MvRXJyb3Jcblx0XHRcdGlmICggaXNTdWNjZXNzICkge1xuXHRcdFx0XHRkZWZlcnJlZC5yZXNvbHZlV2l0aCggY2FsbGJhY2tDb250ZXh0LCBbIHN1Y2Nlc3MsIHN0YXR1c1RleHQsIGpxWEhSIF0gKTtcblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGRlZmVycmVkLnJlamVjdFdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCwgZXJyb3IgXSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTdGF0dXMtZGVwZW5kZW50IGNhbGxiYWNrc1xuXHRcdFx0anFYSFIuc3RhdHVzQ29kZSggc3RhdHVzQ29kZSApO1xuXHRcdFx0c3RhdHVzQ29kZSA9IHVuZGVmaW5lZDtcblxuXHRcdFx0aWYgKCBmaXJlR2xvYmFscyApIHtcblx0XHRcdFx0Z2xvYmFsRXZlbnRDb250ZXh0LnRyaWdnZXIoIGlzU3VjY2VzcyA/IFwiYWpheFN1Y2Nlc3NcIiA6IFwiYWpheEVycm9yXCIsXG5cdFx0XHRcdFx0WyBqcVhIUiwgcywgaXNTdWNjZXNzID8gc3VjY2VzcyA6IGVycm9yIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gQ29tcGxldGVcblx0XHRcdGNvbXBsZXRlRGVmZXJyZWQuZmlyZVdpdGgoIGNhbGxiYWNrQ29udGV4dCwgWyBqcVhIUiwgc3RhdHVzVGV4dCBdICk7XG5cblx0XHRcdGlmICggZmlyZUdsb2JhbHMgKSB7XG5cdFx0XHRcdGdsb2JhbEV2ZW50Q29udGV4dC50cmlnZ2VyKCBcImFqYXhDb21wbGV0ZVwiLCBbIGpxWEhSLCBzIF0gKTtcblxuXHRcdFx0XHQvLyBIYW5kbGUgdGhlIGdsb2JhbCBBSkFYIGNvdW50ZXJcblx0XHRcdFx0aWYgKCAhKCAtLWpRdWVyeS5hY3RpdmUgKSApIHtcblx0XHRcdFx0XHRqUXVlcnkuZXZlbnQudHJpZ2dlciggXCJhamF4U3RvcFwiICk7XG5cdFx0XHRcdH1cblx0XHRcdH1cblx0XHR9XG5cblx0XHRyZXR1cm4ganFYSFI7XG5cdH0sXG5cblx0Z2V0SlNPTjogZnVuY3Rpb24oIHVybCwgZGF0YSwgY2FsbGJhY2sgKSB7XG5cdFx0cmV0dXJuIGpRdWVyeS5nZXQoIHVybCwgZGF0YSwgY2FsbGJhY2ssIFwianNvblwiICk7XG5cdH0sXG5cblx0Z2V0U2NyaXB0OiBmdW5jdGlvbiggdXJsLCBjYWxsYmFjayApIHtcblx0XHRyZXR1cm4galF1ZXJ5LmdldCggdXJsLCB1bmRlZmluZWQsIGNhbGxiYWNrLCBcInNjcmlwdFwiICk7XG5cdH1cbn0gKTtcblxualF1ZXJ5LmVhY2goIFsgXCJnZXRcIiwgXCJwb3N0XCIgXSwgZnVuY3Rpb24oIGksIG1ldGhvZCApIHtcblx0alF1ZXJ5WyBtZXRob2QgXSA9IGZ1bmN0aW9uKCB1cmwsIGRhdGEsIGNhbGxiYWNrLCB0eXBlICkge1xuXG5cdFx0Ly8gU2hpZnQgYXJndW1lbnRzIGlmIGRhdGEgYXJndW1lbnQgd2FzIG9taXR0ZWRcblx0XHRpZiAoIGlzRnVuY3Rpb24oIGRhdGEgKSApIHtcblx0XHRcdHR5cGUgPSB0eXBlIHx8IGNhbGxiYWNrO1xuXHRcdFx0Y2FsbGJhY2sgPSBkYXRhO1xuXHRcdFx0ZGF0YSA9IHVuZGVmaW5lZDtcblx0XHR9XG5cblx0XHQvLyBUaGUgdXJsIGNhbiBiZSBhbiBvcHRpb25zIG9iamVjdCAod2hpY2ggdGhlbiBtdXN0IGhhdmUgLnVybClcblx0XHRyZXR1cm4galF1ZXJ5LmFqYXgoIGpRdWVyeS5leHRlbmQoIHtcblx0XHRcdHVybDogdXJsLFxuXHRcdFx0dHlwZTogbWV0aG9kLFxuXHRcdFx0ZGF0YVR5cGU6IHR5cGUsXG5cdFx0XHRkYXRhOiBkYXRhLFxuXHRcdFx0c3VjY2VzczogY2FsbGJhY2tcblx0XHR9LCBqUXVlcnkuaXNQbGFpbk9iamVjdCggdXJsICkgJiYgdXJsICkgKTtcblx0fTtcbn0gKTtcblxuXG5qUXVlcnkuX2V2YWxVcmwgPSBmdW5jdGlvbiggdXJsICkge1xuXHRyZXR1cm4galF1ZXJ5LmFqYXgoIHtcblx0XHR1cmw6IHVybCxcblxuXHRcdC8vIE1ha2UgdGhpcyBleHBsaWNpdCwgc2luY2UgdXNlciBjYW4gb3ZlcnJpZGUgdGhpcyB0aHJvdWdoIGFqYXhTZXR1cCAoIzExMjY0KVxuXHRcdHR5cGU6IFwiR0VUXCIsXG5cdFx0ZGF0YVR5cGU6IFwic2NyaXB0XCIsXG5cdFx0Y2FjaGU6IHRydWUsXG5cdFx0YXN5bmM6IGZhbHNlLFxuXHRcdGdsb2JhbDogZmFsc2UsXG5cdFx0XCJ0aHJvd3NcIjogdHJ1ZVxuXHR9ICk7XG59O1xuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0d3JhcEFsbDogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0dmFyIHdyYXA7XG5cblx0XHRpZiAoIHRoaXNbIDAgXSApIHtcblx0XHRcdGlmICggaXNGdW5jdGlvbiggaHRtbCApICkge1xuXHRcdFx0XHRodG1sID0gaHRtbC5jYWxsKCB0aGlzWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0Ly8gVGhlIGVsZW1lbnRzIHRvIHdyYXAgdGhlIHRhcmdldCBhcm91bmRcblx0XHRcdHdyYXAgPSBqUXVlcnkoIGh0bWwsIHRoaXNbIDAgXS5vd25lckRvY3VtZW50ICkuZXEoIDAgKS5jbG9uZSggdHJ1ZSApO1xuXG5cdFx0XHRpZiAoIHRoaXNbIDAgXS5wYXJlbnROb2RlICkge1xuXHRcdFx0XHR3cmFwLmluc2VydEJlZm9yZSggdGhpc1sgMCBdICk7XG5cdFx0XHR9XG5cblx0XHRcdHdyYXAubWFwKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0dmFyIGVsZW0gPSB0aGlzO1xuXG5cdFx0XHRcdHdoaWxlICggZWxlbS5maXJzdEVsZW1lbnRDaGlsZCApIHtcblx0XHRcdFx0XHRlbGVtID0gZWxlbS5maXJzdEVsZW1lbnRDaGlsZDtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdHJldHVybiBlbGVtO1xuXHRcdFx0fSApLmFwcGVuZCggdGhpcyApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzO1xuXHR9LFxuXG5cdHdyYXBJbm5lcjogZnVuY3Rpb24oIGh0bWwgKSB7XG5cdFx0aWYgKCBpc0Z1bmN0aW9uKCBodG1sICkgKSB7XG5cdFx0XHRyZXR1cm4gdGhpcy5lYWNoKCBmdW5jdGlvbiggaSApIHtcblx0XHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcElubmVyKCBodG1sLmNhbGwoIHRoaXMsIGkgKSApO1xuXHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0dmFyIHNlbGYgPSBqUXVlcnkoIHRoaXMgKSxcblx0XHRcdFx0Y29udGVudHMgPSBzZWxmLmNvbnRlbnRzKCk7XG5cblx0XHRcdGlmICggY29udGVudHMubGVuZ3RoICkge1xuXHRcdFx0XHRjb250ZW50cy53cmFwQWxsKCBodG1sICk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdHNlbGYuYXBwZW5kKCBodG1sICk7XG5cdFx0XHR9XG5cdFx0fSApO1xuXHR9LFxuXG5cdHdyYXA6IGZ1bmN0aW9uKCBodG1sICkge1xuXHRcdHZhciBodG1sSXNGdW5jdGlvbiA9IGlzRnVuY3Rpb24oIGh0bWwgKTtcblxuXHRcdHJldHVybiB0aGlzLmVhY2goIGZ1bmN0aW9uKCBpICkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkud3JhcEFsbCggaHRtbElzRnVuY3Rpb24gPyBodG1sLmNhbGwoIHRoaXMsIGkgKSA6IGh0bWwgKTtcblx0XHR9ICk7XG5cdH0sXG5cblx0dW53cmFwOiBmdW5jdGlvbiggc2VsZWN0b3IgKSB7XG5cdFx0dGhpcy5wYXJlbnQoIHNlbGVjdG9yICkubm90KCBcImJvZHlcIiApLmVhY2goIGZ1bmN0aW9uKCkge1xuXHRcdFx0alF1ZXJ5KCB0aGlzICkucmVwbGFjZVdpdGgoIHRoaXMuY2hpbGROb2RlcyApO1xuXHRcdH0gKTtcblx0XHRyZXR1cm4gdGhpcztcblx0fVxufSApO1xuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuaGlkZGVuID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhalF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlKCBlbGVtICk7XG59O1xualF1ZXJ5LmV4cHIucHNldWRvcy52aXNpYmxlID0gZnVuY3Rpb24oIGVsZW0gKSB7XG5cdHJldHVybiAhISggZWxlbS5vZmZzZXRXaWR0aCB8fCBlbGVtLm9mZnNldEhlaWdodCB8fCBlbGVtLmdldENsaWVudFJlY3RzKCkubGVuZ3RoICk7XG59O1xuXG5cblxuXG5qUXVlcnkuYWpheFNldHRpbmdzLnhociA9IGZ1bmN0aW9uKCkge1xuXHR0cnkge1xuXHRcdHJldHVybiBuZXcgd2luZG93LlhNTEh0dHBSZXF1ZXN0KCk7XG5cdH0gY2F0Y2ggKCBlICkge31cbn07XG5cbnZhciB4aHJTdWNjZXNzU3RhdHVzID0ge1xuXG5cdFx0Ly8gRmlsZSBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyBjb2RlIDAsIGFzc3VtZSAyMDBcblx0XHQwOiAyMDAsXG5cblx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdC8vICMxNDUwOiBzb21ldGltZXMgSUUgcmV0dXJucyAxMjIzIHdoZW4gaXQgc2hvdWxkIGJlIDIwNFxuXHRcdDEyMjM6IDIwNFxuXHR9LFxuXHR4aHJTdXBwb3J0ZWQgPSBqUXVlcnkuYWpheFNldHRpbmdzLnhocigpO1xuXG5zdXBwb3J0LmNvcnMgPSAhIXhoclN1cHBvcnRlZCAmJiAoIFwid2l0aENyZWRlbnRpYWxzXCIgaW4geGhyU3VwcG9ydGVkICk7XG5zdXBwb3J0LmFqYXggPSB4aHJTdXBwb3J0ZWQgPSAhIXhoclN1cHBvcnRlZDtcblxualF1ZXJ5LmFqYXhUcmFuc3BvcnQoIGZ1bmN0aW9uKCBvcHRpb25zICkge1xuXHR2YXIgY2FsbGJhY2ssIGVycm9yQ2FsbGJhY2s7XG5cblx0Ly8gQ3Jvc3MgZG9tYWluIG9ubHkgYWxsb3dlZCBpZiBzdXBwb3J0ZWQgdGhyb3VnaCBYTUxIdHRwUmVxdWVzdFxuXHRpZiAoIHN1cHBvcnQuY29ycyB8fCB4aHJTdXBwb3J0ZWQgJiYgIW9wdGlvbnMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHNlbmQ6IGZ1bmN0aW9uKCBoZWFkZXJzLCBjb21wbGV0ZSApIHtcblx0XHRcdFx0dmFyIGksXG5cdFx0XHRcdFx0eGhyID0gb3B0aW9ucy54aHIoKTtcblxuXHRcdFx0XHR4aHIub3Blbihcblx0XHRcdFx0XHRvcHRpb25zLnR5cGUsXG5cdFx0XHRcdFx0b3B0aW9ucy51cmwsXG5cdFx0XHRcdFx0b3B0aW9ucy5hc3luYyxcblx0XHRcdFx0XHRvcHRpb25zLnVzZXJuYW1lLFxuXHRcdFx0XHRcdG9wdGlvbnMucGFzc3dvcmRcblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBBcHBseSBjdXN0b20gZmllbGRzIGlmIHByb3ZpZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy54aHJGaWVsZHMgKSB7XG5cdFx0XHRcdFx0Zm9yICggaSBpbiBvcHRpb25zLnhockZpZWxkcyApIHtcblx0XHRcdFx0XHRcdHhoclsgaSBdID0gb3B0aW9ucy54aHJGaWVsZHNbIGkgXTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBPdmVycmlkZSBtaW1lIHR5cGUgaWYgbmVlZGVkXG5cdFx0XHRcdGlmICggb3B0aW9ucy5taW1lVHlwZSAmJiB4aHIub3ZlcnJpZGVNaW1lVHlwZSApIHtcblx0XHRcdFx0XHR4aHIub3ZlcnJpZGVNaW1lVHlwZSggb3B0aW9ucy5taW1lVHlwZSApO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gWC1SZXF1ZXN0ZWQtV2l0aCBoZWFkZXJcblx0XHRcdFx0Ly8gRm9yIGNyb3NzLWRvbWFpbiByZXF1ZXN0cywgc2VlaW5nIGFzIGNvbmRpdGlvbnMgZm9yIGEgcHJlZmxpZ2h0IGFyZVxuXHRcdFx0XHQvLyBha2luIHRvIGEgamlnc2F3IHB1enpsZSwgd2Ugc2ltcGx5IG5ldmVyIHNldCBpdCB0byBiZSBzdXJlLlxuXHRcdFx0XHQvLyAoaXQgY2FuIGFsd2F5cyBiZSBzZXQgb24gYSBwZXItcmVxdWVzdCBiYXNpcyBvciBldmVuIHVzaW5nIGFqYXhTZXR1cClcblx0XHRcdFx0Ly8gRm9yIHNhbWUtZG9tYWluIHJlcXVlc3RzLCB3b24ndCBjaGFuZ2UgaGVhZGVyIGlmIGFscmVhZHkgcHJvdmlkZWQuXG5cdFx0XHRcdGlmICggIW9wdGlvbnMuY3Jvc3NEb21haW4gJiYgIWhlYWRlcnNbIFwiWC1SZXF1ZXN0ZWQtV2l0aFwiIF0gKSB7XG5cdFx0XHRcdFx0aGVhZGVyc1sgXCJYLVJlcXVlc3RlZC1XaXRoXCIgXSA9IFwiWE1MSHR0cFJlcXVlc3RcIjtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIFNldCBoZWFkZXJzXG5cdFx0XHRcdGZvciAoIGkgaW4gaGVhZGVycyApIHtcblx0XHRcdFx0XHR4aHIuc2V0UmVxdWVzdEhlYWRlciggaSwgaGVhZGVyc1sgaSBdICk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHQvLyBDYWxsYmFja1xuXHRcdFx0XHRjYWxsYmFjayA9IGZ1bmN0aW9uKCB0eXBlICkge1xuXHRcdFx0XHRcdHJldHVybiBmdW5jdGlvbigpIHtcblx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdGNhbGxiYWNrID0gZXJyb3JDYWxsYmFjayA9IHhoci5vbmxvYWQgPVxuXHRcdFx0XHRcdFx0XHRcdHhoci5vbmVycm9yID0geGhyLm9uYWJvcnQgPSB4aHIub250aW1lb3V0ID1cblx0XHRcdFx0XHRcdFx0XHRcdHhoci5vbnJlYWR5c3RhdGVjaGFuZ2UgPSBudWxsO1xuXG5cdFx0XHRcdFx0XHRcdGlmICggdHlwZSA9PT0gXCJhYm9ydFwiICkge1xuXHRcdFx0XHRcdFx0XHRcdHhoci5hYm9ydCgpO1xuXHRcdFx0XHRcdFx0XHR9IGVsc2UgaWYgKCB0eXBlID09PSBcImVycm9yXCIgKSB7XG5cblx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdC8vIE9uIGEgbWFudWFsIG5hdGl2ZSBhYm9ydCwgSUU5IHRocm93c1xuXHRcdFx0XHRcdFx0XHRcdC8vIGVycm9ycyBvbiBhbnkgcHJvcGVydHkgYWNjZXNzIHRoYXQgaXMgbm90IHJlYWR5U3RhdGVcblx0XHRcdFx0XHRcdFx0XHRpZiAoIHR5cGVvZiB4aHIuc3RhdHVzICE9PSBcIm51bWJlclwiICkge1xuXHRcdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoIDAsIFwiZXJyb3JcIiApO1xuXHRcdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRjb21wbGV0ZShcblxuXHRcdFx0XHRcdFx0XHRcdFx0XHQvLyBGaWxlOiBwcm90b2NvbCBhbHdheXMgeWllbGRzIHN0YXR1cyAwOyBzZWUgIzg2MDUsICMxNDIwN1xuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzLFxuXHRcdFx0XHRcdFx0XHRcdFx0XHR4aHIuc3RhdHVzVGV4dFxuXHRcdFx0XHRcdFx0XHRcdFx0KTtcblx0XHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0XHRcdFx0Y29tcGxldGUoXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHJTdWNjZXNzU3RhdHVzWyB4aHIuc3RhdHVzIF0gfHwgeGhyLnN0YXR1cyxcblx0XHRcdFx0XHRcdFx0XHRcdHhoci5zdGF0dXNUZXh0LFxuXG5cdFx0XHRcdFx0XHRcdFx0XHQvLyBTdXBwb3J0OiBJRSA8PTkgb25seVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gSUU5IGhhcyBubyBYSFIyIGJ1dCB0aHJvd3Mgb24gYmluYXJ5ICh0cmFjLTExNDI2KVxuXHRcdFx0XHRcdFx0XHRcdFx0Ly8gRm9yIFhIUjIgbm9uLXRleHQsIGxldCB0aGUgY2FsbGVyIGhhbmRsZSBpdCAoZ2gtMjQ5OClcblx0XHRcdFx0XHRcdFx0XHRcdCggeGhyLnJlc3BvbnNlVHlwZSB8fCBcInRleHRcIiApICE9PSBcInRleHRcIiAgfHxcblx0XHRcdFx0XHRcdFx0XHRcdHR5cGVvZiB4aHIucmVzcG9uc2VUZXh0ICE9PSBcInN0cmluZ1wiID9cblx0XHRcdFx0XHRcdFx0XHRcdFx0eyBiaW5hcnk6IHhoci5yZXNwb25zZSB9IDpcblx0XHRcdFx0XHRcdFx0XHRcdFx0eyB0ZXh0OiB4aHIucmVzcG9uc2VUZXh0IH0sXG5cdFx0XHRcdFx0XHRcdFx0XHR4aHIuZ2V0QWxsUmVzcG9uc2VIZWFkZXJzKClcblx0XHRcdFx0XHRcdFx0XHQpO1xuXHRcdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fTtcblxuXHRcdFx0XHQvLyBMaXN0ZW4gdG8gZXZlbnRzXG5cdFx0XHRcdHhoci5vbmxvYWQgPSBjYWxsYmFjaygpO1xuXHRcdFx0XHRlcnJvckNhbGxiYWNrID0geGhyLm9uZXJyb3IgPSB4aHIub250aW1lb3V0ID0gY2FsbGJhY2soIFwiZXJyb3JcIiApO1xuXG5cdFx0XHRcdC8vIFN1cHBvcnQ6IElFIDkgb25seVxuXHRcdFx0XHQvLyBVc2Ugb25yZWFkeXN0YXRlY2hhbmdlIHRvIHJlcGxhY2Ugb25hYm9ydFxuXHRcdFx0XHQvLyB0byBoYW5kbGUgdW5jYXVnaHQgYWJvcnRzXG5cdFx0XHRcdGlmICggeGhyLm9uYWJvcnQgIT09IHVuZGVmaW5lZCApIHtcblx0XHRcdFx0XHR4aHIub25hYm9ydCA9IGVycm9yQ2FsbGJhY2s7XG5cdFx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdFx0eGhyLm9ucmVhZHlzdGF0ZWNoYW5nZSA9IGZ1bmN0aW9uKCkge1xuXG5cdFx0XHRcdFx0XHQvLyBDaGVjayByZWFkeVN0YXRlIGJlZm9yZSB0aW1lb3V0IGFzIGl0IGNoYW5nZXNcblx0XHRcdFx0XHRcdGlmICggeGhyLnJlYWR5U3RhdGUgPT09IDQgKSB7XG5cblx0XHRcdFx0XHRcdFx0Ly8gQWxsb3cgb25lcnJvciB0byBiZSBjYWxsZWQgZmlyc3QsXG5cdFx0XHRcdFx0XHRcdC8vIGJ1dCB0aGF0IHdpbGwgbm90IGhhbmRsZSBhIG5hdGl2ZSBhYm9ydFxuXHRcdFx0XHRcdFx0XHQvLyBBbHNvLCBzYXZlIGVycm9yQ2FsbGJhY2sgdG8gYSB2YXJpYWJsZVxuXHRcdFx0XHRcdFx0XHQvLyBhcyB4aHIub25lcnJvciBjYW5ub3QgYmUgYWNjZXNzZWRcblx0XHRcdFx0XHRcdFx0d2luZG93LnNldFRpbWVvdXQoIGZ1bmN0aW9uKCkge1xuXHRcdFx0XHRcdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0XHRcdFx0XHRlcnJvckNhbGxiYWNrKCk7XG5cdFx0XHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdFx0XHR9ICk7XG5cdFx0XHRcdFx0XHR9XG5cdFx0XHRcdFx0fTtcblx0XHRcdFx0fVxuXG5cdFx0XHRcdC8vIENyZWF0ZSB0aGUgYWJvcnQgY2FsbGJhY2tcblx0XHRcdFx0Y2FsbGJhY2sgPSBjYWxsYmFjayggXCJhYm9ydFwiICk7XG5cblx0XHRcdFx0dHJ5IHtcblxuXHRcdFx0XHRcdC8vIERvIHNlbmQgdGhlIHJlcXVlc3QgKHRoaXMgbWF5IHJhaXNlIGFuIGV4Y2VwdGlvbilcblx0XHRcdFx0XHR4aHIuc2VuZCggb3B0aW9ucy5oYXNDb250ZW50ICYmIG9wdGlvbnMuZGF0YSB8fCBudWxsICk7XG5cdFx0XHRcdH0gY2F0Y2ggKCBlICkge1xuXG5cdFx0XHRcdFx0Ly8gIzE0NjgzOiBPbmx5IHJldGhyb3cgaWYgdGhpcyBoYXNuJ3QgYmVlbiBub3RpZmllZCBhcyBhbiBlcnJvciB5ZXRcblx0XHRcdFx0XHRpZiAoIGNhbGxiYWNrICkge1xuXHRcdFx0XHRcdFx0dGhyb3cgZTtcblx0XHRcdFx0XHR9XG5cdFx0XHRcdH1cblx0XHRcdH0sXG5cblx0XHRcdGFib3J0OiBmdW5jdGlvbigpIHtcblx0XHRcdFx0aWYgKCBjYWxsYmFjayApIHtcblx0XHRcdFx0XHRjYWxsYmFjaygpO1xuXHRcdFx0XHR9XG5cdFx0XHR9XG5cdFx0fTtcblx0fVxufSApO1xuXG5cblxuXG4vLyBQcmV2ZW50IGF1dG8tZXhlY3V0aW9uIG9mIHNjcmlwdHMgd2hlbiBubyBleHBsaWNpdCBkYXRhVHlwZSB3YXMgcHJvdmlkZWQgKFNlZSBnaC0yNDMyKVxualF1ZXJ5LmFqYXhQcmVmaWx0ZXIoIGZ1bmN0aW9uKCBzICkge1xuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy5jb250ZW50cy5zY3JpcHQgPSBmYWxzZTtcblx0fVxufSApO1xuXG4vLyBJbnN0YWxsIHNjcmlwdCBkYXRhVHlwZVxualF1ZXJ5LmFqYXhTZXR1cCgge1xuXHRhY2NlcHRzOiB7XG5cdFx0c2NyaXB0OiBcInRleHQvamF2YXNjcmlwdCwgYXBwbGljYXRpb24vamF2YXNjcmlwdCwgXCIgK1xuXHRcdFx0XCJhcHBsaWNhdGlvbi9lY21hc2NyaXB0LCBhcHBsaWNhdGlvbi94LWVjbWFzY3JpcHRcIlxuXHR9LFxuXHRjb250ZW50czoge1xuXHRcdHNjcmlwdDogL1xcYig/OmphdmF8ZWNtYSlzY3JpcHRcXGIvXG5cdH0sXG5cdGNvbnZlcnRlcnM6IHtcblx0XHRcInRleHQgc2NyaXB0XCI6IGZ1bmN0aW9uKCB0ZXh0ICkge1xuXHRcdFx0alF1ZXJ5Lmdsb2JhbEV2YWwoIHRleHQgKTtcblx0XHRcdHJldHVybiB0ZXh0O1xuXHRcdH1cblx0fVxufSApO1xuXG4vLyBIYW5kbGUgY2FjaGUncyBzcGVjaWFsIGNhc2UgYW5kIGNyb3NzRG9tYWluXG5qUXVlcnkuYWpheFByZWZpbHRlciggXCJzY3JpcHRcIiwgZnVuY3Rpb24oIHMgKSB7XG5cdGlmICggcy5jYWNoZSA9PT0gdW5kZWZpbmVkICkge1xuXHRcdHMuY2FjaGUgPSBmYWxzZTtcblx0fVxuXHRpZiAoIHMuY3Jvc3NEb21haW4gKSB7XG5cdFx0cy50eXBlID0gXCJHRVRcIjtcblx0fVxufSApO1xuXG4vLyBCaW5kIHNjcmlwdCB0YWcgaGFjayB0cmFuc3BvcnRcbmpRdWVyeS5hamF4VHJhbnNwb3J0KCBcInNjcmlwdFwiLCBmdW5jdGlvbiggcyApIHtcblxuXHQvLyBUaGlzIHRyYW5zcG9ydCBvbmx5IGRlYWxzIHdpdGggY3Jvc3MgZG9tYWluIHJlcXVlc3RzXG5cdGlmICggcy5jcm9zc0RvbWFpbiApIHtcblx0XHR2YXIgc2NyaXB0LCBjYWxsYmFjaztcblx0XHRyZXR1cm4ge1xuXHRcdFx0c2VuZDogZnVuY3Rpb24oIF8sIGNvbXBsZXRlICkge1xuXHRcdFx0XHRzY3JpcHQgPSBqUXVlcnkoIFwiPHNjcmlwdD5cIiApLnByb3AoIHtcblx0XHRcdFx0XHRjaGFyc2V0OiBzLnNjcmlwdENoYXJzZXQsXG5cdFx0XHRcdFx0c3JjOiBzLnVybFxuXHRcdFx0XHR9ICkub24oXG5cdFx0XHRcdFx0XCJsb2FkIGVycm9yXCIsXG5cdFx0XHRcdFx0Y2FsbGJhY2sgPSBmdW5jdGlvbiggZXZ0ICkge1xuXHRcdFx0XHRcdFx0c2NyaXB0LnJlbW92ZSgpO1xuXHRcdFx0XHRcdFx0Y2FsbGJhY2sgPSBudWxsO1xuXHRcdFx0XHRcdFx0aWYgKCBldnQgKSB7XG5cdFx0XHRcdFx0XHRcdGNvbXBsZXRlKCBldnQudHlwZSA9PT0gXCJlcnJvclwiID8gNDA0IDogMjAwLCBldnQudHlwZSApO1xuXHRcdFx0XHRcdFx0fVxuXHRcdFx0XHRcdH1cblx0XHRcdFx0KTtcblxuXHRcdFx0XHQvLyBVc2UgbmF0aXZlIERPTSBtYW5pcHVsYXRpb24gdG8gYXZvaWQgb3VyIGRvbU1hbmlwIEFKQVggdHJpY2tlcnlcblx0XHRcdFx0ZG9jdW1lbnQuaGVhZC5hcHBlbmRDaGlsZCggc2NyaXB0WyAwIF0gKTtcblx0XHRcdH0sXG5cdFx0XHRhYm9ydDogZnVuY3Rpb24oKSB7XG5cdFx0XHRcdGlmICggY2FsbGJhY2sgKSB7XG5cdFx0XHRcdFx0Y2FsbGJhY2soKTtcblx0XHRcdFx0fVxuXHRcdFx0fVxuXHRcdH07XG5cdH1cbn0gKTtcblxuXG5cblxudmFyIG9sZENhbGxiYWNrcyA9IFtdLFxuXHRyanNvbnAgPSAvKD0pXFw/KD89JnwkKXxcXD9cXD8vO1xuXG4vLyBEZWZhdWx0IGpzb25wIHNldHRpbmdzXG5qUXVlcnkuYWpheFNldHVwKCB7XG5cdGpzb25wOiBcImNhbGxiYWNrXCIsXG5cdGpzb25wQ2FsbGJhY2s6IGZ1bmN0aW9uKCkge1xuXHRcdHZhciBjYWxsYmFjayA9IG9sZENhbGxiYWNrcy5wb3AoKSB8fCAoIGpRdWVyeS5leHBhbmRvICsgXCJfXCIgKyAoIG5vbmNlKysgKSApO1xuXHRcdHRoaXNbIGNhbGxiYWNrIF0gPSB0cnVlO1xuXHRcdHJldHVybiBjYWxsYmFjaztcblx0fVxufSApO1xuXG4vLyBEZXRlY3QsIG5vcm1hbGl6ZSBvcHRpb25zIGFuZCBpbnN0YWxsIGNhbGxiYWNrcyBmb3IganNvbnAgcmVxdWVzdHNcbmpRdWVyeS5hamF4UHJlZmlsdGVyKCBcImpzb24ganNvbnBcIiwgZnVuY3Rpb24oIHMsIG9yaWdpbmFsU2V0dGluZ3MsIGpxWEhSICkge1xuXG5cdHZhciBjYWxsYmFja05hbWUsIG92ZXJ3cml0dGVuLCByZXNwb25zZUNvbnRhaW5lcixcblx0XHRqc29uUHJvcCA9IHMuanNvbnAgIT09IGZhbHNlICYmICggcmpzb25wLnRlc3QoIHMudXJsICkgP1xuXHRcdFx0XCJ1cmxcIiA6XG5cdFx0XHR0eXBlb2Ygcy5kYXRhID09PSBcInN0cmluZ1wiICYmXG5cdFx0XHRcdCggcy5jb250ZW50VHlwZSB8fCBcIlwiIClcblx0XHRcdFx0XHQuaW5kZXhPZiggXCJhcHBsaWNhdGlvbi94LXd3dy1mb3JtLXVybGVuY29kZWRcIiApID09PSAwICYmXG5cdFx0XHRcdHJqc29ucC50ZXN0KCBzLmRhdGEgKSAmJiBcImRhdGFcIlxuXHRcdCk7XG5cblx0Ly8gSGFuZGxlIGlmZiB0aGUgZXhwZWN0ZWQgZGF0YSB0eXBlIGlzIFwianNvbnBcIiBvciB3ZSBoYXZlIGEgcGFyYW1ldGVyIHRvIHNldFxuXHRpZiAoIGpzb25Qcm9wIHx8IHMuZGF0YVR5cGVzWyAwIF0gPT09IFwianNvbnBcIiApIHtcblxuXHRcdC8vIEdldCBjYWxsYmFjayBuYW1lLCByZW1lbWJlcmluZyBwcmVleGlzdGluZyB2YWx1ZSBhc3NvY2lhdGVkIHdpdGggaXRcblx0XHRjYWxsYmFja05hbWUgPSBzLmpzb25wQ2FsbGJhY2sgPSBpc0Z1bmN0aW9uKCBzLmpzb25wQ2FsbGJhY2sgKSA/XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2soKSA6XG5cdFx0XHRzLmpzb25wQ2FsbGJhY2s7XG5cblx0XHQvLyBJbnNlcnQgY2FsbGJhY2sgaW50byB1cmwgb3IgZm9ybSBkYXRhXG5cdFx0aWYgKCBqc29uUHJvcCApIHtcblx0XHRcdHNbIGpzb25Qcm9wIF0gPSBzWyBqc29uUHJvcCBdLnJlcGxhY2UoIHJqc29ucCwgXCIkMVwiICsgY2FsbGJhY2tOYW1lICk7XG5cdFx0fSBlbHNlIGlmICggcy5qc29ucCAhPT0gZmFsc2UgKSB7XG5cdFx0XHRzLnVybCArPSAoIHJxdWVyeS50ZXN0KCBzLnVybCApID8gXCImXCIgOiBcIj9cIiApICsgcy5qc29ucCArIFwiPVwiICsgY2FsbGJhY2tOYW1lO1xuXHRcdH1cblxuXHRcdC8vIFVzZSBkYXRhIGNvbnZlcnRlciB0byByZXRyaWV2ZSBqc29uIGFmdGVyIHNjcmlwdCBleGVjdXRpb25cblx0XHRzLmNvbnZlcnRlcnNbIFwic2NyaXB0IGpzb25cIiBdID0gZnVuY3Rpb24oKSB7XG5cdFx0XHRpZiAoICFyZXNwb25zZUNvbnRhaW5lciApIHtcblx0XHRcdFx0alF1ZXJ5LmVycm9yKCBjYWxsYmFja05hbWUgKyBcIiB3YXMgbm90IGNhbGxlZFwiICk7XG5cdFx0XHR9XG5cdFx0XHRyZXR1cm4gcmVzcG9uc2VDb250YWluZXJbIDAgXTtcblx0XHR9O1xuXG5cdFx0Ly8gRm9yY2UganNvbiBkYXRhVHlwZVxuXHRcdHMuZGF0YVR5cGVzWyAwIF0gPSBcImpzb25cIjtcblxuXHRcdC8vIEluc3RhbGwgY2FsbGJhY2tcblx0XHRvdmVyd3JpdHRlbiA9IHdpbmRvd1sgY2FsbGJhY2tOYW1lIF07XG5cdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IGZ1bmN0aW9uKCkge1xuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBhcmd1bWVudHM7XG5cdFx0fTtcblxuXHRcdC8vIENsZWFuLXVwIGZ1bmN0aW9uIChmaXJlcyBhZnRlciBjb252ZXJ0ZXJzKVxuXHRcdGpxWEhSLmFsd2F5cyggZnVuY3Rpb24oKSB7XG5cblx0XHRcdC8vIElmIHByZXZpb3VzIHZhbHVlIGRpZG4ndCBleGlzdCAtIHJlbW92ZSBpdFxuXHRcdFx0aWYgKCBvdmVyd3JpdHRlbiA9PT0gdW5kZWZpbmVkICkge1xuXHRcdFx0XHRqUXVlcnkoIHdpbmRvdyApLnJlbW92ZVByb3AoIGNhbGxiYWNrTmFtZSApO1xuXG5cdFx0XHQvLyBPdGhlcndpc2UgcmVzdG9yZSBwcmVleGlzdGluZyB2YWx1ZVxuXHRcdFx0fSBlbHNlIHtcblx0XHRcdFx0d2luZG93WyBjYWxsYmFja05hbWUgXSA9IG92ZXJ3cml0dGVuO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBTYXZlIGJhY2sgYXMgZnJlZVxuXHRcdFx0aWYgKCBzWyBjYWxsYmFja05hbWUgXSApIHtcblxuXHRcdFx0XHQvLyBNYWtlIHN1cmUgdGhhdCByZS11c2luZyB0aGUgb3B0aW9ucyBkb2Vzbid0IHNjcmV3IHRoaW5ncyBhcm91bmRcblx0XHRcdFx0cy5qc29ucENhbGxiYWNrID0gb3JpZ2luYWxTZXR0aW5ncy5qc29ucENhbGxiYWNrO1xuXG5cdFx0XHRcdC8vIFNhdmUgdGhlIGNhbGxiYWNrIG5hbWUgZm9yIGZ1dHVyZSB1c2Vcblx0XHRcdFx0b2xkQ2FsbGJhY2tzLnB1c2goIGNhbGxiYWNrTmFtZSApO1xuXHRcdFx0fVxuXG5cdFx0XHQvLyBDYWxsIGlmIGl0IHdhcyBhIGZ1bmN0aW9uIGFuZCB3ZSBoYXZlIGEgcmVzcG9uc2Vcblx0XHRcdGlmICggcmVzcG9uc2VDb250YWluZXIgJiYgaXNGdW5jdGlvbiggb3ZlcndyaXR0ZW4gKSApIHtcblx0XHRcdFx0b3ZlcndyaXR0ZW4oIHJlc3BvbnNlQ29udGFpbmVyWyAwIF0gKTtcblx0XHRcdH1cblxuXHRcdFx0cmVzcG9uc2VDb250YWluZXIgPSBvdmVyd3JpdHRlbiA9IHVuZGVmaW5lZDtcblx0XHR9ICk7XG5cblx0XHQvLyBEZWxlZ2F0ZSB0byBzY3JpcHRcblx0XHRyZXR1cm4gXCJzY3JpcHRcIjtcblx0fVxufSApO1xuXG5cblxuXG4vLyBTdXBwb3J0OiBTYWZhcmkgOCBvbmx5XG4vLyBJbiBTYWZhcmkgOCBkb2N1bWVudHMgY3JlYXRlZCB2aWEgZG9jdW1lbnQuaW1wbGVtZW50YXRpb24uY3JlYXRlSFRNTERvY3VtZW50XG4vLyBjb2xsYXBzZSBzaWJsaW5nIGZvcm1zOiB0aGUgc2Vjb25kIG9uZSBiZWNvbWVzIGEgY2hpbGQgb2YgdGhlIGZpcnN0IG9uZS5cbi8vIEJlY2F1c2Ugb2YgdGhhdCwgdGhpcyBzZWN1cml0eSBtZWFzdXJlIGhhcyB0byBiZSBkaXNhYmxlZCBpbiBTYWZhcmkgOC5cbi8vIGh0dHBzOi8vYnVncy53ZWJraXQub3JnL3Nob3dfYnVnLmNnaT9pZD0xMzczMzdcbnN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ID0gKCBmdW5jdGlvbigpIHtcblx0dmFyIGJvZHkgPSBkb2N1bWVudC5pbXBsZW1lbnRhdGlvbi5jcmVhdGVIVE1MRG9jdW1lbnQoIFwiXCIgKS5ib2R5O1xuXHRib2R5LmlubmVySFRNTCA9IFwiPGZvcm0+PC9mb3JtPjxmb3JtPjwvZm9ybT5cIjtcblx0cmV0dXJuIGJvZHkuY2hpbGROb2Rlcy5sZW5ndGggPT09IDI7XG59ICkoKTtcblxuXG4vLyBBcmd1bWVudCBcImRhdGFcIiBzaG91bGQgYmUgc3RyaW5nIG9mIGh0bWxcbi8vIGNvbnRleHQgKG9wdGlvbmFsKTogSWYgc3BlY2lmaWVkLCB0aGUgZnJhZ21lbnQgd2lsbCBiZSBjcmVhdGVkIGluIHRoaXMgY29udGV4dCxcbi8vIGRlZmF1bHRzIHRvIGRvY3VtZW50XG4vLyBrZWVwU2NyaXB0cyAob3B0aW9uYWwpOiBJZiB0cnVlLCB3aWxsIGluY2x1ZGUgc2NyaXB0cyBwYXNzZWQgaW4gdGhlIGh0bWwgc3RyaW5nXG5qUXVlcnkucGFyc2VIVE1MID0gZnVuY3Rpb24oIGRhdGEsIGNvbnRleHQsIGtlZXBTY3JpcHRzICkge1xuXHRpZiAoIHR5cGVvZiBkYXRhICE9PSBcInN0cmluZ1wiICkge1xuXHRcdHJldHVybiBbXTtcblx0fVxuXHRpZiAoIHR5cGVvZiBjb250ZXh0ID09PSBcImJvb2xlYW5cIiApIHtcblx0XHRrZWVwU2NyaXB0cyA9IGNvbnRleHQ7XG5cdFx0Y29udGV4dCA9IGZhbHNlO1xuXHR9XG5cblx0dmFyIGJhc2UsIHBhcnNlZCwgc2NyaXB0cztcblxuXHRpZiAoICFjb250ZXh0ICkge1xuXG5cdFx0Ly8gU3RvcCBzY3JpcHRzIG9yIGlubGluZSBldmVudCBoYW5kbGVycyBmcm9tIGJlaW5nIGV4ZWN1dGVkIGltbWVkaWF0ZWx5XG5cdFx0Ly8gYnkgdXNpbmcgZG9jdW1lbnQuaW1wbGVtZW50YXRpb25cblx0XHRpZiAoIHN1cHBvcnQuY3JlYXRlSFRNTERvY3VtZW50ICkge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50LmltcGxlbWVudGF0aW9uLmNyZWF0ZUhUTUxEb2N1bWVudCggXCJcIiApO1xuXG5cdFx0XHQvLyBTZXQgdGhlIGJhc2UgaHJlZiBmb3IgdGhlIGNyZWF0ZWQgZG9jdW1lbnRcblx0XHRcdC8vIHNvIGFueSBwYXJzZWQgZWxlbWVudHMgd2l0aCBVUkxzXG5cdFx0XHQvLyBhcmUgYmFzZWQgb24gdGhlIGRvY3VtZW50J3MgVVJMIChnaC0yOTY1KVxuXHRcdFx0YmFzZSA9IGNvbnRleHQuY3JlYXRlRWxlbWVudCggXCJiYXNlXCIgKTtcblx0XHRcdGJhc2UuaHJlZiA9IGRvY3VtZW50LmxvY2F0aW9uLmhyZWY7XG5cdFx0XHRjb250ZXh0LmhlYWQuYXBwZW5kQ2hpbGQoIGJhc2UgKTtcblx0XHR9IGVsc2Uge1xuXHRcdFx0Y29udGV4dCA9IGRvY3VtZW50O1xuXHRcdH1cblx0fVxuXG5cdHBhcnNlZCA9IHJzaW5nbGVUYWcuZXhlYyggZGF0YSApO1xuXHRzY3JpcHRzID0gIWtlZXBTY3JpcHRzICYmIFtdO1xuXG5cdC8vIFNpbmdsZSB0YWdcblx0aWYgKCBwYXJzZWQgKSB7XG5cdFx0cmV0dXJuIFsgY29udGV4dC5jcmVhdGVFbGVtZW50KCBwYXJzZWRbIDEgXSApIF07XG5cdH1cblxuXHRwYXJzZWQgPSBidWlsZEZyYWdtZW50KCBbIGRhdGEgXSwgY29udGV4dCwgc2NyaXB0cyApO1xuXG5cdGlmICggc2NyaXB0cyAmJiBzY3JpcHRzLmxlbmd0aCApIHtcblx0XHRqUXVlcnkoIHNjcmlwdHMgKS5yZW1vdmUoKTtcblx0fVxuXG5cdHJldHVybiBqUXVlcnkubWVyZ2UoIFtdLCBwYXJzZWQuY2hpbGROb2RlcyApO1xufTtcblxuXG4vKipcbiAqIExvYWQgYSB1cmwgaW50byBhIHBhZ2VcbiAqL1xualF1ZXJ5LmZuLmxvYWQgPSBmdW5jdGlvbiggdXJsLCBwYXJhbXMsIGNhbGxiYWNrICkge1xuXHR2YXIgc2VsZWN0b3IsIHR5cGUsIHJlc3BvbnNlLFxuXHRcdHNlbGYgPSB0aGlzLFxuXHRcdG9mZiA9IHVybC5pbmRleE9mKCBcIiBcIiApO1xuXG5cdGlmICggb2ZmID4gLTEgKSB7XG5cdFx0c2VsZWN0b3IgPSBzdHJpcEFuZENvbGxhcHNlKCB1cmwuc2xpY2UoIG9mZiApICk7XG5cdFx0dXJsID0gdXJsLnNsaWNlKCAwLCBvZmYgKTtcblx0fVxuXG5cdC8vIElmIGl0J3MgYSBmdW5jdGlvblxuXHRpZiAoIGlzRnVuY3Rpb24oIHBhcmFtcyApICkge1xuXG5cdFx0Ly8gV2UgYXNzdW1lIHRoYXQgaXQncyB0aGUgY2FsbGJhY2tcblx0XHRjYWxsYmFjayA9IHBhcmFtcztcblx0XHRwYXJhbXMgPSB1bmRlZmluZWQ7XG5cblx0Ly8gT3RoZXJ3aXNlLCBidWlsZCBhIHBhcmFtIHN0cmluZ1xuXHR9IGVsc2UgaWYgKCBwYXJhbXMgJiYgdHlwZW9mIHBhcmFtcyA9PT0gXCJvYmplY3RcIiApIHtcblx0XHR0eXBlID0gXCJQT1NUXCI7XG5cdH1cblxuXHQvLyBJZiB3ZSBoYXZlIGVsZW1lbnRzIHRvIG1vZGlmeSwgbWFrZSB0aGUgcmVxdWVzdFxuXHRpZiAoIHNlbGYubGVuZ3RoID4gMCApIHtcblx0XHRqUXVlcnkuYWpheCgge1xuXHRcdFx0dXJsOiB1cmwsXG5cblx0XHRcdC8vIElmIFwidHlwZVwiIHZhcmlhYmxlIGlzIHVuZGVmaW5lZCwgdGhlbiBcIkdFVFwiIG1ldGhvZCB3aWxsIGJlIHVzZWQuXG5cdFx0XHQvLyBNYWtlIHZhbHVlIG9mIHRoaXMgZmllbGQgZXhwbGljaXQgc2luY2Vcblx0XHRcdC8vIHVzZXIgY2FuIG92ZXJyaWRlIGl0IHRocm91Z2ggYWpheFNldHVwIG1ldGhvZFxuXHRcdFx0dHlwZTogdHlwZSB8fCBcIkdFVFwiLFxuXHRcdFx0ZGF0YVR5cGU6IFwiaHRtbFwiLFxuXHRcdFx0ZGF0YTogcGFyYW1zXG5cdFx0fSApLmRvbmUoIGZ1bmN0aW9uKCByZXNwb25zZVRleHQgKSB7XG5cblx0XHRcdC8vIFNhdmUgcmVzcG9uc2UgZm9yIHVzZSBpbiBjb21wbGV0ZSBjYWxsYmFja1xuXHRcdFx0cmVzcG9uc2UgPSBhcmd1bWVudHM7XG5cblx0XHRcdHNlbGYuaHRtbCggc2VsZWN0b3IgP1xuXG5cdFx0XHRcdC8vIElmIGEgc2VsZWN0b3Igd2FzIHNwZWNpZmllZCwgbG9jYXRlIHRoZSByaWdodCBlbGVtZW50cyBpbiBhIGR1bW15IGRpdlxuXHRcdFx0XHQvLyBFeGNsdWRlIHNjcmlwdHMgdG8gYXZvaWQgSUUgJ1Blcm1pc3Npb24gRGVuaWVkJyBlcnJvcnNcblx0XHRcdFx0alF1ZXJ5KCBcIjxkaXY+XCIgKS5hcHBlbmQoIGpRdWVyeS5wYXJzZUhUTUwoIHJlc3BvbnNlVGV4dCApICkuZmluZCggc2VsZWN0b3IgKSA6XG5cblx0XHRcdFx0Ly8gT3RoZXJ3aXNlIHVzZSB0aGUgZnVsbCByZXN1bHRcblx0XHRcdFx0cmVzcG9uc2VUZXh0ICk7XG5cblx0XHQvLyBJZiB0aGUgcmVxdWVzdCBzdWNjZWVkcywgdGhpcyBmdW5jdGlvbiBnZXRzIFwiZGF0YVwiLCBcInN0YXR1c1wiLCBcImpxWEhSXCJcblx0XHQvLyBidXQgdGhleSBhcmUgaWdub3JlZCBiZWNhdXNlIHJlc3BvbnNlIHdhcyBzZXQgYWJvdmUuXG5cdFx0Ly8gSWYgaXQgZmFpbHMsIHRoaXMgZnVuY3Rpb24gZ2V0cyBcImpxWEhSXCIsIFwic3RhdHVzXCIsIFwiZXJyb3JcIlxuXHRcdH0gKS5hbHdheXMoIGNhbGxiYWNrICYmIGZ1bmN0aW9uKCBqcVhIUiwgc3RhdHVzICkge1xuXHRcdFx0c2VsZi5lYWNoKCBmdW5jdGlvbigpIHtcblx0XHRcdFx0Y2FsbGJhY2suYXBwbHkoIHRoaXMsIHJlc3BvbnNlIHx8IFsganFYSFIucmVzcG9uc2VUZXh0LCBzdGF0dXMsIGpxWEhSIF0gKTtcblx0XHRcdH0gKTtcblx0XHR9ICk7XG5cdH1cblxuXHRyZXR1cm4gdGhpcztcbn07XG5cblxuXG5cbi8vIEF0dGFjaCBhIGJ1bmNoIG9mIGZ1bmN0aW9ucyBmb3IgaGFuZGxpbmcgY29tbW9uIEFKQVggZXZlbnRzXG5qUXVlcnkuZWFjaCggW1xuXHRcImFqYXhTdGFydFwiLFxuXHRcImFqYXhTdG9wXCIsXG5cdFwiYWpheENvbXBsZXRlXCIsXG5cdFwiYWpheEVycm9yXCIsXG5cdFwiYWpheFN1Y2Nlc3NcIixcblx0XCJhamF4U2VuZFwiXG5dLCBmdW5jdGlvbiggaSwgdHlwZSApIHtcblx0alF1ZXJ5LmZuWyB0eXBlIF0gPSBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIHRoaXMub24oIHR5cGUsIGZuICk7XG5cdH07XG59ICk7XG5cblxuXG5cbmpRdWVyeS5leHByLnBzZXVkb3MuYW5pbWF0ZWQgPSBmdW5jdGlvbiggZWxlbSApIHtcblx0cmV0dXJuIGpRdWVyeS5ncmVwKCBqUXVlcnkudGltZXJzLCBmdW5jdGlvbiggZm4gKSB7XG5cdFx0cmV0dXJuIGVsZW0gPT09IGZuLmVsZW07XG5cdH0gKS5sZW5ndGg7XG59O1xuXG5cblxuXG5qUXVlcnkub2Zmc2V0ID0ge1xuXHRzZXRPZmZzZXQ6IGZ1bmN0aW9uKCBlbGVtLCBvcHRpb25zLCBpICkge1xuXHRcdHZhciBjdXJQb3NpdGlvbiwgY3VyTGVmdCwgY3VyQ1NTVG9wLCBjdXJUb3AsIGN1ck9mZnNldCwgY3VyQ1NTTGVmdCwgY2FsY3VsYXRlUG9zaXRpb24sXG5cdFx0XHRwb3NpdGlvbiA9IGpRdWVyeS5jc3MoIGVsZW0sIFwicG9zaXRpb25cIiApLFxuXHRcdFx0Y3VyRWxlbSA9IGpRdWVyeSggZWxlbSApLFxuXHRcdFx0cHJvcHMgPSB7fTtcblxuXHRcdC8vIFNldCBwb3NpdGlvbiBmaXJzdCwgaW4tY2FzZSB0b3AvbGVmdCBhcmUgc2V0IGV2ZW4gb24gc3RhdGljIGVsZW1cblx0XHRpZiAoIHBvc2l0aW9uID09PSBcInN0YXRpY1wiICkge1xuXHRcdFx0ZWxlbS5zdHlsZS5wb3NpdGlvbiA9IFwicmVsYXRpdmVcIjtcblx0XHR9XG5cblx0XHRjdXJPZmZzZXQgPSBjdXJFbGVtLm9mZnNldCgpO1xuXHRcdGN1ckNTU1RvcCA9IGpRdWVyeS5jc3MoIGVsZW0sIFwidG9wXCIgKTtcblx0XHRjdXJDU1NMZWZ0ID0galF1ZXJ5LmNzcyggZWxlbSwgXCJsZWZ0XCIgKTtcblx0XHRjYWxjdWxhdGVQb3NpdGlvbiA9ICggcG9zaXRpb24gPT09IFwiYWJzb2x1dGVcIiB8fCBwb3NpdGlvbiA9PT0gXCJmaXhlZFwiICkgJiZcblx0XHRcdCggY3VyQ1NTVG9wICsgY3VyQ1NTTGVmdCApLmluZGV4T2YoIFwiYXV0b1wiICkgPiAtMTtcblxuXHRcdC8vIE5lZWQgdG8gYmUgYWJsZSB0byBjYWxjdWxhdGUgcG9zaXRpb24gaWYgZWl0aGVyXG5cdFx0Ly8gdG9wIG9yIGxlZnQgaXMgYXV0byBhbmQgcG9zaXRpb24gaXMgZWl0aGVyIGFic29sdXRlIG9yIGZpeGVkXG5cdFx0aWYgKCBjYWxjdWxhdGVQb3NpdGlvbiApIHtcblx0XHRcdGN1clBvc2l0aW9uID0gY3VyRWxlbS5wb3NpdGlvbigpO1xuXHRcdFx0Y3VyVG9wID0gY3VyUG9zaXRpb24udG9wO1xuXHRcdFx0Y3VyTGVmdCA9IGN1clBvc2l0aW9uLmxlZnQ7XG5cblx0XHR9IGVsc2Uge1xuXHRcdFx0Y3VyVG9wID0gcGFyc2VGbG9hdCggY3VyQ1NTVG9wICkgfHwgMDtcblx0XHRcdGN1ckxlZnQgPSBwYXJzZUZsb2F0KCBjdXJDU1NMZWZ0ICkgfHwgMDtcblx0XHR9XG5cblx0XHRpZiAoIGlzRnVuY3Rpb24oIG9wdGlvbnMgKSApIHtcblxuXHRcdFx0Ly8gVXNlIGpRdWVyeS5leHRlbmQgaGVyZSB0byBhbGxvdyBtb2RpZmljYXRpb24gb2YgY29vcmRpbmF0ZXMgYXJndW1lbnQgKGdoLTE4NDgpXG5cdFx0XHRvcHRpb25zID0gb3B0aW9ucy5jYWxsKCBlbGVtLCBpLCBqUXVlcnkuZXh0ZW5kKCB7fSwgY3VyT2Zmc2V0ICkgKTtcblx0XHR9XG5cblx0XHRpZiAoIG9wdGlvbnMudG9wICE9IG51bGwgKSB7XG5cdFx0XHRwcm9wcy50b3AgPSAoIG9wdGlvbnMudG9wIC0gY3VyT2Zmc2V0LnRvcCApICsgY3VyVG9wO1xuXHRcdH1cblx0XHRpZiAoIG9wdGlvbnMubGVmdCAhPSBudWxsICkge1xuXHRcdFx0cHJvcHMubGVmdCA9ICggb3B0aW9ucy5sZWZ0IC0gY3VyT2Zmc2V0LmxlZnQgKSArIGN1ckxlZnQ7XG5cdFx0fVxuXG5cdFx0aWYgKCBcInVzaW5nXCIgaW4gb3B0aW9ucyApIHtcblx0XHRcdG9wdGlvbnMudXNpbmcuY2FsbCggZWxlbSwgcHJvcHMgKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRjdXJFbGVtLmNzcyggcHJvcHMgKTtcblx0XHR9XG5cdH1cbn07XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHQvLyBvZmZzZXQoKSByZWxhdGVzIGFuIGVsZW1lbnQncyBib3JkZXIgYm94IHRvIHRoZSBkb2N1bWVudCBvcmlnaW5cblx0b2Zmc2V0OiBmdW5jdGlvbiggb3B0aW9ucyApIHtcblxuXHRcdC8vIFByZXNlcnZlIGNoYWluaW5nIGZvciBzZXR0ZXJcblx0XHRpZiAoIGFyZ3VtZW50cy5sZW5ndGggKSB7XG5cdFx0XHRyZXR1cm4gb3B0aW9ucyA9PT0gdW5kZWZpbmVkID9cblx0XHRcdFx0dGhpcyA6XG5cdFx0XHRcdHRoaXMuZWFjaCggZnVuY3Rpb24oIGkgKSB7XG5cdFx0XHRcdFx0alF1ZXJ5Lm9mZnNldC5zZXRPZmZzZXQoIHRoaXMsIG9wdGlvbnMsIGkgKTtcblx0XHRcdFx0fSApO1xuXHRcdH1cblxuXHRcdHZhciByZWN0LCB3aW4sXG5cdFx0XHRlbGVtID0gdGhpc1sgMCBdO1xuXG5cdFx0aWYgKCAhZWxlbSApIHtcblx0XHRcdHJldHVybjtcblx0XHR9XG5cblx0XHQvLyBSZXR1cm4gemVyb3MgZm9yIGRpc2Nvbm5lY3RlZCBhbmQgaGlkZGVuIChkaXNwbGF5OiBub25lKSBlbGVtZW50cyAoZ2gtMjMxMClcblx0XHQvLyBTdXBwb3J0OiBJRSA8PTExIG9ubHlcblx0XHQvLyBSdW5uaW5nIGdldEJvdW5kaW5nQ2xpZW50UmVjdCBvbiBhXG5cdFx0Ly8gZGlzY29ubmVjdGVkIG5vZGUgaW4gSUUgdGhyb3dzIGFuIGVycm9yXG5cdFx0aWYgKCAhZWxlbS5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCApIHtcblx0XHRcdHJldHVybiB7IHRvcDogMCwgbGVmdDogMCB9O1xuXHRcdH1cblxuXHRcdC8vIEdldCBkb2N1bWVudC1yZWxhdGl2ZSBwb3NpdGlvbiBieSBhZGRpbmcgdmlld3BvcnQgc2Nyb2xsIHRvIHZpZXdwb3J0LXJlbGF0aXZlIGdCQ1Jcblx0XHRyZWN0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblx0XHR3aW4gPSBlbGVtLm93bmVyRG9jdW1lbnQuZGVmYXVsdFZpZXc7XG5cdFx0cmV0dXJuIHtcblx0XHRcdHRvcDogcmVjdC50b3AgKyB3aW4ucGFnZVlPZmZzZXQsXG5cdFx0XHRsZWZ0OiByZWN0LmxlZnQgKyB3aW4ucGFnZVhPZmZzZXRcblx0XHR9O1xuXHR9LFxuXG5cdC8vIHBvc2l0aW9uKCkgcmVsYXRlcyBhbiBlbGVtZW50J3MgbWFyZ2luIGJveCB0byBpdHMgb2Zmc2V0IHBhcmVudCdzIHBhZGRpbmcgYm94XG5cdC8vIFRoaXMgY29ycmVzcG9uZHMgdG8gdGhlIGJlaGF2aW9yIG9mIENTUyBhYnNvbHV0ZSBwb3NpdGlvbmluZ1xuXHRwb3NpdGlvbjogZnVuY3Rpb24oKSB7XG5cdFx0aWYgKCAhdGhpc1sgMCBdICkge1xuXHRcdFx0cmV0dXJuO1xuXHRcdH1cblxuXHRcdHZhciBvZmZzZXRQYXJlbnQsIG9mZnNldCwgZG9jLFxuXHRcdFx0ZWxlbSA9IHRoaXNbIDAgXSxcblx0XHRcdHBhcmVudE9mZnNldCA9IHsgdG9wOiAwLCBsZWZ0OiAwIH07XG5cblx0XHQvLyBwb3NpdGlvbjpmaXhlZCBlbGVtZW50cyBhcmUgb2Zmc2V0IGZyb20gdGhlIHZpZXdwb3J0LCB3aGljaCBpdHNlbGYgYWx3YXlzIGhhcyB6ZXJvIG9mZnNldFxuXHRcdGlmICggalF1ZXJ5LmNzcyggZWxlbSwgXCJwb3NpdGlvblwiICkgPT09IFwiZml4ZWRcIiApIHtcblxuXHRcdFx0Ly8gQXNzdW1lIHBvc2l0aW9uOmZpeGVkIGltcGxpZXMgYXZhaWxhYmlsaXR5IG9mIGdldEJvdW5kaW5nQ2xpZW50UmVjdFxuXHRcdFx0b2Zmc2V0ID0gZWxlbS5nZXRCb3VuZGluZ0NsaWVudFJlY3QoKTtcblxuXHRcdH0gZWxzZSB7XG5cdFx0XHRvZmZzZXQgPSB0aGlzLm9mZnNldCgpO1xuXG5cdFx0XHQvLyBBY2NvdW50IGZvciB0aGUgKnJlYWwqIG9mZnNldCBwYXJlbnQsIHdoaWNoIGNhbiBiZSB0aGUgZG9jdW1lbnQgb3IgaXRzIHJvb3QgZWxlbWVudFxuXHRcdFx0Ly8gd2hlbiBhIHN0YXRpY2FsbHkgcG9zaXRpb25lZCBlbGVtZW50IGlzIGlkZW50aWZpZWRcblx0XHRcdGRvYyA9IGVsZW0ub3duZXJEb2N1bWVudDtcblx0XHRcdG9mZnNldFBhcmVudCA9IGVsZW0ub2Zmc2V0UGFyZW50IHx8IGRvYy5kb2N1bWVudEVsZW1lbnQ7XG5cdFx0XHR3aGlsZSAoIG9mZnNldFBhcmVudCAmJlxuXHRcdFx0XHQoIG9mZnNldFBhcmVudCA9PT0gZG9jLmJvZHkgfHwgb2Zmc2V0UGFyZW50ID09PSBkb2MuZG9jdW1lbnRFbGVtZW50ICkgJiZcblx0XHRcdFx0alF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcInBvc2l0aW9uXCIgKSA9PT0gXCJzdGF0aWNcIiApIHtcblxuXHRcdFx0XHRvZmZzZXRQYXJlbnQgPSBvZmZzZXRQYXJlbnQucGFyZW50Tm9kZTtcblx0XHRcdH1cblx0XHRcdGlmICggb2Zmc2V0UGFyZW50ICYmIG9mZnNldFBhcmVudCAhPT0gZWxlbSAmJiBvZmZzZXRQYXJlbnQubm9kZVR5cGUgPT09IDEgKSB7XG5cblx0XHRcdFx0Ly8gSW5jb3Jwb3JhdGUgYm9yZGVycyBpbnRvIGl0cyBvZmZzZXQsIHNpbmNlIHRoZXkgYXJlIG91dHNpZGUgaXRzIGNvbnRlbnQgb3JpZ2luXG5cdFx0XHRcdHBhcmVudE9mZnNldCA9IGpRdWVyeSggb2Zmc2V0UGFyZW50ICkub2Zmc2V0KCk7XG5cdFx0XHRcdHBhcmVudE9mZnNldC50b3AgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlclRvcFdpZHRoXCIsIHRydWUgKTtcblx0XHRcdFx0cGFyZW50T2Zmc2V0LmxlZnQgKz0galF1ZXJ5LmNzcyggb2Zmc2V0UGFyZW50LCBcImJvcmRlckxlZnRXaWR0aFwiLCB0cnVlICk7XG5cdFx0XHR9XG5cdFx0fVxuXG5cdFx0Ly8gU3VidHJhY3QgcGFyZW50IG9mZnNldHMgYW5kIGVsZW1lbnQgbWFyZ2luc1xuXHRcdHJldHVybiB7XG5cdFx0XHR0b3A6IG9mZnNldC50b3AgLSBwYXJlbnRPZmZzZXQudG9wIC0galF1ZXJ5LmNzcyggZWxlbSwgXCJtYXJnaW5Ub3BcIiwgdHJ1ZSApLFxuXHRcdFx0bGVmdDogb2Zmc2V0LmxlZnQgLSBwYXJlbnRPZmZzZXQubGVmdCAtIGpRdWVyeS5jc3MoIGVsZW0sIFwibWFyZ2luTGVmdFwiLCB0cnVlIClcblx0XHR9O1xuXHR9LFxuXG5cdC8vIFRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuIGRvY3VtZW50RWxlbWVudCBpbiB0aGUgZm9sbG93aW5nIGNhc2VzOlxuXHQvLyAxKSBGb3IgdGhlIGVsZW1lbnQgaW5zaWRlIHRoZSBpZnJhbWUgd2l0aG91dCBvZmZzZXRQYXJlbnQsIHRoaXMgbWV0aG9kIHdpbGwgcmV0dXJuXG5cdC8vICAgIGRvY3VtZW50RWxlbWVudCBvZiB0aGUgcGFyZW50IHdpbmRvd1xuXHQvLyAyKSBGb3IgdGhlIGhpZGRlbiBvciBkZXRhY2hlZCBlbGVtZW50XG5cdC8vIDMpIEZvciBib2R5IG9yIGh0bWwgZWxlbWVudCwgaS5lLiBpbiBjYXNlIG9mIHRoZSBodG1sIG5vZGUgLSBpdCB3aWxsIHJldHVybiBpdHNlbGZcblx0Ly9cblx0Ly8gYnV0IHRob3NlIGV4Y2VwdGlvbnMgd2VyZSBuZXZlciBwcmVzZW50ZWQgYXMgYSByZWFsIGxpZmUgdXNlLWNhc2VzXG5cdC8vIGFuZCBtaWdodCBiZSBjb25zaWRlcmVkIGFzIG1vcmUgcHJlZmVyYWJsZSByZXN1bHRzLlxuXHQvL1xuXHQvLyBUaGlzIGxvZ2ljLCBob3dldmVyLCBpcyBub3QgZ3VhcmFudGVlZCBhbmQgY2FuIGNoYW5nZSBhdCBhbnkgcG9pbnQgaW4gdGhlIGZ1dHVyZVxuXHRvZmZzZXRQYXJlbnQ6IGZ1bmN0aW9uKCkge1xuXHRcdHJldHVybiB0aGlzLm1hcCggZnVuY3Rpb24oKSB7XG5cdFx0XHR2YXIgb2Zmc2V0UGFyZW50ID0gdGhpcy5vZmZzZXRQYXJlbnQ7XG5cblx0XHRcdHdoaWxlICggb2Zmc2V0UGFyZW50ICYmIGpRdWVyeS5jc3MoIG9mZnNldFBhcmVudCwgXCJwb3NpdGlvblwiICkgPT09IFwic3RhdGljXCIgKSB7XG5cdFx0XHRcdG9mZnNldFBhcmVudCA9IG9mZnNldFBhcmVudC5vZmZzZXRQYXJlbnQ7XG5cdFx0XHR9XG5cblx0XHRcdHJldHVybiBvZmZzZXRQYXJlbnQgfHwgZG9jdW1lbnRFbGVtZW50O1xuXHRcdH0gKTtcblx0fVxufSApO1xuXG4vLyBDcmVhdGUgc2Nyb2xsTGVmdCBhbmQgc2Nyb2xsVG9wIG1ldGhvZHNcbmpRdWVyeS5lYWNoKCB7IHNjcm9sbExlZnQ6IFwicGFnZVhPZmZzZXRcIiwgc2Nyb2xsVG9wOiBcInBhZ2VZT2Zmc2V0XCIgfSwgZnVuY3Rpb24oIG1ldGhvZCwgcHJvcCApIHtcblx0dmFyIHRvcCA9IFwicGFnZVlPZmZzZXRcIiA9PT0gcHJvcDtcblxuXHRqUXVlcnkuZm5bIG1ldGhvZCBdID0gZnVuY3Rpb24oIHZhbCApIHtcblx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgbWV0aG9kLCB2YWwgKSB7XG5cblx0XHRcdC8vIENvYWxlc2NlIGRvY3VtZW50cyBhbmQgd2luZG93c1xuXHRcdFx0dmFyIHdpbjtcblx0XHRcdGlmICggaXNXaW5kb3coIGVsZW0gKSApIHtcblx0XHRcdFx0d2luID0gZWxlbTtcblx0XHRcdH0gZWxzZSBpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdHdpbiA9IGVsZW0uZGVmYXVsdFZpZXc7XG5cdFx0XHR9XG5cblx0XHRcdGlmICggdmFsID09PSB1bmRlZmluZWQgKSB7XG5cdFx0XHRcdHJldHVybiB3aW4gPyB3aW5bIHByb3AgXSA6IGVsZW1bIG1ldGhvZCBdO1xuXHRcdFx0fVxuXG5cdFx0XHRpZiAoIHdpbiApIHtcblx0XHRcdFx0d2luLnNjcm9sbFRvKFxuXHRcdFx0XHRcdCF0b3AgPyB2YWwgOiB3aW4ucGFnZVhPZmZzZXQsXG5cdFx0XHRcdFx0dG9wID8gdmFsIDogd2luLnBhZ2VZT2Zmc2V0XG5cdFx0XHRcdCk7XG5cblx0XHRcdH0gZWxzZSB7XG5cdFx0XHRcdGVsZW1bIG1ldGhvZCBdID0gdmFsO1xuXHRcdFx0fVxuXHRcdH0sIG1ldGhvZCwgdmFsLCBhcmd1bWVudHMubGVuZ3RoICk7XG5cdH07XG59ICk7XG5cbi8vIFN1cHBvcnQ6IFNhZmFyaSA8PTcgLSA5LjEsIENocm9tZSA8PTM3IC0gNDlcbi8vIEFkZCB0aGUgdG9wL2xlZnQgY3NzSG9va3MgdXNpbmcgalF1ZXJ5LmZuLnBvc2l0aW9uXG4vLyBXZWJraXQgYnVnOiBodHRwczovL2J1Z3Mud2Via2l0Lm9yZy9zaG93X2J1Zy5jZ2k/aWQ9MjkwODRcbi8vIEJsaW5rIGJ1ZzogaHR0cHM6Ly9idWdzLmNocm9taXVtLm9yZy9wL2Nocm9taXVtL2lzc3Vlcy9kZXRhaWw/aWQ9NTg5MzQ3XG4vLyBnZXRDb21wdXRlZFN0eWxlIHJldHVybnMgcGVyY2VudCB3aGVuIHNwZWNpZmllZCBmb3IgdG9wL2xlZnQvYm90dG9tL3JpZ2h0O1xuLy8gcmF0aGVyIHRoYW4gbWFrZSB0aGUgY3NzIG1vZHVsZSBkZXBlbmQgb24gdGhlIG9mZnNldCBtb2R1bGUsIGp1c3QgY2hlY2sgZm9yIGl0IGhlcmVcbmpRdWVyeS5lYWNoKCBbIFwidG9wXCIsIFwibGVmdFwiIF0sIGZ1bmN0aW9uKCBpLCBwcm9wICkge1xuXHRqUXVlcnkuY3NzSG9va3NbIHByb3AgXSA9IGFkZEdldEhvb2tJZiggc3VwcG9ydC5waXhlbFBvc2l0aW9uLFxuXHRcdGZ1bmN0aW9uKCBlbGVtLCBjb21wdXRlZCApIHtcblx0XHRcdGlmICggY29tcHV0ZWQgKSB7XG5cdFx0XHRcdGNvbXB1dGVkID0gY3VyQ1NTKCBlbGVtLCBwcm9wICk7XG5cblx0XHRcdFx0Ly8gSWYgY3VyQ1NTIHJldHVybnMgcGVyY2VudGFnZSwgZmFsbGJhY2sgdG8gb2Zmc2V0XG5cdFx0XHRcdHJldHVybiBybnVtbm9ucHgudGVzdCggY29tcHV0ZWQgKSA/XG5cdFx0XHRcdFx0alF1ZXJ5KCBlbGVtICkucG9zaXRpb24oKVsgcHJvcCBdICsgXCJweFwiIDpcblx0XHRcdFx0XHRjb21wdXRlZDtcblx0XHRcdH1cblx0XHR9XG5cdCk7XG59ICk7XG5cblxuLy8gQ3JlYXRlIGlubmVySGVpZ2h0LCBpbm5lcldpZHRoLCBoZWlnaHQsIHdpZHRoLCBvdXRlckhlaWdodCBhbmQgb3V0ZXJXaWR0aCBtZXRob2RzXG5qUXVlcnkuZWFjaCggeyBIZWlnaHQ6IFwiaGVpZ2h0XCIsIFdpZHRoOiBcIndpZHRoXCIgfSwgZnVuY3Rpb24oIG5hbWUsIHR5cGUgKSB7XG5cdGpRdWVyeS5lYWNoKCB7IHBhZGRpbmc6IFwiaW5uZXJcIiArIG5hbWUsIGNvbnRlbnQ6IHR5cGUsIFwiXCI6IFwib3V0ZXJcIiArIG5hbWUgfSxcblx0XHRmdW5jdGlvbiggZGVmYXVsdEV4dHJhLCBmdW5jTmFtZSApIHtcblxuXHRcdC8vIE1hcmdpbiBpcyBvbmx5IGZvciBvdXRlckhlaWdodCwgb3V0ZXJXaWR0aFxuXHRcdGpRdWVyeS5mblsgZnVuY05hbWUgXSA9IGZ1bmN0aW9uKCBtYXJnaW4sIHZhbHVlICkge1xuXHRcdFx0dmFyIGNoYWluYWJsZSA9IGFyZ3VtZW50cy5sZW5ndGggJiYgKCBkZWZhdWx0RXh0cmEgfHwgdHlwZW9mIG1hcmdpbiAhPT0gXCJib29sZWFuXCIgKSxcblx0XHRcdFx0ZXh0cmEgPSBkZWZhdWx0RXh0cmEgfHwgKCBtYXJnaW4gPT09IHRydWUgfHwgdmFsdWUgPT09IHRydWUgPyBcIm1hcmdpblwiIDogXCJib3JkZXJcIiApO1xuXG5cdFx0XHRyZXR1cm4gYWNjZXNzKCB0aGlzLCBmdW5jdGlvbiggZWxlbSwgdHlwZSwgdmFsdWUgKSB7XG5cdFx0XHRcdHZhciBkb2M7XG5cblx0XHRcdFx0aWYgKCBpc1dpbmRvdyggZWxlbSApICkge1xuXG5cdFx0XHRcdFx0Ly8gJCggd2luZG93ICkub3V0ZXJXaWR0aC9IZWlnaHQgcmV0dXJuIHcvaCBpbmNsdWRpbmcgc2Nyb2xsYmFycyAoZ2gtMTcyOSlcblx0XHRcdFx0XHRyZXR1cm4gZnVuY05hbWUuaW5kZXhPZiggXCJvdXRlclwiICkgPT09IDAgP1xuXHRcdFx0XHRcdFx0ZWxlbVsgXCJpbm5lclwiICsgbmFtZSBdIDpcblx0XHRcdFx0XHRcdGVsZW0uZG9jdW1lbnQuZG9jdW1lbnRFbGVtZW50WyBcImNsaWVudFwiICsgbmFtZSBdO1xuXHRcdFx0XHR9XG5cblx0XHRcdFx0Ly8gR2V0IGRvY3VtZW50IHdpZHRoIG9yIGhlaWdodFxuXHRcdFx0XHRpZiAoIGVsZW0ubm9kZVR5cGUgPT09IDkgKSB7XG5cdFx0XHRcdFx0ZG9jID0gZWxlbS5kb2N1bWVudEVsZW1lbnQ7XG5cblx0XHRcdFx0XHQvLyBFaXRoZXIgc2Nyb2xsW1dpZHRoL0hlaWdodF0gb3Igb2Zmc2V0W1dpZHRoL0hlaWdodF0gb3IgY2xpZW50W1dpZHRoL0hlaWdodF0sXG5cdFx0XHRcdFx0Ly8gd2hpY2hldmVyIGlzIGdyZWF0ZXN0XG5cdFx0XHRcdFx0cmV0dXJuIE1hdGgubWF4KFxuXHRcdFx0XHRcdFx0ZWxlbS5ib2R5WyBcInNjcm9sbFwiICsgbmFtZSBdLCBkb2NbIFwic2Nyb2xsXCIgKyBuYW1lIF0sXG5cdFx0XHRcdFx0XHRlbGVtLmJvZHlbIFwib2Zmc2V0XCIgKyBuYW1lIF0sIGRvY1sgXCJvZmZzZXRcIiArIG5hbWUgXSxcblx0XHRcdFx0XHRcdGRvY1sgXCJjbGllbnRcIiArIG5hbWUgXVxuXHRcdFx0XHRcdCk7XG5cdFx0XHRcdH1cblxuXHRcdFx0XHRyZXR1cm4gdmFsdWUgPT09IHVuZGVmaW5lZCA/XG5cblx0XHRcdFx0XHQvLyBHZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50LCByZXF1ZXN0aW5nIGJ1dCBub3QgZm9yY2luZyBwYXJzZUZsb2F0XG5cdFx0XHRcdFx0alF1ZXJ5LmNzcyggZWxlbSwgdHlwZSwgZXh0cmEgKSA6XG5cblx0XHRcdFx0XHQvLyBTZXQgd2lkdGggb3IgaGVpZ2h0IG9uIHRoZSBlbGVtZW50XG5cdFx0XHRcdFx0alF1ZXJ5LnN0eWxlKCBlbGVtLCB0eXBlLCB2YWx1ZSwgZXh0cmEgKTtcblx0XHRcdH0sIHR5cGUsIGNoYWluYWJsZSA/IG1hcmdpbiA6IHVuZGVmaW5lZCwgY2hhaW5hYmxlICk7XG5cdFx0fTtcblx0fSApO1xufSApO1xuXG5cbmpRdWVyeS5lYWNoKCAoIFwiYmx1ciBmb2N1cyBmb2N1c2luIGZvY3Vzb3V0IHJlc2l6ZSBzY3JvbGwgY2xpY2sgZGJsY2xpY2sgXCIgK1xuXHRcIm1vdXNlZG93biBtb3VzZXVwIG1vdXNlbW92ZSBtb3VzZW92ZXIgbW91c2VvdXQgbW91c2VlbnRlciBtb3VzZWxlYXZlIFwiICtcblx0XCJjaGFuZ2Ugc2VsZWN0IHN1Ym1pdCBrZXlkb3duIGtleXByZXNzIGtleXVwIGNvbnRleHRtZW51XCIgKS5zcGxpdCggXCIgXCIgKSxcblx0ZnVuY3Rpb24oIGksIG5hbWUgKSB7XG5cblx0Ly8gSGFuZGxlIGV2ZW50IGJpbmRpbmdcblx0alF1ZXJ5LmZuWyBuYW1lIF0gPSBmdW5jdGlvbiggZGF0YSwgZm4gKSB7XG5cdFx0cmV0dXJuIGFyZ3VtZW50cy5sZW5ndGggPiAwID9cblx0XHRcdHRoaXMub24oIG5hbWUsIG51bGwsIGRhdGEsIGZuICkgOlxuXHRcdFx0dGhpcy50cmlnZ2VyKCBuYW1lICk7XG5cdH07XG59ICk7XG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblx0aG92ZXI6IGZ1bmN0aW9uKCBmbk92ZXIsIGZuT3V0ICkge1xuXHRcdHJldHVybiB0aGlzLm1vdXNlZW50ZXIoIGZuT3ZlciApLm1vdXNlbGVhdmUoIGZuT3V0IHx8IGZuT3ZlciApO1xuXHR9XG59ICk7XG5cblxuXG5cbmpRdWVyeS5mbi5leHRlbmQoIHtcblxuXHRiaW5kOiBmdW5jdGlvbiggdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgbnVsbCwgZGF0YSwgZm4gKTtcblx0fSxcblx0dW5iaW5kOiBmdW5jdGlvbiggdHlwZXMsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9mZiggdHlwZXMsIG51bGwsIGZuICk7XG5cdH0sXG5cblx0ZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGRhdGEsIGZuICkge1xuXHRcdHJldHVybiB0aGlzLm9uKCB0eXBlcywgc2VsZWN0b3IsIGRhdGEsIGZuICk7XG5cdH0sXG5cdHVuZGVsZWdhdGU6IGZ1bmN0aW9uKCBzZWxlY3RvciwgdHlwZXMsIGZuICkge1xuXG5cdFx0Ly8gKCBuYW1lc3BhY2UgKSBvciAoIHNlbGVjdG9yLCB0eXBlcyBbLCBmbl0gKVxuXHRcdHJldHVybiBhcmd1bWVudHMubGVuZ3RoID09PSAxID9cblx0XHRcdHRoaXMub2ZmKCBzZWxlY3RvciwgXCIqKlwiICkgOlxuXHRcdFx0dGhpcy5vZmYoIHR5cGVzLCBzZWxlY3RvciB8fCBcIioqXCIsIGZuICk7XG5cdH1cbn0gKTtcblxuLy8gQmluZCBhIGZ1bmN0aW9uIHRvIGEgY29udGV4dCwgb3B0aW9uYWxseSBwYXJ0aWFsbHkgYXBwbHlpbmcgYW55XG4vLyBhcmd1bWVudHMuXG4vLyBqUXVlcnkucHJveHkgaXMgZGVwcmVjYXRlZCB0byBwcm9tb3RlIHN0YW5kYXJkcyAoc3BlY2lmaWNhbGx5IEZ1bmN0aW9uI2JpbmQpXG4vLyBIb3dldmVyLCBpdCBpcyBub3Qgc2xhdGVkIGZvciByZW1vdmFsIGFueSB0aW1lIHNvb25cbmpRdWVyeS5wcm94eSA9IGZ1bmN0aW9uKCBmbiwgY29udGV4dCApIHtcblx0dmFyIHRtcCwgYXJncywgcHJveHk7XG5cblx0aWYgKCB0eXBlb2YgY29udGV4dCA9PT0gXCJzdHJpbmdcIiApIHtcblx0XHR0bXAgPSBmblsgY29udGV4dCBdO1xuXHRcdGNvbnRleHQgPSBmbjtcblx0XHRmbiA9IHRtcDtcblx0fVxuXG5cdC8vIFF1aWNrIGNoZWNrIHRvIGRldGVybWluZSBpZiB0YXJnZXQgaXMgY2FsbGFibGUsIGluIHRoZSBzcGVjXG5cdC8vIHRoaXMgdGhyb3dzIGEgVHlwZUVycm9yLCBidXQgd2Ugd2lsbCBqdXN0IHJldHVybiB1bmRlZmluZWQuXG5cdGlmICggIWlzRnVuY3Rpb24oIGZuICkgKSB7XG5cdFx0cmV0dXJuIHVuZGVmaW5lZDtcblx0fVxuXG5cdC8vIFNpbXVsYXRlZCBiaW5kXG5cdGFyZ3MgPSBzbGljZS5jYWxsKCBhcmd1bWVudHMsIDIgKTtcblx0cHJveHkgPSBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4gZm4uYXBwbHkoIGNvbnRleHQgfHwgdGhpcywgYXJncy5jb25jYXQoIHNsaWNlLmNhbGwoIGFyZ3VtZW50cyApICkgKTtcblx0fTtcblxuXHQvLyBTZXQgdGhlIGd1aWQgb2YgdW5pcXVlIGhhbmRsZXIgdG8gdGhlIHNhbWUgb2Ygb3JpZ2luYWwgaGFuZGxlciwgc28gaXQgY2FuIGJlIHJlbW92ZWRcblx0cHJveHkuZ3VpZCA9IGZuLmd1aWQgPSBmbi5ndWlkIHx8IGpRdWVyeS5ndWlkKys7XG5cblx0cmV0dXJuIHByb3h5O1xufTtcblxualF1ZXJ5LmhvbGRSZWFkeSA9IGZ1bmN0aW9uKCBob2xkICkge1xuXHRpZiAoIGhvbGQgKSB7XG5cdFx0alF1ZXJ5LnJlYWR5V2FpdCsrO1xuXHR9IGVsc2Uge1xuXHRcdGpRdWVyeS5yZWFkeSggdHJ1ZSApO1xuXHR9XG59O1xualF1ZXJ5LmlzQXJyYXkgPSBBcnJheS5pc0FycmF5O1xualF1ZXJ5LnBhcnNlSlNPTiA9IEpTT04ucGFyc2U7XG5qUXVlcnkubm9kZU5hbWUgPSBub2RlTmFtZTtcbmpRdWVyeS5pc0Z1bmN0aW9uID0gaXNGdW5jdGlvbjtcbmpRdWVyeS5pc1dpbmRvdyA9IGlzV2luZG93O1xualF1ZXJ5LmNhbWVsQ2FzZSA9IGNhbWVsQ2FzZTtcbmpRdWVyeS50eXBlID0gdG9UeXBlO1xuXG5qUXVlcnkubm93ID0gRGF0ZS5ub3c7XG5cbmpRdWVyeS5pc051bWVyaWMgPSBmdW5jdGlvbiggb2JqICkge1xuXG5cdC8vIEFzIG9mIGpRdWVyeSAzLjAsIGlzTnVtZXJpYyBpcyBsaW1pdGVkIHRvXG5cdC8vIHN0cmluZ3MgYW5kIG51bWJlcnMgKHByaW1pdGl2ZXMgb3Igb2JqZWN0cylcblx0Ly8gdGhhdCBjYW4gYmUgY29lcmNlZCB0byBmaW5pdGUgbnVtYmVycyAoZ2gtMjY2Milcblx0dmFyIHR5cGUgPSBqUXVlcnkudHlwZSggb2JqICk7XG5cdHJldHVybiAoIHR5cGUgPT09IFwibnVtYmVyXCIgfHwgdHlwZSA9PT0gXCJzdHJpbmdcIiApICYmXG5cblx0XHQvLyBwYXJzZUZsb2F0IE5hTnMgbnVtZXJpYy1jYXN0IGZhbHNlIHBvc2l0aXZlcyAoXCJcIilcblx0XHQvLyAuLi5idXQgbWlzaW50ZXJwcmV0cyBsZWFkaW5nLW51bWJlciBzdHJpbmdzLCBwYXJ0aWN1bGFybHkgaGV4IGxpdGVyYWxzIChcIjB4Li4uXCIpXG5cdFx0Ly8gc3VidHJhY3Rpb24gZm9yY2VzIGluZmluaXRpZXMgdG8gTmFOXG5cdFx0IWlzTmFOKCBvYmogLSBwYXJzZUZsb2F0KCBvYmogKSApO1xufTtcblxuXG5cblxuLy8gUmVnaXN0ZXIgYXMgYSBuYW1lZCBBTUQgbW9kdWxlLCBzaW5jZSBqUXVlcnkgY2FuIGJlIGNvbmNhdGVuYXRlZCB3aXRoIG90aGVyXG4vLyBmaWxlcyB0aGF0IG1heSB1c2UgZGVmaW5lLCBidXQgbm90IHZpYSBhIHByb3BlciBjb25jYXRlbmF0aW9uIHNjcmlwdCB0aGF0XG4vLyB1bmRlcnN0YW5kcyBhbm9ueW1vdXMgQU1EIG1vZHVsZXMuIEEgbmFtZWQgQU1EIGlzIHNhZmVzdCBhbmQgbW9zdCByb2J1c3Rcbi8vIHdheSB0byByZWdpc3Rlci4gTG93ZXJjYXNlIGpxdWVyeSBpcyB1c2VkIGJlY2F1c2UgQU1EIG1vZHVsZSBuYW1lcyBhcmVcbi8vIGRlcml2ZWQgZnJvbSBmaWxlIG5hbWVzLCBhbmQgalF1ZXJ5IGlzIG5vcm1hbGx5IGRlbGl2ZXJlZCBpbiBhIGxvd2VyY2FzZVxuLy8gZmlsZSBuYW1lLiBEbyB0aGlzIGFmdGVyIGNyZWF0aW5nIHRoZSBnbG9iYWwgc28gdGhhdCBpZiBhbiBBTUQgbW9kdWxlIHdhbnRzXG4vLyB0byBjYWxsIG5vQ29uZmxpY3QgdG8gaGlkZSB0aGlzIHZlcnNpb24gb2YgalF1ZXJ5LCBpdCB3aWxsIHdvcmsuXG5cbi8vIE5vdGUgdGhhdCBmb3IgbWF4aW11bSBwb3J0YWJpbGl0eSwgbGlicmFyaWVzIHRoYXQgYXJlIG5vdCBqUXVlcnkgc2hvdWxkXG4vLyBkZWNsYXJlIHRoZW1zZWx2ZXMgYXMgYW5vbnltb3VzIG1vZHVsZXMsIGFuZCBhdm9pZCBzZXR0aW5nIGEgZ2xvYmFsIGlmIGFuXG4vLyBBTUQgbG9hZGVyIGlzIHByZXNlbnQuIGpRdWVyeSBpcyBhIHNwZWNpYWwgY2FzZS4gRm9yIG1vcmUgaW5mb3JtYXRpb24sIHNlZVxuLy8gaHR0cHM6Ly9naXRodWIuY29tL2pyYnVya2UvcmVxdWlyZWpzL3dpa2kvVXBkYXRpbmctZXhpc3RpbmctbGlicmFyaWVzI3dpa2ktYW5vblxuXG5pZiAoIHR5cGVvZiBkZWZpbmUgPT09IFwiZnVuY3Rpb25cIiAmJiBkZWZpbmUuYW1kICkge1xuXHRkZWZpbmUoIFwianF1ZXJ5XCIsIFtdLCBmdW5jdGlvbigpIHtcblx0XHRyZXR1cm4galF1ZXJ5O1xuXHR9ICk7XG59XG5cblxuXG5cbnZhclxuXG5cdC8vIE1hcCBvdmVyIGpRdWVyeSBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfalF1ZXJ5ID0gd2luZG93LmpRdWVyeSxcblxuXHQvLyBNYXAgb3ZlciB0aGUgJCBpbiBjYXNlIG9mIG92ZXJ3cml0ZVxuXHRfJCA9IHdpbmRvdy4kO1xuXG5qUXVlcnkubm9Db25mbGljdCA9IGZ1bmN0aW9uKCBkZWVwICkge1xuXHRpZiAoIHdpbmRvdy4kID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LiQgPSBfJDtcblx0fVxuXG5cdGlmICggZGVlcCAmJiB3aW5kb3cualF1ZXJ5ID09PSBqUXVlcnkgKSB7XG5cdFx0d2luZG93LmpRdWVyeSA9IF9qUXVlcnk7XG5cdH1cblxuXHRyZXR1cm4galF1ZXJ5O1xufTtcblxuLy8gRXhwb3NlIGpRdWVyeSBhbmQgJCBpZGVudGlmaWVycywgZXZlbiBpbiBBTURcbi8vICgjNzEwMiNjb21tZW50OjEwLCBodHRwczovL2dpdGh1Yi5jb20vanF1ZXJ5L2pxdWVyeS9wdWxsLzU1Nylcbi8vIGFuZCBDb21tb25KUyBmb3IgYnJvd3NlciBlbXVsYXRvcnMgKCMxMzU2NilcbmlmICggIW5vR2xvYmFsICkge1xuXHR3aW5kb3cualF1ZXJ5ID0gd2luZG93LiQgPSBqUXVlcnk7XG59XG5cblxuXG5cbnJldHVybiBqUXVlcnk7XG59ICk7XG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAuL25vZGVfbW9kdWxlcy9qcXVlcnkvZGlzdC9qcXVlcnkuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL2pxdWVyeS9kaXN0L2pxdWVyeS5qc1xuLy8gbW9kdWxlIGNodW5rcyA9IDAiLCJ2YXIgZztcclxuXHJcbi8vIFRoaXMgd29ya3MgaW4gbm9uLXN0cmljdCBtb2RlXHJcbmcgPSAoZnVuY3Rpb24oKSB7XHJcblx0cmV0dXJuIHRoaXM7XHJcbn0pKCk7XHJcblxyXG50cnkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgZXZhbCBpcyBhbGxvd2VkIChzZWUgQ1NQKVxyXG5cdGcgPSBnIHx8IEZ1bmN0aW9uKFwicmV0dXJuIHRoaXNcIikoKSB8fCAoMSxldmFsKShcInRoaXNcIik7XHJcbn0gY2F0Y2goZSkge1xyXG5cdC8vIFRoaXMgd29ya3MgaWYgdGhlIHdpbmRvdyByZWZlcmVuY2UgaXMgYXZhaWxhYmxlXHJcblx0aWYodHlwZW9mIHdpbmRvdyA9PT0gXCJvYmplY3RcIilcclxuXHRcdGcgPSB3aW5kb3c7XHJcbn1cclxuXHJcbi8vIGcgY2FuIHN0aWxsIGJlIHVuZGVmaW5lZCwgYnV0IG5vdGhpbmcgdG8gZG8gYWJvdXQgaXQuLi5cclxuLy8gV2UgcmV0dXJuIHVuZGVmaW5lZCwgaW5zdGVhZCBvZiBub3RoaW5nIGhlcmUsIHNvIGl0J3NcclxuLy8gZWFzaWVyIHRvIGhhbmRsZSB0aGlzIGNhc2UuIGlmKCFnbG9iYWwpIHsgLi4ufVxyXG5cclxubW9kdWxlLmV4cG9ydHMgPSBnO1xyXG5cblxuXG4vLy8vLy8vLy8vLy8vLy8vLy9cbi8vIFdFQlBBQ0sgRk9PVEVSXG4vLyAod2VicGFjaykvYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBpZCA9IC4vbm9kZV9tb2R1bGVzL3dlYnBhY2svYnVpbGRpbi9nbG9iYWwuanNcbi8vIG1vZHVsZSBjaHVua3MgPSAwIl0sInNvdXJjZVJvb3QiOiIifQ==